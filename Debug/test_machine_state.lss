
test_machine_state.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000071ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f8  00800060  000071ae  00007242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800258  00800258  0000743a  2**0
                  ALLOC
  3 .stab         00006d5c  00000000  00000000  0000743c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022e6  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0001047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000105de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0001076d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000127b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000138b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00014838  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000149b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00014c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f1 e7       	ldi	r31, 0x71	; 113
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <main>
      8a:	0c 94 d5 38 	jmp	0x71aa	; 0x71aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6d 38 	jmp	0x70da	; 0x70da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e3       	ldi	r26, 0x34	; 52
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 89 38 	jmp	0x7112	; 0x7112 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 79 38 	jmp	0x70f2	; 0x70f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 95 38 	jmp	0x712a	; 0x712a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 79 38 	jmp	0x70f2	; 0x70f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 95 38 	jmp	0x712a	; 0x712a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 38 	jmp	0x70da	; 0x70da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e3       	ldi	r24, 0x34	; 52
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 89 38 	jmp	0x7112	; 0x7112 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 38 	jmp	0x70ea	; 0x70ea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e3       	ldi	r22, 0x34	; 52
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 91 38 	jmp	0x7122	; 0x7122 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 79 38 	jmp	0x70f2	; 0x70f2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 95 38 	jmp	0x712a	; 0x712a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 79 38 	jmp	0x70f2	; 0x70f2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 95 38 	jmp	0x712a	; 0x712a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 79 38 	jmp	0x70f2	; 0x70f2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 95 38 	jmp	0x712a	; 0x712a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7d 38 	jmp	0x70fa	; 0x70fa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 99 38 	jmp	0x7132	; 0x7132 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EF_void_ADC_init>:
* PARAMETERS  :  None
*
* Return Value: None
***********************************************************************/
 void EF_void_ADC_init(U8_t ADC_PIN)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01

	EF_B_DIO_InitPin(ADC_PORT , ADC_PIN , INPUT);
     caa:	81 e6       	ldi	r24, 0x61	; 97
     cac:	69 81       	ldd	r22, Y+1	; 0x01
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <EF_B_DIO_InitPin>
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); /* 128 pre-scale for 8Mhz */
     cb4:	a6 e2       	ldi	r26, 0x26	; 38
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	87 60       	ori	r24, 0x07	; 7
     cc0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);   							  /* Enable the ADC */
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	8c 93       	st	X, r24

}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <EF_u16_ADC_read>:
 * Return Value: ADC value ratio (from 0 to 2^n ) , n: bit resolution
 *
 * NOTE: to read input voltage value use ( vin =ADC*(vref/2^n)), n: bit resolution
 ***********************************************************************/
 U16_t EF_u16_ADC_read(U8_t ADC_PIN)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01

	EF_void_ADC_init(ADC_PIN);
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EF_void_ADC_init>
	ADMUX  = ADC_PIN;               /* define which ADC channel 				 */
     cea:	e7 e2       	ldi	r30, 0x27	; 39
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	80 83       	st	Z, r24
	ADMUX |=  ((1 << REFS0));         /* use AVcc as the reference 				 */  //(1 << REFS1)|
     cf2:	a7 e2       	ldi	r26, 0x27	; 39
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e7 e2       	ldi	r30, 0x27	; 39
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 64       	ori	r24, 0x40	; 64
     cfe:	8c 93       	st	X, r24
	ADMUX &= ~(1 << ADLAR);   		/* making ADCH has the MSbit 				 */
     d00:	a7 e2       	ldi	r26, 0x27	; 39
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e7 e2       	ldi	r30, 0x27	; 39
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);		    /* Start Conversion							 */
     d0e:	a6 e2       	ldi	r26, 0x26	; 38
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e6 e2       	ldi	r30, 0x26	; 38
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
	while(!(ADCSRA & (1<<ADIF)));   /* wait until conversion complete 			 */
     d1c:	e6 e2       	ldi	r30, 0x26	; 38
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	80 71       	andi	r24, 0x10	; 16
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	b9 f3       	breq	.-18     	; 0xd1c <EF_u16_ADC_read+0x44>
	ADCSRA |= (1<<ADIF);			/* clear hardware "conversion complete" flag */
     d2e:	a6 e2       	ldi	r26, 0x26	; 38
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e6 e2       	ldi	r30, 0x26	; 38
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 61       	ori	r24, 0x10	; 16
     d3a:	8c 93       	st	X, r24

    return(ADC);
     d3c:	e4 e2       	ldi	r30, 0x24	; 36
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	91 81       	ldd	r25, Z+1	; 0x01
	
}
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <EF_S8_DIO_InitPort>:
 *               or return 1 if OK.
 * Note        : To configure PIN as output you should set the bit mask "1"
 *               and to set PIN input you should set bit mask "0"
 ***********************************************************************/
S8_t  EF_S8_DIO_InitPort (U8_t PortName, U8_t Value)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <EF_S8_DIO_InitPort+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <EF_S8_DIO_InitPort+0x8>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	6b 83       	std	Y+3, r22	; 0x03
	S8_t Status;

	Status = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3d 83       	std	Y+5, r19	; 0x05
     d6a:	2c 83       	std	Y+4, r18	; 0x04
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	84 34       	cpi	r24, 0x44	; 68
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <EF_S8_DIO_InitPort+0x2c>
     d76:	3f c0       	rjmp	.+126    	; 0xdf6 <EF_S8_DIO_InitPort+0xaa>
     d78:	2c 81       	ldd	r18, Y+4	; 0x04
     d7a:	3d 81       	ldd	r19, Y+5	; 0x05
     d7c:	25 34       	cpi	r18, 0x45	; 69
     d7e:	31 05       	cpc	r19, r1
     d80:	84 f4       	brge	.+32     	; 0xda2 <EF_S8_DIO_InitPort+0x56>
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	82 34       	cpi	r24, 0x42	; 66
     d88:	91 05       	cpc	r25, r1
     d8a:	59 f1       	breq	.+86     	; 0xde2 <EF_S8_DIO_InitPort+0x96>
     d8c:	2c 81       	ldd	r18, Y+4	; 0x04
     d8e:	3d 81       	ldd	r19, Y+5	; 0x05
     d90:	23 34       	cpi	r18, 0x43	; 67
     d92:	31 05       	cpc	r19, r1
     d94:	5c f5       	brge	.+86     	; 0xdec <EF_S8_DIO_InitPort+0xa0>
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	9d 81       	ldd	r25, Y+5	; 0x05
     d9a:	81 34       	cpi	r24, 0x41	; 65
     d9c:	91 05       	cpc	r25, r1
     d9e:	e1 f0       	breq	.+56     	; 0xdd8 <EF_S8_DIO_InitPort+0x8c>
     da0:	2f c0       	rjmp	.+94     	; 0xe00 <EF_S8_DIO_InitPort+0xb4>
     da2:	2c 81       	ldd	r18, Y+4	; 0x04
     da4:	3d 81       	ldd	r19, Y+5	; 0x05
     da6:	22 36       	cpi	r18, 0x62	; 98
     da8:	31 05       	cpc	r19, r1
     daa:	d9 f0       	breq	.+54     	; 0xde2 <EF_S8_DIO_InitPort+0x96>
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	9d 81       	ldd	r25, Y+5	; 0x05
     db0:	83 36       	cpi	r24, 0x63	; 99
     db2:	91 05       	cpc	r25, r1
     db4:	34 f4       	brge	.+12     	; 0xdc2 <EF_S8_DIO_InitPort+0x76>
     db6:	2c 81       	ldd	r18, Y+4	; 0x04
     db8:	3d 81       	ldd	r19, Y+5	; 0x05
     dba:	21 36       	cpi	r18, 0x61	; 97
     dbc:	31 05       	cpc	r19, r1
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <EF_S8_DIO_InitPort+0x8c>
     dc0:	1f c0       	rjmp	.+62     	; 0xe00 <EF_S8_DIO_InitPort+0xb4>
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	9d 81       	ldd	r25, Y+5	; 0x05
     dc6:	83 36       	cpi	r24, 0x63	; 99
     dc8:	91 05       	cpc	r25, r1
     dca:	81 f0       	breq	.+32     	; 0xdec <EF_S8_DIO_InitPort+0xa0>
     dcc:	2c 81       	ldd	r18, Y+4	; 0x04
     dce:	3d 81       	ldd	r19, Y+5	; 0x05
     dd0:	24 36       	cpi	r18, 0x64	; 100
     dd2:	31 05       	cpc	r19, r1
     dd4:	81 f0       	breq	.+32     	; 0xdf6 <EF_S8_DIO_InitPort+0xaa>
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <EF_S8_DIO_InitPort+0xb4>
	{
	case 'a':
	case 'A':
		DDRA = Value;
     dd8:	ea e3       	ldi	r30, 0x3A	; 58
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	80 83       	st	Z, r24
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <EF_S8_DIO_InitPort+0xb8>
		break;
	case 'b':
	case 'B':
		DDRB = Value;
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	80 83       	st	Z, r24
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <EF_S8_DIO_InitPort+0xb8>
		break;
	case 'c':
	case 'C':
		DDRC = Value;
     dec:	e4 e3       	ldi	r30, 0x34	; 52
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	80 83       	st	Z, r24
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <EF_S8_DIO_InitPort+0xb8>
		break;
	case 'd':
	case 'D':
		DDRD = Value;
     df6:	e1 e3       	ldi	r30, 0x31	; 49
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	80 83       	st	Z, r24
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <EF_S8_DIO_InitPort+0xb8>
		break;
	default:
		Status = -1;
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	89 83       	std	Y+1, r24	; 0x01

	}

	return(Status);
     e04:	89 81       	ldd	r24, Y+1	; 0x01
}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <EF_S8_DIO_WritePort>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 ***********************************************************************/
S8_t  EF_S8_DIO_WritePort(U8_t PortName, U8_t Value)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <EF_S8_DIO_WritePort+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <EF_S8_DIO_WritePort+0x8>
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	6b 83       	std	Y+3, r22	; 0x03
	S8_t Status;

	Status = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3d 83       	std	Y+5, r19	; 0x05
     e34:	2c 83       	std	Y+4, r18	; 0x04
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05
     e3a:	84 34       	cpi	r24, 0x44	; 68
     e3c:	91 05       	cpc	r25, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <EF_S8_DIO_WritePort+0x2c>
     e40:	4b c0       	rjmp	.+150    	; 0xed8 <EF_S8_DIO_WritePort+0xc2>
     e42:	2c 81       	ldd	r18, Y+4	; 0x04
     e44:	3d 81       	ldd	r19, Y+5	; 0x05
     e46:	25 34       	cpi	r18, 0x45	; 69
     e48:	31 05       	cpc	r19, r1
     e4a:	84 f4       	brge	.+32     	; 0xe6c <EF_S8_DIO_WritePort+0x56>
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	82 34       	cpi	r24, 0x42	; 66
     e52:	91 05       	cpc	r25, r1
     e54:	79 f1       	breq	.+94     	; 0xeb4 <EF_S8_DIO_WritePort+0x9e>
     e56:	2c 81       	ldd	r18, Y+4	; 0x04
     e58:	3d 81       	ldd	r19, Y+5	; 0x05
     e5a:	23 34       	cpi	r18, 0x43	; 67
     e5c:	31 05       	cpc	r19, r1
     e5e:	9c f5       	brge	.+102    	; 0xec6 <EF_S8_DIO_WritePort+0xb0>
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	81 34       	cpi	r24, 0x41	; 65
     e66:	91 05       	cpc	r25, r1
     e68:	e1 f0       	breq	.+56     	; 0xea2 <EF_S8_DIO_WritePort+0x8c>
     e6a:	3f c0       	rjmp	.+126    	; 0xeea <EF_S8_DIO_WritePort+0xd4>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 36       	cpi	r18, 0x62	; 98
     e72:	31 05       	cpc	r19, r1
     e74:	f9 f0       	breq	.+62     	; 0xeb4 <EF_S8_DIO_WritePort+0x9e>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	83 36       	cpi	r24, 0x63	; 99
     e7c:	91 05       	cpc	r25, r1
     e7e:	34 f4       	brge	.+12     	; 0xe8c <EF_S8_DIO_WritePort+0x76>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	21 36       	cpi	r18, 0x61	; 97
     e86:	31 05       	cpc	r19, r1
     e88:	61 f0       	breq	.+24     	; 0xea2 <EF_S8_DIO_WritePort+0x8c>
     e8a:	2f c0       	rjmp	.+94     	; 0xeea <EF_S8_DIO_WritePort+0xd4>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	83 36       	cpi	r24, 0x63	; 99
     e92:	91 05       	cpc	r25, r1
     e94:	c1 f0       	breq	.+48     	; 0xec6 <EF_S8_DIO_WritePort+0xb0>
     e96:	2c 81       	ldd	r18, Y+4	; 0x04
     e98:	3d 81       	ldd	r19, Y+5	; 0x05
     e9a:	24 36       	cpi	r18, 0x64	; 100
     e9c:	31 05       	cpc	r19, r1
     e9e:	e1 f0       	breq	.+56     	; 0xed8 <EF_S8_DIO_WritePort+0xc2>
     ea0:	24 c0       	rjmp	.+72     	; 0xeea <EF_S8_DIO_WritePort+0xd4>
	{
	case 'a':
	case 'A':
		PORTA |= Value;
     ea2:	ab e3       	ldi	r26, 0x3B	; 59
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	eb e3       	ldi	r30, 0x3B	; 59
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	90 81       	ld	r25, Z
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	89 2b       	or	r24, r25
     eb0:	8c 93       	st	X, r24
     eb2:	1d c0       	rjmp	.+58     	; 0xeee <EF_S8_DIO_WritePort+0xd8>
		break;
	case 'b':
	case 'B':
		PORTB |= Value;
     eb4:	a8 e3       	ldi	r26, 0x38	; 56
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	90 81       	ld	r25, Z
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	89 2b       	or	r24, r25
     ec2:	8c 93       	st	X, r24
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <EF_S8_DIO_WritePort+0xd8>
		break;
	case 'c':
	case 'C':
		PORTC |= Value;
     ec6:	a5 e3       	ldi	r26, 0x35	; 53
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e5 e3       	ldi	r30, 0x35	; 53
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	90 81       	ld	r25, Z
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	89 2b       	or	r24, r25
     ed4:	8c 93       	st	X, r24
     ed6:	0b c0       	rjmp	.+22     	; 0xeee <EF_S8_DIO_WritePort+0xd8>
		break;
	case 'd':
	case 'D':
		PORTD |= Value;
     ed8:	a2 e3       	ldi	r26, 0x32	; 50
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e2 e3       	ldi	r30, 0x32	; 50
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	90 81       	ld	r25, Z
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	89 2b       	or	r24, r25
     ee6:	8c 93       	st	X, r24
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <EF_S8_DIO_WritePort+0xd8>
		break;
	default:
		Status = -1;
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	89 83       	std	Y+1, r24	; 0x01
	}

	return(Status);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <EF_S16_DIO_ReadPort>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or the value.
 ***********************************************************************/
S16_t EF_S16_DIO_ReadPort (U8_t PortName)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <EF_S16_DIO_ReadPort+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <EF_S16_DIO_ReadPort+0x8>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	8a 83       	std	Y+2, r24	; 0x02
	volatile S8_t  Status;

	switch(PortName)
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3c 83       	std	Y+4, r19	; 0x04
     f16:	2b 83       	std	Y+3, r18	; 0x03
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	84 34       	cpi	r24, 0x44	; 68
     f1e:	91 05       	cpc	r25, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <EF_S16_DIO_ReadPort+0x24>
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <EF_S16_DIO_ReadPort+0xa2>
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	3c 81       	ldd	r19, Y+4	; 0x04
     f28:	25 34       	cpi	r18, 0x45	; 69
     f2a:	31 05       	cpc	r19, r1
     f2c:	84 f4       	brge	.+32     	; 0xf4e <EF_S16_DIO_ReadPort+0x4e>
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	82 34       	cpi	r24, 0x42	; 66
     f34:	91 05       	cpc	r25, r1
     f36:	59 f1       	breq	.+86     	; 0xf8e <EF_S16_DIO_ReadPort+0x8e>
     f38:	2b 81       	ldd	r18, Y+3	; 0x03
     f3a:	3c 81       	ldd	r19, Y+4	; 0x04
     f3c:	23 34       	cpi	r18, 0x43	; 67
     f3e:	31 05       	cpc	r19, r1
     f40:	5c f5       	brge	.+86     	; 0xf98 <EF_S16_DIO_ReadPort+0x98>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	81 34       	cpi	r24, 0x41	; 65
     f48:	91 05       	cpc	r25, r1
     f4a:	e1 f0       	breq	.+56     	; 0xf84 <EF_S16_DIO_ReadPort+0x84>
     f4c:	2f c0       	rjmp	.+94     	; 0xfac <EF_S16_DIO_ReadPort+0xac>
     f4e:	2b 81       	ldd	r18, Y+3	; 0x03
     f50:	3c 81       	ldd	r19, Y+4	; 0x04
     f52:	22 36       	cpi	r18, 0x62	; 98
     f54:	31 05       	cpc	r19, r1
     f56:	d9 f0       	breq	.+54     	; 0xf8e <EF_S16_DIO_ReadPort+0x8e>
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	83 36       	cpi	r24, 0x63	; 99
     f5e:	91 05       	cpc	r25, r1
     f60:	34 f4       	brge	.+12     	; 0xf6e <EF_S16_DIO_ReadPort+0x6e>
     f62:	2b 81       	ldd	r18, Y+3	; 0x03
     f64:	3c 81       	ldd	r19, Y+4	; 0x04
     f66:	21 36       	cpi	r18, 0x61	; 97
     f68:	31 05       	cpc	r19, r1
     f6a:	61 f0       	breq	.+24     	; 0xf84 <EF_S16_DIO_ReadPort+0x84>
     f6c:	1f c0       	rjmp	.+62     	; 0xfac <EF_S16_DIO_ReadPort+0xac>
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	83 36       	cpi	r24, 0x63	; 99
     f74:	91 05       	cpc	r25, r1
     f76:	81 f0       	breq	.+32     	; 0xf98 <EF_S16_DIO_ReadPort+0x98>
     f78:	2b 81       	ldd	r18, Y+3	; 0x03
     f7a:	3c 81       	ldd	r19, Y+4	; 0x04
     f7c:	24 36       	cpi	r18, 0x64	; 100
     f7e:	31 05       	cpc	r19, r1
     f80:	81 f0       	breq	.+32     	; 0xfa2 <EF_S16_DIO_ReadPort+0xa2>
     f82:	14 c0       	rjmp	.+40     	; 0xfac <EF_S16_DIO_ReadPort+0xac>
	{
	case 'a':
	case 'A':
		Status = PINA;
     f84:	e9 e3       	ldi	r30, 0x39	; 57
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	11 c0       	rjmp	.+34     	; 0xfb0 <EF_S16_DIO_ReadPort+0xb0>
		break;
	case 'b':
	case 'B':
		Status = PINB;
     f8e:	e6 e3       	ldi	r30, 0x36	; 54
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	0c c0       	rjmp	.+24     	; 0xfb0 <EF_S16_DIO_ReadPort+0xb0>
		break;
	case 'c':
	case 'C':
		Status = PINC;
     f98:	e3 e3       	ldi	r30, 0x33	; 51
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <EF_S16_DIO_ReadPort+0xb0>
		break;
	case 'd':
	case 'D':
		Status = PIND;
     fa2:	e0 e3       	ldi	r30, 0x30	; 48
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <EF_S16_DIO_ReadPort+0xb0>
		break;
	default:
		Status = -1;
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	89 83       	std	Y+1, r24	; 0x01
	}
	return(Status);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <EF_B_DIO_InitPin>:
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 * Note        : Nothing
 ***********************************************************************/
BOOLEAN  EF_B_DIO_InitPin (U8_t PortName, U8_t PinNumber,U8_t Direction)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	2e 97       	sbiw	r28, 0x0e	; 14
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	8a 83       	std	Y+2, r24	; 0x02
     fda:	6b 83       	std	Y+3, r22	; 0x03
     fdc:	4c 83       	std	Y+4, r20	; 0x04
	BOOLEAN bStatus;


	bStatus = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3e 87       	std	Y+14, r19	; 0x0e
     fea:	2d 87       	std	Y+13, r18	; 0x0d
     fec:	8d 85       	ldd	r24, Y+13	; 0x0d
     fee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff0:	84 34       	cpi	r24, 0x44	; 68
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <EF_B_DIO_InitPin+0x34>
     ff6:	dd c0       	rjmp	.+442    	; 0x11b2 <EF_B_DIO_InitPin+0x1ee>
     ff8:	2d 85       	ldd	r18, Y+13	; 0x0d
     ffa:	3e 85       	ldd	r19, Y+14	; 0x0e
     ffc:	25 34       	cpi	r18, 0x45	; 69
     ffe:	31 05       	cpc	r19, r1
    1000:	94 f4       	brge	.+36     	; 0x1026 <EF_B_DIO_InitPin+0x62>
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	82 34       	cpi	r24, 0x42	; 66
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <EF_B_DIO_InitPin+0x4a>
    100c:	62 c0       	rjmp	.+196    	; 0x10d2 <EF_B_DIO_InitPin+0x10e>
    100e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1010:	3e 85       	ldd	r19, Y+14	; 0x0e
    1012:	23 34       	cpi	r18, 0x43	; 67
    1014:	31 05       	cpc	r19, r1
    1016:	0c f0       	brlt	.+2      	; 0x101a <EF_B_DIO_InitPin+0x56>
    1018:	94 c0       	rjmp	.+296    	; 0x1142 <EF_B_DIO_InitPin+0x17e>
    101a:	8d 85       	ldd	r24, Y+13	; 0x0d
    101c:	9e 85       	ldd	r25, Y+14	; 0x0e
    101e:	81 34       	cpi	r24, 0x41	; 65
    1020:	91 05       	cpc	r25, r1
    1022:	f9 f0       	breq	.+62     	; 0x1062 <EF_B_DIO_InitPin+0x9e>
    1024:	fe c0       	rjmp	.+508    	; 0x1222 <EF_B_DIO_InitPin+0x25e>
    1026:	2d 85       	ldd	r18, Y+13	; 0x0d
    1028:	3e 85       	ldd	r19, Y+14	; 0x0e
    102a:	22 36       	cpi	r18, 0x62	; 98
    102c:	31 05       	cpc	r19, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <EF_B_DIO_InitPin+0x6e>
    1030:	50 c0       	rjmp	.+160    	; 0x10d2 <EF_B_DIO_InitPin+0x10e>
    1032:	8d 85       	ldd	r24, Y+13	; 0x0d
    1034:	9e 85       	ldd	r25, Y+14	; 0x0e
    1036:	83 36       	cpi	r24, 0x63	; 99
    1038:	91 05       	cpc	r25, r1
    103a:	34 f4       	brge	.+12     	; 0x1048 <EF_B_DIO_InitPin+0x84>
    103c:	2d 85       	ldd	r18, Y+13	; 0x0d
    103e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1040:	21 36       	cpi	r18, 0x61	; 97
    1042:	31 05       	cpc	r19, r1
    1044:	71 f0       	breq	.+28     	; 0x1062 <EF_B_DIO_InitPin+0x9e>
    1046:	ed c0       	rjmp	.+474    	; 0x1222 <EF_B_DIO_InitPin+0x25e>
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	83 36       	cpi	r24, 0x63	; 99
    104e:	91 05       	cpc	r25, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <EF_B_DIO_InitPin+0x90>
    1052:	77 c0       	rjmp	.+238    	; 0x1142 <EF_B_DIO_InitPin+0x17e>
    1054:	2d 85       	ldd	r18, Y+13	; 0x0d
    1056:	3e 85       	ldd	r19, Y+14	; 0x0e
    1058:	24 36       	cpi	r18, 0x64	; 100
    105a:	31 05       	cpc	r19, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <EF_B_DIO_InitPin+0x9c>
    105e:	a9 c0       	rjmp	.+338    	; 0x11b2 <EF_B_DIO_InitPin+0x1ee>
    1060:	e0 c0       	rjmp	.+448    	; 0x1222 <EF_B_DIO_InitPin+0x25e>
	{
	case 'a':
	case 'A':
		switch(Direction)
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3c 87       	std	Y+12, r19	; 0x0c
    106a:	2b 87       	std	Y+11, r18	; 0x0b
    106c:	8b 85       	ldd	r24, Y+11	; 0x0b
    106e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	31 f0       	breq	.+12     	; 0x1080 <EF_B_DIO_InitPin+0xbc>
    1074:	2b 85       	ldd	r18, Y+11	; 0x0b
    1076:	3c 85       	ldd	r19, Y+12	; 0x0c
    1078:	21 30       	cpi	r18, 0x01	; 1
    107a:	31 05       	cpc	r19, r1
    107c:	b1 f0       	breq	.+44     	; 0x10aa <EF_B_DIO_InitPin+0xe6>
    107e:	d3 c0       	rjmp	.+422    	; 0x1226 <EF_B_DIO_InitPin+0x262>
		{
		case INPUT:
			DDRA &= ~(1 << PinNumber);
    1080:	aa e3       	ldi	r26, 0x3A	; 58
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <EF_B_DIO_InitPin+0xda>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <EF_B_DIO_InitPin+0xd6>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	be c0       	rjmp	.+380    	; 0x1226 <EF_B_DIO_InitPin+0x262>
			break;
		case OUTPUT:
			DDRA |=  (1 << PinNumber);
    10aa:	aa e3       	ldi	r26, 0x3A	; 58
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ea e3       	ldi	r30, 0x3A	; 58
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <EF_B_DIO_InitPin+0x104>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <EF_B_DIO_InitPin+0x100>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	aa c0       	rjmp	.+340    	; 0x1226 <EF_B_DIO_InitPin+0x262>
			break;
		}
		break;
		case 'b':
		case 'B':
			switch(Direction)
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3a 87       	std	Y+10, r19	; 0x0a
    10da:	29 87       	std	Y+9, r18	; 0x09
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <EF_B_DIO_InitPin+0x12c>
    10e4:	29 85       	ldd	r18, Y+9	; 0x09
    10e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	31 05       	cpc	r19, r1
    10ec:	b1 f0       	breq	.+44     	; 0x111a <EF_B_DIO_InitPin+0x156>
    10ee:	9b c0       	rjmp	.+310    	; 0x1226 <EF_B_DIO_InitPin+0x262>
			{
			case INPUT:
				DDRB &= ~(1 << PinNumber);
    10f0:	a7 e3       	ldi	r26, 0x37	; 55
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e3       	ldi	r30, 0x37	; 55
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <EF_B_DIO_InitPin+0x14a>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <EF_B_DIO_InitPin+0x146>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	86 c0       	rjmp	.+268    	; 0x1226 <EF_B_DIO_InitPin+0x262>
				break;
			case OUTPUT:
				DDRB |=  (1 << PinNumber);
    111a:	a7 e3       	ldi	r26, 0x37	; 55
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <EF_B_DIO_InitPin+0x174>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <EF_B_DIO_InitPin+0x170>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	72 c0       	rjmp	.+228    	; 0x1226 <EF_B_DIO_InitPin+0x262>
				break;
			}
			break;
			case 'c':
			case 'C':
				switch(Direction)
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	38 87       	std	Y+8, r19	; 0x08
    114a:	2f 83       	std	Y+7, r18	; 0x07
    114c:	8f 81       	ldd	r24, Y+7	; 0x07
    114e:	98 85       	ldd	r25, Y+8	; 0x08
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	31 f0       	breq	.+12     	; 0x1160 <EF_B_DIO_InitPin+0x19c>
    1154:	2f 81       	ldd	r18, Y+7	; 0x07
    1156:	38 85       	ldd	r19, Y+8	; 0x08
    1158:	21 30       	cpi	r18, 0x01	; 1
    115a:	31 05       	cpc	r19, r1
    115c:	b1 f0       	breq	.+44     	; 0x118a <EF_B_DIO_InitPin+0x1c6>
    115e:	63 c0       	rjmp	.+198    	; 0x1226 <EF_B_DIO_InitPin+0x262>
				{
				case INPUT:
					DDRC &= ~(1 << PinNumber);
    1160:	a4 e3       	ldi	r26, 0x34	; 52
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <EF_B_DIO_InitPin+0x1ba>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <EF_B_DIO_InitPin+0x1b6>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	4e c0       	rjmp	.+156    	; 0x1226 <EF_B_DIO_InitPin+0x262>
					break;
				case OUTPUT:
					DDRC |=  (1 << PinNumber);
    118a:	a4 e3       	ldi	r26, 0x34	; 52
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <EF_B_DIO_InitPin+0x1e4>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <EF_B_DIO_InitPin+0x1e0>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	3a c0       	rjmp	.+116    	; 0x1226 <EF_B_DIO_InitPin+0x262>
					break;
				}
				break;
				case 'd':
				case 'D':
					switch(Direction)
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3e 83       	std	Y+6, r19	; 0x06
    11ba:	2d 83       	std	Y+5, r18	; 0x05
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <EF_B_DIO_InitPin+0x20c>
    11c4:	2d 81       	ldd	r18, Y+5	; 0x05
    11c6:	3e 81       	ldd	r19, Y+6	; 0x06
    11c8:	21 30       	cpi	r18, 0x01	; 1
    11ca:	31 05       	cpc	r19, r1
    11cc:	b1 f0       	breq	.+44     	; 0x11fa <EF_B_DIO_InitPin+0x236>
    11ce:	2b c0       	rjmp	.+86     	; 0x1226 <EF_B_DIO_InitPin+0x262>
					{
					case INPUT:
						DDRD &= ~(1 << PinNumber);
    11d0:	a1 e3       	ldi	r26, 0x31	; 49
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e1 e3       	ldi	r30, 0x31	; 49
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <EF_B_DIO_InitPin+0x22a>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <EF_B_DIO_InitPin+0x226>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	16 c0       	rjmp	.+44     	; 0x1226 <EF_B_DIO_InitPin+0x262>
						break;
					case OUTPUT:
						DDRD |=  (1 << PinNumber);
    11fa:	a1 e3       	ldi	r26, 0x31	; 49
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <EF_B_DIO_InitPin+0x254>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <EF_B_DIO_InitPin+0x250>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <EF_B_DIO_InitPin+0x262>
					default:
						break;
					}
					break;
					default:
						bStatus = -1;
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	89 83       	std	Y+1, r24	; 0x01

	}

	return(bStatus);
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	2e 96       	adiw	r28, 0x0e	; 14
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <EF_S8_DIO_SetPin>:
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 * Note        : This function set output PIN.
 ***********************************************************************/
S8_t  EF_S8_DIO_SetPin   (U8_t PortName, U8_t PinNumber)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <EF_S8_DIO_SetPin+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <EF_S8_DIO_SetPin+0x8>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	6b 83       	std	Y+3, r22	; 0x03
	S8_t Status;

	if(PinNumber > 7)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	18 f0       	brcs	.+6      	; 0x1258 <EF_S8_DIO_SetPin+0x1e>
	{
		Status = -1;
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	90 c0       	rjmp	.+288    	; 0x1378 <EF_S8_DIO_SetPin+0x13e>
	}
	else
	{    
		Status = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 83       	std	Y+1, r24	; 0x01
		switch(PortName)
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3d 83       	std	Y+5, r19	; 0x05
    1264:	2c 83       	std	Y+4, r18	; 0x04
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	84 34       	cpi	r24, 0x44	; 68
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <EF_S8_DIO_SetPin+0x38>
    1270:	6d c0       	rjmp	.+218    	; 0x134c <EF_S8_DIO_SetPin+0x112>
    1272:	2c 81       	ldd	r18, Y+4	; 0x04
    1274:	3d 81       	ldd	r19, Y+5	; 0x05
    1276:	25 34       	cpi	r18, 0x45	; 69
    1278:	31 05       	cpc	r19, r1
    127a:	8c f4       	brge	.+34     	; 0x129e <EF_S8_DIO_SetPin+0x64>
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	82 34       	cpi	r24, 0x42	; 66
    1282:	91 05       	cpc	r25, r1
    1284:	d9 f1       	breq	.+118    	; 0x12fc <EF_S8_DIO_SetPin+0xc2>
    1286:	2c 81       	ldd	r18, Y+4	; 0x04
    1288:	3d 81       	ldd	r19, Y+5	; 0x05
    128a:	23 34       	cpi	r18, 0x43	; 67
    128c:	31 05       	cpc	r19, r1
    128e:	0c f0       	brlt	.+2      	; 0x1292 <EF_S8_DIO_SetPin+0x58>
    1290:	49 c0       	rjmp	.+146    	; 0x1324 <EF_S8_DIO_SetPin+0xea>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	81 34       	cpi	r24, 0x41	; 65
    1298:	91 05       	cpc	r25, r1
    129a:	e1 f0       	breq	.+56     	; 0x12d4 <EF_S8_DIO_SetPin+0x9a>
    129c:	6b c0       	rjmp	.+214    	; 0x1374 <EF_S8_DIO_SetPin+0x13a>
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	22 36       	cpi	r18, 0x62	; 98
    12a4:	31 05       	cpc	r19, r1
    12a6:	51 f1       	breq	.+84     	; 0x12fc <EF_S8_DIO_SetPin+0xc2>
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	83 36       	cpi	r24, 0x63	; 99
    12ae:	91 05       	cpc	r25, r1
    12b0:	34 f4       	brge	.+12     	; 0x12be <EF_S8_DIO_SetPin+0x84>
    12b2:	2c 81       	ldd	r18, Y+4	; 0x04
    12b4:	3d 81       	ldd	r19, Y+5	; 0x05
    12b6:	21 36       	cpi	r18, 0x61	; 97
    12b8:	31 05       	cpc	r19, r1
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <EF_S8_DIO_SetPin+0x9a>
    12bc:	5b c0       	rjmp	.+182    	; 0x1374 <EF_S8_DIO_SetPin+0x13a>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	83 36       	cpi	r24, 0x63	; 99
    12c4:	91 05       	cpc	r25, r1
    12c6:	71 f1       	breq	.+92     	; 0x1324 <EF_S8_DIO_SetPin+0xea>
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	24 36       	cpi	r18, 0x64	; 100
    12ce:	31 05       	cpc	r19, r1
    12d0:	e9 f1       	breq	.+122    	; 0x134c <EF_S8_DIO_SetPin+0x112>
    12d2:	50 c0       	rjmp	.+160    	; 0x1374 <EF_S8_DIO_SetPin+0x13a>
		{
		case 'a':
		case 'A':
			PORTA |= (1 << PinNumber);
    12d4:	ab e3       	ldi	r26, 0x3B	; 59
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <EF_S8_DIO_SetPin+0xb8>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <EF_S8_DIO_SetPin+0xb4>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	3e c0       	rjmp	.+124    	; 0x1378 <EF_S8_DIO_SetPin+0x13e>
			break;
		case 'b':
		case 'B':
			PORTB |= (1 << PinNumber);
    12fc:	a8 e3       	ldi	r26, 0x38	; 56
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <EF_S8_DIO_SetPin+0xe0>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <EF_S8_DIO_SetPin+0xdc>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	2a c0       	rjmp	.+84     	; 0x1378 <EF_S8_DIO_SetPin+0x13e>
			break;
		case 'c':
		case 'C':
			PORTC |= (1 << PinNumber);
    1324:	a5 e3       	ldi	r26, 0x35	; 53
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <EF_S8_DIO_SetPin+0x108>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <EF_S8_DIO_SetPin+0x104>
    1346:	84 2b       	or	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <EF_S8_DIO_SetPin+0x13e>
			break;
		case 'd':
		case 'D':
			PORTD |= (1 << PinNumber);
    134c:	a2 e3       	ldi	r26, 0x32	; 50
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <EF_S8_DIO_SetPin+0x130>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <EF_S8_DIO_SetPin+0x12c>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <EF_S8_DIO_SetPin+0x13e>
			break;
		default:
			Status = -1;
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return(Status);
    1378:	89 81       	ldd	r24, Y+1	; 0x01

}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <EF_S8_DIO_ClearPin>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 ***********************************************************************/
S8_t  EF_S8_DIO_ClearPin (U8_t PortName, U8_t PinNumber)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <EF_S8_DIO_ClearPin+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <EF_S8_DIO_ClearPin+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	6b 83       	std	Y+3, r22	; 0x03
	S8_t Status;

	if(PinNumber > 7)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	18 f0       	brcs	.+6      	; 0x13a8 <EF_S8_DIO_ClearPin+0x1e>
	{
		Status = -1;
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	95 c0       	rjmp	.+298    	; 0x14d2 <EF_S8_DIO_ClearPin+0x148>
	}
	else
	{
		Status = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	89 83       	std	Y+1, r24	; 0x01
		switch(PortName)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3d 83       	std	Y+5, r19	; 0x05
    13b4:	2c 83       	std	Y+4, r18	; 0x04
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	84 34       	cpi	r24, 0x44	; 68
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <EF_S8_DIO_ClearPin+0x38>
    13c0:	71 c0       	rjmp	.+226    	; 0x14a4 <EF_S8_DIO_ClearPin+0x11a>
    13c2:	2c 81       	ldd	r18, Y+4	; 0x04
    13c4:	3d 81       	ldd	r19, Y+5	; 0x05
    13c6:	25 34       	cpi	r18, 0x45	; 69
    13c8:	31 05       	cpc	r19, r1
    13ca:	8c f4       	brge	.+34     	; 0x13ee <EF_S8_DIO_ClearPin+0x64>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	82 34       	cpi	r24, 0x42	; 66
    13d2:	91 05       	cpc	r25, r1
    13d4:	e9 f1       	breq	.+122    	; 0x1450 <EF_S8_DIO_ClearPin+0xc6>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	23 34       	cpi	r18, 0x43	; 67
    13dc:	31 05       	cpc	r19, r1
    13de:	0c f0       	brlt	.+2      	; 0x13e2 <EF_S8_DIO_ClearPin+0x58>
    13e0:	4c c0       	rjmp	.+152    	; 0x147a <EF_S8_DIO_ClearPin+0xf0>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	81 34       	cpi	r24, 0x41	; 65
    13e8:	91 05       	cpc	r25, r1
    13ea:	e9 f0       	breq	.+58     	; 0x1426 <EF_S8_DIO_ClearPin+0x9c>
    13ec:	70 c0       	rjmp	.+224    	; 0x14ce <EF_S8_DIO_ClearPin+0x144>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 36       	cpi	r18, 0x62	; 98
    13f4:	31 05       	cpc	r19, r1
    13f6:	61 f1       	breq	.+88     	; 0x1450 <EF_S8_DIO_ClearPin+0xc6>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 36       	cpi	r24, 0x63	; 99
    13fe:	91 05       	cpc	r25, r1
    1400:	34 f4       	brge	.+12     	; 0x140e <EF_S8_DIO_ClearPin+0x84>
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	3d 81       	ldd	r19, Y+5	; 0x05
    1406:	21 36       	cpi	r18, 0x61	; 97
    1408:	31 05       	cpc	r19, r1
    140a:	69 f0       	breq	.+26     	; 0x1426 <EF_S8_DIO_ClearPin+0x9c>
    140c:	60 c0       	rjmp	.+192    	; 0x14ce <EF_S8_DIO_ClearPin+0x144>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	83 36       	cpi	r24, 0x63	; 99
    1414:	91 05       	cpc	r25, r1
    1416:	89 f1       	breq	.+98     	; 0x147a <EF_S8_DIO_ClearPin+0xf0>
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	3d 81       	ldd	r19, Y+5	; 0x05
    141c:	24 36       	cpi	r18, 0x64	; 100
    141e:	31 05       	cpc	r19, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <EF_S8_DIO_ClearPin+0x9a>
    1422:	40 c0       	rjmp	.+128    	; 0x14a4 <EF_S8_DIO_ClearPin+0x11a>
    1424:	54 c0       	rjmp	.+168    	; 0x14ce <EF_S8_DIO_ClearPin+0x144>
		{
		case 'a':
		case 'A':
			PORTA &= ~(1 << PinNumber);
    1426:	ab e3       	ldi	r26, 0x3B	; 59
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <EF_S8_DIO_ClearPin+0xba>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <EF_S8_DIO_ClearPin+0xb6>
    1448:	80 95       	com	r24
    144a:	84 23       	and	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	41 c0       	rjmp	.+130    	; 0x14d2 <EF_S8_DIO_ClearPin+0x148>
			break;
		case 'b':
		case 'B':
			PORTB &= ~(1 << PinNumber);
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <EF_S8_DIO_ClearPin+0xe4>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <EF_S8_DIO_ClearPin+0xe0>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	2c c0       	rjmp	.+88     	; 0x14d2 <EF_S8_DIO_ClearPin+0x148>
			break;
		case 'c':
		case 'C':
			PORTC &= ~(1 << PinNumber);
    147a:	a5 e3       	ldi	r26, 0x35	; 53
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e3       	ldi	r30, 0x35	; 53
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <EF_S8_DIO_ClearPin+0x10e>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <EF_S8_DIO_ClearPin+0x10a>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	17 c0       	rjmp	.+46     	; 0x14d2 <EF_S8_DIO_ClearPin+0x148>
			break;
		case 'd':
		case 'D':
			PORTD &= ~(1 << PinNumber);
    14a4:	a2 e3       	ldi	r26, 0x32	; 50
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e2 e3       	ldi	r30, 0x32	; 50
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <EF_S8_DIO_ClearPin+0x138>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <EF_S8_DIO_ClearPin+0x134>
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <EF_S8_DIO_ClearPin+0x148>
			break;
		default:
			Status = -1;
    14ce:	8f ef       	ldi	r24, 0xFF	; 255
    14d0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return(Status);
    14d2:	89 81       	ldd	r24, Y+1	; 0x01

}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <EF_S8_DIO_SetPort>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 ***********************************************************************/
S8_t  EF_S8_DIO_SetPort  (U8_t PortName)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <EF_S8_DIO_SetPort+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <EF_S8_DIO_SetPort+0x8>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8a 83       	std	Y+2, r24	; 0x02
	S8_t Status;

	Status = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3c 83       	std	Y+4, r19	; 0x04
    14fe:	2b 83       	std	Y+3, r18	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	84 34       	cpi	r24, 0x44	; 68
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <EF_S8_DIO_SetPort+0x28>
    150a:	3f c0       	rjmp	.+126    	; 0x158a <EF_S8_DIO_SetPort+0xa6>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	25 34       	cpi	r18, 0x45	; 69
    1512:	31 05       	cpc	r19, r1
    1514:	84 f4       	brge	.+32     	; 0x1536 <EF_S8_DIO_SetPort+0x52>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	82 34       	cpi	r24, 0x42	; 66
    151c:	91 05       	cpc	r25, r1
    151e:	59 f1       	breq	.+86     	; 0x1576 <EF_S8_DIO_SetPort+0x92>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	23 34       	cpi	r18, 0x43	; 67
    1526:	31 05       	cpc	r19, r1
    1528:	5c f5       	brge	.+86     	; 0x1580 <EF_S8_DIO_SetPort+0x9c>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	81 34       	cpi	r24, 0x41	; 65
    1530:	91 05       	cpc	r25, r1
    1532:	e1 f0       	breq	.+56     	; 0x156c <EF_S8_DIO_SetPort+0x88>
    1534:	2f c0       	rjmp	.+94     	; 0x1594 <EF_S8_DIO_SetPort+0xb0>
    1536:	2b 81       	ldd	r18, Y+3	; 0x03
    1538:	3c 81       	ldd	r19, Y+4	; 0x04
    153a:	22 36       	cpi	r18, 0x62	; 98
    153c:	31 05       	cpc	r19, r1
    153e:	d9 f0       	breq	.+54     	; 0x1576 <EF_S8_DIO_SetPort+0x92>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	83 36       	cpi	r24, 0x63	; 99
    1546:	91 05       	cpc	r25, r1
    1548:	34 f4       	brge	.+12     	; 0x1556 <EF_S8_DIO_SetPort+0x72>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	21 36       	cpi	r18, 0x61	; 97
    1550:	31 05       	cpc	r19, r1
    1552:	61 f0       	breq	.+24     	; 0x156c <EF_S8_DIO_SetPort+0x88>
    1554:	1f c0       	rjmp	.+62     	; 0x1594 <EF_S8_DIO_SetPort+0xb0>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	83 36       	cpi	r24, 0x63	; 99
    155c:	91 05       	cpc	r25, r1
    155e:	81 f0       	breq	.+32     	; 0x1580 <EF_S8_DIO_SetPort+0x9c>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	24 36       	cpi	r18, 0x64	; 100
    1566:	31 05       	cpc	r19, r1
    1568:	81 f0       	breq	.+32     	; 0x158a <EF_S8_DIO_SetPort+0xa6>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <EF_S8_DIO_SetPort+0xb0>
	{
	case 'a':
	case 'A':
		PORTA = 0xFF;
    156c:	eb e3       	ldi	r30, 0x3B	; 59
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	80 83       	st	Z, r24
    1574:	11 c0       	rjmp	.+34     	; 0x1598 <EF_S8_DIO_SetPort+0xb4>
		break;
	case 'b':
	case 'B':
		PORTB = 0xFF;
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	80 83       	st	Z, r24
    157e:	0c c0       	rjmp	.+24     	; 0x1598 <EF_S8_DIO_SetPort+0xb4>
		break;
	case 'c':
	case 'C':
		PORTC = 0xFF;
    1580:	e5 e3       	ldi	r30, 0x35	; 53
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	80 83       	st	Z, r24
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <EF_S8_DIO_SetPort+0xb4>
		break;
	case 'd':
	case 'D':
		PORTD = 0xFF;
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	80 83       	st	Z, r24
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <EF_S8_DIO_SetPort+0xb4>
		break;
	default:
		Status = -1;
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
	}

	return(Status);
    1598:	89 81       	ldd	r24, Y+1	; 0x01
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <EF_S8_DIO_ClearPort>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 ***********************************************************************/
S8_t  EF_S8_DIO_ClearPort(U8_t PortName)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <EF_S8_DIO_ClearPort+0x6>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <EF_S8_DIO_ClearPort+0x8>
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	8a 83       	std	Y+2, r24	; 0x02
	S8_t Status;

	Status = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 83       	std	Y+1, r24	; 0x01
	switch(PortName)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3c 83       	std	Y+4, r19	; 0x04
    15c2:	2b 83       	std	Y+3, r18	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	84 34       	cpi	r24, 0x44	; 68
    15ca:	91 05       	cpc	r25, r1
    15cc:	e1 f1       	breq	.+120    	; 0x1646 <EF_S8_DIO_ClearPort+0x9e>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	25 34       	cpi	r18, 0x45	; 69
    15d4:	31 05       	cpc	r19, r1
    15d6:	84 f4       	brge	.+32     	; 0x15f8 <EF_S8_DIO_ClearPort+0x50>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	82 34       	cpi	r24, 0x42	; 66
    15de:	91 05       	cpc	r25, r1
    15e0:	51 f1       	breq	.+84     	; 0x1636 <EF_S8_DIO_ClearPort+0x8e>
    15e2:	2b 81       	ldd	r18, Y+3	; 0x03
    15e4:	3c 81       	ldd	r19, Y+4	; 0x04
    15e6:	23 34       	cpi	r18, 0x43	; 67
    15e8:	31 05       	cpc	r19, r1
    15ea:	4c f5       	brge	.+82     	; 0x163e <EF_S8_DIO_ClearPort+0x96>
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	81 34       	cpi	r24, 0x41	; 65
    15f2:	91 05       	cpc	r25, r1
    15f4:	e1 f0       	breq	.+56     	; 0x162e <EF_S8_DIO_ClearPort+0x86>
    15f6:	2b c0       	rjmp	.+86     	; 0x164e <EF_S8_DIO_ClearPort+0xa6>
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	22 36       	cpi	r18, 0x62	; 98
    15fe:	31 05       	cpc	r19, r1
    1600:	d1 f0       	breq	.+52     	; 0x1636 <EF_S8_DIO_ClearPort+0x8e>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	83 36       	cpi	r24, 0x63	; 99
    1608:	91 05       	cpc	r25, r1
    160a:	34 f4       	brge	.+12     	; 0x1618 <EF_S8_DIO_ClearPort+0x70>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	21 36       	cpi	r18, 0x61	; 97
    1612:	31 05       	cpc	r19, r1
    1614:	61 f0       	breq	.+24     	; 0x162e <EF_S8_DIO_ClearPort+0x86>
    1616:	1b c0       	rjmp	.+54     	; 0x164e <EF_S8_DIO_ClearPort+0xa6>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	83 36       	cpi	r24, 0x63	; 99
    161e:	91 05       	cpc	r25, r1
    1620:	71 f0       	breq	.+28     	; 0x163e <EF_S8_DIO_ClearPort+0x96>
    1622:	2b 81       	ldd	r18, Y+3	; 0x03
    1624:	3c 81       	ldd	r19, Y+4	; 0x04
    1626:	24 36       	cpi	r18, 0x64	; 100
    1628:	31 05       	cpc	r19, r1
    162a:	69 f0       	breq	.+26     	; 0x1646 <EF_S8_DIO_ClearPort+0x9e>
    162c:	10 c0       	rjmp	.+32     	; 0x164e <EF_S8_DIO_ClearPort+0xa6>
	{
	case 'a':
	case 'A':
		PORTA = 0x00;
    162e:	eb e3       	ldi	r30, 0x3B	; 59
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	10 82       	st	Z, r1
    1634:	0e c0       	rjmp	.+28     	; 0x1652 <EF_S8_DIO_ClearPort+0xaa>
		break;
	case 'b':
	case 'B':
		PORTB = 0x00;
    1636:	e8 e3       	ldi	r30, 0x38	; 56
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	10 82       	st	Z, r1
    163c:	0a c0       	rjmp	.+20     	; 0x1652 <EF_S8_DIO_ClearPort+0xaa>
		break;
	case 'c':
	case 'C':
		PORTC = 0x00;
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <EF_S8_DIO_ClearPort+0xaa>
		break;
	case 'd':
	case 'D':
		PORTD = 0x00;
    1646:	e2 e3       	ldi	r30, 0x32	; 50
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <EF_S8_DIO_ClearPort+0xaa>
		break;
	default:
		Status = -1;
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	89 83       	std	Y+1, r24	; 0x01
	}

	return(Status);
    1652:	89 81       	ldd	r24, Y+1	; 0x01
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <EF_S8_DIO_TogglePin>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if OK.
 ***********************************************************************/
S8_t  EF_S8_DIO_TogglePin(U8_t PortName, U8_t PinNumber)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <EF_S8_DIO_TogglePin+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <EF_S8_DIO_TogglePin+0x8>
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	8a 83       	std	Y+2, r24	; 0x02
    1672:	6b 83       	std	Y+3, r22	; 0x03
	S8_t Status;

	if(PinNumber > 7)
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 30       	cpi	r24, 0x08	; 8
    1678:	18 f0       	brcs	.+6      	; 0x1680 <EF_S8_DIO_TogglePin+0x1e>
	{
		Status = -1;
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	90 c0       	rjmp	.+288    	; 0x17a0 <EF_S8_DIO_TogglePin+0x13e>
	}
	else
	{
		Status = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
		switch(PortName)
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3d 83       	std	Y+5, r19	; 0x05
    168c:	2c 83       	std	Y+4, r18	; 0x04
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	84 34       	cpi	r24, 0x44	; 68
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <EF_S8_DIO_TogglePin+0x38>
    1698:	6d c0       	rjmp	.+218    	; 0x1774 <EF_S8_DIO_TogglePin+0x112>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	25 34       	cpi	r18, 0x45	; 69
    16a0:	31 05       	cpc	r19, r1
    16a2:	8c f4       	brge	.+34     	; 0x16c6 <EF_S8_DIO_TogglePin+0x64>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	82 34       	cpi	r24, 0x42	; 66
    16aa:	91 05       	cpc	r25, r1
    16ac:	d9 f1       	breq	.+118    	; 0x1724 <EF_S8_DIO_TogglePin+0xc2>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	23 34       	cpi	r18, 0x43	; 67
    16b4:	31 05       	cpc	r19, r1
    16b6:	0c f0       	brlt	.+2      	; 0x16ba <EF_S8_DIO_TogglePin+0x58>
    16b8:	49 c0       	rjmp	.+146    	; 0x174c <EF_S8_DIO_TogglePin+0xea>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	81 34       	cpi	r24, 0x41	; 65
    16c0:	91 05       	cpc	r25, r1
    16c2:	e1 f0       	breq	.+56     	; 0x16fc <EF_S8_DIO_TogglePin+0x9a>
    16c4:	6b c0       	rjmp	.+214    	; 0x179c <EF_S8_DIO_TogglePin+0x13a>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	22 36       	cpi	r18, 0x62	; 98
    16cc:	31 05       	cpc	r19, r1
    16ce:	51 f1       	breq	.+84     	; 0x1724 <EF_S8_DIO_TogglePin+0xc2>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	83 36       	cpi	r24, 0x63	; 99
    16d6:	91 05       	cpc	r25, r1
    16d8:	34 f4       	brge	.+12     	; 0x16e6 <EF_S8_DIO_TogglePin+0x84>
    16da:	2c 81       	ldd	r18, Y+4	; 0x04
    16dc:	3d 81       	ldd	r19, Y+5	; 0x05
    16de:	21 36       	cpi	r18, 0x61	; 97
    16e0:	31 05       	cpc	r19, r1
    16e2:	61 f0       	breq	.+24     	; 0x16fc <EF_S8_DIO_TogglePin+0x9a>
    16e4:	5b c0       	rjmp	.+182    	; 0x179c <EF_S8_DIO_TogglePin+0x13a>
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	83 36       	cpi	r24, 0x63	; 99
    16ec:	91 05       	cpc	r25, r1
    16ee:	71 f1       	breq	.+92     	; 0x174c <EF_S8_DIO_TogglePin+0xea>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	24 36       	cpi	r18, 0x64	; 100
    16f6:	31 05       	cpc	r19, r1
    16f8:	e9 f1       	breq	.+122    	; 0x1774 <EF_S8_DIO_TogglePin+0x112>
    16fa:	50 c0       	rjmp	.+160    	; 0x179c <EF_S8_DIO_TogglePin+0x13a>
		{
		case 'a':
		case 'A':
			PORTA ^= (1 << PinNumber);
    16fc:	ab e3       	ldi	r26, 0x3B	; 59
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	eb e3       	ldi	r30, 0x3B	; 59
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <EF_S8_DIO_TogglePin+0xb8>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <EF_S8_DIO_TogglePin+0xb4>
    171e:	84 27       	eor	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	3e c0       	rjmp	.+124    	; 0x17a0 <EF_S8_DIO_TogglePin+0x13e>
			break;
		case 'b':
		case 'B':
			PORTB ^= (1 << PinNumber);
    1724:	a8 e3       	ldi	r26, 0x38	; 56
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 e3       	ldi	r30, 0x38	; 56
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <EF_S8_DIO_TogglePin+0xe0>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <EF_S8_DIO_TogglePin+0xdc>
    1746:	84 27       	eor	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	2a c0       	rjmp	.+84     	; 0x17a0 <EF_S8_DIO_TogglePin+0x13e>
			break;
		case 'c':
		case 'C':
			PORTC ^= (1 << PinNumber);
    174c:	a5 e3       	ldi	r26, 0x35	; 53
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <EF_S8_DIO_TogglePin+0x108>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <EF_S8_DIO_TogglePin+0x104>
    176e:	84 27       	eor	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	16 c0       	rjmp	.+44     	; 0x17a0 <EF_S8_DIO_TogglePin+0x13e>
			break;
		case 'd':
		case 'D':
			PORTD ^= (1 << PinNumber);
    1774:	a2 e3       	ldi	r26, 0x32	; 50
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <EF_S8_DIO_TogglePin+0x130>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <EF_S8_DIO_TogglePin+0x12c>
    1796:	84 27       	eor	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <EF_S8_DIO_TogglePin+0x13e>
			break;
		default:
			Status = -1;
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return(Status);
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <EF_S8_DIO_CheckPin>:
 *
 * Return Value: The function will return -1 if user enter wrong inputs.
 *               or return 1 if Pin ON and 0 If pin OFF.
 ***********************************************************************/
S8_t  EF_S8_DIO_CheckPin (U8_t PortName, U8_t PinNumber)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <EF_S8_DIO_CheckPin+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <EF_S8_DIO_CheckPin+0x8>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	6b 83       	std	Y+3, r22	; 0x03
	S8_t Status = 0;
    17c4:	19 82       	std	Y+1, r1	; 0x01

	if(PinNumber > 7)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	18 f0       	brcs	.+6      	; 0x17d2 <EF_S8_DIO_CheckPin+0x20>
	{
		Status = -1;
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	b9 c0       	rjmp	.+370    	; 0x1944 <EF_S8_DIO_CheckPin+0x192>
	}
	else
	{
		switch(PortName)
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	3d 83       	std	Y+5, r19	; 0x05
    17da:	2c 83       	std	Y+4, r18	; 0x04
    17dc:	4c 81       	ldd	r20, Y+4	; 0x04
    17de:	5d 81       	ldd	r21, Y+5	; 0x05
    17e0:	44 34       	cpi	r20, 0x44	; 68
    17e2:	51 05       	cpc	r21, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <EF_S8_DIO_CheckPin+0x36>
    17e6:	8e c0       	rjmp	.+284    	; 0x1904 <EF_S8_DIO_CheckPin+0x152>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	85 34       	cpi	r24, 0x45	; 69
    17ee:	91 05       	cpc	r25, r1
    17f0:	94 f4       	brge	.+36     	; 0x1816 <EF_S8_DIO_CheckPin+0x64>
    17f2:	2c 81       	ldd	r18, Y+4	; 0x04
    17f4:	3d 81       	ldd	r19, Y+5	; 0x05
    17f6:	22 34       	cpi	r18, 0x42	; 66
    17f8:	31 05       	cpc	r19, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <EF_S8_DIO_CheckPin+0x4c>
    17fc:	47 c0       	rjmp	.+142    	; 0x188c <EF_S8_DIO_CheckPin+0xda>
    17fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1800:	5d 81       	ldd	r21, Y+5	; 0x05
    1802:	43 34       	cpi	r20, 0x43	; 67
    1804:	51 05       	cpc	r21, r1
    1806:	0c f0       	brlt	.+2      	; 0x180a <EF_S8_DIO_CheckPin+0x58>
    1808:	5f c0       	rjmp	.+190    	; 0x18c8 <EF_S8_DIO_CheckPin+0x116>
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	81 34       	cpi	r24, 0x41	; 65
    1810:	91 05       	cpc	r25, r1
    1812:	f1 f0       	breq	.+60     	; 0x1850 <EF_S8_DIO_CheckPin+0x9e>
    1814:	95 c0       	rjmp	.+298    	; 0x1940 <EF_S8_DIO_CheckPin+0x18e>
    1816:	2c 81       	ldd	r18, Y+4	; 0x04
    1818:	3d 81       	ldd	r19, Y+5	; 0x05
    181a:	22 36       	cpi	r18, 0x62	; 98
    181c:	31 05       	cpc	r19, r1
    181e:	b1 f1       	breq	.+108    	; 0x188c <EF_S8_DIO_CheckPin+0xda>
    1820:	4c 81       	ldd	r20, Y+4	; 0x04
    1822:	5d 81       	ldd	r21, Y+5	; 0x05
    1824:	43 36       	cpi	r20, 0x63	; 99
    1826:	51 05       	cpc	r21, r1
    1828:	34 f4       	brge	.+12     	; 0x1836 <EF_S8_DIO_CheckPin+0x84>
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	81 36       	cpi	r24, 0x61	; 97
    1830:	91 05       	cpc	r25, r1
    1832:	71 f0       	breq	.+28     	; 0x1850 <EF_S8_DIO_CheckPin+0x9e>
    1834:	85 c0       	rjmp	.+266    	; 0x1940 <EF_S8_DIO_CheckPin+0x18e>
    1836:	2c 81       	ldd	r18, Y+4	; 0x04
    1838:	3d 81       	ldd	r19, Y+5	; 0x05
    183a:	23 36       	cpi	r18, 0x63	; 99
    183c:	31 05       	cpc	r19, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <EF_S8_DIO_CheckPin+0x90>
    1840:	43 c0       	rjmp	.+134    	; 0x18c8 <EF_S8_DIO_CheckPin+0x116>
    1842:	4c 81       	ldd	r20, Y+4	; 0x04
    1844:	5d 81       	ldd	r21, Y+5	; 0x05
    1846:	44 36       	cpi	r20, 0x64	; 100
    1848:	51 05       	cpc	r21, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <EF_S8_DIO_CheckPin+0x9c>
    184c:	5b c0       	rjmp	.+182    	; 0x1904 <EF_S8_DIO_CheckPin+0x152>
    184e:	78 c0       	rjmp	.+240    	; 0x1940 <EF_S8_DIO_CheckPin+0x18e>
		{
		case 'a':
		case 'A':
			Status = (PINA & (1 << PinNumber))>>PinNumber;
    1850:	e9 e3       	ldi	r30, 0x39	; 57
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <EF_S8_DIO_CheckPin+0xb8>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	2a 95       	dec	r18
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <EF_S8_DIO_CheckPin+0xb4>
    186e:	9a 01       	movw	r18, r20
    1870:	28 23       	and	r18, r24
    1872:	39 23       	and	r19, r25
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <EF_S8_DIO_CheckPin+0xd0>
    187e:	55 95       	asr	r21
    1880:	47 95       	ror	r20
    1882:	8a 95       	dec	r24
    1884:	e2 f7       	brpl	.-8      	; 0x187e <EF_S8_DIO_CheckPin+0xcc>
    1886:	ca 01       	movw	r24, r20
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	5c c0       	rjmp	.+184    	; 0x1944 <EF_S8_DIO_CheckPin+0x192>
			break;
		case 'b':
		case 'B':
			Status = (PINB & (1 << PinNumber))>>PinNumber;
    188c:	e6 e3       	ldi	r30, 0x36	; 54
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <EF_S8_DIO_CheckPin+0xf4>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	2a 95       	dec	r18
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <EF_S8_DIO_CheckPin+0xf0>
    18aa:	9a 01       	movw	r18, r20
    18ac:	28 23       	and	r18, r24
    18ae:	39 23       	and	r19, r25
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <EF_S8_DIO_CheckPin+0x10c>
    18ba:	55 95       	asr	r21
    18bc:	47 95       	ror	r20
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <EF_S8_DIO_CheckPin+0x108>
    18c2:	ca 01       	movw	r24, r20
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	3e c0       	rjmp	.+124    	; 0x1944 <EF_S8_DIO_CheckPin+0x192>
			break;
		case 'c':
		case 'C':
			Status = (PINC & (1 << PinNumber))>>PinNumber;
    18c8:	e3 e3       	ldi	r30, 0x33	; 51
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <EF_S8_DIO_CheckPin+0x130>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	2a 95       	dec	r18
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <EF_S8_DIO_CheckPin+0x12c>
    18e6:	9a 01       	movw	r18, r20
    18e8:	28 23       	and	r18, r24
    18ea:	39 23       	and	r19, r25
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a9 01       	movw	r20, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <EF_S8_DIO_CheckPin+0x148>
    18f6:	55 95       	asr	r21
    18f8:	47 95       	ror	r20
    18fa:	8a 95       	dec	r24
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <EF_S8_DIO_CheckPin+0x144>
    18fe:	ca 01       	movw	r24, r20
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	20 c0       	rjmp	.+64     	; 0x1944 <EF_S8_DIO_CheckPin+0x192>
			break;
		case 'd':
		case 'D':
			Status = (PIND & (1 << PinNumber))>>PinNumber;
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <EF_S8_DIO_CheckPin+0x16c>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	2a 95       	dec	r18
    1920:	e2 f7       	brpl	.-8      	; 0x191a <EF_S8_DIO_CheckPin+0x168>
    1922:	9a 01       	movw	r18, r20
    1924:	28 23       	and	r18, r24
    1926:	39 23       	and	r19, r25
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <EF_S8_DIO_CheckPin+0x184>
    1932:	55 95       	asr	r21
    1934:	47 95       	ror	r20
    1936:	8a 95       	dec	r24
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <EF_S8_DIO_CheckPin+0x180>
    193a:	ca 01       	movw	r24, r20
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <EF_S8_DIO_CheckPin+0x192>
			break;
		default:
			Status = -1;
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return(Status);
    1944:	89 81       	ldd	r24, Y+1	; 0x01
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <EF_void_EEPROM_WriteByte>:
 *
 * Return Value: void.
 * Note        : void.
 ***********************************************************************/
void EF_void_EEPROM_WriteByte(U16_t eeprom_Address, U8_t eeprom_Data)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <EF_void_EEPROM_WriteByte+0x6>
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write, EEWE will be
	   cleared by hardware once EEprom write is completed */
	while(EECR & (1<<EEWE));
    1968:	ec e3       	ldi	r30, 0x3C	; 60
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	82 70       	andi	r24, 0x02	; 2
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	b9 f7       	brne	.-18     	; 0x1968 <EF_void_EEPROM_WriteByte+0x12>

	EEAR = eeprom_Address;  /*Load the eeprom adddress and data   */
    197a:	ee e3       	ldi	r30, 0x3E	; 62
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
	EEDR = eeprom_Data;
    1986:	ed e3       	ldi	r30, 0x3D	; 61
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	80 83       	st	Z, r24
	EECR |= (1<<EEMWE);     /* EEMWE: master write Enable 		  */
    198e:	ac e3       	ldi	r26, 0x3C	; 60
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	ec e3       	ldi	r30, 0x3C	; 60
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	84 60       	ori	r24, 0x04	; 4
    199a:	8c 93       	st	X, r24
	EECR |= (1<<EEWE);      /* Start EEprom write by setting EEWE */
    199c:	ac e3       	ldi	r26, 0x3C	; 60
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	ec e3       	ldi	r30, 0x3C	; 60
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	82 60       	ori	r24, 0x02	; 2
    19a8:	8c 93       	st	X, r24
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <EF_u8_EPROM_ReadByte>:
 *
 * Return Value: U8_t                : Data read from Address.
 * Note        : void.
 ***********************************************************************/
U8_t EF_u8_EPROM_ReadByte(U16_t eeprom_Address)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	60 97       	sbiw	r28, 0x10	; 16
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
	while(EECR & (1<<EEWE));  /* Wait for completion of previous write if any. 		   */
    19ce:	ec e3       	ldi	r30, 0x3C	; 60
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	82 70       	andi	r24, 0x02	; 2
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	b9 f7       	brne	.-18     	; 0x19ce <EF_u8_EPROM_ReadByte+0x18>

	EEAR = eeprom_Address;    /*Load the address from where the data needs to be read. */
    19e0:	ee e3       	ldi	r30, 0x3E	; 62
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
	EECR |=(1<<EERE);         /* start eeprom read by setting EERE :read enable        */
    19ec:	ac e3       	ldi	r26, 0x3C	; 60
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ec e3       	ldi	r30, 0x3C	; 60
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	81 60       	ori	r24, 0x01	; 1
    19f8:	8c 93       	st	X, r24
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e8       	ldi	r26, 0x80	; 128
    1a00:	bf e3       	ldi	r27, 0x3F	; 63
    1a02:	8b 87       	std	Y+11, r24	; 0x0b
    1a04:	9c 87       	std	Y+12, r25	; 0x0c
    1a06:	ad 87       	std	Y+13, r26	; 0x0d
    1a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a ef       	ldi	r20, 0xFA	; 250
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8f 83       	std	Y+7, r24	; 0x07
    1a24:	98 87       	std	Y+8, r25	; 0x08
    1a26:	a9 87       	std	Y+9, r26	; 0x09
    1a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <EF_u8_EPROM_ReadByte+0x96>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <EF_u8_EPROM_ReadByte+0x114>
	else if (__tmp > 65535)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <EF_u8_EPROM_ReadByte+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <EF_u8_EPROM_ReadByte+0xf6>
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <EF_u8_EPROM_ReadByte+0xe4>
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <EF_u8_EPROM_ReadByte+0xd8>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <EF_u8_EPROM_ReadByte+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <EF_u8_EPROM_ReadByte+0x120>
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
	/* TODO: remove delay */
	_delay_ms(1);
	return EEDR;              /* Return data from data register						   */
    1ade:	ed e3       	ldi	r30, 0x3D	; 61
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
}
    1ae4:	60 96       	adiw	r28, 0x10	; 16
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <EF_void_EEPROM_WriteNBytes>:
 *
 * Return Value: void.
 * Note        : void.
 ***********************************************************************/
void EF_void_EEPROM_WriteNBytes(U16_t eeprom_Address, U8_t *RamAddr, S8_t NoOfBytes)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <EF_void_EEPROM_WriteNBytes+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <EF_void_EEPROM_WriteNBytes+0x8>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	7c 83       	std	Y+4, r23	; 0x04
    1b0a:	6b 83       	std	Y+3, r22	; 0x03
    1b0c:	4d 83       	std	Y+5, r20	; 0x05
	if(NULL != *RamAddr)
    1b0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b10:	fc 81       	ldd	r31, Y+4	; 0x04
    1b12:	80 81       	ld	r24, Z
    1b14:	88 23       	and	r24, r24
    1b16:	c9 f0       	breq	.+50     	; 0x1b4a <EF_void_EEPROM_WriteNBytes+0x54>
    1b18:	15 c0       	rjmp	.+42     	; 0x1b44 <EF_void_EEPROM_WriteNBytes+0x4e>
	{
		while(NoOfBytes !=  0)
		{
			EF_void_EEPROM_WriteByte(eeprom_Address,
    1b1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1e:	20 81       	ld	r18, Z
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	62 2f       	mov	r22, r18
    1b26:	0e 94 ab 0c 	call	0x1956	; 0x1956 <EF_void_EEPROM_WriteByte>
					            *RamAddr);  /* Write a byte from RAM to EEPROM       	   */
			eeprom_Address++;               /* Increment the EEprom Address 			   */
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
			RamAddr++;                      /* Increment the RAM Address 				   */
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
			NoOfBytes--;                    /* Decrement NoOfBytes after writing each Byte */
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	81 50       	subi	r24, 0x01	; 1
    1b42:	8d 83       	std	Y+5, r24	; 0x05
 ***********************************************************************/
void EF_void_EEPROM_WriteNBytes(U16_t eeprom_Address, U8_t *RamAddr, S8_t NoOfBytes)
{
	if(NULL != *RamAddr)
	{
		while(NoOfBytes !=  0)
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	88 23       	and	r24, r24
    1b48:	41 f7       	brne	.-48     	; 0x1b1a <EF_void_EEPROM_WriteNBytes+0x24>
			eeprom_Address++;               /* Increment the EEprom Address 			   */
			RamAddr++;                      /* Increment the RAM Address 				   */
			NoOfBytes--;                    /* Decrement NoOfBytes after writing each Byte */
		}
	}
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <EF_void_EEPROM_ReadNBytes>:
 *
 * Return Value: void.
 * Note        : void.
 ***********************************************************************/
void EF_void_EEPROM_ReadNBytes(U16_t EepromAddr, U8_t *RamAddr, S8_t NoOfBytes)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <EF_void_EEPROM_ReadNBytes+0x6>
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <EF_void_EEPROM_ReadNBytes+0x8>
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	7c 83       	std	Y+4, r23	; 0x04
    1b6e:	6b 83       	std	Y+3, r22	; 0x03
    1b70:	4d 83       	std	Y+5, r20	; 0x05
	if(NULL != *RamAddr)
    1b72:	eb 81       	ldd	r30, Y+3	; 0x03
    1b74:	fc 81       	ldd	r31, Y+4	; 0x04
    1b76:	80 81       	ld	r24, Z
    1b78:	88 23       	and	r24, r24
    1b7a:	c1 f0       	breq	.+48     	; 0x1bac <EF_void_EEPROM_ReadNBytes+0x52>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <EF_void_EEPROM_ReadNBytes+0x4c>
	{
		while(NoOfBytes !=  0)
		{
			*RamAddr = EF_u8_EPROM_ReadByte(EepromAddr); /* Read a byte from EEPROM to RAM 			 */
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <EF_u8_EPROM_ReadByte>
    1b86:	eb 81       	ldd	r30, Y+3	; 0x03
    1b88:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8a:	80 83       	st	Z, r24
			EepromAddr++;                             /* Increment the EEprom Address				 */
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
			RamAddr++;                                /* Increment the RAM Address 				   	 */
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
			NoOfBytes--;                              /* Decrement NoOfBytes after Reading each Byte */
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	81 50       	subi	r24, 0x01	; 1
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
 ***********************************************************************/
void EF_void_EEPROM_ReadNBytes(U16_t EepromAddr, U8_t *RamAddr, S8_t NoOfBytes)
{
	if(NULL != *RamAddr)
	{
		while(NoOfBytes !=  0)
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	88 23       	and	r24, r24
    1baa:	49 f7       	brne	.-46     	; 0x1b7e <EF_void_EEPROM_ReadNBytes+0x24>
			EepromAddr++;                             /* Increment the EEprom Address				 */
			RamAddr++;                                /* Increment the RAM Address 				   	 */
			NoOfBytes--;                              /* Decrement NoOfBytes after Reading each Byte */
		}
	}
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <EF_void_EEPROM_Erase>:
 *
 * Return Value: void.
 * Note        : void.
 ***********************************************************************/
void EF_void_EEPROM_Erase(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <EF_void_EEPROM_Erase+0x6>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	U16_t eeprom_address;
	for(eeprom_address=0; eeprom_address < MAX_EEPROM_SIZE; eeprom_address++)
    1bc6:	1a 82       	std	Y+2, r1	; 0x02
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	0a c0       	rjmp	.+20     	; 0x1be0 <EF_void_EEPROM_Erase+0x24>
	{
		EF_void_EEPROM_WriteByte(eeprom_address,0xff);     /* Write Each memory location with OxFF */
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	6f ef       	ldi	r22, 0xFF	; 255
    1bd2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <EF_void_EEPROM_WriteByte>
 * Note        : void.
 ***********************************************************************/
void EF_void_EEPROM_Erase(void)
{
	U16_t eeprom_address;
	for(eeprom_address=0; eeprom_address < MAX_EEPROM_SIZE; eeprom_address++)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	24 e0       	ldi	r18, 0x04	; 4
    1be6:	80 30       	cpi	r24, 0x00	; 0
    1be8:	92 07       	cpc	r25, r18
    1bea:	80 f3       	brcs	.-32     	; 0x1bcc <EF_void_EEPROM_Erase+0x10>
	{
		EF_void_EEPROM_WriteByte(eeprom_address,0xff);     /* Write Each memory location with OxFF */
	}
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <EF_void_I2C_Write>:
 * Return Value: Void
 *
 * Notes:
 ***********************************************************************/
void EF_void_I2C_Write(U8_t data)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	0f 92       	push	r0
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	89 83       	std	Y+1, r24	; 0x01
	/* put the data in TW data register */
	TWDR = data;
    1c02:	e3 e2       	ldi	r30, 0x23	; 35
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	80 83       	st	Z, r24
	/* to start sending Byte */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c0a:	e6 e5       	ldi	r30, 0x56	; 86
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	84 e8       	ldi	r24, 0x84	; 132
    1c10:	80 83       	st	Z, r24
	/* Polling until the byte is transmitted completely */
	while((TWCR & (1 << TWINT)) == 0 );
    1c12:	e6 e5       	ldi	r30, 0x56	; 86
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	88 23       	and	r24, r24
    1c1a:	dc f7       	brge	.-10     	; 0x1c12 <EF_void_I2C_Write+0x1c>

}
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <EF_void_I2C_Start>:
 * Return Value: Void
 *
 * Notes:
 ***********************************************************************/
void EF_void_I2C_Start(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	/* clear Interrupt Flag, start condition bit and Enable Module */
	TWCR = (1<< TWINT) | (1<<TWSTA) | (1<<TWEN);
    1c2c:	e6 e5       	ldi	r30, 0x56	; 86
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	84 ea       	ldi	r24, 0xA4	; 164
    1c32:	80 83       	st	Z, r24
	/* Polling until the start condition is transmitted completely */
	while((TWCR & (1 << TWINT)) == 0);
    1c34:	e6 e5       	ldi	r30, 0x56	; 86
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	88 23       	and	r24, r24
    1c3c:	dc f7       	brge	.-10     	; 0x1c34 <EF_void_I2C_Start+0x10>
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <EF_void_I2C_Stop>:
 * Return Value: Void
 *
 * Notes:
 ***********************************************************************/
void EF_void_I2C_Stop(void)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<< TWINT) | (1<< TWEN) | (1<< TWSTO) ;
    1c4c:	e6 e5       	ldi	r30, 0x56	; 86
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	84 e9       	ldi	r24, 0x94	; 148
    1c52:	80 83       	st	Z, r24
}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <EF_void_I2C_Init>:
 * Return Value: Void
 *
 * Notes:
 ***********************************************************************/
void EF_void_I2C_Init(void)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0x00;				/* make prescaler =1	   */
    1c62:	e1 e2       	ldi	r30, 0x21	; 33
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	10 82       	st	Z, r1
	TWBR = 32;//0x47;                /* Baud rate configuration */
    1c68:	e0 e2       	ldi	r30, 0x20	; 32
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 e2       	ldi	r24, 0x20	; 32
    1c6e:	80 83       	st	Z, r24
	TWCR = (1<< TWEN);          /* Enable I2C Module       */
    1c70:	e6 e5       	ldi	r30, 0x56	; 86
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	84 e0       	ldi	r24, 0x04	; 4
    1c76:	80 83       	st	Z, r24
}
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <EF_U8_I2C_Read_Byte>:
 * Return Value: Void
 *
 * Notes: ACK Parameter should be 1 0r 0
 ***********************************************************************/
U8_t EF_U8_I2C_Read_Byte (BOOLEAN ACK)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	89 83       	std	Y+1, r24	; 0x01
	/* to start receiving Byte */
	if(ACK)
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	88 23       	and	r24, r24
    1c8e:	89 f0       	breq	.+34     	; 0x1cb2 <EF_U8_I2C_Read_Byte+0x34>
	{
		TWCR = (1<< TWINT) | (1<< TWEN) | (ACK<< TWEA) ;
    1c90:	e6 e5       	ldi	r30, 0x56	; 86
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	00 24       	eor	r0, r0
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	07 94       	ror	r0
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	07 94       	ror	r0
    1ca8:	98 2f       	mov	r25, r24
    1caa:	80 2d       	mov	r24, r0
    1cac:	84 68       	ori	r24, 0x84	; 132
    1cae:	80 83       	st	Z, r24
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <EF_U8_I2C_Read_Byte+0x3c>
	}
	else
	{
		TWCR = (1<< TWINT) | (1<< TWEN) ;
    1cb2:	e6 e5       	ldi	r30, 0x56	; 86
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	84 e8       	ldi	r24, 0x84	; 132
    1cb8:	80 83       	st	Z, r24
	}
	/* Polling until the byte is received completely */
	while((TWCR & (1 << TWINT)) == 0);
    1cba:	e6 e5       	ldi	r30, 0x56	; 86
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	88 23       	and	r24, r24
    1cc2:	dc f7       	brge	.-10     	; 0x1cba <EF_U8_I2C_Read_Byte+0x3c>
	return TWDR;
    1cc4:	e3 e2       	ldi	r30, 0x23	; 35
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z

}
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <EF_void_InputCapture_Init>:
* PARAMETERS  : None
*
* Return Value: None
***********************************************************************/
 extern void EF_void_InputCapture_Init(void)
 {
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	 /* make Input capture pin pulling up */
	 /*TODO : pull up or down (i/p 0r o/p)*/
//	 EF_S8_DIO_SetPin(INPUT_CAPTURE_PORT, INPUT_CAPTURE_PIN);
	 /* using Normal Mode in Timer1 */
	 TCCR1A = 0;
    1cda:	ef e4       	ldi	r30, 0x4F	; 79
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	10 82       	st	Z, r1
 }
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <EF_BOOLEAN_InputCapture_GetPulse>:
 * NOTE        : 1-returned pulse is number of clock cycles ,to convert it
 * 				   to time using Time_pulse = pulse*(1/(F_CPU/prescaler))
 * 				 2-don't forget to init. Timer
 ***********************************************************************/
 extern BOOLEAN EF_BOOLEAN_InputCapture_GetPulse(U16_t* Pulse_ptr, U16_t TimeOut)
 {
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	27 97       	sbiw	r28, 0x07	; 7
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	9d 83       	std	Y+5, r25	; 0x05
    1cfc:	8c 83       	std	Y+4, r24	; 0x04
    1cfe:	7f 83       	std	Y+7, r23	; 0x07
    1d00:	6e 83       	std	Y+6, r22	; 0x06
	/* to save the first edge time in it */
	U16_t Pulse_FirstEdge = 0;
    1d02:	1b 82       	std	Y+3, r1	; 0x03
    1d04:	1a 82       	std	Y+2, r1	; 0x02
	/* Status flag helps in return */
	BOOLEAN GetPulseFlag = SUCESS;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01

	 /* select edge (rising) and prescaler */
	TCCR1B = (1<<INPUT_CAPTURE_EDGE_SELECT)|(PRESCALER_VALUE);
    1d0a:	ee e4       	ldi	r30, 0x4E	; 78
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	83 e4       	ldi	r24, 0x43	; 67
    1d10:	80 83       	st	Z, r24

	/* using Special Timer to be unstuck */
	EF_void_TimerCreate(INPUT_CAPTURE_ID, TimeOut);
    1d12:	2e 81       	ldd	r18, Y+6	; 0x06
    1d14:	3f 81       	ldd	r19, Y+7	; 0x07
    1d16:	85 e0       	ldi	r24, 0x05	; 5
    1d18:	b9 01       	movw	r22, r18
    1d1a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EF_void_TimerCreate>
	EF_void_TimerStart(INPUT_CAPTURE_ID);
    1d1e:	85 e0       	ldi	r24, 0x05	; 5
    1d20:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

	/* make Input capture unstuck  + Wait for the wanted  Edge */
	while( (!(TIFR&(1<<ICF1)))  && (!EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID)) );
    1d24:	e8 e5       	ldi	r30, 0x58	; 88
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	80 72       	andi	r24, 0x20	; 32
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	29 f4       	brne	.+10     	; 0x1d40 <EF_BOOLEAN_InputCapture_GetPulse+0x5a>
    1d36:	85 e0       	ldi	r24, 0x05	; 5
    1d38:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1d3c:	88 23       	and	r24, r24
    1d3e:	91 f3       	breq	.-28     	; 0x1d24 <EF_BOOLEAN_InputCapture_GetPulse+0x3e>

	/* extracting from the previous loop because of receiving byte or Time out*/
	if (EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID) == TRUE)
    1d40:	85 e0       	ldi	r24, 0x05	; 5
    1d42:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <EF_BOOLEAN_InputCapture_GetPulse+0x66>
	{
		GetPulseFlag = FAILURE;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
	}

	/* stop the Input Capture timer */
	EF_void_TimerStop(INPUT_CAPTURE_ID);
    1d4c:	85 e0       	ldi	r24, 0x05	; 5
    1d4e:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
	EF_void_TimerReset(INPUT_CAPTURE_ID);
    1d52:	85 e0       	ldi	r24, 0x05	; 5
    1d54:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>
	/* get the time of first edge */
	Pulse_FirstEdge = ICR1;
    1d58:	e6 e4       	ldi	r30, 0x46	; 70
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	9b 83       	std	Y+3, r25	; 0x03
    1d62:	8a 83       	std	Y+2, r24	; 0x02
	/* clear flag by write one in it */
	TIFR |= 1<<ICF1;
    1d64:	a8 e5       	ldi	r26, 0x58	; 88
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 e5       	ldi	r30, 0x58	; 88
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 62       	ori	r24, 0x20	; 32
    1d70:	8c 93       	st	X, r24

	/*
	 * to get the pulse,get the time of second edge and subtract it from the first edge
	 * but check first for getting the first edge correctly
	 * * */
	if (GetPulseFlag == SUCESS)
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	e1 f5       	brne	.+120    	; 0x1df0 <EF_BOOLEAN_InputCapture_GetPulse+0x10a>
	{
		 /* convert the edge (falling ) and prescaler */
		TCCR1B = (0<<INPUT_CAPTURE_EDGE_SELECT)|(PRESCALER_VALUE);
    1d78:	ee e4       	ldi	r30, 0x4E	; 78
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	80 83       	st	Z, r24
		/* using Special Timer to be unstuck */
		EF_void_TimerCreate(INPUT_CAPTURE_ID, TimeOut);
    1d80:	2e 81       	ldd	r18, Y+6	; 0x06
    1d82:	3f 81       	ldd	r19, Y+7	; 0x07
    1d84:	85 e0       	ldi	r24, 0x05	; 5
    1d86:	b9 01       	movw	r22, r18
    1d88:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EF_void_TimerCreate>
		EF_void_TimerStart(INPUT_CAPTURE_ID);
    1d8c:	85 e0       	ldi	r24, 0x05	; 5
    1d8e:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

		/* make Input capture unstuck  + Wait for the wanted  Edge */
		while( (!(TIFR&(1<<ICF1))) && (!EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID)) );
    1d92:	e8 e5       	ldi	r30, 0x58	; 88
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	80 72       	andi	r24, 0x20	; 32
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	29 f4       	brne	.+10     	; 0x1dae <EF_BOOLEAN_InputCapture_GetPulse+0xc8>
    1da4:	85 e0       	ldi	r24, 0x05	; 5
    1da6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1daa:	88 23       	and	r24, r24
    1dac:	91 f3       	breq	.-28     	; 0x1d92 <EF_BOOLEAN_InputCapture_GetPulse+0xac>

		/* extracting from the previous loop because of receiving byte or Time out*/
		if (EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID) == TRUE)
    1dae:	85 e0       	ldi	r24, 0x05	; 5
    1db0:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <EF_BOOLEAN_InputCapture_GetPulse+0xd4>
		{
			GetPulseFlag = FAILURE;
    1db8:	19 82       	std	Y+1, r1	; 0x01
		}

		/* stop the Input Capture timer */
		EF_void_TimerStop(INPUT_CAPTURE_ID);
    1dba:	85 e0       	ldi	r24, 0x05	; 5
    1dbc:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
		EF_void_TimerReset(INPUT_CAPTURE_ID);
    1dc0:	85 e0       	ldi	r24, 0x05	; 5
    1dc2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>
		/* get the pulse by subtract the Second Edge from First Edge*/
		*Pulse_ptr = ICR1 - Pulse_FirstEdge;
    1dc6:	e6 e4       	ldi	r30, 0x46	; 70
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	20 81       	ld	r18, Z
    1dcc:	31 81       	ldd	r19, Z+1	; 0x01
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	a9 01       	movw	r20, r18
    1dd4:	48 1b       	sub	r20, r24
    1dd6:	59 0b       	sbc	r21, r25
    1dd8:	ca 01       	movw	r24, r20
    1dda:	ec 81       	ldd	r30, Y+4	; 0x04
    1ddc:	fd 81       	ldd	r31, Y+5	; 0x05
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
		/* clear flag by write one in it */
		TIFR |= 1<<ICF1;
    1de2:	a8 e5       	ldi	r26, 0x58	; 88
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e8 e5       	ldi	r30, 0x58	; 88
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	80 62       	ori	r24, 0x20	; 32
    1dee:	8c 93       	st	X, r24
	}

	return GetPulseFlag;
    1df0:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1df2:	27 96       	adiw	r28, 0x07	; 7
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <EF_BOOLEAN_InputCapture_GetPeriod>:
 * 				      to time using Time_pulse = pulse*(1/(F_CPU/prescaler))
 * 				    2-don't forget to init. Timer
 *
 ***********************************************************************/
 extern BOOLEAN EF_BOOLEAN_InputCapture_GetPeriod(U16_t* Period_ptr, U16_t TimeOut)
 {
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	27 97       	sbiw	r28, 0x07	; 7
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	9d 83       	std	Y+5, r25	; 0x05
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	7f 83       	std	Y+7, r23	; 0x07
    1e1e:	6e 83       	std	Y+6, r22	; 0x06
	 /* to save the first edge time in it */
	U16_t Period_FirstEdge = 0;
    1e20:	1b 82       	std	Y+3, r1	; 0x03
    1e22:	1a 82       	std	Y+2, r1	; 0x02
	/* Status flag helps in return */
	BOOLEAN GetPeriodFlag = SUCESS;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01

	 /* select edge (rising) and prescaler */
	TCCR1B = (1<<INPUT_CAPTURE_EDGE_SELECT)|(PRESCALER_VALUE);
    1e28:	ee e4       	ldi	r30, 0x4E	; 78
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	83 e4       	ldi	r24, 0x43	; 67
    1e2e:	80 83       	st	Z, r24

	/* using Special Timer to be unstuck */
	EF_void_TimerCreate(INPUT_CAPTURE_ID, TimeOut);
    1e30:	2e 81       	ldd	r18, Y+6	; 0x06
    1e32:	3f 81       	ldd	r19, Y+7	; 0x07
    1e34:	85 e0       	ldi	r24, 0x05	; 5
    1e36:	b9 01       	movw	r22, r18
    1e38:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EF_void_TimerCreate>
	EF_void_TimerStart(INPUT_CAPTURE_ID);
    1e3c:	85 e0       	ldi	r24, 0x05	; 5
    1e3e:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

	/* make Input capture unstuck  + Wait for the wanted  Edge */
	while( (!(TIFR&(1<<ICF1)))  && (!EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID)) );
    1e42:	e8 e5       	ldi	r30, 0x58	; 88
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	80 72       	andi	r24, 0x20	; 32
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <EF_BOOLEAN_InputCapture_GetPeriod+0x5a>
    1e54:	85 e0       	ldi	r24, 0x05	; 5
    1e56:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1e5a:	88 23       	and	r24, r24
    1e5c:	91 f3       	breq	.-28     	; 0x1e42 <EF_BOOLEAN_InputCapture_GetPeriod+0x3e>

	/* extracting from the previous loop because of receiving byte or Time out*/
	if (EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID) == TRUE)
    1e5e:	85 e0       	ldi	r24, 0x05	; 5
    1e60:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <EF_BOOLEAN_InputCapture_GetPeriod+0x66>
	{
		GetPeriodFlag = FAILURE;
    1e68:	19 82       	std	Y+1, r1	; 0x01
	}

	/* stop the Input Capture timer */
	EF_void_TimerStop(INPUT_CAPTURE_ID);
    1e6a:	85 e0       	ldi	r24, 0x05	; 5
    1e6c:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
	EF_void_TimerReset(INPUT_CAPTURE_ID);
    1e70:	85 e0       	ldi	r24, 0x05	; 5
    1e72:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>
	/* get the time of first edge */
	Period_FirstEdge = ICR1;
    1e76:	e6 e4       	ldi	r30, 0x46	; 70
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	9b 83       	std	Y+3, r25	; 0x03
    1e80:	8a 83       	std	Y+2, r24	; 0x02
	/* clear flag by write one in it */
	TIFR |= 1<<ICF1;
    1e82:	a8 e5       	ldi	r26, 0x58	; 88
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e8 e5       	ldi	r30, 0x58	; 88
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 62       	ori	r24, 0x20	; 32
    1e8e:	8c 93       	st	X, r24

	/*
	 * to get the period, waiting the next rising edge and then subtract
	 * the second time from the first one to get the time period
	 * * */
	if (GetPeriodFlag == SUCESS)
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	c1 f5       	brne	.+112    	; 0x1f06 <EF_BOOLEAN_InputCapture_GetPeriod+0x102>
	{

		/* using Special Timer to be unstuck */
		EF_void_TimerCreate(INPUT_CAPTURE_ID, TimeOut);
    1e96:	2e 81       	ldd	r18, Y+6	; 0x06
    1e98:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9a:	85 e0       	ldi	r24, 0x05	; 5
    1e9c:	b9 01       	movw	r22, r18
    1e9e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EF_void_TimerCreate>
		EF_void_TimerStart(INPUT_CAPTURE_ID);
    1ea2:	85 e0       	ldi	r24, 0x05	; 5
    1ea4:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

		/* make Input capture unstuck  + Wait for the wanted  Edge */
		while( (!(TIFR&(1<<ICF1)))  && (!EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID)) );
    1ea8:	e8 e5       	ldi	r30, 0x58	; 88
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	80 72       	andi	r24, 0x20	; 32
    1eb4:	90 70       	andi	r25, 0x00	; 0
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	29 f4       	brne	.+10     	; 0x1ec4 <EF_BOOLEAN_InputCapture_GetPeriod+0xc0>
    1eba:	85 e0       	ldi	r24, 0x05	; 5
    1ebc:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1ec0:	88 23       	and	r24, r24
    1ec2:	91 f3       	breq	.-28     	; 0x1ea8 <EF_BOOLEAN_InputCapture_GetPeriod+0xa4>

		/* extracting from the previous loop because of receiving byte or Time out*/
		if (EF_BOOLEAN_TimerCheck(INPUT_CAPTURE_ID) == TRUE)
    1ec4:	85 e0       	ldi	r24, 0x05	; 5
    1ec6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <EF_BOOLEAN_InputCapture_GetPeriod+0xcc>
		{
			GetPeriodFlag = FAILURE;
    1ece:	19 82       	std	Y+1, r1	; 0x01
		}

		/* stop the Input Capture timer */
		EF_void_TimerStop(INPUT_CAPTURE_ID);
    1ed0:	85 e0       	ldi	r24, 0x05	; 5
    1ed2:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
		EF_void_TimerReset(INPUT_CAPTURE_ID);
    1ed6:	85 e0       	ldi	r24, 0x05	; 5
    1ed8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>
		/* get the pulse by subtract the Second Edge from First Edge*/
		*Period_ptr = ICR1 - Period_FirstEdge;
    1edc:	e6 e4       	ldi	r30, 0x46	; 70
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	20 81       	ld	r18, Z
    1ee2:	31 81       	ldd	r19, Z+1	; 0x01
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	a9 01       	movw	r20, r18
    1eea:	48 1b       	sub	r20, r24
    1eec:	59 0b       	sbc	r21, r25
    1eee:	ca 01       	movw	r24, r20
    1ef0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
		/* clear flag by write one in it */
		TIFR |= 1<<ICF1;
    1ef8:	a8 e5       	ldi	r26, 0x58	; 88
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e8 e5       	ldi	r30, 0x58	; 88
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	80 62       	ori	r24, 0x20	; 32
    1f04:	8c 93       	st	X, r24
	}

	return GetPeriodFlag;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1f08:	27 96       	adiw	r28, 0x07	; 7
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <EF_void_PWM_init>:
 *               Either Timer 0 or Timer 2.
 *
 * Return Value: Nothing
 ***********************************************************************/
void EF_void_PWM_init(U8_t u8TimerNumber)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <EF_void_PWM_init+0x6>
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	89 83       	std	Y+1, r24	; 0x01
	switch(u8TimerNumber)
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3b 83       	std	Y+3, r19	; 0x03
    1f30:	2a 83       	std	Y+2, r18	; 0x02
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	d1 f1       	breq	.+116    	; 0x1fb0 <EF_void_PWM_init+0x96>
    1f3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <EF_void_PWM_init+0x36>
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	f9 f0       	breq	.+62     	; 0x1f8c <EF_void_PWM_init+0x72>
    1f4e:	63 c0       	rjmp	.+198    	; 0x2016 <EF_void_PWM_init+0xfc>
    1f50:	2a 81       	ldd	r18, Y+2	; 0x02
    1f52:	3b 81       	ldd	r19, Y+3	; 0x03
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	31 05       	cpc	r19, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <EF_void_PWM_init+0x42>
    1f5a:	44 c0       	rjmp	.+136    	; 0x1fe4 <EF_void_PWM_init+0xca>
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	91 05       	cpc	r25, r1
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <EF_void_PWM_init+0x4e>
    1f66:	57 c0       	rjmp	.+174    	; 0x2016 <EF_void_PWM_init+0xfc>
	{
#ifdef ENABLE_TIMER_2
	case TIMER_2:
		/* OC2 PIN TO BE OUTPUT */
		TIMER2_DDR |= (1<<OC2_OUTPUT_SETTER);
    1f68:	a1 e3       	ldi	r26, 0x31	; 49
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e1 e3       	ldi	r30, 0x31	; 49
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 68       	ori	r24, 0x80	; 128
    1f74:	8c 93       	st	X, r24
		/*Disable Timer 2*/
		TCCR2 = DISABLE_MODULE_VALUE;
    1f76:	e5 e4       	ldi	r30, 0x45	; 69
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	10 82       	st	Z, r1
		/* Setting pre scaler */
		TCCR2 = PRESCLR1_VALUE|(FAST_PWM)|(NON_INVERT);
    1f7c:	e5 e4       	ldi	r30, 0x45	; 69
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	89 e6       	ldi	r24, 0x69	; 105
    1f82:	80 83       	st	Z, r24
		/* Initializing the timer with zero */
		TCNT2 = ZER0_INITIALIZER;
    1f84:	e4 e4       	ldi	r30, 0x44	; 68
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	10 82       	st	Z, r1
    1f8a:	45 c0       	rjmp	.+138    	; 0x2016 <EF_void_PWM_init+0xfc>
		break;
#endif
#ifdef ENABLE_TIMER_0
	case TIMER_0:
		/* OC0 PIN TO BE OUTPUT */
		TIMER0_DDR |= (1<<OC0_OUTPUT_SETTER);
    1f8c:	a7 e3       	ldi	r26, 0x37	; 55
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e7 e3       	ldi	r30, 0x37	; 55
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 60       	ori	r24, 0x08	; 8
    1f98:	8c 93       	st	X, r24
		/* Disable Timer 0 */
		TCCR0 = DISABLE_MODULE_VALUE;
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	10 82       	st	Z, r1
		/* Setting pre scaler */
		TCCR0 = (PRESCLR64_VALUE)|(FAST_PWM)|(NON_INVERT);
    1fa0:	e3 e5       	ldi	r30, 0x53	; 83
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8b e6       	ldi	r24, 0x6B	; 107
    1fa6:	80 83       	st	Z, r24
		/* Initializing the timer with zero */
		TCNT0 = ZER0_INITIALIZER;
    1fa8:	e2 e5       	ldi	r30, 0x52	; 82
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	10 82       	st	Z, r1
    1fae:	33 c0       	rjmp	.+102    	; 0x2016 <EF_void_PWM_init+0xfc>

#endif
#ifdef ENABLE_TIMER_1A
	case TIMER_1A:
		/* OC0 PIN TO BE OUTPUT */
		TIMER1A_DDR |= (1<<OC1A_OUTPUT_SETTER);
    1fb0:	a1 e3       	ldi	r26, 0x31	; 49
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e1 e3       	ldi	r30, 0x31	; 49
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 62       	ori	r24, 0x20	; 32
    1fbc:	8c 93       	st	X, r24

		/* Setting pre scaler */
		TCCR1A |= (1 << COM1A1) | (1 << WGM10);
    1fbe:	af e4       	ldi	r26, 0x4F	; 79
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ef e4       	ldi	r30, 0x4F	; 79
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	81 68       	ori	r24, 0x81	; 129
    1fca:	8c 93       	st	X, r24
		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
    1fcc:	ae e4       	ldi	r26, 0x4E	; 78
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	ee e4       	ldi	r30, 0x4E	; 78
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8b 60       	ori	r24, 0x0B	; 11
    1fd8:	8c 93       	st	X, r24
		/* Initializing the timer with zero */
		TCNT1 = ZER0_INITIALIZER;
    1fda:	ec e4       	ldi	r30, 0x4C	; 76
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	11 82       	std	Z+1, r1	; 0x01
    1fe0:	10 82       	st	Z, r1
    1fe2:	19 c0       	rjmp	.+50     	; 0x2016 <EF_void_PWM_init+0xfc>

#endif
#ifdef ENABLE_TIMER_1B
	case TIMER_1B:
		/* OC0 PIN TO BE OUTPUT */
		TIMER1B_DDR |= (1<<OC1B_OUTPUT_SETTER);
    1fe4:	a1 e3       	ldi	r26, 0x31	; 49
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e1 e3       	ldi	r30, 0x31	; 49
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	80 61       	ori	r24, 0x10	; 16
    1ff0:	8c 93       	st	X, r24
		/* Setting pre scaler */
		TCCR1A |= (1 << COM1B1) | (1 << WGM10);
    1ff2:	af e4       	ldi	r26, 0x4F	; 79
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	ef e4       	ldi	r30, 0x4F	; 79
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	81 62       	ori	r24, 0x21	; 33
    1ffe:	8c 93       	st	X, r24
		TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
    2000:	ae e4       	ldi	r26, 0x4E	; 78
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ee e4       	ldi	r30, 0x4E	; 78
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8b 60       	ori	r24, 0x0B	; 11
    200c:	8c 93       	st	X, r24
		/* Initializing the timer with zero */
		TCNT1 = ZER0_INITIALIZER;
    200e:	ec e4       	ldi	r30, 0x4C	; 76
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	11 82       	std	Z+1, r1	; 0x01
    2014:	10 82       	st	Z, r1
#endif
	default:
		break;
	}
	return;
}
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <EF_void_PWM_SetDutyValue>:
 * PARAMETER 2 : The number of 8 bit timer. Either Timer 0 or Timer 2.
 *
 * Return Value: Nothing
 ******************************************************************************/
void EF_void_PWM_SetDutyValue(U8_t DutyValue, U8_t u8TimerNumber)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <EF_void_PWM_SetDutyValue+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <EF_void_PWM_SetDutyValue+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	6a 83       	std	Y+2, r22	; 0x02

	switch(u8TimerNumber)
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	3c 83       	std	Y+4, r19	; 0x04
    203a:	2b 83       	std	Y+3, r18	; 0x03
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	91 05       	cpc	r25, r1
    2044:	f1 f0       	breq	.+60     	; 0x2082 <EF_void_PWM_SetDutyValue+0x60>
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	3c 81       	ldd	r19, Y+4	; 0x04
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	2c f4       	brge	.+10     	; 0x205a <EF_void_PWM_SetDutyValue+0x38>
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	81 f0       	breq	.+32     	; 0x2078 <EF_void_PWM_SetDutyValue+0x56>
    2058:	23 c0       	rjmp	.+70     	; 0x20a0 <EF_void_PWM_SetDutyValue+0x7e>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	b9 f0       	breq	.+46     	; 0x2092 <EF_void_PWM_SetDutyValue+0x70>
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	91 05       	cpc	r25, r1
    206c:	c9 f4       	brne	.+50     	; 0x20a0 <EF_void_PWM_SetDutyValue+0x7e>
		/*Output Compare Register � OCR2
		 * contains an 8-bit value that is continuously compared
		 * with the counter value (TCNT2). A match can be used to
		 * generate an output compare interrupt
		 * */
		OCR2 = DutyValue;
    206e:	e3 e4       	ldi	r30, 0x43	; 67
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <EF_void_PWM_SetDutyValue+0x7e>
		/*Output Compare Register � OCR0
		 * contains an 8-bit value that is continuously compared
		 * with the counter value (TCNT0). A match can be used to
		 * generate an output compare interrupt
		 * */
		OCR0 = DutyValue;
    2078:	ec e5       	ldi	r30, 0x5C	; 92
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <EF_void_PWM_SetDutyValue+0x7e>
		/*Output Compare Register � OCR0
		 * contains an 8-bit value that is continuously compared
		 * with the counter value (TCNT0). A match can be used to
		 * generate an output compare interrupt
		 * */
		OCR1A = DutyValue;
    2082:	ea e4       	ldi	r30, 0x4A	; 74
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <EF_void_PWM_SetDutyValue+0x7e>
		/*Output Compare Register � OCR0
		 * contains an 8-bit value that is continuously compared
		 * with the counter value (TCNT0). A match can be used to
		 * generate an output compare interrupt
		 * */
		OCR1B = DutyValue;
    2092:	e8 e4       	ldi	r30, 0x48	; 72
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
#endif
	default:
		break;
	}
	return;
}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <EF_void_PWM_SetDutyCycle>:
 * PARAMETER 2 : The number of 8 bit timer. Either Timer 0 or Timer 2.
 *
 * Return Value: Nothing
 ******************************************************************************/
void EF_void_PWM_SetDutyCycle(U8_t DutyCycle, U8_t u8TimerNumber)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <EF_void_PWM_SetDutyCycle+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <EF_void_PWM_SetDutyCycle+0x8>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	6b 83       	std	Y+3, r22	; 0x03
	U8_t PWM_actual_Duty ;           //duty cycle is represented by a number from 0->255


	PWM_actual_Duty = (DutyCycle * TIMER_MAX_VALUE) / DUTY_CYCLE_MAX_VALUE;
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	48 2f       	mov	r20, r24
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	ca 01       	movw	r24, r20
    20c8:	9c 01       	movw	r18, r24
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	c9 01       	movw	r24, r18
    20d0:	96 95       	lsr	r25
    20d2:	98 2f       	mov	r25, r24
    20d4:	88 27       	eor	r24, r24
    20d6:	97 95       	ror	r25
    20d8:	87 95       	ror	r24
    20da:	82 1b       	sub	r24, r18
    20dc:	93 0b       	sbc	r25, r19
    20de:	84 0f       	add	r24, r20
    20e0:	95 1f       	adc	r25, r21
    20e2:	24 e6       	ldi	r18, 0x64	; 100
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	b9 01       	movw	r22, r18
    20e8:	0e 94 38 38 	call	0x7070	; 0x7070 <__divmodhi4>
    20ec:	cb 01       	movw	r24, r22
    20ee:	89 83       	std	Y+1, r24	; 0x01
	/*Output Compare Register OCRx
	 * contains an 8-bit value that is continuously compared
	 * with the counter value (TCNTx). A match can be used to
	 * generate an output compare interrupt
	 **/
	switch(u8TimerNumber)
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3d 83       	std	Y+5, r19	; 0x05
    20f8:	2c 83       	std	Y+4, r18	; 0x04
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	51 f0       	breq	.+20     	; 0x2116 <EF_void_PWM_SetDutyCycle+0x68>
    2102:	2c 81       	ldd	r18, Y+4	; 0x04
    2104:	3d 81       	ldd	r19, Y+5	; 0x05
    2106:	23 30       	cpi	r18, 0x03	; 3
    2108:	31 05       	cpc	r19, r1
    210a:	49 f4       	brne	.+18     	; 0x211e <EF_void_PWM_SetDutyCycle+0x70>
	{

#ifdef ENABLE_TIMER_2
	case TIMER_2:
		OCR2 = PWM_actual_Duty;
    210c:	e3 e4       	ldi	r30, 0x43	; 67
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	80 83       	st	Z, r24
    2114:	04 c0       	rjmp	.+8      	; 0x211e <EF_void_PWM_SetDutyCycle+0x70>
		break;
#endif
#ifdef ENABLE_TIMER_0
	case TIMER_0:
		OCR0 = PWM_actual_Duty;
    2116:	ec e5       	ldi	r30, 0x5C	; 92
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	80 83       	st	Z, r24
		break;
#endif
	default:
		break;
	}
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <EF_SpiInit>:
* PARAMETERS  : U8_t DeviceType : 1 ----> Master
*                                 0 ----> Slave
* Return Value: void
**********************************************************************/
void EF_SpiInit(U8_t DeviceType)
{	
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	0f 92       	push	r0
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	89 83       	std	Y+1, r24	; 0x01
    SPCR = (1 << SPE)|(1 << DORD)|(1 << SPR1)|(1 << SPR0);
    213a:	ed e2       	ldi	r30, 0x2D	; 45
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	83 e6       	ldi	r24, 0x63	; 99
    2140:	80 83       	st	Z, r24
	if(MASTER_TYPE == DeviceType)
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	79 f4       	brne	.+30     	; 0x2166 <EF_SpiInit+0x38>
	{
        SPCR |= (1 << MSTR);   /* Set the device as Master */
    2148:	ad e2       	ldi	r26, 0x2D	; 45
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ed e2       	ldi	r30, 0x2D	; 45
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 61       	ori	r24, 0x10	; 16
    2154:	8c 93       	st	X, r24
        /* make (MOSI) PB5 & (SCK)PB7 & (SS)PB4 : output */
        SPI_DDR |= (1<<MOSI_BIT) | (1<<SS_BIT) | (1<<SCK_BIT);
    2156:	a7 e3       	ldi	r26, 0x37	; 55
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e7 e3       	ldi	r30, 0x37	; 55
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	80 6b       	ori	r24, 0xB0	; 176
    2162:	8c 93       	st	X, r24
    2164:	07 c0       	rjmp	.+14     	; 0x2174 <EF_SpiInit+0x46>
	}
	else
	{
		SPI_DDR |= (1<<MISO_BIT);		   /* Slave , make (MISO) PB6 : output */
    2166:	a7 e3       	ldi	r26, 0x37	; 55
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e7 e3       	ldi	r30, 0x37	; 55
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 64       	ori	r24, 0x40	; 64
    2172:	8c 93       	st	X, r24
	}

	/* using Special Timer to able some UART Function to be unstuck */
	EF_void_TimerCreate(SPI_TIMER_ID, SPI_TIMEOUT);
    2174:	87 e0       	ldi	r24, 0x07	; 7
    2176:	65 e0       	ldi	r22, 0x05	; 5
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EF_void_TimerCreate>

}
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <EF_SpiTransfer>:
*
*
* Return Value: Data User received
**********************************************************************/
U8_t EF_SpiTransfer(U8_t data)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    2192:	ef e2       	ldi	r30, 0x2F	; 47
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	80 83       	st	Z, r24
	while (!( SPSR & (1<<SPIF)))   /* Wait for empty transmit buffer */
    219a:	ee e2       	ldi	r30, 0x2E	; 46
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	88 23       	and	r24, r24
    21a2:	dc f7       	brge	.-10     	; 0x219a <EF_SpiTransfer+0x14>
	{};
	return SPDR;                     /* Put data into buffer, sends the data */
    21a4:	ef e2       	ldi	r30, 0x2F	; 47
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
}
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <EF_BOOLEAN_SpiTransfer>:
*
*
* Return Value: return True if Byte is received or false
**********************************************************************/
BOOLEAN EF_BOOLEAN_SpiTransfer(U8_t * returnedValue)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <EF_BOOLEAN_SpiTransfer+0x6>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	9b 83       	std	Y+3, r25	; 0x03
    21c0:	8a 83       	std	Y+2, r24	; 0x02
	/* TODO : test this function */
	BOOLEAN TransferFlag   = FALSE;
    21c2:	19 82       	std	Y+1, r1	; 0x01
	/* using Special Timer */
	EF_void_TimerStart(SPI_TIMER_ID);
    21c4:	87 e0       	ldi	r24, 0x07	; 7
    21c6:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

	SPDR = *returnedValue;
    21ca:	ef e2       	ldi	r30, 0x2F	; 47
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	aa 81       	ldd	r26, Y+2	; 0x02
    21d0:	bb 81       	ldd	r27, Y+3	; 0x03
    21d2:	8c 91       	ld	r24, X
    21d4:	80 83       	st	Z, r24
	/* make SPI unstuck  + Wait for empty transmit buffer */
    while( (!( SPSR & (1<<SPIF))) && (!EF_BOOLEAN_TimerCheck(SPI_TIMER_ID)) );
    21d6:	ee e2       	ldi	r30, 0x2E	; 46
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	88 23       	and	r24, r24
    21de:	2c f0       	brlt	.+10     	; 0x21ea <EF_BOOLEAN_SpiTransfer+0x38>
    21e0:	87 e0       	ldi	r24, 0x07	; 7
    21e2:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    21e6:	88 23       	and	r24, r24
    21e8:	b1 f3       	breq	.-20     	; 0x21d6 <EF_BOOLEAN_SpiTransfer+0x24>
    /* extracting from the previous loop because of receiving byte or Time out*/
    EF_void_TimerStop(SPI_TIMER_ID);
    21ea:	87 e0       	ldi	r24, 0x07	; 7
    21ec:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
    EF_void_TimerReset(SPI_TIMER_ID);
    21f0:	87 e0       	ldi	r24, 0x07	; 7
    21f2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>


    if  (!( SPSR & (1<<SPIF)))
    21f6:	ee e2       	ldi	r30, 0x2E	; 46
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 23       	and	r24, r24
    21fe:	14 f0       	brlt	.+4      	; 0x2204 <EF_BOOLEAN_SpiTransfer+0x52>
    {
    	/* TODO : make 0,1 #defined */
    	TransferFlag = 0;
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <EF_BOOLEAN_SpiTransfer+0x56>
    }
    else
    {
    	TransferFlag = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
    }
	*returnedValue = SPDR;
    2208:	ef e2       	ldi	r30, 0x2F	; 47
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	ea 81       	ldd	r30, Y+2	; 0x02
    2210:	fb 81       	ldd	r31, Y+3	; 0x03
    2212:	80 83       	st	Z, r24

	return TransferFlag;
    2214:	89 81       	ldd	r24, Y+1	; 0x01

}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <EF_void_TimerISRCallback>:
* Return Value: None
*
*  NOTE		  : "Don't forget putting Timer_ISR function in the startup code"
******************************************************************************/
static void EF_void_TimerISRCallback(void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	//count the enabled timer and if it reached the timeOut ,counter=0 and set timeOut Flag
	EF_void_TimersUpdate();
    222a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <EF_void_TimersUpdate>
}
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <EF_void_TimerDelete>:
*
* Return Value: None
*
******************************************************************************/
void EF_void_TimerDelete(U8_t timerNumber)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	89 83       	std	Y+1, r24	; 0x01
	timers_list[timerNumber].counter    = 0;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	c9 01       	movw	r24, r18
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	82 0f       	add	r24, r18
    224e:	93 1f       	adc	r25, r19
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	fc 01       	movw	r30, r24
    2258:	e8 5a       	subi	r30, 0xA8	; 168
    225a:	fd 4f       	sbci	r31, 0xFD	; 253
    225c:	11 82       	std	Z+1, r1	; 0x01
    225e:	10 82       	st	Z, r1
	timers_list[timerNumber].timeOut    = 0;
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	c9 01       	movw	r24, r18
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	fc 01       	movw	r30, r24
    2276:	e8 5a       	subi	r30, 0xA8	; 168
    2278:	fd 4f       	sbci	r31, 0xFD	; 253
    227a:	11 82       	std	Z+1, r1	; 0x01
    227c:	10 82       	st	Z, r1
	timers_list[timerNumber].isTimedout =  FALSE;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	c9 01       	movw	r24, r18
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	82 0f       	add	r24, r18
    228c:	93 1f       	adc	r25, r19
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	fc 01       	movw	r30, r24
    2294:	e4 5a       	subi	r30, 0xA4	; 164
    2296:	fd 4f       	sbci	r31, 0xFD	; 253
    2298:	10 82       	st	Z, r1
	timers_list[timerNumber].isEnables  =  FALSE;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	c9 01       	movw	r24, r18
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	fc 01       	movw	r30, r24
    22b0:	e3 5a       	subi	r30, 0xA3	; 163
    22b2:	fd 4f       	sbci	r31, 0xFD	; 253
    22b4:	10 82       	st	Z, r1
}
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <EF_void_TimerInit>:
*
* Return Value: None.
*
******************************************************************************/
void EF_void_TimerInit(void)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <EF_void_TimerInit+0x6>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
	U16_t timersCounter;
	//don't forget put ISR function in startup code
	EF_void_Timer_PORTinit();
    22c8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <EF_void_Timer_PORTinit>
	// set the timer interrupt callback
	EF_void_Timer_SetISRCallBack(EF_void_TimerISRCallback);
    22cc:	81 e1       	ldi	r24, 0x11	; 17
    22ce:	91 e1       	ldi	r25, 0x11	; 17
    22d0:	0e 94 0c 13 	call	0x2618	; 0x2618 <EF_void_Timer_SetISRCallBack>
	// set all Timers to the initial state
	for( timersCounter=0 ; timersCounter < MAX_NUMBER_OF_TIMERS ; timersCounter++ )
    22d4:	1a 82       	std	Y+2, r1	; 0x02
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	08 c0       	rjmp	.+16     	; 0x22ea <EF_void_TimerInit+0x2c>
	{
		EF_void_TimerDelete(timersCounter);
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	0e 94 1a 11 	call	0x2234	; 0x2234 <EF_void_TimerDelete>
	//don't forget put ISR function in startup code
	EF_void_Timer_PORTinit();
	// set the timer interrupt callback
	EF_void_Timer_SetISRCallBack(EF_void_TimerISRCallback);
	// set all Timers to the initial state
	for( timersCounter=0 ; timersCounter < MAX_NUMBER_OF_TIMERS ; timersCounter++ )
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	8a 30       	cpi	r24, 0x0A	; 10
    22f0:	91 05       	cpc	r25, r1
    22f2:	98 f3       	brcs	.-26     	; 0x22da <EF_void_TimerInit+0x1c>
	{
		EF_void_TimerDelete(timersCounter);
	}
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <EF_void_TimerCreate>:
*
* Return Value: None.
*
******************************************************************************/
void EF_void_TimerCreate(U8_t timerNumber , U16_t timerTimeout) /* Timer timeout in ticks */
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <EF_void_TimerCreate+0x6>
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	7b 83       	std	Y+3, r23	; 0x03
    230e:	6a 83       	std	Y+2, r22	; 0x02
	if(timers_list[timerNumber].timeOut == 0)
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	c9 01       	movw	r24, r18
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	fc 01       	movw	r30, r24
    2326:	e8 5a       	subi	r30, 0xA8	; 168
    2328:	fd 4f       	sbci	r31, 0xFD	; 253
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	e9 f5       	brne	.+122    	; 0x23ac <EF_void_TimerCreate+0xae>
	{
		timers_list[timerNumber].timeOut = timerTimeout;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	c9 01       	movw	r24, r18
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	fc 01       	movw	r30, r24
    2348:	e8 5a       	subi	r30, 0xA8	; 168
    234a:	fd 4f       	sbci	r31, 0xFD	; 253
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
		timers_list[timerNumber].counter = 0 ;
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	c9 01       	movw	r24, r18
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	82 0f       	add	r24, r18
    2362:	93 1f       	adc	r25, r19
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	fc 01       	movw	r30, r24
    236c:	e8 5a       	subi	r30, 0xA8	; 168
    236e:	fd 4f       	sbci	r31, 0xFD	; 253
    2370:	11 82       	std	Z+1, r1	; 0x01
    2372:	10 82       	st	Z, r1
		timers_list[timerNumber].isTimedout = FALSE ;
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	c9 01       	movw	r24, r18
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	82 0f       	add	r24, r18
    2382:	93 1f       	adc	r25, r19
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	fc 01       	movw	r30, r24
    238a:	e4 5a       	subi	r30, 0xA4	; 164
    238c:	fd 4f       	sbci	r31, 0xFD	; 253
    238e:	10 82       	st	Z, r1
		timers_list[timerNumber].isEnables = FALSE;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	c9 01       	movw	r24, r18
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	82 0f       	add	r24, r18
    239e:	93 1f       	adc	r25, r19
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	fc 01       	movw	r30, r24
    23a6:	e3 5a       	subi	r30, 0xA3	; 163
    23a8:	fd 4f       	sbci	r31, 0xFD	; 253
    23aa:	10 82       	st	Z, r1
	}
}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <EF_void_TimersUpdate>:
*
* Return Value: None.
*
******************************************************************************/
void EF_void_TimersUpdate(void)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <EF_void_TimersUpdate+0x6>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
	U16_t timersCounter=0;
    23c2:	1a 82       	std	Y+2, r1	; 0x02
    23c4:	19 82       	std	Y+1, r1	; 0x01

	for( timersCounter=0 ; timersCounter<MAX_NUMBER_OF_TIMERS ; timersCounter++ )
    23c6:	1a 82       	std	Y+2, r1	; 0x02
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	71 c0       	rjmp	.+226    	; 0x24ae <EF_void_TimersUpdate+0xf6>
	{
		if(timers_list[timersCounter].isEnables == TRUE)
    23cc:	29 81       	ldd	r18, Y+1	; 0x01
    23ce:	3a 81       	ldd	r19, Y+2	; 0x02
    23d0:	c9 01       	movw	r24, r18
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	82 0f       	add	r24, r18
    23d8:	93 1f       	adc	r25, r19
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	fc 01       	movw	r30, r24
    23e0:	e3 5a       	subi	r30, 0xA3	; 163
    23e2:	fd 4f       	sbci	r31, 0xFD	; 253
    23e4:	80 81       	ld	r24, Z
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	09 f0       	breq	.+2      	; 0x23ec <EF_void_TimersUpdate+0x34>
    23ea:	5c c0       	rjmp	.+184    	; 0x24a4 <EF_void_TimersUpdate+0xec>
		{
			timers_list[timersCounter].counter++ ;
    23ec:	29 81       	ldd	r18, Y+1	; 0x01
    23ee:	3a 81       	ldd	r19, Y+2	; 0x02
    23f0:	c9 01       	movw	r24, r18
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	82 0f       	add	r24, r18
    23f8:	93 1f       	adc	r25, r19
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	fc 01       	movw	r30, r24
    2402:	e8 5a       	subi	r30, 0xA8	; 168
    2404:	fd 4f       	sbci	r31, 0xFD	; 253
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	ac 01       	movw	r20, r24
    240c:	4f 5f       	subi	r20, 0xFF	; 255
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	c9 01       	movw	r24, r18
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	82 0f       	add	r24, r18
    2418:	93 1f       	adc	r25, r19
    241a:	01 96       	adiw	r24, 0x01	; 1
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	fc 01       	movw	r30, r24
    2422:	e8 5a       	subi	r30, 0xA8	; 168
    2424:	fd 4f       	sbci	r31, 0xFD	; 253
    2426:	51 83       	std	Z+1, r21	; 0x01
    2428:	40 83       	st	Z, r20

			if(timers_list[timersCounter].counter == timers_list[timersCounter].timeOut)
    242a:	29 81       	ldd	r18, Y+1	; 0x01
    242c:	3a 81       	ldd	r19, Y+2	; 0x02
    242e:	c9 01       	movw	r24, r18
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	82 0f       	add	r24, r18
    2436:	93 1f       	adc	r25, r19
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	fc 01       	movw	r30, r24
    2440:	e8 5a       	subi	r30, 0xA8	; 168
    2442:	fd 4f       	sbci	r31, 0xFD	; 253
    2444:	40 81       	ld	r20, Z
    2446:	51 81       	ldd	r21, Z+1	; 0x01
    2448:	29 81       	ldd	r18, Y+1	; 0x01
    244a:	3a 81       	ldd	r19, Y+2	; 0x02
    244c:	c9 01       	movw	r24, r18
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	fc 01       	movw	r30, r24
    245c:	e8 5a       	subi	r30, 0xA8	; 168
    245e:	fd 4f       	sbci	r31, 0xFD	; 253
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	48 17       	cp	r20, r24
    2466:	59 07       	cpc	r21, r25
    2468:	e9 f4       	brne	.+58     	; 0x24a4 <EF_void_TimersUpdate+0xec>
			{
				timers_list[timersCounter].counter = 0;
    246a:	29 81       	ldd	r18, Y+1	; 0x01
    246c:	3a 81       	ldd	r19, Y+2	; 0x02
    246e:	c9 01       	movw	r24, r18
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	82 0f       	add	r24, r18
    2476:	93 1f       	adc	r25, r19
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	fc 01       	movw	r30, r24
    2480:	e8 5a       	subi	r30, 0xA8	; 168
    2482:	fd 4f       	sbci	r31, 0xFD	; 253
    2484:	11 82       	std	Z+1, r1	; 0x01
    2486:	10 82       	st	Z, r1
				timers_list[timersCounter].isTimedout = TRUE;
    2488:	29 81       	ldd	r18, Y+1	; 0x01
    248a:	3a 81       	ldd	r19, Y+2	; 0x02
    248c:	c9 01       	movw	r24, r18
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	82 0f       	add	r24, r18
    2494:	93 1f       	adc	r25, r19
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	fc 01       	movw	r30, r24
    249c:	e4 5a       	subi	r30, 0xA4	; 164
    249e:	fd 4f       	sbci	r31, 0xFD	; 253
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	80 83       	st	Z, r24
******************************************************************************/
void EF_void_TimersUpdate(void)
{
	U16_t timersCounter=0;

	for( timersCounter=0 ; timersCounter<MAX_NUMBER_OF_TIMERS ; timersCounter++ )
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	9a 81       	ldd	r25, Y+2	; 0x02
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	8a 30       	cpi	r24, 0x0A	; 10
    24b4:	91 05       	cpc	r25, r1
    24b6:	08 f4       	brcc	.+2      	; 0x24ba <EF_void_TimersUpdate+0x102>
    24b8:	89 cf       	rjmp	.-238    	; 0x23cc <EF_void_TimersUpdate+0x14>
				timers_list[timersCounter].counter = 0;
				timers_list[timersCounter].isTimedout = TRUE;
			}
		}
	}
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <EF_BOOLEAN_TimerCheck>:
*
* Return Value: BOOLEAN : return True when timer timeout
*
******************************************************************************/
BOOLEAN EF_BOOLEAN_TimerCheck(U8_t timerNumber)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <EF_BOOLEAN_TimerCheck+0x6>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	8a 83       	std	Y+2, r24	; 0x02
	BOOLEAN timerTimeout = FALSE;
    24d0:	19 82       	std	Y+1, r1	; 0x01
	if(timers_list[timerNumber].isTimedout)
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	c9 01       	movw	r24, r18
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	82 0f       	add	r24, r18
    24e0:	93 1f       	adc	r25, r19
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	fc 01       	movw	r30, r24
    24e8:	e4 5a       	subi	r30, 0xA4	; 164
    24ea:	fd 4f       	sbci	r31, 0xFD	; 253
    24ec:	80 81       	ld	r24, Z
    24ee:	88 23       	and	r24, r24
    24f0:	81 f0       	breq	.+32     	; 0x2512 <EF_BOOLEAN_TimerCheck+0x4e>
	{
		timers_list[timerNumber].isTimedout = FALSE;
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	c9 01       	movw	r24, r18
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	82 0f       	add	r24, r18
    2500:	93 1f       	adc	r25, r19
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	fc 01       	movw	r30, r24
    2508:	e4 5a       	subi	r30, 0xA4	; 164
    250a:	fd 4f       	sbci	r31, 0xFD	; 253
    250c:	10 82       	st	Z, r1
		timerTimeout = TRUE;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	89 83       	std	Y+1, r24	; 0x01
	}
	return timerTimeout;
    2512:	89 81       	ldd	r24, Y+1	; 0x01
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <EF_void_TimerStart>:
*
* Return Value: None.
*
******************************************************************************/
void EF_void_TimerStart(U8_t timerNumber)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	89 83       	std	Y+1, r24	; 0x01
	if(timers_list[timerNumber].timeOut != 0)
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	c9 01       	movw	r24, r18
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	82 0f       	add	r24, r18
    2538:	93 1f       	adc	r25, r19
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	fc 01       	movw	r30, r24
    2540:	e8 5a       	subi	r30, 0xA8	; 168
    2542:	fd 4f       	sbci	r31, 0xFD	; 253
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	79 f0       	breq	.+30     	; 0x256a <EF_void_TimerStart+0x4c>
	{
		timers_list[timerNumber].isEnables = TRUE;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	c9 01       	movw	r24, r18
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	fc 01       	movw	r30, r24
    2562:	e3 5a       	subi	r30, 0xA3	; 163
    2564:	fd 4f       	sbci	r31, 0xFD	; 253
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	80 83       	st	Z, r24
	}
}
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <EF_void_TimerStop>:
*
* Return Value: None.
*
******************************************************************************/
void EF_void_TimerStop(U8_t timerNumber)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	89 83       	std	Y+1, r24	; 0x01
	timers_list[timerNumber].isEnables = FALSE;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	c9 01       	movw	r24, r18
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	fc 01       	movw	r30, r24
    2594:	e3 5a       	subi	r30, 0xA3	; 163
    2596:	fd 4f       	sbci	r31, 0xFD	; 253
    2598:	10 82       	st	Z, r1
}
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <EF_void_TimerReset>:
*
* Return Value: None.
*
******************************************************************************/
void EF_void_TimerReset(U8_t timerNumber)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
	timers_list[timerNumber].counter = 0;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	c9 01       	movw	r24, r18
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	82 0f       	add	r24, r18
    25bc:	93 1f       	adc	r25, r19
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	fc 01       	movw	r30, r24
    25c6:	e8 5a       	subi	r30, 0xA8	; 168
    25c8:	fd 4f       	sbci	r31, 0xFD	; 253
    25ca:	11 82       	std	Z+1, r1	; 0x01
    25cc:	10 82       	st	Z, r1
}
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <EF_void_Timer_PORTinit>:
* PARAMETERS  : None
*
* Return Value: None
******************************************************************************/
void EF_void_Timer_PORTinit(void)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
	
	/* initialize timer 1 , set the prescaler */
	TIMER_CONTROL_REG = (TIMER_CONTROL_REG & ~ TIMER_PRESCALE_MASK) |TIMER1PRESCALE;
    25de:	a5 e4       	ldi	r26, 0x45	; 69
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e5 e4       	ldi	r30, 0x45	; 69
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	87 60       	ori	r24, 0x07	; 7
    25ea:	8c 93       	st	X, r24
	/* reset TCNT1 */
	TIMER_REG = MAX_U8_t - (U8_t)TIMERCYCLES ;
    25ec:	e4 e4       	ldi	r30, 0x44	; 68
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	89 e7       	ldi	r24, 0x79	; 121
    25f2:	80 83       	st	Z, r24
	/* enable TCNT1 overflow */
	TIMSK |= TOIE_MASK;
    25f4:	a9 e5       	ldi	r26, 0x59	; 89
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e9 e5       	ldi	r30, 0x59	; 89
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	80 64       	ori	r24, 0x40	; 64
    2600:	8c 93       	st	X, r24
	/* TOV1 can be cleared by writing a logic one to its bit location */
	TIFR  |= TOV_MASK;
    2602:	a8 e5       	ldi	r26, 0x58	; 88
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e8 e5       	ldi	r30, 0x58	; 88
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 64       	ori	r24, 0x40	; 64
    260e:	8c 93       	st	X, r24
	/* Enable Global interrupt */
	sei();
    2610:	78 94       	sei
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <EF_void_Timer_SetISRCallBack>:
* 				will call in the Timer ISR if timer interrupt is happened
*
* Return Value: None
******************************************************************************/
void EF_void_Timer_SetISRCallBack( void (*userFunc)(void) )
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	00 d0       	rcall	.+0      	; 0x261e <EF_void_Timer_SetISRCallBack+0x6>
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01
		/* the supplied user's function */
		voidFuncPtr = userFunc;
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	90 93 95 02 	sts	0x0295, r25
    262e:	80 93 94 02 	sts	0x0294, r24
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <EF_void_Timer_RemoveTimerISRCallBack>:
* PARAMETERS  : None
*
* Return Value: None
******************************************************************************/
void EF_void_Timer_RemoveTimerISRCallBack(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62

		/* set the interrupt function to run nothing */
		voidFuncPtr = NULL;
    2644:	10 92 95 02 	sts	0x0295, r1
    2648:	10 92 94 02 	sts	0x0294, r1

}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <__vector_5>:
* Return Value: None
******************************************************************************/

ISR(TIMER_OFV_VECTOR)

{
    2652:	1f 92       	push	r1
    2654:	0f 92       	push	r0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	0f 92       	push	r0
    265a:	11 24       	eor	r1, r1
    265c:	2f 93       	push	r18
    265e:	3f 93       	push	r19
    2660:	4f 93       	push	r20
    2662:	5f 93       	push	r21
    2664:	6f 93       	push	r22
    2666:	7f 93       	push	r23
    2668:	8f 93       	push	r24
    266a:	9f 93       	push	r25
    266c:	af 93       	push	r26
    266e:	bf 93       	push	r27
    2670:	ef 93       	push	r30
    2672:	ff 93       	push	r31
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
	/* if a user function is defined, execute it */
	if(voidFuncPtr != NULL)
    267c:	80 91 94 02 	lds	r24, 0x0294
    2680:	90 91 95 02 	lds	r25, 0x0295
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	29 f0       	breq	.+10     	; 0x2692 <__vector_5+0x40>
		voidFuncPtr();
    2688:	e0 91 94 02 	lds	r30, 0x0294
    268c:	f0 91 95 02 	lds	r31, 0x0295
    2690:	09 95       	icall

	/* reset TCNT1 */
	TIMER_REG = MAX_U8_t - (U8_t)TIMERCYCLES ;
    2692:	e4 e4       	ldi	r30, 0x44	; 68
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	89 e7       	ldi	r24, 0x79	; 121
    2698:	80 83       	st	Z, r24
	/* TOV1 can be cleared by writing a logic one to its bit location */
	TIFR  |= TOV_MASK;
    269a:	a8 e5       	ldi	r26, 0x58	; 88
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e8 e5       	ldi	r30, 0x58	; 88
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	80 64       	ori	r24, 0x40	; 64
    26a6:	8c 93       	st	X, r24

	
}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	ff 91       	pop	r31
    26ae:	ef 91       	pop	r30
    26b0:	bf 91       	pop	r27
    26b2:	af 91       	pop	r26
    26b4:	9f 91       	pop	r25
    26b6:	8f 91       	pop	r24
    26b8:	7f 91       	pop	r23
    26ba:	6f 91       	pop	r22
    26bc:	5f 91       	pop	r21
    26be:	4f 91       	pop	r20
    26c0:	3f 91       	pop	r19
    26c2:	2f 91       	pop	r18
    26c4:	0f 90       	pop	r0
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	0f 90       	pop	r0
    26ca:	1f 90       	pop	r1
    26cc:	18 95       	reti

000026ce <UART_INIT>:




void UART_INIT(void)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
	UCSRA= (1<<U2X);
    26d6:	eb e2       	ldi	r30, 0x2B	; 43
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	80 83       	st	Z, r24
	UCSRB = (1 << RXEN) | (1 << TXEN)|(1<<RXCIE);
    26de:	ea e2       	ldi	r30, 0x2A	; 42
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	88 e9       	ldi	r24, 0x98	; 152
    26e4:	80 83       	st	Z, r24
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
    26e6:	e0 e4       	ldi	r30, 0x40	; 64
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	86 e8       	ldi	r24, 0x86	; 134
    26ec:	80 83       	st	Z, r24
	UBRRL = 8;
    26ee:	e9 e2       	ldi	r30, 0x29	; 41
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	88 e0       	ldi	r24, 0x08	; 8
    26f4:	80 83       	st	Z, r24
	UBRRH =0;
    26f6:	e0 e4       	ldi	r30, 0x40	; 64
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	10 82       	st	Z, r1

}
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <EF_void_UART_Init>:
 * PARAMETERS  : uart_cfg : pointer to UART_cfg_str which has parameters to init the UART
 *
 * Return Value: None.
 ******************************************************************************/
void EF_void_UART_Init(UART_cfg_str *uart_cfg)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	00 d0       	rcall	.+0      	; 0x2708 <EF_void_UART_Init+0x6>
    2708:	00 d0       	rcall	.+0      	; 0x270a <EF_void_UART_Init+0x8>
    270a:	00 d0       	rcall	.+0      	; 0x270c <EF_void_UART_Init+0xa>
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
	/* variable helps in calculating Baud rate */
	U32_t uart_UBBR;
	*uart_reg.UCSRB_Reg = 0x00;
    2714:	e0 91 4f 02 	lds	r30, 0x024F
    2718:	f0 91 50 02 	lds	r31, 0x0250
    271c:	10 82       	st	Z, r1
	*uart_reg.UCSRC_Reg = 0x00;
    271e:	e0 91 51 02 	lds	r30, 0x0251
    2722:	f0 91 52 02 	lds	r31, 0x0252
    2726:	10 82       	st	Z, r1
	/* Set the UART Baud rate */
	uart_UBBR =  F_CPU/(uart_cfg->baudrate*16)-1;
    2728:	ed 81       	ldd	r30, Y+5	; 0x05
    272a:	fe 81       	ldd	r31, Y+6	; 0x06
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	a2 81       	ldd	r26, Z+2	; 0x02
    2732:	b3 81       	ldd	r27, Z+3	; 0x03
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	aa 1f       	adc	r26, r26
    273a:	bb 1f       	adc	r27, r27
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	aa 1f       	adc	r26, r26
    2742:	bb 1f       	adc	r27, r27
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	aa 1f       	adc	r26, r26
    274a:	bb 1f       	adc	r27, r27
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	aa 1f       	adc	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	9c 01       	movw	r18, r24
    2756:	ad 01       	movw	r20, r26
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	92 e1       	ldi	r25, 0x12	; 18
    275c:	aa e7       	ldi	r26, 0x7A	; 122
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 4b 38 	call	0x7096	; 0x7096 <__udivmodsi4>
    2768:	da 01       	movw	r26, r20
    276a:	c9 01       	movw	r24, r18
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	a1 09       	sbc	r26, r1
    2770:	b1 09       	sbc	r27, r1
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	ab 83       	std	Y+3, r26	; 0x03
    2778:	bc 83       	std	Y+4, r27	; 0x04
	*uart_reg.UBRRH_Reg = (uint8_t)(uart_UBBR>>8);
    277a:	e0 91 53 02 	lds	r30, 0x0253
    277e:	f0 91 54 02 	lds	r31, 0x0254
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	ab 81       	ldd	r26, Y+3	; 0x03
    2788:	bc 81       	ldd	r27, Y+4	; 0x04
    278a:	89 2f       	mov	r24, r25
    278c:	9a 2f       	mov	r25, r26
    278e:	ab 2f       	mov	r26, r27
    2790:	bb 27       	eor	r27, r27
    2792:	80 83       	st	Z, r24
	*uart_reg.UBRRL_Reg = (uint8_t)uart_UBBR;
    2794:	e0 91 55 02 	lds	r30, 0x0255
    2798:	f0 91 56 02 	lds	r31, 0x0256
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	80 83       	st	Z, r24
	/* Enable or disable RX,TX module & Interrupt */
	if (uart_cfg->RXInterruptEnable) *uart_reg.UCSRB_Reg |= (1 << RXCIE);
    27a0:	ed 81       	ldd	r30, Y+5	; 0x05
    27a2:	fe 81       	ldd	r31, Y+6	; 0x06
    27a4:	87 81       	ldd	r24, Z+7	; 0x07
    27a6:	88 23       	and	r24, r24
    27a8:	59 f0       	breq	.+22     	; 0x27c0 <EF_void_UART_Init+0xbe>
    27aa:	a0 91 4f 02 	lds	r26, 0x024F
    27ae:	b0 91 50 02 	lds	r27, 0x0250
    27b2:	e0 91 4f 02 	lds	r30, 0x024F
    27b6:	f0 91 50 02 	lds	r31, 0x0250
    27ba:	80 81       	ld	r24, Z
    27bc:	80 68       	ori	r24, 0x80	; 128
    27be:	8c 93       	st	X, r24
	if (uart_cfg->TXInterruptEnable) *uart_reg.UCSRB_Reg |= (1 << TXCIE);
    27c0:	ed 81       	ldd	r30, Y+5	; 0x05
    27c2:	fe 81       	ldd	r31, Y+6	; 0x06
    27c4:	80 85       	ldd	r24, Z+8	; 0x08
    27c6:	88 23       	and	r24, r24
    27c8:	59 f0       	breq	.+22     	; 0x27e0 <EF_void_UART_Init+0xde>
    27ca:	a0 91 4f 02 	lds	r26, 0x024F
    27ce:	b0 91 50 02 	lds	r27, 0x0250
    27d2:	e0 91 4f 02 	lds	r30, 0x024F
    27d6:	f0 91 50 02 	lds	r31, 0x0250
    27da:	80 81       	ld	r24, Z
    27dc:	80 64       	ori	r24, 0x40	; 64
    27de:	8c 93       	st	X, r24
	if (uart_cfg->ReceiverEnable   ) *uart_reg.UCSRB_Reg |= (1 << RXEN);
    27e0:	ed 81       	ldd	r30, Y+5	; 0x05
    27e2:	fe 81       	ldd	r31, Y+6	; 0x06
    27e4:	81 85       	ldd	r24, Z+9	; 0x09
    27e6:	88 23       	and	r24, r24
    27e8:	59 f0       	breq	.+22     	; 0x2800 <EF_void_UART_Init+0xfe>
    27ea:	a0 91 4f 02 	lds	r26, 0x024F
    27ee:	b0 91 50 02 	lds	r27, 0x0250
    27f2:	e0 91 4f 02 	lds	r30, 0x024F
    27f6:	f0 91 50 02 	lds	r31, 0x0250
    27fa:	80 81       	ld	r24, Z
    27fc:	80 61       	ori	r24, 0x10	; 16
    27fe:	8c 93       	st	X, r24
	if (uart_cfg->TransmitterEnable) *uart_reg.UCSRB_Reg |= (1 << TXEN);
    2800:	ed 81       	ldd	r30, Y+5	; 0x05
    2802:	fe 81       	ldd	r31, Y+6	; 0x06
    2804:	82 85       	ldd	r24, Z+10	; 0x0a
    2806:	88 23       	and	r24, r24
    2808:	59 f0       	breq	.+22     	; 0x2820 <EF_void_UART_Init+0x11e>
    280a:	a0 91 4f 02 	lds	r26, 0x024F
    280e:	b0 91 50 02 	lds	r27, 0x0250
    2812:	e0 91 4f 02 	lds	r30, 0x024F
    2816:	f0 91 50 02 	lds	r31, 0x0250
    281a:	80 81       	ld	r24, Z
    281c:	88 60       	ori	r24, 0x08	; 8
    281e:	8c 93       	st	X, r24
	/* Parity and Stop bit*/
	*uart_reg.UCSRC_Reg |= (uart_cfg->parity)<<UPM0;
    2820:	a0 91 51 02 	lds	r26, 0x0251
    2824:	b0 91 52 02 	lds	r27, 0x0252
    2828:	e0 91 51 02 	lds	r30, 0x0251
    282c:	f0 91 52 02 	lds	r31, 0x0252
    2830:	80 81       	ld	r24, Z
    2832:	28 2f       	mov	r18, r24
    2834:	ed 81       	ldd	r30, Y+5	; 0x05
    2836:	fe 81       	ldd	r31, Y+6	; 0x06
    2838:	86 81       	ldd	r24, Z+6	; 0x06
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	82 95       	swap	r24
    2840:	92 95       	swap	r25
    2842:	90 7f       	andi	r25, 0xF0	; 240
    2844:	98 27       	eor	r25, r24
    2846:	80 7f       	andi	r24, 0xF0	; 240
    2848:	98 27       	eor	r25, r24
    284a:	82 2b       	or	r24, r18
    284c:	8c 93       	st	X, r24
	*uart_reg.UCSRC_Reg |= (uart_cfg->stopBits)<<USBS;
    284e:	a0 91 51 02 	lds	r26, 0x0251
    2852:	b0 91 52 02 	lds	r27, 0x0252
    2856:	e0 91 51 02 	lds	r30, 0x0251
    285a:	f0 91 52 02 	lds	r31, 0x0252
    285e:	80 81       	ld	r24, Z
    2860:	28 2f       	mov	r18, r24
    2862:	ed 81       	ldd	r30, Y+5	; 0x05
    2864:	fe 81       	ldd	r31, Y+6	; 0x06
    2866:	85 81       	ldd	r24, Z+5	; 0x05
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	82 2b       	or	r24, r18
    287a:	8c 93       	st	X, r24

	if (uart_cfg->numberOfDataBits == 9)
    287c:	ed 81       	ldd	r30, Y+5	; 0x05
    287e:	fe 81       	ldd	r31, Y+6	; 0x06
    2880:	84 81       	ldd	r24, Z+4	; 0x04
    2882:	89 30       	cpi	r24, 0x09	; 9
    2884:	b9 f4       	brne	.+46     	; 0x28b4 <EF_void_UART_Init+0x1b2>
	{
		*uart_reg.UCSRB_Reg |= 0x04;
    2886:	a0 91 4f 02 	lds	r26, 0x024F
    288a:	b0 91 50 02 	lds	r27, 0x0250
    288e:	e0 91 4f 02 	lds	r30, 0x024F
    2892:	f0 91 50 02 	lds	r31, 0x0250
    2896:	80 81       	ld	r24, Z
    2898:	84 60       	ori	r24, 0x04	; 4
    289a:	8c 93       	st	X, r24
		*uart_reg.UCSRC_Reg |= (1 << URSEL) | 0x06;
    289c:	a0 91 51 02 	lds	r26, 0x0251
    28a0:	b0 91 52 02 	lds	r27, 0x0252
    28a4:	e0 91 51 02 	lds	r30, 0x0251
    28a8:	f0 91 52 02 	lds	r31, 0x0252
    28ac:	80 81       	ld	r24, Z
    28ae:	86 68       	ori	r24, 0x86	; 134
    28b0:	8c 93       	st	X, r24
    28b2:	32 c0       	rjmp	.+100    	; 0x2918 <EF_void_UART_Init+0x216>
	}
	else if(uart_cfg->numberOfDataBits == 5)
    28b4:	ed 81       	ldd	r30, Y+5	; 0x05
    28b6:	fe 81       	ldd	r31, Y+6	; 0x06
    28b8:	84 81       	ldd	r24, Z+4	; 0x04
    28ba:	85 30       	cpi	r24, 0x05	; 5
    28bc:	69 f1       	breq	.+90     	; 0x2918 <EF_void_UART_Init+0x216>
	{
		// do nothing
	}
	else if(uart_cfg->numberOfDataBits == 6)
    28be:	ed 81       	ldd	r30, Y+5	; 0x05
    28c0:	fe 81       	ldd	r31, Y+6	; 0x06
    28c2:	84 81       	ldd	r24, Z+4	; 0x04
    28c4:	86 30       	cpi	r24, 0x06	; 6
    28c6:	61 f4       	brne	.+24     	; 0x28e0 <EF_void_UART_Init+0x1de>
	{
		*uart_reg.UCSRC_Reg |= (1 << URSEL) | 0x02;
    28c8:	a0 91 51 02 	lds	r26, 0x0251
    28cc:	b0 91 52 02 	lds	r27, 0x0252
    28d0:	e0 91 51 02 	lds	r30, 0x0251
    28d4:	f0 91 52 02 	lds	r31, 0x0252
    28d8:	80 81       	ld	r24, Z
    28da:	82 68       	ori	r24, 0x82	; 130
    28dc:	8c 93       	st	X, r24
    28de:	1c c0       	rjmp	.+56     	; 0x2918 <EF_void_UART_Init+0x216>
	}
	else if(uart_cfg->numberOfDataBits == 7)
    28e0:	ed 81       	ldd	r30, Y+5	; 0x05
    28e2:	fe 81       	ldd	r31, Y+6	; 0x06
    28e4:	84 81       	ldd	r24, Z+4	; 0x04
    28e6:	87 30       	cpi	r24, 0x07	; 7
    28e8:	61 f4       	brne	.+24     	; 0x2902 <EF_void_UART_Init+0x200>
	{
		*uart_reg.UCSRC_Reg |= (1 << URSEL) | 0x04;
    28ea:	a0 91 51 02 	lds	r26, 0x0251
    28ee:	b0 91 52 02 	lds	r27, 0x0252
    28f2:	e0 91 51 02 	lds	r30, 0x0251
    28f6:	f0 91 52 02 	lds	r31, 0x0252
    28fa:	80 81       	ld	r24, Z
    28fc:	84 68       	ori	r24, 0x84	; 132
    28fe:	8c 93       	st	X, r24
    2900:	0b c0       	rjmp	.+22     	; 0x2918 <EF_void_UART_Init+0x216>
	}
	else
	{
		*uart_reg.UCSRC_Reg |= (1 << URSEL) | 0x06;
    2902:	a0 91 51 02 	lds	r26, 0x0251
    2906:	b0 91 52 02 	lds	r27, 0x0252
    290a:	e0 91 51 02 	lds	r30, 0x0251
    290e:	f0 91 52 02 	lds	r31, 0x0252
    2912:	80 81       	ld	r24, Z
    2914:	86 68       	ori	r24, 0x86	; 134
    2916:	8c 93       	st	X, r24
	}
	/* using Special Timer to able some UART Function to be unstuck */
	EF_void_TimerCreate(UART_TIMER_ID, UART_WAIT_TIME);
    2918:	86 e0       	ldi	r24, 0x06	; 6
    291a:	65 e0       	ldi	r22, 0x05	; 5
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EF_void_TimerCreate>
}
    2922:	26 96       	adiw	r28, 0x06	; 6
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <EF_BOOLEAN_UART_GetChar>:
 *
 * NOTE		  : special timer must be initialized and enable Global interrupt
 * 			    before using this function
 ******************************************************************************/
BOOLEAN EF_BOOLEAN_UART_GetChar(U8_t * returnedValue)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <EF_BOOLEAN_UART_GetChar+0x6>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9b 83       	std	Y+3, r25	; 0x03
    2942:	8a 83       	std	Y+2, r24	; 0x02
	BOOLEAN reciveFlag   = FALSE;
    2944:	19 82       	std	Y+1, r1	; 0x01

	EF_void_TimerStart(UART_TIMER_ID);
    2946:	86 e0       	ldi	r24, 0x06	; 6
    2948:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

	/* make UART unstuck*/
	while( (!(*uart_reg.UCSRA_Reg & (1 << RXC))) && (!EF_BOOLEAN_TimerCheck(UART_TIMER_ID)) );
    294c:	e0 91 4d 02 	lds	r30, 0x024D
    2950:	f0 91 4e 02 	lds	r31, 0x024E
    2954:	80 81       	ld	r24, Z
    2956:	88 23       	and	r24, r24
    2958:	2c f0       	brlt	.+10     	; 0x2964 <EF_BOOLEAN_UART_GetChar+0x30>
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    2960:	88 23       	and	r24, r24
    2962:	a1 f3       	breq	.-24     	; 0x294c <EF_BOOLEAN_UART_GetChar+0x18>
	/* extracting from the previous loop because of receiving byte or Time out*/
	EF_void_TimerStop(UART_TIMER_ID);
    2964:	86 e0       	ldi	r24, 0x06	; 6
    2966:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
	EF_void_TimerReset(UART_TIMER_ID);
    296a:	86 e0       	ldi	r24, 0x06	; 6
    296c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>

	reciveFlag     = TRUE;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	89 83       	std	Y+1, r24	; 0x01

	if(!(*uart_reg.UCSRA_Reg & (1 << RXC)))
    2974:	e0 91 4d 02 	lds	r30, 0x024D
    2978:	f0 91 4e 02 	lds	r31, 0x024E
    297c:	80 81       	ld	r24, Z
    297e:	88 23       	and	r24, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <EF_BOOLEAN_UART_GetChar+0x50>
	{
		reciveFlag = FALSE;
    2982:	19 82       	std	Y+1, r1	; 0x01
	}

	*returnedValue = *uart_reg.UDR_Reg;
    2984:	e0 91 4b 02 	lds	r30, 0x024B
    2988:	f0 91 4c 02 	lds	r31, 0x024C
    298c:	80 81       	ld	r24, Z
    298e:	ea 81       	ldd	r30, Y+2	; 0x02
    2990:	fb 81       	ldd	r31, Y+3	; 0x03
    2992:	80 83       	st	Z, r24
	return reciveFlag;
    2994:	89 81       	ldd	r24, Y+1	; 0x01
}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <EF_BOOLEAN_UART_PutChar>:
 *
 * NOTE		  : special timer must be initialized and enable Global interrupt
 * 			    before using this function
 ******************************************************************************/
BOOLEAN EF_BOOLEAN_UART_PutChar(U8_t data)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <EF_BOOLEAN_UART_PutChar+0x6>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	8a 83       	std	Y+2, r24	; 0x02
	BOOLEAN sendFlag = FALSE;
    29ae:	19 82       	std	Y+1, r1	; 0x01
	EF_void_TimerStart(UART_TIMER_ID);
    29b0:	86 e0       	ldi	r24, 0x06	; 6
    29b2:	0e 94 8f 12 	call	0x251e	; 0x251e <EF_void_TimerStart>

	/* make UART unstuck */
	while( (!(*uart_reg.UCSRA_Reg & (1 << UDRE))) && (!EF_BOOLEAN_TimerCheck(UART_TIMER_ID)) );
    29b6:	e0 91 4d 02 	lds	r30, 0x024D
    29ba:	f0 91 4e 02 	lds	r31, 0x024E
    29be:	80 81       	ld	r24, Z
    29c0:	88 2f       	mov	r24, r24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	80 72       	andi	r24, 0x20	; 32
    29c6:	90 70       	andi	r25, 0x00	; 0
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	29 f4       	brne	.+10     	; 0x29d6 <EF_BOOLEAN_UART_PutChar+0x34>
    29cc:	86 e0       	ldi	r24, 0x06	; 6
    29ce:	0e 94 62 12 	call	0x24c4	; 0x24c4 <EF_BOOLEAN_TimerCheck>
    29d2:	88 23       	and	r24, r24
    29d4:	81 f3       	breq	.-32     	; 0x29b6 <EF_BOOLEAN_UART_PutChar+0x14>
	/* extracting from the previous loop because of receiving byte or Time out*/
	EF_void_TimerStop(UART_TIMER_ID);
    29d6:	86 e0       	ldi	r24, 0x06	; 6
    29d8:	0e 94 b9 12 	call	0x2572	; 0x2572 <EF_void_TimerStop>
	EF_void_TimerReset(UART_TIMER_ID);
    29dc:	86 e0       	ldi	r24, 0x06	; 6
    29de:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EF_void_TimerReset>

	if(*uart_reg.UCSRA_Reg & (1 << UDRE))
    29e2:	e0 91 4d 02 	lds	r30, 0x024D
    29e6:	f0 91 4e 02 	lds	r31, 0x024E
    29ea:	80 81       	ld	r24, Z
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	80 72       	andi	r24, 0x20	; 32
    29f2:	90 70       	andi	r25, 0x00	; 0
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	49 f0       	breq	.+18     	; 0x2a0a <EF_BOOLEAN_UART_PutChar+0x68>
	{
		/* USART Transmit Complete */
		*uart_reg.UDR_Reg = data;    /* send character */
    29f8:	e0 91 4b 02 	lds	r30, 0x024B
    29fc:	f0 91 4c 02 	lds	r31, 0x024C
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	80 83       	st	Z, r24
		sendFlag = TRUE;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <EF_BOOLEAN_UART_PutChar+0x6a>
	}
	else
	{
		sendFlag = FALSE;
    2a0a:	19 82       	std	Y+1, r1	; 0x01
	}
	return sendFlag;
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <EF_u8_UART_WaitChar>:
 * PARAMETERS  : TimeOut
 *
 * Return Value: U8_t : Rx byte
 ******************************************************************************/
U8_t EF_u8_UART_WaitChar()
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
	/* wait until receive byte */
	while((!(*uart_reg.UCSRA_Reg & (1 << RXC))) );
    2a20:	e0 91 4d 02 	lds	r30, 0x024D
    2a24:	f0 91 4e 02 	lds	r31, 0x024E
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 23       	and	r24, r24
    2a2c:	cc f7       	brge	.-14     	; 0x2a20 <EF_u8_UART_WaitChar+0x8>
	return *uart_reg.UDR_Reg;
    2a2e:	e0 91 4b 02 	lds	r30, 0x024B
    2a32:	f0 91 4c 02 	lds	r31, 0x024C
    2a36:	80 81       	ld	r24, Z
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <EF_void_UART_PutChar>:
 *
 * Return Value: None
 *
 ******************************************************************************/
void EF_void_UART_PutChar(U8_t data)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	89 83       	std	Y+1, r24	; 0x01
	while(!(*uart_reg.UCSRA_Reg & (1 << UDRE)));  /* wait until UDR ready */
    2a4a:	e0 91 4d 02 	lds	r30, 0x024D
    2a4e:	f0 91 4e 02 	lds	r31, 0x024E
    2a52:	80 81       	ld	r24, Z
    2a54:	88 2f       	mov	r24, r24
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	80 72       	andi	r24, 0x20	; 32
    2a5a:	90 70       	andi	r25, 0x00	; 0
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	a9 f3       	breq	.-22     	; 0x2a4a <EF_void_UART_PutChar+0xc>
	*uart_reg.UDR_Reg = data;    				  /* send character 	  */
    2a60:	e0 91 4b 02 	lds	r30, 0x024B
    2a64:	f0 91 4c 02 	lds	r31, 0x024C
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	80 83       	st	Z, r24
}
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <EF_void_UART_SendArray>:
 *
 * Return Value: None
 *
 ******************************************************************************/
void EF_void_UART_SendArray(U8_t *array, U8_t Length)
{
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <EF_void_UART_SendArray+0x6>
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <EF_void_UART_SendArray+0x8>
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	9b 83       	std	Y+3, r25	; 0x03
    2a82:	8a 83       	std	Y+2, r24	; 0x02
    2a84:	6c 83       	std	Y+4, r22	; 0x04
	U8_t ArrayIndex;
	for(ArrayIndex = 0; ArrayIndex< Length; ArrayIndex++)
    2a86:	19 82       	std	Y+1, r1	; 0x01
    2a88:	0e c0       	rjmp	.+28     	; 0x2aa6 <EF_void_UART_SendArray+0x32>
	{
		EF_void_UART_PutChar(array[ArrayIndex]);
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	80 81       	ld	r24, Z
    2a9c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
 *
 ******************************************************************************/
void EF_void_UART_SendArray(U8_t *array, U8_t Length)
{
	U8_t ArrayIndex;
	for(ArrayIndex = 0; ArrayIndex< Length; ArrayIndex++)
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	8f 5f       	subi	r24, 0xFF	; 255
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	99 81       	ldd	r25, Y+1	; 0x01
    2aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aaa:	98 17       	cp	r25, r24
    2aac:	70 f3       	brcs	.-36     	; 0x2a8a <EF_void_UART_SendArray+0x16>
	{
		EF_void_UART_PutChar(array[ArrayIndex]);
	}
}
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <EF_void_UART_Send_data_temp>:
void EF_void_UART_Send_data_temp(U16_t s16Numberstring)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	67 97       	sbiw	r28, 0x17	; 23
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	9f 8b       	std	Y+23, r25	; 0x17
    2ad2:	8e 8b       	std	Y+22, r24	; 0x16
	U8_t ArrayIndex = 0;
    2ad4:	1f 86       	std	Y+15, r1	; 0x0f
	char s8DisplayStr[6] = {0};
    2ad6:	86 e0       	ldi	r24, 0x06	; 6
    2ad8:	fe 01       	movw	r30, r28
    2ada:	70 96       	adiw	r30, 0x10	; 16
    2adc:	df 01       	movw	r26, r30
    2ade:	98 2f       	mov	r25, r24
    2ae0:	1d 92       	st	X+, r1
    2ae2:	9a 95       	dec	r25
    2ae4:	e9 f7       	brne	.-6      	; 0x2ae0 <EF_void_UART_Send_data_temp+0x24>
	/* convert number to ASCII */


	itoa(s16Numberstring, s8DisplayStr, 10);
    2ae6:	8e 89       	ldd	r24, Y+22	; 0x16
    2ae8:	9f 89       	ldd	r25, Y+23	; 0x17
    2aea:	9e 01       	movw	r18, r28
    2aec:	20 5f       	subi	r18, 0xF0	; 240
    2aee:	3f 4f       	sbci	r19, 0xFF	; 255
    2af0:	b9 01       	movw	r22, r18
    2af2:	4a e0       	ldi	r20, 0x0A	; 10
    2af4:	50 e0       	ldi	r21, 0x00	; 0
    2af6:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendArray((U8_t *)"Temperature : ",15);
    2afa:	80 e6       	ldi	r24, 0x60	; 96
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	6f e0       	ldi	r22, 0x0F	; 15
    2b00:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <EF_void_UART_SendArray>
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2b04:	1f 86       	std	Y+15, r1	; 0x0f
    2b06:	86 c0       	rjmp	.+268    	; 0x2c14 <EF_void_UART_Send_data_temp+0x158>
	{

		EF_void_UART_PutChar(s8DisplayStr[ArrayIndex]);
    2b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	ce 01       	movw	r24, r28
    2b10:	40 96       	adiw	r24, 0x10	; 16
    2b12:	fc 01       	movw	r30, r24
    2b14:	e2 0f       	add	r30, r18
    2b16:	f3 1f       	adc	r31, r19
    2b18:	80 81       	ld	r24, Z
    2b1a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
		if(ArrayIndex==1)EF_void_UART_PutChar('.');
    2b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	19 f4       	brne	.+6      	; 0x2b2a <EF_void_UART_Send_data_temp+0x6e>
    2b24:	8e e2       	ldi	r24, 0x2E	; 46
    2b26:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e8       	ldi	r26, 0x80	; 128
    2b30:	bf e3       	ldi	r27, 0x3F	; 63
    2b32:	8b 87       	std	Y+11, r24	; 0x0b
    2b34:	9c 87       	std	Y+12, r25	; 0x0c
    2b36:	ad 87       	std	Y+13, r26	; 0x0d
    2b38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	4a ef       	ldi	r20, 0xFA	; 250
    2b48:	54 e4       	ldi	r21, 0x44	; 68
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	8f 83       	std	Y+7, r24	; 0x07
    2b54:	98 87       	std	Y+8, r25	; 0x08
    2b56:	a9 87       	std	Y+9, r26	; 0x09
    2b58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	2c f4       	brge	.+10     	; 0x2b7c <EF_void_UART_Send_data_temp+0xc0>
		__ticks = 1;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9e 83       	std	Y+6, r25	; 0x06
    2b78:	8d 83       	std	Y+5, r24	; 0x05
    2b7a:	3f c0       	rjmp	.+126    	; 0x2bfa <EF_void_UART_Send_data_temp+0x13e>
	else if (__tmp > 65535)
    2b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7e:	78 85       	ldd	r23, Y+8	; 0x08
    2b80:	89 85       	ldd	r24, Y+9	; 0x09
    2b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	3f ef       	ldi	r19, 0xFF	; 255
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	57 e4       	ldi	r21, 0x47	; 71
    2b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	4c f5       	brge	.+82     	; 0x2be6 <EF_void_UART_Send_data_temp+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <EF_void_UART_Send_data_temp+0x120>
    2bbe:	88 ec       	ldi	r24, 0xC8	; 200
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9c 83       	std	Y+4, r25	; 0x04
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <EF_void_UART_Send_data_temp+0x10e>
    2bce:	9c 83       	std	Y+4, r25	; 0x04
    2bd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9e 83       	std	Y+6, r25	; 0x06
    2bda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	9e 81       	ldd	r25, Y+6	; 0x06
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	69 f7       	brne	.-38     	; 0x2bbe <EF_void_UART_Send_data_temp+0x102>
    2be4:	14 c0       	rjmp	.+40     	; 0x2c0e <EF_void_UART_Send_data_temp+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be6:	6f 81       	ldd	r22, Y+7	; 0x07
    2be8:	78 85       	ldd	r23, Y+8	; 0x08
    2bea:	89 85       	ldd	r24, Y+9	; 0x09
    2bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <EF_void_UART_Send_data_temp+0x14a>
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	89 83       	std	Y+1, r24	; 0x01
	/* convert number to ASCII */


	itoa(s16Numberstring, s8DisplayStr, 10);
	EF_void_UART_SendArray((U8_t *)"Temperature : ",15);
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	8f 87       	std	Y+15, r24	; 0x0f
    2c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	40 96       	adiw	r24, 0x10	; 16
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	80 81       	ld	r24, Z
    2c26:	88 23       	and	r24, r24
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <EF_void_UART_Send_data_temp+0x170>
    2c2a:	6e cf       	rjmp	.-292    	; 0x2b08 <EF_void_UART_Send_data_temp+0x4c>

		EF_void_UART_PutChar(s8DisplayStr[ArrayIndex]);
		if(ArrayIndex==1)EF_void_UART_PutChar('.');
		_delay_ms(1);
	}
	EF_void_UART_SendArray((U8_t *)" C ",3);
    2c2c:	8f e6       	ldi	r24, 0x6F	; 111
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	63 e0       	ldi	r22, 0x03	; 3
    2c32:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <EF_void_UART_SendArray>

}
    2c36:	67 96       	adiw	r28, 0x17	; 23
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <EF_void_UART_Send_data_PBM>:


void EF_void_UART_Send_data_PBM(U16_t s16Numberstring)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	a1 97       	sbiw	r28, 0x21	; 33
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	99 a3       	std	Y+33, r25	; 0x21
    2c5e:	88 a3       	std	Y+32, r24	; 0x20
	U8_t ArrayIndex = 0;
    2c60:	19 8e       	std	Y+25, r1	; 0x19
	char s8DisplayStr[6] = {0};
    2c62:	86 e0       	ldi	r24, 0x06	; 6
    2c64:	fe 01       	movw	r30, r28
    2c66:	7a 96       	adiw	r30, 0x1a	; 26
    2c68:	df 01       	movw	r26, r30
    2c6a:	98 2f       	mov	r25, r24
    2c6c:	1d 92       	st	X+, r1
    2c6e:	9a 95       	dec	r25
    2c70:	e9 f7       	brne	.-6      	; 0x2c6c <EF_void_UART_Send_data_PBM+0x24>
	/* convert number to ASCII */


	itoa(s16Numberstring, s8DisplayStr, 10);
    2c72:	88 a1       	ldd	r24, Y+32	; 0x20
    2c74:	99 a1       	ldd	r25, Y+33	; 0x21
    2c76:	9e 01       	movw	r18, r28
    2c78:	26 5e       	subi	r18, 0xE6	; 230
    2c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	4a e0       	ldi	r20, 0x0A	; 10
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendArray((U8_t *)"          PBM : ",16);
    2c86:	83 e7       	ldi	r24, 0x73	; 115
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	60 e1       	ldi	r22, 0x10	; 16
    2c8c:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <EF_void_UART_SendArray>
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2c90:	19 8e       	std	Y+25, r1	; 0x19
    2c92:	cc c0       	rjmp	.+408    	; 0x2e2c <EF_void_UART_Send_data_PBM+0x1e4>
	{

		EF_void_UART_PutChar(s8DisplayStr[ArrayIndex]);
    2c94:	89 8d       	ldd	r24, Y+25	; 0x19
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	ce 01       	movw	r24, r28
    2c9c:	4a 96       	adiw	r24, 0x1a	; 26
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e2 0f       	add	r30, r18
    2ca2:	f3 1f       	adc	r31, r19
    2ca4:	80 81       	ld	r24, Z
    2ca6:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e2       	ldi	r26, 0x20	; 32
    2cb0:	b1 e4       	ldi	r27, 0x41	; 65
    2cb2:	8d 8b       	std	Y+21, r24	; 0x15
    2cb4:	9e 8b       	std	Y+22, r25	; 0x16
    2cb6:	af 8b       	std	Y+23, r26	; 0x17
    2cb8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cba:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc2:	2b ea       	ldi	r18, 0xAB	; 171
    2cc4:	3a ea       	ldi	r19, 0xAA	; 170
    2cc6:	4a e2       	ldi	r20, 0x2A	; 42
    2cc8:	50 e4       	ldi	r21, 0x40	; 64
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	89 8b       	std	Y+17, r24	; 0x11
    2cd4:	9a 8b       	std	Y+18, r25	; 0x12
    2cd6:	ab 8b       	std	Y+19, r26	; 0x13
    2cd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2cda:	69 89       	ldd	r22, Y+17	; 0x11
    2cdc:	7a 89       	ldd	r23, Y+18	; 0x12
    2cde:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	1c f4       	brge	.+6      	; 0x2cf8 <EF_void_UART_Send_data_PBM+0xb0>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	88 8b       	std	Y+16, r24	; 0x10
    2cf6:	91 c0       	rjmp	.+290    	; 0x2e1a <EF_void_UART_Send_data_PBM+0x1d2>
	else if (__tmp > 255)
    2cf8:	69 89       	ldd	r22, Y+17	; 0x11
    2cfa:	7a 89       	ldd	r23, Y+18	; 0x12
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	53 e4       	ldi	r21, 0x43	; 67
    2d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	0c f0       	brlt	.+2      	; 0x2d12 <EF_void_UART_Send_data_PBM+0xca>
    2d10:	7b c0       	rjmp	.+246    	; 0x2e08 <EF_void_UART_Send_data_PBM+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    2d12:	6d 89       	ldd	r22, Y+21	; 0x15
    2d14:	7e 89       	ldd	r23, Y+22	; 0x16
    2d16:	8f 89       	ldd	r24, Y+23	; 0x17
    2d18:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	54 e4       	ldi	r21, 0x44	; 68
    2d22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8c 87       	std	Y+12, r24	; 0x0c
    2d2c:	9d 87       	std	Y+13, r25	; 0x0d
    2d2e:	ae 87       	std	Y+14, r26	; 0x0e
    2d30:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d32:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d34:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d36:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d38:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	4a ef       	ldi	r20, 0xFA	; 250
    2d40:	54 e4       	ldi	r21, 0x44	; 68
    2d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	88 87       	std	Y+8, r24	; 0x08
    2d4c:	99 87       	std	Y+9, r25	; 0x09
    2d4e:	aa 87       	std	Y+10, r26	; 0x0a
    2d50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d52:	68 85       	ldd	r22, Y+8	; 0x08
    2d54:	79 85       	ldd	r23, Y+9	; 0x09
    2d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e8       	ldi	r20, 0x80	; 128
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d66:	88 23       	and	r24, r24
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <EF_void_UART_Send_data_PBM+0x12c>
		__ticks = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9f 83       	std	Y+7, r25	; 0x07
    2d70:	8e 83       	std	Y+6, r24	; 0x06
    2d72:	3f c0       	rjmp	.+126    	; 0x2df2 <EF_void_UART_Send_data_PBM+0x1aa>
	else if (__tmp > 65535)
    2d74:	68 85       	ldd	r22, Y+8	; 0x08
    2d76:	79 85       	ldd	r23, Y+9	; 0x09
    2d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	57 e4       	ldi	r21, 0x47	; 71
    2d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	4c f5       	brge	.+82     	; 0x2dde <EF_void_UART_Send_data_PBM+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d90:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d92:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e2       	ldi	r20, 0x20	; 32
    2d9a:	51 e4       	ldi	r21, 0x41	; 65
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9f 83       	std	Y+7, r25	; 0x07
    2db2:	8e 83       	std	Y+6, r24	; 0x06
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <EF_void_UART_Send_data_PBM+0x18c>
    2db6:	88 ec       	ldi	r24, 0xC8	; 200
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9d 83       	std	Y+5, r25	; 0x05
    2dbc:	8c 83       	std	Y+4, r24	; 0x04
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	f1 f7       	brne	.-4      	; 0x2dc2 <EF_void_UART_Send_data_PBM+0x17a>
    2dc6:	9d 83       	std	Y+5, r25	; 0x05
    2dc8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dca:	8e 81       	ldd	r24, Y+6	; 0x06
    2dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	9f 83       	std	Y+7, r25	; 0x07
    2dd2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	69 f7       	brne	.-38     	; 0x2db6 <EF_void_UART_Send_data_PBM+0x16e>
    2ddc:	24 c0       	rjmp	.+72     	; 0x2e26 <EF_void_UART_Send_data_PBM+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dde:	68 85       	ldd	r22, Y+8	; 0x08
    2de0:	79 85       	ldd	r23, Y+9	; 0x09
    2de2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9f 83       	std	Y+7, r25	; 0x07
    2df0:	8e 83       	std	Y+6, r24	; 0x06
    2df2:	8e 81       	ldd	r24, Y+6	; 0x06
    2df4:	9f 81       	ldd	r25, Y+7	; 0x07
    2df6:	9b 83       	std	Y+3, r25	; 0x03
    2df8:	8a 83       	std	Y+2, r24	; 0x02
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <EF_void_UART_Send_data_PBM+0x1b6>
    2e02:	9b 83       	std	Y+3, r25	; 0x03
    2e04:	8a 83       	std	Y+2, r24	; 0x02
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <EF_void_UART_Send_data_PBM+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e08:	69 89       	ldd	r22, Y+17	; 0x11
    2e0a:	7a 89       	ldd	r23, Y+18	; 0x12
    2e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	88 8b       	std	Y+16, r24	; 0x10
    2e1a:	88 89       	ldd	r24, Y+16	; 0x10
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	8a 95       	dec	r24
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <EF_void_UART_Send_data_PBM+0x1d8>
    2e24:	89 83       	std	Y+1, r24	; 0x01
	/* convert number to ASCII */


	itoa(s16Numberstring, s8DisplayStr, 10);
	EF_void_UART_SendArray((U8_t *)"          PBM : ",16);
	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2e26:	89 8d       	ldd	r24, Y+25	; 0x19
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	89 8f       	std	Y+25, r24	; 0x19
    2e2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	ce 01       	movw	r24, r28
    2e34:	4a 96       	adiw	r24, 0x1a	; 26
    2e36:	fc 01       	movw	r30, r24
    2e38:	e2 0f       	add	r30, r18
    2e3a:	f3 1f       	adc	r31, r19
    2e3c:	80 81       	ld	r24, Z
    2e3e:	88 23       	and	r24, r24
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <EF_void_UART_Send_data_PBM+0x1fc>
    2e42:	28 cf       	rjmp	.-432    	; 0x2c94 <EF_void_UART_Send_data_PBM+0x4c>

		EF_void_UART_PutChar(s8DisplayStr[ArrayIndex]);
		_delay_us(10);
	}

}
    2e44:	a1 96       	adiw	r28, 0x21	; 33
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <EF_void_UART_Send_Integer>:
 *
 * Return Value: None
 *
 ******************************************************************************/
void EF_void_UART_Send_Integer(U16_t s16Numberstring)
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	29 97       	sbiw	r28, 0x09	; 9
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	cd bf       	out	0x3d, r28	; 61
    2e6a:	99 87       	std	Y+9, r25	; 0x09
    2e6c:	88 87       	std	Y+8, r24	; 0x08
	//todod change this function
	U8_t ArrayIndex = 0;
    2e6e:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    2e70:	86 e0       	ldi	r24, 0x06	; 6
    2e72:	fe 01       	movw	r30, r28
    2e74:	32 96       	adiw	r30, 0x02	; 2
    2e76:	df 01       	movw	r26, r30
    2e78:	98 2f       	mov	r25, r24
    2e7a:	1d 92       	st	X+, r1
    2e7c:	9a 95       	dec	r25
    2e7e:	e9 f7       	brne	.-6      	; 0x2e7a <EF_void_UART_Send_Integer+0x24>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    2e80:	88 85       	ldd	r24, Y+8	; 0x08
    2e82:	99 85       	ldd	r25, Y+9	; 0x09
    2e84:	9e 01       	movw	r18, r28
    2e86:	2e 5f       	subi	r18, 0xFE	; 254
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	b9 01       	movw	r22, r18
    2e8c:	4a e0       	ldi	r20, 0x0A	; 10
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2e94:	19 82       	std	Y+1, r1	; 0x01
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <EF_void_UART_Send_Integer+0x5e>
	{
		EF_void_UART_PutChar(s8DisplayStr[ArrayIndex]);
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	02 96       	adiw	r24, 0x02	; 2
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	80 81       	ld	r24, Z
    2eaa:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	ce 01       	movw	r24, r28
    2ebc:	02 96       	adiw	r24, 0x02	; 2
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e2 0f       	add	r30, r18
    2ec2:	f3 1f       	adc	r31, r19
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 23       	and	r24, r24
    2ec8:	39 f7       	brne	.-50     	; 0x2e98 <EF_void_UART_Send_Integer+0x42>
	{
		EF_void_UART_PutChar(s8DisplayStr[ArrayIndex]);
	}

}
    2eca:	29 96       	adiw	r28, 0x09	; 9
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <EF_void_UART_SendString>:
 *
 * Return Value: None
 *
 ******************************************************************************/
void EF_void_UART_SendString(unsigned char *array)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <EF_void_UART_SendString+0x6>
    2ee2:	0f 92       	push	r0
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	9b 83       	std	Y+3, r25	; 0x03
    2eea:	8a 83       	std	Y+2, r24	; 0x02
	U8_t ArrayIndex = 0;
    2eec:	19 82       	std	Y+1, r1	; 0x01
    2eee:	0e c0       	rjmp	.+28     	; 0x2f0c <EF_void_UART_SendString+0x30>

	while ( array[ArrayIndex] != 0)
	{
		EF_void_UART_PutChar(array[ArrayIndex]);
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    2efa:	fc 01       	movw	r30, r24
    2efc:	e2 0f       	add	r30, r18
    2efe:	f3 1f       	adc	r31, r19
    2f00:	80 81       	ld	r24, Z
    2f02:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
		ArrayIndex++;
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	8f 5f       	subi	r24, 0xFF	; 255
    2f0a:	89 83       	std	Y+1, r24	; 0x01
 ******************************************************************************/
void EF_void_UART_SendString(unsigned char *array)
{
	U8_t ArrayIndex = 0;

	while ( array[ArrayIndex] != 0)
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	fc 01       	movw	r30, r24
    2f18:	e2 0f       	add	r30, r18
    2f1a:	f3 1f       	adc	r31, r19
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 23       	and	r24, r24
    2f20:	39 f7       	brne	.-50     	; 0x2ef0 <EF_void_UART_SendString+0x14>
	{
		EF_void_UART_PutChar(array[ArrayIndex]);
		ArrayIndex++;
	}
}
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <EF_void_UART_SendNewLine>:
 *
 * Return Value: None
 *
 ******************************************************************************/
void EF_void_UART_SendNewLine()
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	EF_void_UART_PutChar(0x0D);
    2f36:	8d e0       	ldi	r24, 0x0D	; 13
    2f38:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
	EF_void_UART_PutChar(0x0A);
    2f3c:	8a e0       	ldi	r24, 0x0A	; 10
    2f3e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
}
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <EF_void_UART_update_time>:
void EF_void_UART_update_time(U8_t hours, U8_t minutes, U8_t seconds)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <EF_void_UART_update_time+0x6>
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <EF_void_UART_update_time+0x8>
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	8b 83       	std	Y+3, r24	; 0x03
    2f58:	6c 83       	std	Y+4, r22	; 0x04
    2f5a:	4d 83       	std	Y+5, r20	; 0x05
	char temp[2];



	itoa(hours/10,temp,10);
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9a e0       	ldi	r25, 0x0A	; 10
    2f60:	69 2f       	mov	r22, r25
    2f62:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodqi4>
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9e 01       	movw	r18, r28
    2f6c:	2f 5f       	subi	r18, 0xFF	; 255
    2f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f70:	b9 01       	movw	r22, r18
    2f72:	4a e0       	ldi	r20, 0x0A	; 10
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendString((U8_t *)temp);
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	itoa(hours%10,temp,10);
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9a e0       	ldi	r25, 0x0A	; 10
    2f86:	69 2f       	mov	r22, r25
    2f88:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodqi4>
    2f8c:	89 2f       	mov	r24, r25
    2f8e:	88 2f       	mov	r24, r24
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9e 01       	movw	r18, r28
    2f94:	2f 5f       	subi	r18, 0xFF	; 255
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	b9 01       	movw	r22, r18
    2f9a:	4a e0       	ldi	r20, 0x0A	; 10
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendString((U8_t *)temp);
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_UART_SendString((U8_t *)":");
    2faa:	84 e8       	ldi	r24, 0x84	; 132
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>

	itoa(minutes/10,temp,10);
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	9a e0       	ldi	r25, 0x0A	; 10
    2fb6:	69 2f       	mov	r22, r25
    2fb8:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodqi4>
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	9e 01       	movw	r18, r28
    2fc2:	2f 5f       	subi	r18, 0xFF	; 255
    2fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	4a e0       	ldi	r20, 0x0A	; 10
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendString((U8_t *)temp);
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	01 96       	adiw	r24, 0x01	; 1
    2fd4:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	itoa((minutes%10),temp,10);
    2fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fda:	9a e0       	ldi	r25, 0x0A	; 10
    2fdc:	69 2f       	mov	r22, r25
    2fde:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodqi4>
    2fe2:	89 2f       	mov	r24, r25
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9e 01       	movw	r18, r28
    2fea:	2f 5f       	subi	r18, 0xFF	; 255
    2fec:	3f 4f       	sbci	r19, 0xFF	; 255
    2fee:	b9 01       	movw	r22, r18
    2ff0:	4a e0       	ldi	r20, 0x0A	; 10
    2ff2:	50 e0       	ldi	r21, 0x00	; 0
    2ff4:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendString((U8_t *)temp);
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	01 96       	adiw	r24, 0x01	; 1
    2ffc:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_UART_SendString((U8_t *)":");
    3000:	84 e8       	ldi	r24, 0x84	; 132
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	itoa(seconds/10,temp,10);
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9a e0       	ldi	r25, 0x0A	; 10
    300c:	69 2f       	mov	r22, r25
    300e:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodqi4>
    3012:	88 2f       	mov	r24, r24
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9e 01       	movw	r18, r28
    3018:	2f 5f       	subi	r18, 0xFF	; 255
    301a:	3f 4f       	sbci	r19, 0xFF	; 255
    301c:	b9 01       	movw	r22, r18
    301e:	4a e0       	ldi	r20, 0x0A	; 10
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendString((U8_t *)temp);
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	itoa(seconds%10,temp,10);
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	9a e0       	ldi	r25, 0x0A	; 10
    3032:	69 2f       	mov	r22, r25
    3034:	0e 94 18 38 	call	0x7030	; 0x7030 <__udivmodqi4>
    3038:	89 2f       	mov	r24, r25
    303a:	88 2f       	mov	r24, r24
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	9e 01       	movw	r18, r28
    3040:	2f 5f       	subi	r18, 0xFF	; 255
    3042:	3f 4f       	sbci	r19, 0xFF	; 255
    3044:	b9 01       	movw	r22, r18
    3046:	4a e0       	ldi	r20, 0x0A	; 10
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>
	EF_void_UART_SendString((U8_t *)temp);
    304e:	ce 01       	movw	r24, r28
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <EF_void_UART_Send_Binary>:
 *
 * Return Value: None
 *
 ******************************************************************************/
void EF_void_UART_Send_Binary(U16_t s16Number)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	00 d0       	rcall	.+0      	; 0x306c <EF_void_UART_Send_Binary+0x6>
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01

	EF_void_UART_SendString("0b");
    3074:	86 e8       	ldi	r24, 0x86	; 134
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>

	if((s16Number/128)==1)
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	80 58       	subi	r24, 0x80	; 128
    3082:	90 40       	sbci	r25, 0x00	; 0
    3084:	80 38       	cpi	r24, 0x80	; 128
    3086:	91 05       	cpc	r25, r1
    3088:	20 f4       	brcc	.+8      	; 0x3092 <EF_void_UART_Send_Binary+0x2c>
	{EF_void_UART_PutChar('1');}
    308a:	81 e3       	ldi	r24, 0x31	; 49
    308c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
    3090:	08 c0       	rjmp	.+16     	; 0x30a2 <EF_void_UART_Send_Binary+0x3c>
	else if((s16Number/128)==0)
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	80 38       	cpi	r24, 0x80	; 128
    3098:	91 05       	cpc	r25, r1
    309a:	18 f4       	brcc	.+6      	; 0x30a2 <EF_void_UART_Send_Binary+0x3c>
	{	 EF_void_UART_PutChar('0'); }
    309c:	80 e3       	ldi	r24, 0x30	; 48
    309e:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>

	if((s16Number/64)==1)
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	9a 81       	ldd	r25, Y+2	; 0x02
    30a6:	80 54       	subi	r24, 0x40	; 64
    30a8:	90 40       	sbci	r25, 0x00	; 0
    30aa:	80 34       	cpi	r24, 0x40	; 64
    30ac:	91 05       	cpc	r25, r1
    30ae:	20 f4       	brcc	.+8      	; 0x30b8 <EF_void_UART_Send_Binary+0x52>
	{EF_void_UART_PutChar('1');}
    30b0:	81 e3       	ldi	r24, 0x31	; 49
    30b2:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
    30b6:	08 c0       	rjmp	.+16     	; 0x30c8 <EF_void_UART_Send_Binary+0x62>
	else if((s16Number/64)==0)
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	80 34       	cpi	r24, 0x40	; 64
    30be:	91 05       	cpc	r25, r1
    30c0:	18 f4       	brcc	.+6      	; 0x30c8 <EF_void_UART_Send_Binary+0x62>
	{	 EF_void_UART_PutChar('0'); }
    30c2:	80 e3       	ldi	r24, 0x30	; 48
    30c4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>





}
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <EF_void_UART_Send_CO2>:


void EF_void_UART_Send_CO2(unsigned int s16Numberstring)
{
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <EF_void_UART_Send_CO2+0x6>
    30d8:	00 d0       	rcall	.+0      	; 0x30da <EF_void_UART_Send_CO2+0x8>
    30da:	00 d0       	rcall	.+0      	; 0x30dc <EF_void_UART_Send_CO2+0xa>
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	9e 83       	std	Y+6, r25	; 0x06
    30e2:	8d 83       	std	Y+5, r24	; 0x05
	//todod change this function
	unsigned int i = 0;
    30e4:	1c 82       	std	Y+4, r1	; 0x04
    30e6:	1b 82       	std	Y+3, r1	; 0x03
	unsigned int Remeaning = 0;
    30e8:	1a 82       	std	Y+2, r1	; 0x02
    30ea:	19 82       	std	Y+1, r1	; 0x01

	i=s16Numberstring/1000;
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	28 ee       	ldi	r18, 0xE8	; 232
    30f2:	33 e0       	ldi	r19, 0x03	; 3
    30f4:	b9 01       	movw	r22, r18
    30f6:	0e 94 24 38 	call	0x7048	; 0x7048 <__udivmodhi4>
    30fa:	cb 01       	movw	r24, r22
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03
	EF_void_UART_PutChar(i+0x30);
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	80 5d       	subi	r24, 0xD0	; 208
    3104:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
	Remeaning=(s16Numberstring-i*1000);
    3108:	2b 81       	ldd	r18, Y+3	; 0x03
    310a:	3c 81       	ldd	r19, Y+4	; 0x04
    310c:	88 ee       	ldi	r24, 0xE8	; 232
    310e:	93 e0       	ldi	r25, 0x03	; 3
    3110:	a9 01       	movw	r20, r18
    3112:	48 9f       	mul	r20, r24
    3114:	90 01       	movw	r18, r0
    3116:	49 9f       	mul	r20, r25
    3118:	30 0d       	add	r19, r0
    311a:	58 9f       	mul	r21, r24
    311c:	30 0d       	add	r19, r0
    311e:	11 24       	eor	r1, r1
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	82 1b       	sub	r24, r18
    3126:	93 0b       	sbc	r25, r19
    3128:	9a 83       	std	Y+2, r25	; 0x02
    312a:	89 83       	std	Y+1, r24	; 0x01

	i=Remeaning/100;
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	9a 81       	ldd	r25, Y+2	; 0x02
    3130:	24 e6       	ldi	r18, 0x64	; 100
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	b9 01       	movw	r22, r18
    3136:	0e 94 24 38 	call	0x7048	; 0x7048 <__udivmodhi4>
    313a:	cb 01       	movw	r24, r22
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	8b 83       	std	Y+3, r24	; 0x03
	EF_void_UART_PutChar(i+0x30);
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	80 5d       	subi	r24, 0xD0	; 208
    3144:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
	Remeaning=(Remeaning-i*100);
    3148:	2b 81       	ldd	r18, Y+3	; 0x03
    314a:	3c 81       	ldd	r19, Y+4	; 0x04
    314c:	84 e6       	ldi	r24, 0x64	; 100
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a9 01       	movw	r20, r18
    3152:	48 9f       	mul	r20, r24
    3154:	90 01       	movw	r18, r0
    3156:	49 9f       	mul	r20, r25
    3158:	30 0d       	add	r19, r0
    315a:	58 9f       	mul	r21, r24
    315c:	30 0d       	add	r19, r0
    315e:	11 24       	eor	r1, r1
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	82 1b       	sub	r24, r18
    3166:	93 0b       	sbc	r25, r19
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01

	i=Remeaning/10;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	9a 81       	ldd	r25, Y+2	; 0x02
    3170:	2a e0       	ldi	r18, 0x0A	; 10
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	b9 01       	movw	r22, r18
    3176:	0e 94 24 38 	call	0x7048	; 0x7048 <__udivmodhi4>
    317a:	cb 01       	movw	r24, r22
    317c:	9c 83       	std	Y+4, r25	; 0x04
    317e:	8b 83       	std	Y+3, r24	; 0x03
	EF_void_UART_PutChar(i+0x30);
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	80 5d       	subi	r24, 0xD0	; 208
    3184:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>
	Remeaning=(Remeaning-i*10);
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	9c 01       	movw	r18, r24
    318e:	22 0f       	add	r18, r18
    3190:	33 1f       	adc	r19, r19
    3192:	c9 01       	movw	r24, r18
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	28 0f       	add	r18, r24
    319e:	39 1f       	adc	r19, r25
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	9a 81       	ldd	r25, Y+2	; 0x02
    31a4:	82 1b       	sub	r24, r18
    31a6:	93 0b       	sbc	r25, r19
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01

	i=Remeaning;
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	9c 83       	std	Y+4, r25	; 0x04
    31b2:	8b 83       	std	Y+3, r24	; 0x03
	EF_void_UART_PutChar(i+0x30);
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	80 5d       	subi	r24, 0xD0	; 208
    31b8:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <EF_void_UART_PutChar>


}
    31bc:	26 96       	adiw	r28, 0x06	; 6
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	08 95       	ret

000031ce <EF_void_LCD_init>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_init()
{
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    31da:	c4 55       	subi	r28, 0x54	; 84
    31dc:	d0 40       	sbci	r29, 0x00	; 0
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
	/* Init Control PIN as Output */
	LCD_EN_DDR |=  (1 << LCD_ENABLE_PIN);
    31e8:	a4 e3       	ldi	r26, 0x34	; 52
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e4 e3       	ldi	r30, 0x34	; 52
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	80 68       	ori	r24, 0x80	; 128
    31f4:	8c 93       	st	X, r24
	LCD_RS_DDR |=	(1 << LCD_RS_PIN) ;
    31f6:	a4 e3       	ldi	r26, 0x34	; 52
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e4 e3       	ldi	r30, 0x34	; 52
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	80 64       	ori	r24, 0x40	; 64
    3202:	8c 93       	st	X, r24

	/* Init Data PIN as Output 0,1,2,3 */
//	LCD_DATA_DDR  |= 0x0F;

//	LCD_DATA_DDR  |= 0xF0;
	LCD_DATA_DDR  |= ((1 << LCD_DATA0_PIN) | (1 << LCD_DATA1_PIN) | (1 << LCD_DATA2_PIN) | (1 << LCD_DATA3_PIN));
    3204:	a7 e3       	ldi	r26, 0x37	; 55
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	e7 e3       	ldi	r30, 0x37	; 55
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	80 6f       	ori	r24, 0xF0	; 240
    3210:	8c 93       	st	X, r24

	LCD_DATA_PORT |= 0x00;
    3212:	a8 e3       	ldi	r26, 0x38	; 56
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	e8 e3       	ldi	r30, 0x38	; 56
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	8c 93       	st	X, r24
	/* after power up , delay 10ms should be existed */
	LCD_4BIT_Write_Init(0x30);
    321e:	80 e3       	ldi	r24, 0x30	; 48
    3220:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <LCD_4BIT_Write_Init>
    3224:	fe 01       	movw	r30, r28
    3226:	ef 5a       	subi	r30, 0xAF	; 175
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	a0 e2       	ldi	r26, 0x20	; 32
    3230:	b1 e4       	ldi	r27, 0x41	; 65
    3232:	80 83       	st	Z, r24
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	a2 83       	std	Z+2, r26	; 0x02
    3238:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323a:	8e 01       	movw	r16, r28
    323c:	03 5b       	subi	r16, 0xB3	; 179
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	fe 01       	movw	r30, r28
    3242:	ef 5a       	subi	r30, 0xAF	; 175
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	60 81       	ld	r22, Z
    3248:	71 81       	ldd	r23, Z+1	; 0x01
    324a:	82 81       	ldd	r24, Z+2	; 0x02
    324c:	93 81       	ldd	r25, Z+3	; 0x03
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	4a ef       	ldi	r20, 0xFA	; 250
    3254:	54 e4       	ldi	r21, 0x44	; 68
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	f8 01       	movw	r30, r16
    3260:	80 83       	st	Z, r24
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	a2 83       	std	Z+2, r26	; 0x02
    3266:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3268:	fe 01       	movw	r30, r28
    326a:	e3 5b       	subi	r30, 0xB3	; 179
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e8       	ldi	r20, 0x80	; 128
    327c:	5f e3       	ldi	r21, 0x3F	; 63
    327e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3282:	88 23       	and	r24, r24
    3284:	44 f4       	brge	.+16     	; 0x3296 <EF_void_LCD_init+0xc8>
		__ticks = 1;
    3286:	fe 01       	movw	r30, r28
    3288:	e5 5b       	subi	r30, 0xB5	; 181
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
    3294:	64 c0       	rjmp	.+200    	; 0x335e <EF_void_LCD_init+0x190>
	else if (__tmp > 65535)
    3296:	fe 01       	movw	r30, r28
    3298:	e3 5b       	subi	r30, 0xB3	; 179
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	4f e7       	ldi	r20, 0x7F	; 127
    32aa:	57 e4       	ldi	r21, 0x47	; 71
    32ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	0c f0       	brlt	.+2      	; 0x32b6 <EF_void_LCD_init+0xe8>
    32b4:	43 c0       	rjmp	.+134    	; 0x333c <EF_void_LCD_init+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b6:	fe 01       	movw	r30, r28
    32b8:	ef 5a       	subi	r30, 0xAF	; 175
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	60 81       	ld	r22, Z
    32be:	71 81       	ldd	r23, Z+1	; 0x01
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e2       	ldi	r20, 0x20	; 32
    32ca:	51 e4       	ldi	r21, 0x41	; 65
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8e 01       	movw	r16, r28
    32d6:	05 5b       	subi	r16, 0xB5	; 181
    32d8:	1f 4f       	sbci	r17, 0xFF	; 255
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	f8 01       	movw	r30, r16
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
    32ec:	1f c0       	rjmp	.+62     	; 0x332c <EF_void_LCD_init+0x15e>
    32ee:	fe 01       	movw	r30, r28
    32f0:	e7 5b       	subi	r30, 0xB7	; 183
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	88 ec       	ldi	r24, 0xC8	; 200
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32fc:	fe 01       	movw	r30, r28
    32fe:	e7 5b       	subi	r30, 0xB7	; 183
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <EF_void_LCD_init+0x138>
    330a:	fe 01       	movw	r30, r28
    330c:	e7 5b       	subi	r30, 0xB7	; 183
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3314:	de 01       	movw	r26, r28
    3316:	a5 5b       	subi	r26, 0xB5	; 181
    3318:	bf 4f       	sbci	r27, 0xFF	; 255
    331a:	fe 01       	movw	r30, r28
    331c:	e5 5b       	subi	r30, 0xB5	; 181
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	11 96       	adiw	r26, 0x01	; 1
    3328:	9c 93       	st	X, r25
    332a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332c:	fe 01       	movw	r30, r28
    332e:	e5 5b       	subi	r30, 0xB5	; 181
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	91 81       	ldd	r25, Z+1	; 0x01
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	d1 f6       	brne	.-76     	; 0x32ee <EF_void_LCD_init+0x120>
    333a:	27 c0       	rjmp	.+78     	; 0x338a <EF_void_LCD_init+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333c:	8e 01       	movw	r16, r28
    333e:	05 5b       	subi	r16, 0xB5	; 181
    3340:	1f 4f       	sbci	r17, 0xFF	; 255
    3342:	fe 01       	movw	r30, r28
    3344:	e3 5b       	subi	r30, 0xB3	; 179
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	60 81       	ld	r22, Z
    334a:	71 81       	ldd	r23, Z+1	; 0x01
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	f8 01       	movw	r30, r16
    335a:	91 83       	std	Z+1, r25	; 0x01
    335c:	80 83       	st	Z, r24
    335e:	de 01       	movw	r26, r28
    3360:	a9 5b       	subi	r26, 0xB9	; 185
    3362:	bf 4f       	sbci	r27, 0xFF	; 255
    3364:	fe 01       	movw	r30, r28
    3366:	e5 5b       	subi	r30, 0xB5	; 181
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	80 81       	ld	r24, Z
    336c:	91 81       	ldd	r25, Z+1	; 0x01
    336e:	8d 93       	st	X+, r24
    3370:	9c 93       	st	X, r25
    3372:	fe 01       	movw	r30, r28
    3374:	e9 5b       	subi	r30, 0xB9	; 185
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <EF_void_LCD_init+0x1ae>
    3380:	fe 01       	movw	r30, r28
    3382:	e9 5b       	subi	r30, 0xB9	; 185
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    338a:	80 e3       	ldi	r24, 0x30	; 48
    338c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <LCD_4BIT_Write_Init>
    3390:	fe 01       	movw	r30, r28
    3392:	ed 5b       	subi	r30, 0xBD	; 189
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	a0 e2       	ldi	r26, 0x20	; 32
    339c:	b1 e4       	ldi	r27, 0x41	; 65
    339e:	80 83       	st	Z, r24
    33a0:	91 83       	std	Z+1, r25	; 0x01
    33a2:	a2 83       	std	Z+2, r26	; 0x02
    33a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a6:	8e 01       	movw	r16, r28
    33a8:	01 5c       	subi	r16, 0xC1	; 193
    33aa:	1f 4f       	sbci	r17, 0xFF	; 255
    33ac:	fe 01       	movw	r30, r28
    33ae:	ed 5b       	subi	r30, 0xBD	; 189
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	60 81       	ld	r22, Z
    33b4:	71 81       	ldd	r23, Z+1	; 0x01
    33b6:	82 81       	ldd	r24, Z+2	; 0x02
    33b8:	93 81       	ldd	r25, Z+3	; 0x03
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a ef       	ldi	r20, 0xFA	; 250
    33c0:	54 e4       	ldi	r21, 0x44	; 68
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	f8 01       	movw	r30, r16
    33cc:	80 83       	st	Z, r24
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	a2 83       	std	Z+2, r26	; 0x02
    33d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33d4:	fe 01       	movw	r30, r28
    33d6:	ff 96       	adiw	r30, 0x3f	; 63
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e8       	ldi	r20, 0x80	; 128
    33e6:	5f e3       	ldi	r21, 0x3F	; 63
    33e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ec:	88 23       	and	r24, r24
    33ee:	2c f4       	brge	.+10     	; 0x33fa <EF_void_LCD_init+0x22c>
		__ticks = 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	9e af       	std	Y+62, r25	; 0x3e
    33f6:	8d af       	std	Y+61, r24	; 0x3d
    33f8:	46 c0       	rjmp	.+140    	; 0x3486 <EF_void_LCD_init+0x2b8>
	else if (__tmp > 65535)
    33fa:	fe 01       	movw	r30, r28
    33fc:	ff 96       	adiw	r30, 0x3f	; 63
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	3f ef       	ldi	r19, 0xFF	; 255
    340a:	4f e7       	ldi	r20, 0x7F	; 127
    340c:	57 e4       	ldi	r21, 0x47	; 71
    340e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3412:	18 16       	cp	r1, r24
    3414:	64 f5       	brge	.+88     	; 0x346e <EF_void_LCD_init+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3416:	fe 01       	movw	r30, r28
    3418:	ed 5b       	subi	r30, 0xBD	; 189
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e2       	ldi	r20, 0x20	; 32
    342a:	51 e4       	ldi	r21, 0x41	; 65
    342c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	9e af       	std	Y+62, r25	; 0x3e
    3442:	8d af       	std	Y+61, r24	; 0x3d
    3444:	0f c0       	rjmp	.+30     	; 0x3464 <EF_void_LCD_init+0x296>
    3446:	88 ec       	ldi	r24, 0xC8	; 200
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	9c af       	std	Y+60, r25	; 0x3c
    344c:	8b af       	std	Y+59, r24	; 0x3b
    344e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3450:	9c ad       	ldd	r25, Y+60	; 0x3c
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	f1 f7       	brne	.-4      	; 0x3452 <EF_void_LCD_init+0x284>
    3456:	9c af       	std	Y+60, r25	; 0x3c
    3458:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    345a:	8d ad       	ldd	r24, Y+61	; 0x3d
    345c:	9e ad       	ldd	r25, Y+62	; 0x3e
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	9e af       	std	Y+62, r25	; 0x3e
    3462:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3464:	8d ad       	ldd	r24, Y+61	; 0x3d
    3466:	9e ad       	ldd	r25, Y+62	; 0x3e
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	69 f7       	brne	.-38     	; 0x3446 <EF_void_LCD_init+0x278>
    346c:	16 c0       	rjmp	.+44     	; 0x349a <EF_void_LCD_init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346e:	fe 01       	movw	r30, r28
    3470:	ff 96       	adiw	r30, 0x3f	; 63
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	9e af       	std	Y+62, r25	; 0x3e
    3484:	8d af       	std	Y+61, r24	; 0x3d
    3486:	8d ad       	ldd	r24, Y+61	; 0x3d
    3488:	9e ad       	ldd	r25, Y+62	; 0x3e
    348a:	9a af       	std	Y+58, r25	; 0x3a
    348c:	89 af       	std	Y+57, r24	; 0x39
    348e:	89 ad       	ldd	r24, Y+57	; 0x39
    3490:	9a ad       	ldd	r25, Y+58	; 0x3a
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <EF_void_LCD_init+0x2c4>
    3496:	9a af       	std	Y+58, r25	; 0x3a
    3498:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    349a:	80 e3       	ldi	r24, 0x30	; 48
    349c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <LCD_4BIT_Write_Init>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	a0 e2       	ldi	r26, 0x20	; 32
    34a6:	b1 e4       	ldi	r27, 0x41	; 65
    34a8:	8d ab       	std	Y+53, r24	; 0x35
    34aa:	9e ab       	std	Y+54, r25	; 0x36
    34ac:	af ab       	std	Y+55, r26	; 0x37
    34ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b0:	6d a9       	ldd	r22, Y+53	; 0x35
    34b2:	7e a9       	ldd	r23, Y+54	; 0x36
    34b4:	8f a9       	ldd	r24, Y+55	; 0x37
    34b6:	98 ad       	ldd	r25, Y+56	; 0x38
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	4a ef       	ldi	r20, 0xFA	; 250
    34be:	54 e4       	ldi	r21, 0x44	; 68
    34c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	89 ab       	std	Y+49, r24	; 0x31
    34ca:	9a ab       	std	Y+50, r25	; 0x32
    34cc:	ab ab       	std	Y+51, r26	; 0x33
    34ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34d0:	69 a9       	ldd	r22, Y+49	; 0x31
    34d2:	7a a9       	ldd	r23, Y+50	; 0x32
    34d4:	8b a9       	ldd	r24, Y+51	; 0x33
    34d6:	9c a9       	ldd	r25, Y+52	; 0x34
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e8       	ldi	r20, 0x80	; 128
    34de:	5f e3       	ldi	r21, 0x3F	; 63
    34e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34e4:	88 23       	and	r24, r24
    34e6:	2c f4       	brge	.+10     	; 0x34f2 <EF_void_LCD_init+0x324>
		__ticks = 1;
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	98 ab       	std	Y+48, r25	; 0x30
    34ee:	8f a7       	std	Y+47, r24	; 0x2f
    34f0:	3f c0       	rjmp	.+126    	; 0x3570 <EF_void_LCD_init+0x3a2>
	else if (__tmp > 65535)
    34f2:	69 a9       	ldd	r22, Y+49	; 0x31
    34f4:	7a a9       	ldd	r23, Y+50	; 0x32
    34f6:	8b a9       	ldd	r24, Y+51	; 0x33
    34f8:	9c a9       	ldd	r25, Y+52	; 0x34
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	3f ef       	ldi	r19, 0xFF	; 255
    34fe:	4f e7       	ldi	r20, 0x7F	; 127
    3500:	57 e4       	ldi	r21, 0x47	; 71
    3502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3506:	18 16       	cp	r1, r24
    3508:	4c f5       	brge	.+82     	; 0x355c <EF_void_LCD_init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350a:	6d a9       	ldd	r22, Y+53	; 0x35
    350c:	7e a9       	ldd	r23, Y+54	; 0x36
    350e:	8f a9       	ldd	r24, Y+55	; 0x37
    3510:	98 ad       	ldd	r25, Y+56	; 0x38
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e2       	ldi	r20, 0x20	; 32
    3518:	51 e4       	ldi	r21, 0x41	; 65
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	98 ab       	std	Y+48, r25	; 0x30
    3530:	8f a7       	std	Y+47, r24	; 0x2f
    3532:	0f c0       	rjmp	.+30     	; 0x3552 <EF_void_LCD_init+0x384>
    3534:	88 ec       	ldi	r24, 0xC8	; 200
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9e a7       	std	Y+46, r25	; 0x2e
    353a:	8d a7       	std	Y+45, r24	; 0x2d
    353c:	8d a5       	ldd	r24, Y+45	; 0x2d
    353e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3540:	01 97       	sbiw	r24, 0x01	; 1
    3542:	f1 f7       	brne	.-4      	; 0x3540 <EF_void_LCD_init+0x372>
    3544:	9e a7       	std	Y+46, r25	; 0x2e
    3546:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3548:	8f a5       	ldd	r24, Y+47	; 0x2f
    354a:	98 a9       	ldd	r25, Y+48	; 0x30
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	98 ab       	std	Y+48, r25	; 0x30
    3550:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3552:	8f a5       	ldd	r24, Y+47	; 0x2f
    3554:	98 a9       	ldd	r25, Y+48	; 0x30
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	69 f7       	brne	.-38     	; 0x3534 <EF_void_LCD_init+0x366>
    355a:	14 c0       	rjmp	.+40     	; 0x3584 <EF_void_LCD_init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355c:	69 a9       	ldd	r22, Y+49	; 0x31
    355e:	7a a9       	ldd	r23, Y+50	; 0x32
    3560:	8b a9       	ldd	r24, Y+51	; 0x33
    3562:	9c a9       	ldd	r25, Y+52	; 0x34
    3564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	98 ab       	std	Y+48, r25	; 0x30
    356e:	8f a7       	std	Y+47, r24	; 0x2f
    3570:	8f a5       	ldd	r24, Y+47	; 0x2f
    3572:	98 a9       	ldd	r25, Y+48	; 0x30
    3574:	9c a7       	std	Y+44, r25	; 0x2c
    3576:	8b a7       	std	Y+43, r24	; 0x2b
    3578:	8b a5       	ldd	r24, Y+43	; 0x2b
    357a:	9c a5       	ldd	r25, Y+44	; 0x2c
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <EF_void_LCD_init+0x3ae>
    3580:	9c a7       	std	Y+44, r25	; 0x2c
    3582:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x20);
    3584:	80 e2       	ldi	r24, 0x20	; 32
    3586:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <LCD_4BIT_Write_Init>
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a0 e2       	ldi	r26, 0x20	; 32
    3590:	b1 e4       	ldi	r27, 0x41	; 65
    3592:	8f a3       	std	Y+39, r24	; 0x27
    3594:	98 a7       	std	Y+40, r25	; 0x28
    3596:	a9 a7       	std	Y+41, r26	; 0x29
    3598:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359a:	6f a1       	ldd	r22, Y+39	; 0x27
    359c:	78 a5       	ldd	r23, Y+40	; 0x28
    359e:	89 a5       	ldd	r24, Y+41	; 0x29
    35a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	4a ef       	ldi	r20, 0xFA	; 250
    35a8:	54 e4       	ldi	r21, 0x44	; 68
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	8b a3       	std	Y+35, r24	; 0x23
    35b4:	9c a3       	std	Y+36, r25	; 0x24
    35b6:	ad a3       	std	Y+37, r26	; 0x25
    35b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35ba:	6b a1       	ldd	r22, Y+35	; 0x23
    35bc:	7c a1       	ldd	r23, Y+36	; 0x24
    35be:	8d a1       	ldd	r24, Y+37	; 0x25
    35c0:	9e a1       	ldd	r25, Y+38	; 0x26
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e8       	ldi	r20, 0x80	; 128
    35c8:	5f e3       	ldi	r21, 0x3F	; 63
    35ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ce:	88 23       	and	r24, r24
    35d0:	2c f4       	brge	.+10     	; 0x35dc <EF_void_LCD_init+0x40e>
		__ticks = 1;
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	9a a3       	std	Y+34, r25	; 0x22
    35d8:	89 a3       	std	Y+33, r24	; 0x21
    35da:	3f c0       	rjmp	.+126    	; 0x365a <EF_void_LCD_init+0x48c>
	else if (__tmp > 65535)
    35dc:	6b a1       	ldd	r22, Y+35	; 0x23
    35de:	7c a1       	ldd	r23, Y+36	; 0x24
    35e0:	8d a1       	ldd	r24, Y+37	; 0x25
    35e2:	9e a1       	ldd	r25, Y+38	; 0x26
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	3f ef       	ldi	r19, 0xFF	; 255
    35e8:	4f e7       	ldi	r20, 0x7F	; 127
    35ea:	57 e4       	ldi	r21, 0x47	; 71
    35ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f0:	18 16       	cp	r1, r24
    35f2:	4c f5       	brge	.+82     	; 0x3646 <EF_void_LCD_init+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f4:	6f a1       	ldd	r22, Y+39	; 0x27
    35f6:	78 a5       	ldd	r23, Y+40	; 0x28
    35f8:	89 a5       	ldd	r24, Y+41	; 0x29
    35fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e2       	ldi	r20, 0x20	; 32
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9a a3       	std	Y+34, r25	; 0x22
    361a:	89 a3       	std	Y+33, r24	; 0x21
    361c:	0f c0       	rjmp	.+30     	; 0x363c <EF_void_LCD_init+0x46e>
    361e:	88 ec       	ldi	r24, 0xC8	; 200
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	98 a3       	std	Y+32, r25	; 0x20
    3624:	8f 8f       	std	Y+31, r24	; 0x1f
    3626:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3628:	98 a1       	ldd	r25, Y+32	; 0x20
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <EF_void_LCD_init+0x45c>
    362e:	98 a3       	std	Y+32, r25	; 0x20
    3630:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3632:	89 a1       	ldd	r24, Y+33	; 0x21
    3634:	9a a1       	ldd	r25, Y+34	; 0x22
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	9a a3       	std	Y+34, r25	; 0x22
    363a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363c:	89 a1       	ldd	r24, Y+33	; 0x21
    363e:	9a a1       	ldd	r25, Y+34	; 0x22
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	69 f7       	brne	.-38     	; 0x361e <EF_void_LCD_init+0x450>
    3644:	14 c0       	rjmp	.+40     	; 0x366e <EF_void_LCD_init+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3646:	6b a1       	ldd	r22, Y+35	; 0x23
    3648:	7c a1       	ldd	r23, Y+36	; 0x24
    364a:	8d a1       	ldd	r24, Y+37	; 0x25
    364c:	9e a1       	ldd	r25, Y+38	; 0x26
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9a a3       	std	Y+34, r25	; 0x22
    3658:	89 a3       	std	Y+33, r24	; 0x21
    365a:	89 a1       	ldd	r24, Y+33	; 0x21
    365c:	9a a1       	ldd	r25, Y+34	; 0x22
    365e:	9e 8f       	std	Y+30, r25	; 0x1e
    3660:	8d 8f       	std	Y+29, r24	; 0x1d
    3662:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3664:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <EF_void_LCD_init+0x498>
    366a:	9e 8f       	std	Y+30, r25	; 0x1e
    366c:	8d 8f       	std	Y+29, r24	; 0x1d
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	a0 e2       	ldi	r26, 0x20	; 32
    3674:	b1 e4       	ldi	r27, 0x41	; 65
    3676:	89 8f       	std	Y+25, r24	; 0x19
    3678:	9a 8f       	std	Y+26, r25	; 0x1a
    367a:	ab 8f       	std	Y+27, r26	; 0x1b
    367c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367e:	69 8d       	ldd	r22, Y+25	; 0x19
    3680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	4a ef       	ldi	r20, 0xFA	; 250
    368c:	54 e4       	ldi	r21, 0x44	; 68
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8d 8b       	std	Y+21, r24	; 0x15
    3698:	9e 8b       	std	Y+22, r25	; 0x16
    369a:	af 8b       	std	Y+23, r26	; 0x17
    369c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    369e:	6d 89       	ldd	r22, Y+21	; 0x15
    36a0:	7e 89       	ldd	r23, Y+22	; 0x16
    36a2:	8f 89       	ldd	r24, Y+23	; 0x17
    36a4:	98 8d       	ldd	r25, Y+24	; 0x18
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e8       	ldi	r20, 0x80	; 128
    36ac:	5f e3       	ldi	r21, 0x3F	; 63
    36ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b2:	88 23       	and	r24, r24
    36b4:	2c f4       	brge	.+10     	; 0x36c0 <EF_void_LCD_init+0x4f2>
		__ticks = 1;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9c 8b       	std	Y+20, r25	; 0x14
    36bc:	8b 8b       	std	Y+19, r24	; 0x13
    36be:	3f c0       	rjmp	.+126    	; 0x373e <EF_void_LCD_init+0x570>
	else if (__tmp > 65535)
    36c0:	6d 89       	ldd	r22, Y+21	; 0x15
    36c2:	7e 89       	ldd	r23, Y+22	; 0x16
    36c4:	8f 89       	ldd	r24, Y+23	; 0x17
    36c6:	98 8d       	ldd	r25, Y+24	; 0x18
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	3f ef       	ldi	r19, 0xFF	; 255
    36cc:	4f e7       	ldi	r20, 0x7F	; 127
    36ce:	57 e4       	ldi	r21, 0x47	; 71
    36d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d4:	18 16       	cp	r1, r24
    36d6:	4c f5       	brge	.+82     	; 0x372a <EF_void_LCD_init+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d8:	69 8d       	ldd	r22, Y+25	; 0x19
    36da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e2       	ldi	r20, 0x20	; 32
    36e6:	51 e4       	ldi	r21, 0x41	; 65
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	bc 01       	movw	r22, r24
    36f2:	cd 01       	movw	r24, r26
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	9c 8b       	std	Y+20, r25	; 0x14
    36fe:	8b 8b       	std	Y+19, r24	; 0x13
    3700:	0f c0       	rjmp	.+30     	; 0x3720 <EF_void_LCD_init+0x552>
    3702:	88 ec       	ldi	r24, 0xC8	; 200
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9a 8b       	std	Y+18, r25	; 0x12
    3708:	89 8b       	std	Y+17, r24	; 0x11
    370a:	89 89       	ldd	r24, Y+17	; 0x11
    370c:	9a 89       	ldd	r25, Y+18	; 0x12
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <EF_void_LCD_init+0x540>
    3712:	9a 8b       	std	Y+18, r25	; 0x12
    3714:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3716:	8b 89       	ldd	r24, Y+19	; 0x13
    3718:	9c 89       	ldd	r25, Y+20	; 0x14
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	9c 8b       	std	Y+20, r25	; 0x14
    371e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3720:	8b 89       	ldd	r24, Y+19	; 0x13
    3722:	9c 89       	ldd	r25, Y+20	; 0x14
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	69 f7       	brne	.-38     	; 0x3702 <EF_void_LCD_init+0x534>
    3728:	14 c0       	rjmp	.+40     	; 0x3752 <EF_void_LCD_init+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372a:	6d 89       	ldd	r22, Y+21	; 0x15
    372c:	7e 89       	ldd	r23, Y+22	; 0x16
    372e:	8f 89       	ldd	r24, Y+23	; 0x17
    3730:	98 8d       	ldd	r25, Y+24	; 0x18
    3732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	9c 8b       	std	Y+20, r25	; 0x14
    373c:	8b 8b       	std	Y+19, r24	; 0x13
    373e:	8b 89       	ldd	r24, Y+19	; 0x13
    3740:	9c 89       	ldd	r25, Y+20	; 0x14
    3742:	98 8b       	std	Y+16, r25	; 0x10
    3744:	8f 87       	std	Y+15, r24	; 0x0f
    3746:	8f 85       	ldd	r24, Y+15	; 0x0f
    3748:	98 89       	ldd	r25, Y+16	; 0x10
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <EF_void_LCD_init+0x57c>
    374e:	98 8b       	std	Y+16, r25	; 0x10
    3750:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	_delay_ms(10);
	EF_void_LCD_send_command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    3752:	88 e2       	ldi	r24, 0x28	; 40
    3754:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    3758:	8c e0       	ldi	r24, 0x0C	; 12
    375a:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    375e:	86 e0       	ldi	r24, 0x06	; 6
    3760:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    3764:	80 e8       	ldi	r24, 0x80	; 128
    3766:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	a0 ea       	ldi	r26, 0xA0	; 160
    3770:	b1 e4       	ldi	r27, 0x41	; 65
    3772:	8b 87       	std	Y+11, r24	; 0x0b
    3774:	9c 87       	std	Y+12, r25	; 0x0c
    3776:	ad 87       	std	Y+13, r26	; 0x0d
    3778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377a:	6b 85       	ldd	r22, Y+11	; 0x0b
    377c:	7c 85       	ldd	r23, Y+12	; 0x0c
    377e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3780:	9e 85       	ldd	r25, Y+14	; 0x0e
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	4a ef       	ldi	r20, 0xFA	; 250
    3788:	54 e4       	ldi	r21, 0x44	; 68
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	8f 83       	std	Y+7, r24	; 0x07
    3794:	98 87       	std	Y+8, r25	; 0x08
    3796:	a9 87       	std	Y+9, r26	; 0x09
    3798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    379a:	6f 81       	ldd	r22, Y+7	; 0x07
    379c:	78 85       	ldd	r23, Y+8	; 0x08
    379e:	89 85       	ldd	r24, Y+9	; 0x09
    37a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	2c f4       	brge	.+10     	; 0x37bc <EF_void_LCD_init+0x5ee>
		__ticks = 1;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9e 83       	std	Y+6, r25	; 0x06
    37b8:	8d 83       	std	Y+5, r24	; 0x05
    37ba:	3f c0       	rjmp	.+126    	; 0x383a <EF_void_LCD_init+0x66c>
	else if (__tmp > 65535)
    37bc:	6f 81       	ldd	r22, Y+7	; 0x07
    37be:	78 85       	ldd	r23, Y+8	; 0x08
    37c0:	89 85       	ldd	r24, Y+9	; 0x09
    37c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	3f ef       	ldi	r19, 0xFF	; 255
    37c8:	4f e7       	ldi	r20, 0x7F	; 127
    37ca:	57 e4       	ldi	r21, 0x47	; 71
    37cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d0:	18 16       	cp	r1, r24
    37d2:	4c f5       	brge	.+82     	; 0x3826 <EF_void_LCD_init+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37da:	9e 85       	ldd	r25, Y+14	; 0x0e
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e2       	ldi	r20, 0x20	; 32
    37e2:	51 e4       	ldi	r21, 0x41	; 65
    37e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
    37fc:	0f c0       	rjmp	.+30     	; 0x381c <EF_void_LCD_init+0x64e>
    37fe:	88 ec       	ldi	r24, 0xC8	; 200
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	9c 83       	std	Y+4, r25	; 0x04
    3804:	8b 83       	std	Y+3, r24	; 0x03
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	9c 81       	ldd	r25, Y+4	; 0x04
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <EF_void_LCD_init+0x63c>
    380e:	9c 83       	std	Y+4, r25	; 0x04
    3810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9e 81       	ldd	r25, Y+6	; 0x06
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381c:	8d 81       	ldd	r24, Y+5	; 0x05
    381e:	9e 81       	ldd	r25, Y+6	; 0x06
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	69 f7       	brne	.-38     	; 0x37fe <EF_void_LCD_init+0x630>
    3824:	14 c0       	rjmp	.+40     	; 0x384e <EF_void_LCD_init+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3826:	6f 81       	ldd	r22, Y+7	; 0x07
    3828:	78 85       	ldd	r23, Y+8	; 0x08
    382a:	89 85       	ldd	r24, Y+9	; 0x09
    382c:	9a 85       	ldd	r25, Y+10	; 0x0a
    382e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	9e 83       	std	Y+6, r25	; 0x06
    3838:	8d 83       	std	Y+5, r24	; 0x05
    383a:	8d 81       	ldd	r24, Y+5	; 0x05
    383c:	9e 81       	ldd	r25, Y+6	; 0x06
    383e:	9a 83       	std	Y+2, r25	; 0x02
    3840:	89 83       	std	Y+1, r24	; 0x01
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	9a 81       	ldd	r25, Y+2	; 0x02
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <EF_void_LCD_init+0x678>
    384a:	9a 83       	std	Y+2, r25	; 0x02
    384c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    384e:	cc 5a       	subi	r28, 0xAC	; 172
    3850:	df 4f       	sbci	r29, 0xFF	; 255
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	08 95       	ret

00003866 <EF_void_LCD_send_command>:
 * PARAMETERS  : U8_t cmnd:  Command User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_command(U8_t cmnd)
{
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	c9 54       	subi	r28, 0x49	; 73
    3874:	d0 40       	sbci	r29, 0x00	; 0
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	fe 01       	movw	r30, r28
    3882:	e7 5b       	subi	r30, 0xB7	; 183
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 83       	st	Z, r24
	/*RS and RW will be LOW */

	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    3888:	a5 e3       	ldi	r26, 0x35	; 53
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	e5 e3       	ldi	r30, 0x35	; 53
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	8f 7b       	andi	r24, 0xBF	; 191
    3894:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    3896:	a8 e3       	ldi	r26, 0x38	; 56
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e8 e3       	ldi	r30, 0x38	; 56
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	8f 77       	andi	r24, 0x7F	; 127
    38a2:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    38a4:	a8 e3       	ldi	r26, 0x38	; 56
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e8 e3       	ldi	r30, 0x38	; 56
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	8f 7b       	andi	r24, 0xBF	; 191
    38b0:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    38b2:	a8 e3       	ldi	r26, 0x38	; 56
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e8 e3       	ldi	r30, 0x38	; 56
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	8f 7d       	andi	r24, 0xDF	; 223
    38be:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    38c0:	a8 e3       	ldi	r26, 0x38	; 56
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	e8 e3       	ldi	r30, 0x38	; 56
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	8f 7e       	andi	r24, 0xEF	; 239
    38cc:	8c 93       	st	X, r24

	if(cmnd & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    38ce:	fe 01       	movw	r30, r28
    38d0:	e7 5b       	subi	r30, 0xB7	; 183
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	88 23       	and	r24, r24
    38d8:	3c f4       	brge	.+14     	; 0x38e8 <EF_void_LCD_send_command+0x82>
    38da:	a8 e3       	ldi	r26, 0x38	; 56
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e8 e3       	ldi	r30, 0x38	; 56
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	80 68       	ori	r24, 0x80	; 128
    38e6:	8c 93       	st	X, r24
	if(cmnd & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    38e8:	fe 01       	movw	r30, r28
    38ea:	e7 5b       	subi	r30, 0xB7	; 183
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	80 81       	ld	r24, Z
    38f0:	88 2f       	mov	r24, r24
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	80 74       	andi	r24, 0x40	; 64
    38f6:	90 70       	andi	r25, 0x00	; 0
    38f8:	00 97       	sbiw	r24, 0x00	; 0
    38fa:	39 f0       	breq	.+14     	; 0x390a <EF_void_LCD_send_command+0xa4>
    38fc:	a8 e3       	ldi	r26, 0x38	; 56
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e8 e3       	ldi	r30, 0x38	; 56
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	80 64       	ori	r24, 0x40	; 64
    3908:	8c 93       	st	X, r24
	if(cmnd & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    390a:	fe 01       	movw	r30, r28
    390c:	e7 5b       	subi	r30, 0xB7	; 183
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	80 81       	ld	r24, Z
    3912:	88 2f       	mov	r24, r24
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	80 72       	andi	r24, 0x20	; 32
    3918:	90 70       	andi	r25, 0x00	; 0
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	39 f0       	breq	.+14     	; 0x392c <EF_void_LCD_send_command+0xc6>
    391e:	a8 e3       	ldi	r26, 0x38	; 56
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e8 e3       	ldi	r30, 0x38	; 56
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	80 62       	ori	r24, 0x20	; 32
    392a:	8c 93       	st	X, r24
	if(cmnd & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    392c:	fe 01       	movw	r30, r28
    392e:	e7 5b       	subi	r30, 0xB7	; 183
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	88 2f       	mov	r24, r24
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	80 71       	andi	r24, 0x10	; 16
    393a:	90 70       	andi	r25, 0x00	; 0
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	39 f0       	breq	.+14     	; 0x394e <EF_void_LCD_send_command+0xe8>
    3940:	a8 e3       	ldi	r26, 0x38	; 56
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e8 e3       	ldi	r30, 0x38	; 56
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	80 61       	ori	r24, 0x10	; 16
    394c:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    394e:	a5 e3       	ldi	r26, 0x35	; 53
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	e5 e3       	ldi	r30, 0x35	; 53
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	80 81       	ld	r24, Z
    3958:	80 68       	ori	r24, 0x80	; 128
    395a:	8c 93       	st	X, r24
    395c:	fe 01       	movw	r30, r28
    395e:	eb 5b       	subi	r30, 0xBB	; 187
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	a0 e0       	ldi	r26, 0x00	; 0
    3968:	b0 e4       	ldi	r27, 0x40	; 64
    396a:	80 83       	st	Z, r24
    396c:	91 83       	std	Z+1, r25	; 0x01
    396e:	a2 83       	std	Z+2, r26	; 0x02
    3970:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3972:	8e 01       	movw	r16, r28
    3974:	0f 5b       	subi	r16, 0xBF	; 191
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	fe 01       	movw	r30, r28
    397a:	eb 5b       	subi	r30, 0xBB	; 187
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	60 81       	ld	r22, Z
    3980:	71 81       	ldd	r23, Z+1	; 0x01
    3982:	82 81       	ldd	r24, Z+2	; 0x02
    3984:	93 81       	ldd	r25, Z+3	; 0x03
    3986:	2b ea       	ldi	r18, 0xAB	; 171
    3988:	3a ea       	ldi	r19, 0xAA	; 170
    398a:	4a e2       	ldi	r20, 0x2A	; 42
    398c:	50 e4       	ldi	r21, 0x40	; 64
    398e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	f8 01       	movw	r30, r16
    3998:	80 83       	st	Z, r24
    399a:	91 83       	std	Z+1, r25	; 0x01
    399c:	a2 83       	std	Z+2, r26	; 0x02
    399e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a0:	fe 01       	movw	r30, r28
    39a2:	ef 5b       	subi	r30, 0xBF	; 191
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e8       	ldi	r20, 0x80	; 128
    39b4:	5f e3       	ldi	r21, 0x3F	; 63
    39b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ba:	88 23       	and	r24, r24
    39bc:	34 f4       	brge	.+12     	; 0x39ca <EF_void_LCD_send_command+0x164>
		__ticks = 1;
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	fe 01       	movw	r30, r28
    39c2:	e0 5c       	subi	r30, 0xC0	; 192
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	80 83       	st	Z, r24
    39c8:	9d c0       	rjmp	.+314    	; 0x3b04 <EF_void_LCD_send_command+0x29e>
	else if (__tmp > 255)
    39ca:	fe 01       	movw	r30, r28
    39cc:	ef 5b       	subi	r30, 0xBF	; 191
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4f e7       	ldi	r20, 0x7F	; 127
    39de:	53 e4       	ldi	r21, 0x43	; 67
    39e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	0c f0       	brlt	.+2      	; 0x39ea <EF_void_LCD_send_command+0x184>
    39e8:	7e c0       	rjmp	.+252    	; 0x3ae6 <EF_void_LCD_send_command+0x280>
	{
		_delay_ms(__us / 1000.0);
    39ea:	fe 01       	movw	r30, r28
    39ec:	eb 5b       	subi	r30, 0xBB	; 187
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	60 81       	ld	r22, Z
    39f2:	71 81       	ldd	r23, Z+1	; 0x01
    39f4:	82 81       	ldd	r24, Z+2	; 0x02
    39f6:	93 81       	ldd	r25, Z+3	; 0x03
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	4a e7       	ldi	r20, 0x7A	; 122
    39fe:	54 e4       	ldi	r21, 0x44	; 68
    3a00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	8c af       	std	Y+60, r24	; 0x3c
    3a0a:	9d af       	std	Y+61, r25	; 0x3d
    3a0c:	ae af       	std	Y+62, r26	; 0x3e
    3a0e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a10:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a12:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a14:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a16:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	4a ef       	ldi	r20, 0xFA	; 250
    3a1e:	54 e4       	ldi	r21, 0x44	; 68
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	88 af       	std	Y+56, r24	; 0x38
    3a2a:	99 af       	std	Y+57, r25	; 0x39
    3a2c:	aa af       	std	Y+58, r26	; 0x3a
    3a2e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3a30:	68 ad       	ldd	r22, Y+56	; 0x38
    3a32:	79 ad       	ldd	r23, Y+57	; 0x39
    3a34:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a36:	9b ad       	ldd	r25, Y+59	; 0x3b
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e8       	ldi	r20, 0x80	; 128
    3a3e:	5f e3       	ldi	r21, 0x3F	; 63
    3a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a44:	88 23       	and	r24, r24
    3a46:	2c f4       	brge	.+10     	; 0x3a52 <EF_void_LCD_send_command+0x1ec>
		__ticks = 1;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	9f ab       	std	Y+55, r25	; 0x37
    3a4e:	8e ab       	std	Y+54, r24	; 0x36
    3a50:	3f c0       	rjmp	.+126    	; 0x3ad0 <EF_void_LCD_send_command+0x26a>
	else if (__tmp > 65535)
    3a52:	68 ad       	ldd	r22, Y+56	; 0x38
    3a54:	79 ad       	ldd	r23, Y+57	; 0x39
    3a56:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a58:	9b ad       	ldd	r25, Y+59	; 0x3b
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	3f ef       	ldi	r19, 0xFF	; 255
    3a5e:	4f e7       	ldi	r20, 0x7F	; 127
    3a60:	57 e4       	ldi	r21, 0x47	; 71
    3a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a66:	18 16       	cp	r1, r24
    3a68:	4c f5       	brge	.+82     	; 0x3abc <EF_void_LCD_send_command+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a6a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a6c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a70:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	40 e2       	ldi	r20, 0x20	; 32
    3a78:	51 e4       	ldi	r21, 0x41	; 65
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	bc 01       	movw	r22, r24
    3a84:	cd 01       	movw	r24, r26
    3a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	9f ab       	std	Y+55, r25	; 0x37
    3a90:	8e ab       	std	Y+54, r24	; 0x36
    3a92:	0f c0       	rjmp	.+30     	; 0x3ab2 <EF_void_LCD_send_command+0x24c>
    3a94:	88 ec       	ldi	r24, 0xC8	; 200
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	9d ab       	std	Y+53, r25	; 0x35
    3a9a:	8c ab       	std	Y+52, r24	; 0x34
    3a9c:	8c a9       	ldd	r24, Y+52	; 0x34
    3a9e:	9d a9       	ldd	r25, Y+53	; 0x35
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <EF_void_LCD_send_command+0x23a>
    3aa4:	9d ab       	std	Y+53, r25	; 0x35
    3aa6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa8:	8e a9       	ldd	r24, Y+54	; 0x36
    3aaa:	9f a9       	ldd	r25, Y+55	; 0x37
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	9f ab       	std	Y+55, r25	; 0x37
    3ab0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab2:	8e a9       	ldd	r24, Y+54	; 0x36
    3ab4:	9f a9       	ldd	r25, Y+55	; 0x37
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	69 f7       	brne	.-38     	; 0x3a94 <EF_void_LCD_send_command+0x22e>
    3aba:	2d c0       	rjmp	.+90     	; 0x3b16 <EF_void_LCD_send_command+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3abc:	68 ad       	ldd	r22, Y+56	; 0x38
    3abe:	79 ad       	ldd	r23, Y+57	; 0x39
    3ac0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ac2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	9f ab       	std	Y+55, r25	; 0x37
    3ace:	8e ab       	std	Y+54, r24	; 0x36
    3ad0:	8e a9       	ldd	r24, Y+54	; 0x36
    3ad2:	9f a9       	ldd	r25, Y+55	; 0x37
    3ad4:	9b ab       	std	Y+51, r25	; 0x33
    3ad6:	8a ab       	std	Y+50, r24	; 0x32
    3ad8:	8a a9       	ldd	r24, Y+50	; 0x32
    3ada:	9b a9       	ldd	r25, Y+51	; 0x33
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <EF_void_LCD_send_command+0x276>
    3ae0:	9b ab       	std	Y+51, r25	; 0x33
    3ae2:	8a ab       	std	Y+50, r24	; 0x32
    3ae4:	18 c0       	rjmp	.+48     	; 0x3b16 <EF_void_LCD_send_command+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	ef 5b       	subi	r30, 0xBF	; 191
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	fe 01       	movw	r30, r28
    3afe:	e0 5c       	subi	r30, 0xC0	; 192
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 83       	st	Z, r24
    3b04:	fe 01       	movw	r30, r28
    3b06:	e0 5c       	subi	r30, 0xC0	; 192
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	80 81       	ld	r24, Z
    3b0c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b0e:	89 a9       	ldd	r24, Y+49	; 0x31
    3b10:	8a 95       	dec	r24
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <EF_void_LCD_send_command+0x2aa>
    3b14:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    3b16:	a5 e3       	ldi	r26, 0x35	; 53
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e5 e3       	ldi	r30, 0x35	; 53
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	8f 77       	andi	r24, 0x7F	; 127
    3b22:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    3b24:	a8 e3       	ldi	r26, 0x38	; 56
    3b26:	b0 e0       	ldi	r27, 0x00	; 0
    3b28:	e8 e3       	ldi	r30, 0x38	; 56
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	80 81       	ld	r24, Z
    3b2e:	8f 77       	andi	r24, 0x7F	; 127
    3b30:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    3b32:	a8 e3       	ldi	r26, 0x38	; 56
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	e8 e3       	ldi	r30, 0x38	; 56
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	80 81       	ld	r24, Z
    3b3c:	8f 7b       	andi	r24, 0xBF	; 191
    3b3e:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    3b40:	a8 e3       	ldi	r26, 0x38	; 56
    3b42:	b0 e0       	ldi	r27, 0x00	; 0
    3b44:	e8 e3       	ldi	r30, 0x38	; 56
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	80 81       	ld	r24, Z
    3b4a:	8f 7d       	andi	r24, 0xDF	; 223
    3b4c:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    3b4e:	a8 e3       	ldi	r26, 0x38	; 56
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	e8 e3       	ldi	r30, 0x38	; 56
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
    3b58:	8f 7e       	andi	r24, 0xEF	; 239
    3b5a:	8c 93       	st	X, r24
	if(cmnd & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e7 5b       	subi	r30, 0xB7	; 183
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	80 81       	ld	r24, Z
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	88 70       	andi	r24, 0x08	; 8
    3b6a:	90 70       	andi	r25, 0x00	; 0
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	39 f0       	breq	.+14     	; 0x3b7e <EF_void_LCD_send_command+0x318>
    3b70:	a8 e3       	ldi	r26, 0x38	; 56
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	e8 e3       	ldi	r30, 0x38	; 56
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	80 68       	ori	r24, 0x80	; 128
    3b7c:	8c 93       	st	X, r24
	if(cmnd & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e7 5b       	subi	r30, 0xB7	; 183
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	80 81       	ld	r24, Z
    3b86:	88 2f       	mov	r24, r24
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	84 70       	andi	r24, 0x04	; 4
    3b8c:	90 70       	andi	r25, 0x00	; 0
    3b8e:	00 97       	sbiw	r24, 0x00	; 0
    3b90:	39 f0       	breq	.+14     	; 0x3ba0 <EF_void_LCD_send_command+0x33a>
    3b92:	a8 e3       	ldi	r26, 0x38	; 56
    3b94:	b0 e0       	ldi	r27, 0x00	; 0
    3b96:	e8 e3       	ldi	r30, 0x38	; 56
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	80 81       	ld	r24, Z
    3b9c:	80 64       	ori	r24, 0x40	; 64
    3b9e:	8c 93       	st	X, r24
	if(cmnd & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e7 5b       	subi	r30, 0xB7	; 183
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	80 81       	ld	r24, Z
    3ba8:	88 2f       	mov	r24, r24
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	82 70       	andi	r24, 0x02	; 2
    3bae:	90 70       	andi	r25, 0x00	; 0
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	39 f0       	breq	.+14     	; 0x3bc2 <EF_void_LCD_send_command+0x35c>
    3bb4:	a8 e3       	ldi	r26, 0x38	; 56
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	e8 e3       	ldi	r30, 0x38	; 56
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	80 62       	ori	r24, 0x20	; 32
    3bc0:	8c 93       	st	X, r24
	if(cmnd & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	e7 5b       	subi	r30, 0xB7	; 183
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	80 81       	ld	r24, Z
    3bca:	88 2f       	mov	r24, r24
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	81 70       	andi	r24, 0x01	; 1
    3bd0:	90 70       	andi	r25, 0x00	; 0
    3bd2:	88 23       	and	r24, r24
    3bd4:	39 f0       	breq	.+14     	; 0x3be4 <EF_void_LCD_send_command+0x37e>
    3bd6:	a8 e3       	ldi	r26, 0x38	; 56
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	e8 e3       	ldi	r30, 0x38	; 56
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	80 61       	ori	r24, 0x10	; 16
    3be2:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    3be4:	a5 e3       	ldi	r26, 0x35	; 53
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	e5 e3       	ldi	r30, 0x35	; 53
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	80 81       	ld	r24, Z
    3bee:	80 68       	ori	r24, 0x80	; 128
    3bf0:	8c 93       	st	X, r24
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	a0 e0       	ldi	r26, 0x00	; 0
    3bf8:	b0 e4       	ldi	r27, 0x40	; 64
    3bfa:	8d a7       	std	Y+45, r24	; 0x2d
    3bfc:	9e a7       	std	Y+46, r25	; 0x2e
    3bfe:	af a7       	std	Y+47, r26	; 0x2f
    3c00:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c02:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c04:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c06:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c08:	98 a9       	ldd	r25, Y+48	; 0x30
    3c0a:	2b ea       	ldi	r18, 0xAB	; 171
    3c0c:	3a ea       	ldi	r19, 0xAA	; 170
    3c0e:	4a e2       	ldi	r20, 0x2A	; 42
    3c10:	50 e4       	ldi	r21, 0x40	; 64
    3c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	89 a7       	std	Y+41, r24	; 0x29
    3c1c:	9a a7       	std	Y+42, r25	; 0x2a
    3c1e:	ab a7       	std	Y+43, r26	; 0x2b
    3c20:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3c22:	69 a5       	ldd	r22, Y+41	; 0x29
    3c24:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c26:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c28:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e8       	ldi	r20, 0x80	; 128
    3c30:	5f e3       	ldi	r21, 0x3F	; 63
    3c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c36:	88 23       	and	r24, r24
    3c38:	1c f4       	brge	.+6      	; 0x3c40 <EF_void_LCD_send_command+0x3da>
		__ticks = 1;
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	88 a7       	std	Y+40, r24	; 0x28
    3c3e:	91 c0       	rjmp	.+290    	; 0x3d62 <EF_void_LCD_send_command+0x4fc>
	else if (__tmp > 255)
    3c40:	69 a5       	ldd	r22, Y+41	; 0x29
    3c42:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c44:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c46:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	4f e7       	ldi	r20, 0x7F	; 127
    3c4e:	53 e4       	ldi	r21, 0x43	; 67
    3c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c54:	18 16       	cp	r1, r24
    3c56:	0c f0       	brlt	.+2      	; 0x3c5a <EF_void_LCD_send_command+0x3f4>
    3c58:	7b c0       	rjmp	.+246    	; 0x3d50 <EF_void_LCD_send_command+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    3c5a:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c5c:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c60:	98 a9       	ldd	r25, Y+48	; 0x30
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	4a e7       	ldi	r20, 0x7A	; 122
    3c68:	54 e4       	ldi	r21, 0x44	; 68
    3c6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	8c a3       	std	Y+36, r24	; 0x24
    3c74:	9d a3       	std	Y+37, r25	; 0x25
    3c76:	ae a3       	std	Y+38, r26	; 0x26
    3c78:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7a:	6c a1       	ldd	r22, Y+36	; 0x24
    3c7c:	7d a1       	ldd	r23, Y+37	; 0x25
    3c7e:	8e a1       	ldd	r24, Y+38	; 0x26
    3c80:	9f a1       	ldd	r25, Y+39	; 0x27
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	4a ef       	ldi	r20, 0xFA	; 250
    3c88:	54 e4       	ldi	r21, 0x44	; 68
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	88 a3       	std	Y+32, r24	; 0x20
    3c94:	99 a3       	std	Y+33, r25	; 0x21
    3c96:	aa a3       	std	Y+34, r26	; 0x22
    3c98:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3c9a:	68 a1       	ldd	r22, Y+32	; 0x20
    3c9c:	79 a1       	ldd	r23, Y+33	; 0x21
    3c9e:	8a a1       	ldd	r24, Y+34	; 0x22
    3ca0:	9b a1       	ldd	r25, Y+35	; 0x23
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e8       	ldi	r20, 0x80	; 128
    3ca8:	5f e3       	ldi	r21, 0x3F	; 63
    3caa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cae:	88 23       	and	r24, r24
    3cb0:	2c f4       	brge	.+10     	; 0x3cbc <EF_void_LCD_send_command+0x456>
		__ticks = 1;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	9f 8f       	std	Y+31, r25	; 0x1f
    3cb8:	8e 8f       	std	Y+30, r24	; 0x1e
    3cba:	3f c0       	rjmp	.+126    	; 0x3d3a <EF_void_LCD_send_command+0x4d4>
	else if (__tmp > 65535)
    3cbc:	68 a1       	ldd	r22, Y+32	; 0x20
    3cbe:	79 a1       	ldd	r23, Y+33	; 0x21
    3cc0:	8a a1       	ldd	r24, Y+34	; 0x22
    3cc2:	9b a1       	ldd	r25, Y+35	; 0x23
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	3f ef       	ldi	r19, 0xFF	; 255
    3cc8:	4f e7       	ldi	r20, 0x7F	; 127
    3cca:	57 e4       	ldi	r21, 0x47	; 71
    3ccc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cd0:	18 16       	cp	r1, r24
    3cd2:	4c f5       	brge	.+82     	; 0x3d26 <EF_void_LCD_send_command+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd4:	6c a1       	ldd	r22, Y+36	; 0x24
    3cd6:	7d a1       	ldd	r23, Y+37	; 0x25
    3cd8:	8e a1       	ldd	r24, Y+38	; 0x26
    3cda:	9f a1       	ldd	r25, Y+39	; 0x27
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e2       	ldi	r20, 0x20	; 32
    3ce2:	51 e4       	ldi	r21, 0x41	; 65
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9f 8f       	std	Y+31, r25	; 0x1f
    3cfa:	8e 8f       	std	Y+30, r24	; 0x1e
    3cfc:	0f c0       	rjmp	.+30     	; 0x3d1c <EF_void_LCD_send_command+0x4b6>
    3cfe:	88 ec       	ldi	r24, 0xC8	; 200
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	9d 8f       	std	Y+29, r25	; 0x1d
    3d04:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <EF_void_LCD_send_command+0x4a4>
    3d0e:	9d 8f       	std	Y+29, r25	; 0x1d
    3d10:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d14:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	9f 8f       	std	Y+31, r25	; 0x1f
    3d1a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	69 f7       	brne	.-38     	; 0x3cfe <EF_void_LCD_send_command+0x498>
    3d24:	24 c0       	rjmp	.+72     	; 0x3d6e <EF_void_LCD_send_command+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d26:	68 a1       	ldd	r22, Y+32	; 0x20
    3d28:	79 a1       	ldd	r23, Y+33	; 0x21
    3d2a:	8a a1       	ldd	r24, Y+34	; 0x22
    3d2c:	9b a1       	ldd	r25, Y+35	; 0x23
    3d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	9f 8f       	std	Y+31, r25	; 0x1f
    3d38:	8e 8f       	std	Y+30, r24	; 0x1e
    3d3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d3e:	9b 8f       	std	Y+27, r25	; 0x1b
    3d40:	8a 8f       	std	Y+26, r24	; 0x1a
    3d42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d44:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	f1 f7       	brne	.-4      	; 0x3d46 <EF_void_LCD_send_command+0x4e0>
    3d4a:	9b 8f       	std	Y+27, r25	; 0x1b
    3d4c:	8a 8f       	std	Y+26, r24	; 0x1a
    3d4e:	0f c0       	rjmp	.+30     	; 0x3d6e <EF_void_LCD_send_command+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d50:	69 a5       	ldd	r22, Y+41	; 0x29
    3d52:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d54:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d56:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	88 a7       	std	Y+40, r24	; 0x28
    3d62:	88 a5       	ldd	r24, Y+40	; 0x28
    3d64:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d66:	89 8d       	ldd	r24, Y+25	; 0x19
    3d68:	8a 95       	dec	r24
    3d6a:	f1 f7       	brne	.-4      	; 0x3d68 <EF_void_LCD_send_command+0x502>
    3d6c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    3d6e:	a5 e3       	ldi	r26, 0x35	; 53
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	e5 e3       	ldi	r30, 0x35	; 53
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	80 81       	ld	r24, Z
    3d78:	8f 77       	andi	r24, 0x7F	; 127
    3d7a:	8c 93       	st	X, r24
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	a6 e9       	ldi	r26, 0x96	; 150
    3d82:	b3 e4       	ldi	r27, 0x43	; 67
    3d84:	8d 8b       	std	Y+21, r24	; 0x15
    3d86:	9e 8b       	std	Y+22, r25	; 0x16
    3d88:	af 8b       	std	Y+23, r26	; 0x17
    3d8a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d90:	8f 89       	ldd	r24, Y+23	; 0x17
    3d92:	98 8d       	ldd	r25, Y+24	; 0x18
    3d94:	2b ea       	ldi	r18, 0xAB	; 171
    3d96:	3a ea       	ldi	r19, 0xAA	; 170
    3d98:	4a e2       	ldi	r20, 0x2A	; 42
    3d9a:	50 e4       	ldi	r21, 0x40	; 64
    3d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	89 8b       	std	Y+17, r24	; 0x11
    3da6:	9a 8b       	std	Y+18, r25	; 0x12
    3da8:	ab 8b       	std	Y+19, r26	; 0x13
    3daa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3dac:	69 89       	ldd	r22, Y+17	; 0x11
    3dae:	7a 89       	ldd	r23, Y+18	; 0x12
    3db0:	8b 89       	ldd	r24, Y+19	; 0x13
    3db2:	9c 89       	ldd	r25, Y+20	; 0x14
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 e8       	ldi	r20, 0x80	; 128
    3dba:	5f e3       	ldi	r21, 0x3F	; 63
    3dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dc0:	88 23       	and	r24, r24
    3dc2:	1c f4       	brge	.+6      	; 0x3dca <EF_void_LCD_send_command+0x564>
		__ticks = 1;
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	88 8b       	std	Y+16, r24	; 0x10
    3dc8:	91 c0       	rjmp	.+290    	; 0x3eec <EF_void_LCD_send_command+0x686>
	else if (__tmp > 255)
    3dca:	69 89       	ldd	r22, Y+17	; 0x11
    3dcc:	7a 89       	ldd	r23, Y+18	; 0x12
    3dce:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	4f e7       	ldi	r20, 0x7F	; 127
    3dd8:	53 e4       	ldi	r21, 0x43	; 67
    3dda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dde:	18 16       	cp	r1, r24
    3de0:	0c f0       	brlt	.+2      	; 0x3de4 <EF_void_LCD_send_command+0x57e>
    3de2:	7b c0       	rjmp	.+246    	; 0x3eda <EF_void_LCD_send_command+0x674>
	{
		_delay_ms(__us / 1000.0);
    3de4:	6d 89       	ldd	r22, Y+21	; 0x15
    3de6:	7e 89       	ldd	r23, Y+22	; 0x16
    3de8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dea:	98 8d       	ldd	r25, Y+24	; 0x18
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	4a e7       	ldi	r20, 0x7A	; 122
    3df2:	54 e4       	ldi	r21, 0x44	; 68
    3df4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	8c 87       	std	Y+12, r24	; 0x0c
    3dfe:	9d 87       	std	Y+13, r25	; 0x0d
    3e00:	ae 87       	std	Y+14, r26	; 0x0e
    3e02:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e04:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e06:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e08:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	4a ef       	ldi	r20, 0xFA	; 250
    3e12:	54 e4       	ldi	r21, 0x44	; 68
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	88 87       	std	Y+8, r24	; 0x08
    3e1e:	99 87       	std	Y+9, r25	; 0x09
    3e20:	aa 87       	std	Y+10, r26	; 0x0a
    3e22:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3e24:	68 85       	ldd	r22, Y+8	; 0x08
    3e26:	79 85       	ldd	r23, Y+9	; 0x09
    3e28:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e8       	ldi	r20, 0x80	; 128
    3e32:	5f e3       	ldi	r21, 0x3F	; 63
    3e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e38:	88 23       	and	r24, r24
    3e3a:	2c f4       	brge	.+10     	; 0x3e46 <EF_void_LCD_send_command+0x5e0>
		__ticks = 1;
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	9f 83       	std	Y+7, r25	; 0x07
    3e42:	8e 83       	std	Y+6, r24	; 0x06
    3e44:	3f c0       	rjmp	.+126    	; 0x3ec4 <EF_void_LCD_send_command+0x65e>
	else if (__tmp > 65535)
    3e46:	68 85       	ldd	r22, Y+8	; 0x08
    3e48:	79 85       	ldd	r23, Y+9	; 0x09
    3e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	3f ef       	ldi	r19, 0xFF	; 255
    3e52:	4f e7       	ldi	r20, 0x7F	; 127
    3e54:	57 e4       	ldi	r21, 0x47	; 71
    3e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e5a:	18 16       	cp	r1, r24
    3e5c:	4c f5       	brge	.+82     	; 0x3eb0 <EF_void_LCD_send_command+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e60:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 e2       	ldi	r20, 0x20	; 32
    3e6c:	51 e4       	ldi	r21, 0x41	; 65
    3e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	bc 01       	movw	r22, r24
    3e78:	cd 01       	movw	r24, r26
    3e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	9f 83       	std	Y+7, r25	; 0x07
    3e84:	8e 83       	std	Y+6, r24	; 0x06
    3e86:	0f c0       	rjmp	.+30     	; 0x3ea6 <EF_void_LCD_send_command+0x640>
    3e88:	88 ec       	ldi	r24, 0xC8	; 200
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	9d 83       	std	Y+5, r25	; 0x05
    3e8e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e90:	8c 81       	ldd	r24, Y+4	; 0x04
    3e92:	9d 81       	ldd	r25, Y+5	; 0x05
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	f1 f7       	brne	.-4      	; 0x3e94 <EF_void_LCD_send_command+0x62e>
    3e98:	9d 83       	std	Y+5, r25	; 0x05
    3e9a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	9f 83       	std	Y+7, r25	; 0x07
    3ea4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	69 f7       	brne	.-38     	; 0x3e88 <EF_void_LCD_send_command+0x622>
    3eae:	24 c0       	rjmp	.+72     	; 0x3ef8 <EF_void_LCD_send_command+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb0:	68 85       	ldd	r22, Y+8	; 0x08
    3eb2:	79 85       	ldd	r23, Y+9	; 0x09
    3eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	9f 83       	std	Y+7, r25	; 0x07
    3ec2:	8e 83       	std	Y+6, r24	; 0x06
    3ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec8:	9b 83       	std	Y+3, r25	; 0x03
    3eca:	8a 83       	std	Y+2, r24	; 0x02
    3ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ece:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <EF_void_LCD_send_command+0x66a>
    3ed4:	9b 83       	std	Y+3, r25	; 0x03
    3ed6:	8a 83       	std	Y+2, r24	; 0x02
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <EF_void_LCD_send_command+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3eda:	69 89       	ldd	r22, Y+17	; 0x11
    3edc:	7a 89       	ldd	r23, Y+18	; 0x12
    3ede:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	88 8b       	std	Y+16, r24	; 0x10
    3eec:	88 89       	ldd	r24, Y+16	; 0x10
    3eee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	8a 95       	dec	r24
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <EF_void_LCD_send_command+0x68c>
    3ef6:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    3ef8:	c7 5b       	subi	r28, 0xB7	; 183
    3efa:	df 4f       	sbci	r29, 0xFF	; 255
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	08 95       	ret

00003f10 <EF_void_LCD_send_data>:
 * PARAMETERS  : U8_t Data:  Data User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_data(char data)
{
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	c9 54       	subi	r28, 0x49	; 73
    3f1e:	d0 40       	sbci	r29, 0x00	; 0
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e7 5b       	subi	r30, 0xB7	; 183
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 83       	st	Z, r24
	/*RS will be high and RW will be LOW */
	//LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
    3f32:	a5 e3       	ldi	r26, 0x35	; 53
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	e5 e3       	ldi	r30, 0x35	; 53
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	80 81       	ld	r24, Z
    3f3c:	80 64       	ori	r24, 0x40	; 64
    3f3e:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    3f40:	a8 e3       	ldi	r26, 0x38	; 56
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e8 e3       	ldi	r30, 0x38	; 56
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	8f 77       	andi	r24, 0x7F	; 127
    3f4c:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    3f4e:	a8 e3       	ldi	r26, 0x38	; 56
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	e8 e3       	ldi	r30, 0x38	; 56
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	8f 7b       	andi	r24, 0xBF	; 191
    3f5a:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    3f5c:	a8 e3       	ldi	r26, 0x38	; 56
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	e8 e3       	ldi	r30, 0x38	; 56
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	80 81       	ld	r24, Z
    3f66:	8f 7d       	andi	r24, 0xDF	; 223
    3f68:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    3f6a:	a8 e3       	ldi	r26, 0x38	; 56
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e8 e3       	ldi	r30, 0x38	; 56
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	8f 7e       	andi	r24, 0xEF	; 239
    3f76:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e7 5b       	subi	r30, 0xB7	; 183
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	88 23       	and	r24, r24
    3f82:	3c f4       	brge	.+14     	; 0x3f92 <EF_void_LCD_send_data+0x82>
    3f84:	a8 e3       	ldi	r26, 0x38	; 56
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	e8 e3       	ldi	r30, 0x38	; 56
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	80 68       	ori	r24, 0x80	; 128
    3f90:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    3f92:	fe 01       	movw	r30, r28
    3f94:	e7 5b       	subi	r30, 0xB7	; 183
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	80 81       	ld	r24, Z
    3f9a:	88 2f       	mov	r24, r24
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	80 74       	andi	r24, 0x40	; 64
    3fa0:	90 70       	andi	r25, 0x00	; 0
    3fa2:	00 97       	sbiw	r24, 0x00	; 0
    3fa4:	39 f0       	breq	.+14     	; 0x3fb4 <EF_void_LCD_send_data+0xa4>
    3fa6:	a8 e3       	ldi	r26, 0x38	; 56
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	e8 e3       	ldi	r30, 0x38	; 56
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	80 81       	ld	r24, Z
    3fb0:	80 64       	ori	r24, 0x40	; 64
    3fb2:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e7 5b       	subi	r30, 0xB7	; 183
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	80 81       	ld	r24, Z
    3fbc:	88 2f       	mov	r24, r24
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	80 72       	andi	r24, 0x20	; 32
    3fc2:	90 70       	andi	r25, 0x00	; 0
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	39 f0       	breq	.+14     	; 0x3fd6 <EF_void_LCD_send_data+0xc6>
    3fc8:	a8 e3       	ldi	r26, 0x38	; 56
    3fca:	b0 e0       	ldi	r27, 0x00	; 0
    3fcc:	e8 e3       	ldi	r30, 0x38	; 56
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	80 81       	ld	r24, Z
    3fd2:	80 62       	ori	r24, 0x20	; 32
    3fd4:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	e7 5b       	subi	r30, 0xB7	; 183
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	80 81       	ld	r24, Z
    3fde:	88 2f       	mov	r24, r24
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	80 71       	andi	r24, 0x10	; 16
    3fe4:	90 70       	andi	r25, 0x00	; 0
    3fe6:	00 97       	sbiw	r24, 0x00	; 0
    3fe8:	39 f0       	breq	.+14     	; 0x3ff8 <EF_void_LCD_send_data+0xe8>
    3fea:	a8 e3       	ldi	r26, 0x38	; 56
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	e8 e3       	ldi	r30, 0x38	; 56
    3ff0:	f0 e0       	ldi	r31, 0x00	; 0
    3ff2:	80 81       	ld	r24, Z
    3ff4:	80 61       	ori	r24, 0x10	; 16
    3ff6:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    3ff8:	a5 e3       	ldi	r26, 0x35	; 53
    3ffa:	b0 e0       	ldi	r27, 0x00	; 0
    3ffc:	e5 e3       	ldi	r30, 0x35	; 53
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	80 81       	ld	r24, Z
    4002:	80 68       	ori	r24, 0x80	; 128
    4004:	8c 93       	st	X, r24
    4006:	fe 01       	movw	r30, r28
    4008:	eb 5b       	subi	r30, 0xBB	; 187
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	a0 e0       	ldi	r26, 0x00	; 0
    4012:	b0 e4       	ldi	r27, 0x40	; 64
    4014:	80 83       	st	Z, r24
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	a2 83       	std	Z+2, r26	; 0x02
    401a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    401c:	8e 01       	movw	r16, r28
    401e:	0f 5b       	subi	r16, 0xBF	; 191
    4020:	1f 4f       	sbci	r17, 0xFF	; 255
    4022:	fe 01       	movw	r30, r28
    4024:	eb 5b       	subi	r30, 0xBB	; 187
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	60 81       	ld	r22, Z
    402a:	71 81       	ldd	r23, Z+1	; 0x01
    402c:	82 81       	ldd	r24, Z+2	; 0x02
    402e:	93 81       	ldd	r25, Z+3	; 0x03
    4030:	2b ea       	ldi	r18, 0xAB	; 171
    4032:	3a ea       	ldi	r19, 0xAA	; 170
    4034:	4a e2       	ldi	r20, 0x2A	; 42
    4036:	50 e4       	ldi	r21, 0x40	; 64
    4038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	f8 01       	movw	r30, r16
    4042:	80 83       	st	Z, r24
    4044:	91 83       	std	Z+1, r25	; 0x01
    4046:	a2 83       	std	Z+2, r26	; 0x02
    4048:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    404a:	fe 01       	movw	r30, r28
    404c:	ef 5b       	subi	r30, 0xBF	; 191
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e8       	ldi	r20, 0x80	; 128
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4064:	88 23       	and	r24, r24
    4066:	34 f4       	brge	.+12     	; 0x4074 <EF_void_LCD_send_data+0x164>
		__ticks = 1;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	fe 01       	movw	r30, r28
    406c:	e0 5c       	subi	r30, 0xC0	; 192
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	80 83       	st	Z, r24
    4072:	9d c0       	rjmp	.+314    	; 0x41ae <EF_void_LCD_send_data+0x29e>
	else if (__tmp > 255)
    4074:	fe 01       	movw	r30, r28
    4076:	ef 5b       	subi	r30, 0xBF	; 191
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	60 81       	ld	r22, Z
    407c:	71 81       	ldd	r23, Z+1	; 0x01
    407e:	82 81       	ldd	r24, Z+2	; 0x02
    4080:	93 81       	ldd	r25, Z+3	; 0x03
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	4f e7       	ldi	r20, 0x7F	; 127
    4088:	53 e4       	ldi	r21, 0x43	; 67
    408a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    408e:	18 16       	cp	r1, r24
    4090:	0c f0       	brlt	.+2      	; 0x4094 <EF_void_LCD_send_data+0x184>
    4092:	7e c0       	rjmp	.+252    	; 0x4190 <EF_void_LCD_send_data+0x280>
	{
		_delay_ms(__us / 1000.0);
    4094:	fe 01       	movw	r30, r28
    4096:	eb 5b       	subi	r30, 0xBB	; 187
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	60 81       	ld	r22, Z
    409c:	71 81       	ldd	r23, Z+1	; 0x01
    409e:	82 81       	ldd	r24, Z+2	; 0x02
    40a0:	93 81       	ldd	r25, Z+3	; 0x03
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	4a e7       	ldi	r20, 0x7A	; 122
    40a8:	54 e4       	ldi	r21, 0x44	; 68
    40aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	8c af       	std	Y+60, r24	; 0x3c
    40b4:	9d af       	std	Y+61, r25	; 0x3d
    40b6:	ae af       	std	Y+62, r26	; 0x3e
    40b8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    40bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    40be:	8e ad       	ldd	r24, Y+62	; 0x3e
    40c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	4a ef       	ldi	r20, 0xFA	; 250
    40c8:	54 e4       	ldi	r21, 0x44	; 68
    40ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	88 af       	std	Y+56, r24	; 0x38
    40d4:	99 af       	std	Y+57, r25	; 0x39
    40d6:	aa af       	std	Y+58, r26	; 0x3a
    40d8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    40da:	68 ad       	ldd	r22, Y+56	; 0x38
    40dc:	79 ad       	ldd	r23, Y+57	; 0x39
    40de:	8a ad       	ldd	r24, Y+58	; 0x3a
    40e0:	9b ad       	ldd	r25, Y+59	; 0x3b
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e8       	ldi	r20, 0x80	; 128
    40e8:	5f e3       	ldi	r21, 0x3F	; 63
    40ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ee:	88 23       	and	r24, r24
    40f0:	2c f4       	brge	.+10     	; 0x40fc <EF_void_LCD_send_data+0x1ec>
		__ticks = 1;
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	9f ab       	std	Y+55, r25	; 0x37
    40f8:	8e ab       	std	Y+54, r24	; 0x36
    40fa:	3f c0       	rjmp	.+126    	; 0x417a <EF_void_LCD_send_data+0x26a>
	else if (__tmp > 65535)
    40fc:	68 ad       	ldd	r22, Y+56	; 0x38
    40fe:	79 ad       	ldd	r23, Y+57	; 0x39
    4100:	8a ad       	ldd	r24, Y+58	; 0x3a
    4102:	9b ad       	ldd	r25, Y+59	; 0x3b
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	3f ef       	ldi	r19, 0xFF	; 255
    4108:	4f e7       	ldi	r20, 0x7F	; 127
    410a:	57 e4       	ldi	r21, 0x47	; 71
    410c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4110:	18 16       	cp	r1, r24
    4112:	4c f5       	brge	.+82     	; 0x4166 <EF_void_LCD_send_data+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4114:	6c ad       	ldd	r22, Y+60	; 0x3c
    4116:	7d ad       	ldd	r23, Y+61	; 0x3d
    4118:	8e ad       	ldd	r24, Y+62	; 0x3e
    411a:	9f ad       	ldd	r25, Y+63	; 0x3f
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e2       	ldi	r20, 0x20	; 32
    4122:	51 e4       	ldi	r21, 0x41	; 65
    4124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	bc 01       	movw	r22, r24
    412e:	cd 01       	movw	r24, r26
    4130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	9f ab       	std	Y+55, r25	; 0x37
    413a:	8e ab       	std	Y+54, r24	; 0x36
    413c:	0f c0       	rjmp	.+30     	; 0x415c <EF_void_LCD_send_data+0x24c>
    413e:	88 ec       	ldi	r24, 0xC8	; 200
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	9d ab       	std	Y+53, r25	; 0x35
    4144:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4146:	8c a9       	ldd	r24, Y+52	; 0x34
    4148:	9d a9       	ldd	r25, Y+53	; 0x35
    414a:	01 97       	sbiw	r24, 0x01	; 1
    414c:	f1 f7       	brne	.-4      	; 0x414a <EF_void_LCD_send_data+0x23a>
    414e:	9d ab       	std	Y+53, r25	; 0x35
    4150:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4152:	8e a9       	ldd	r24, Y+54	; 0x36
    4154:	9f a9       	ldd	r25, Y+55	; 0x37
    4156:	01 97       	sbiw	r24, 0x01	; 1
    4158:	9f ab       	std	Y+55, r25	; 0x37
    415a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415c:	8e a9       	ldd	r24, Y+54	; 0x36
    415e:	9f a9       	ldd	r25, Y+55	; 0x37
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	69 f7       	brne	.-38     	; 0x413e <EF_void_LCD_send_data+0x22e>
    4164:	2d c0       	rjmp	.+90     	; 0x41c0 <EF_void_LCD_send_data+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4166:	68 ad       	ldd	r22, Y+56	; 0x38
    4168:	79 ad       	ldd	r23, Y+57	; 0x39
    416a:	8a ad       	ldd	r24, Y+58	; 0x3a
    416c:	9b ad       	ldd	r25, Y+59	; 0x3b
    416e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	9f ab       	std	Y+55, r25	; 0x37
    4178:	8e ab       	std	Y+54, r24	; 0x36
    417a:	8e a9       	ldd	r24, Y+54	; 0x36
    417c:	9f a9       	ldd	r25, Y+55	; 0x37
    417e:	9b ab       	std	Y+51, r25	; 0x33
    4180:	8a ab       	std	Y+50, r24	; 0x32
    4182:	8a a9       	ldd	r24, Y+50	; 0x32
    4184:	9b a9       	ldd	r25, Y+51	; 0x33
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	f1 f7       	brne	.-4      	; 0x4186 <EF_void_LCD_send_data+0x276>
    418a:	9b ab       	std	Y+51, r25	; 0x33
    418c:	8a ab       	std	Y+50, r24	; 0x32
    418e:	18 c0       	rjmp	.+48     	; 0x41c0 <EF_void_LCD_send_data+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4190:	fe 01       	movw	r30, r28
    4192:	ef 5b       	subi	r30, 0xBF	; 191
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	60 81       	ld	r22, Z
    4198:	71 81       	ldd	r23, Z+1	; 0x01
    419a:	82 81       	ldd	r24, Z+2	; 0x02
    419c:	93 81       	ldd	r25, Z+3	; 0x03
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	fe 01       	movw	r30, r28
    41a8:	e0 5c       	subi	r30, 0xC0	; 192
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	80 83       	st	Z, r24
    41ae:	fe 01       	movw	r30, r28
    41b0:	e0 5c       	subi	r30, 0xC0	; 192
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	80 81       	ld	r24, Z
    41b6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41b8:	89 a9       	ldd	r24, Y+49	; 0x31
    41ba:	8a 95       	dec	r24
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <EF_void_LCD_send_data+0x2aa>
    41be:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    41c0:	a5 e3       	ldi	r26, 0x35	; 53
    41c2:	b0 e0       	ldi	r27, 0x00	; 0
    41c4:	e5 e3       	ldi	r30, 0x35	; 53
    41c6:	f0 e0       	ldi	r31, 0x00	; 0
    41c8:	80 81       	ld	r24, Z
    41ca:	8f 77       	andi	r24, 0x7F	; 127
    41cc:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    41ce:	a8 e3       	ldi	r26, 0x38	; 56
    41d0:	b0 e0       	ldi	r27, 0x00	; 0
    41d2:	e8 e3       	ldi	r30, 0x38	; 56
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	80 81       	ld	r24, Z
    41d8:	8f 77       	andi	r24, 0x7F	; 127
    41da:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    41dc:	a8 e3       	ldi	r26, 0x38	; 56
    41de:	b0 e0       	ldi	r27, 0x00	; 0
    41e0:	e8 e3       	ldi	r30, 0x38	; 56
    41e2:	f0 e0       	ldi	r31, 0x00	; 0
    41e4:	80 81       	ld	r24, Z
    41e6:	8f 7b       	andi	r24, 0xBF	; 191
    41e8:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    41ea:	a8 e3       	ldi	r26, 0x38	; 56
    41ec:	b0 e0       	ldi	r27, 0x00	; 0
    41ee:	e8 e3       	ldi	r30, 0x38	; 56
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	80 81       	ld	r24, Z
    41f4:	8f 7d       	andi	r24, 0xDF	; 223
    41f6:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    41f8:	a8 e3       	ldi	r26, 0x38	; 56
    41fa:	b0 e0       	ldi	r27, 0x00	; 0
    41fc:	e8 e3       	ldi	r30, 0x38	; 56
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	80 81       	ld	r24, Z
    4202:	8f 7e       	andi	r24, 0xEF	; 239
    4204:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    4206:	fe 01       	movw	r30, r28
    4208:	e7 5b       	subi	r30, 0xB7	; 183
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	80 81       	ld	r24, Z
    420e:	88 2f       	mov	r24, r24
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	88 70       	andi	r24, 0x08	; 8
    4214:	90 70       	andi	r25, 0x00	; 0
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	39 f0       	breq	.+14     	; 0x4228 <EF_void_LCD_send_data+0x318>
    421a:	a8 e3       	ldi	r26, 0x38	; 56
    421c:	b0 e0       	ldi	r27, 0x00	; 0
    421e:	e8 e3       	ldi	r30, 0x38	; 56
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	80 81       	ld	r24, Z
    4224:	80 68       	ori	r24, 0x80	; 128
    4226:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    4228:	fe 01       	movw	r30, r28
    422a:	e7 5b       	subi	r30, 0xB7	; 183
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	88 2f       	mov	r24, r24
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	84 70       	andi	r24, 0x04	; 4
    4236:	90 70       	andi	r25, 0x00	; 0
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	39 f0       	breq	.+14     	; 0x424a <EF_void_LCD_send_data+0x33a>
    423c:	a8 e3       	ldi	r26, 0x38	; 56
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	e8 e3       	ldi	r30, 0x38	; 56
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	80 81       	ld	r24, Z
    4246:	80 64       	ori	r24, 0x40	; 64
    4248:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    424a:	fe 01       	movw	r30, r28
    424c:	e7 5b       	subi	r30, 0xB7	; 183
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	80 81       	ld	r24, Z
    4252:	88 2f       	mov	r24, r24
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	82 70       	andi	r24, 0x02	; 2
    4258:	90 70       	andi	r25, 0x00	; 0
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	39 f0       	breq	.+14     	; 0x426c <EF_void_LCD_send_data+0x35c>
    425e:	a8 e3       	ldi	r26, 0x38	; 56
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	e8 e3       	ldi	r30, 0x38	; 56
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	80 81       	ld	r24, Z
    4268:	80 62       	ori	r24, 0x20	; 32
    426a:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    426c:	fe 01       	movw	r30, r28
    426e:	e7 5b       	subi	r30, 0xB7	; 183
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	80 81       	ld	r24, Z
    4274:	88 2f       	mov	r24, r24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	81 70       	andi	r24, 0x01	; 1
    427a:	90 70       	andi	r25, 0x00	; 0
    427c:	88 23       	and	r24, r24
    427e:	39 f0       	breq	.+14     	; 0x428e <EF_void_LCD_send_data+0x37e>
    4280:	a8 e3       	ldi	r26, 0x38	; 56
    4282:	b0 e0       	ldi	r27, 0x00	; 0
    4284:	e8 e3       	ldi	r30, 0x38	; 56
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	80 81       	ld	r24, Z
    428a:	80 61       	ori	r24, 0x10	; 16
    428c:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    428e:	a5 e3       	ldi	r26, 0x35	; 53
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	e5 e3       	ldi	r30, 0x35	; 53
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	80 81       	ld	r24, Z
    4298:	80 68       	ori	r24, 0x80	; 128
    429a:	8c 93       	st	X, r24
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	a0 e0       	ldi	r26, 0x00	; 0
    42a2:	b0 e4       	ldi	r27, 0x40	; 64
    42a4:	8d a7       	std	Y+45, r24	; 0x2d
    42a6:	9e a7       	std	Y+46, r25	; 0x2e
    42a8:	af a7       	std	Y+47, r26	; 0x2f
    42aa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    42ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    42ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    42b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    42b2:	98 a9       	ldd	r25, Y+48	; 0x30
    42b4:	2b ea       	ldi	r18, 0xAB	; 171
    42b6:	3a ea       	ldi	r19, 0xAA	; 170
    42b8:	4a e2       	ldi	r20, 0x2A	; 42
    42ba:	50 e4       	ldi	r21, 0x40	; 64
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	89 a7       	std	Y+41, r24	; 0x29
    42c6:	9a a7       	std	Y+42, r25	; 0x2a
    42c8:	ab a7       	std	Y+43, r26	; 0x2b
    42ca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    42cc:	69 a5       	ldd	r22, Y+41	; 0x29
    42ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    42d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    42d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	40 e8       	ldi	r20, 0x80	; 128
    42da:	5f e3       	ldi	r21, 0x3F	; 63
    42dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42e0:	88 23       	and	r24, r24
    42e2:	1c f4       	brge	.+6      	; 0x42ea <EF_void_LCD_send_data+0x3da>
		__ticks = 1;
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	88 a7       	std	Y+40, r24	; 0x28
    42e8:	91 c0       	rjmp	.+290    	; 0x440c <EF_void_LCD_send_data+0x4fc>
	else if (__tmp > 255)
    42ea:	69 a5       	ldd	r22, Y+41	; 0x29
    42ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    42ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    42f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	4f e7       	ldi	r20, 0x7F	; 127
    42f8:	53 e4       	ldi	r21, 0x43	; 67
    42fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42fe:	18 16       	cp	r1, r24
    4300:	0c f0       	brlt	.+2      	; 0x4304 <EF_void_LCD_send_data+0x3f4>
    4302:	7b c0       	rjmp	.+246    	; 0x43fa <EF_void_LCD_send_data+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    4304:	6d a5       	ldd	r22, Y+45	; 0x2d
    4306:	7e a5       	ldd	r23, Y+46	; 0x2e
    4308:	8f a5       	ldd	r24, Y+47	; 0x2f
    430a:	98 a9       	ldd	r25, Y+48	; 0x30
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	4a e7       	ldi	r20, 0x7A	; 122
    4312:	54 e4       	ldi	r21, 0x44	; 68
    4314:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	8c a3       	std	Y+36, r24	; 0x24
    431e:	9d a3       	std	Y+37, r25	; 0x25
    4320:	ae a3       	std	Y+38, r26	; 0x26
    4322:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4324:	6c a1       	ldd	r22, Y+36	; 0x24
    4326:	7d a1       	ldd	r23, Y+37	; 0x25
    4328:	8e a1       	ldd	r24, Y+38	; 0x26
    432a:	9f a1       	ldd	r25, Y+39	; 0x27
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	4a ef       	ldi	r20, 0xFA	; 250
    4332:	54 e4       	ldi	r21, 0x44	; 68
    4334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	88 a3       	std	Y+32, r24	; 0x20
    433e:	99 a3       	std	Y+33, r25	; 0x21
    4340:	aa a3       	std	Y+34, r26	; 0x22
    4342:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4344:	68 a1       	ldd	r22, Y+32	; 0x20
    4346:	79 a1       	ldd	r23, Y+33	; 0x21
    4348:	8a a1       	ldd	r24, Y+34	; 0x22
    434a:	9b a1       	ldd	r25, Y+35	; 0x23
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e8       	ldi	r20, 0x80	; 128
    4352:	5f e3       	ldi	r21, 0x3F	; 63
    4354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4358:	88 23       	and	r24, r24
    435a:	2c f4       	brge	.+10     	; 0x4366 <EF_void_LCD_send_data+0x456>
		__ticks = 1;
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	9f 8f       	std	Y+31, r25	; 0x1f
    4362:	8e 8f       	std	Y+30, r24	; 0x1e
    4364:	3f c0       	rjmp	.+126    	; 0x43e4 <EF_void_LCD_send_data+0x4d4>
	else if (__tmp > 65535)
    4366:	68 a1       	ldd	r22, Y+32	; 0x20
    4368:	79 a1       	ldd	r23, Y+33	; 0x21
    436a:	8a a1       	ldd	r24, Y+34	; 0x22
    436c:	9b a1       	ldd	r25, Y+35	; 0x23
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	3f ef       	ldi	r19, 0xFF	; 255
    4372:	4f e7       	ldi	r20, 0x7F	; 127
    4374:	57 e4       	ldi	r21, 0x47	; 71
    4376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    437a:	18 16       	cp	r1, r24
    437c:	4c f5       	brge	.+82     	; 0x43d0 <EF_void_LCD_send_data+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    437e:	6c a1       	ldd	r22, Y+36	; 0x24
    4380:	7d a1       	ldd	r23, Y+37	; 0x25
    4382:	8e a1       	ldd	r24, Y+38	; 0x26
    4384:	9f a1       	ldd	r25, Y+39	; 0x27
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e2       	ldi	r20, 0x20	; 32
    438c:	51 e4       	ldi	r21, 0x41	; 65
    438e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	bc 01       	movw	r22, r24
    4398:	cd 01       	movw	r24, r26
    439a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	9f 8f       	std	Y+31, r25	; 0x1f
    43a4:	8e 8f       	std	Y+30, r24	; 0x1e
    43a6:	0f c0       	rjmp	.+30     	; 0x43c6 <EF_void_LCD_send_data+0x4b6>
    43a8:	88 ec       	ldi	r24, 0xC8	; 200
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	9d 8f       	std	Y+29, r25	; 0x1d
    43ae:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43b4:	01 97       	sbiw	r24, 0x01	; 1
    43b6:	f1 f7       	brne	.-4      	; 0x43b4 <EF_void_LCD_send_data+0x4a4>
    43b8:	9d 8f       	std	Y+29, r25	; 0x1d
    43ba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43c0:	01 97       	sbiw	r24, 0x01	; 1
    43c2:	9f 8f       	std	Y+31, r25	; 0x1f
    43c4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43ca:	00 97       	sbiw	r24, 0x00	; 0
    43cc:	69 f7       	brne	.-38     	; 0x43a8 <EF_void_LCD_send_data+0x498>
    43ce:	24 c0       	rjmp	.+72     	; 0x4418 <EF_void_LCD_send_data+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43d0:	68 a1       	ldd	r22, Y+32	; 0x20
    43d2:	79 a1       	ldd	r23, Y+33	; 0x21
    43d4:	8a a1       	ldd	r24, Y+34	; 0x22
    43d6:	9b a1       	ldd	r25, Y+35	; 0x23
    43d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	9f 8f       	std	Y+31, r25	; 0x1f
    43e2:	8e 8f       	std	Y+30, r24	; 0x1e
    43e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43e8:	9b 8f       	std	Y+27, r25	; 0x1b
    43ea:	8a 8f       	std	Y+26, r24	; 0x1a
    43ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	f1 f7       	brne	.-4      	; 0x43f0 <EF_void_LCD_send_data+0x4e0>
    43f4:	9b 8f       	std	Y+27, r25	; 0x1b
    43f6:	8a 8f       	std	Y+26, r24	; 0x1a
    43f8:	0f c0       	rjmp	.+30     	; 0x4418 <EF_void_LCD_send_data+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43fa:	69 a5       	ldd	r22, Y+41	; 0x29
    43fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    43fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4400:	9c a5       	ldd	r25, Y+44	; 0x2c
    4402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	88 a7       	std	Y+40, r24	; 0x28
    440c:	88 a5       	ldd	r24, Y+40	; 0x28
    440e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4410:	89 8d       	ldd	r24, Y+25	; 0x19
    4412:	8a 95       	dec	r24
    4414:	f1 f7       	brne	.-4      	; 0x4412 <EF_void_LCD_send_data+0x502>
    4416:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    4418:	a5 e3       	ldi	r26, 0x35	; 53
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	e5 e3       	ldi	r30, 0x35	; 53
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	80 81       	ld	r24, Z
    4422:	8f 77       	andi	r24, 0x7F	; 127
    4424:	8c 93       	st	X, r24
    4426:	80 e0       	ldi	r24, 0x00	; 0
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	a6 e9       	ldi	r26, 0x96	; 150
    442c:	b3 e4       	ldi	r27, 0x43	; 67
    442e:	8d 8b       	std	Y+21, r24	; 0x15
    4430:	9e 8b       	std	Y+22, r25	; 0x16
    4432:	af 8b       	std	Y+23, r26	; 0x17
    4434:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4436:	6d 89       	ldd	r22, Y+21	; 0x15
    4438:	7e 89       	ldd	r23, Y+22	; 0x16
    443a:	8f 89       	ldd	r24, Y+23	; 0x17
    443c:	98 8d       	ldd	r25, Y+24	; 0x18
    443e:	2b ea       	ldi	r18, 0xAB	; 171
    4440:	3a ea       	ldi	r19, 0xAA	; 170
    4442:	4a e2       	ldi	r20, 0x2A	; 42
    4444:	50 e4       	ldi	r21, 0x40	; 64
    4446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	89 8b       	std	Y+17, r24	; 0x11
    4450:	9a 8b       	std	Y+18, r25	; 0x12
    4452:	ab 8b       	std	Y+19, r26	; 0x13
    4454:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4456:	69 89       	ldd	r22, Y+17	; 0x11
    4458:	7a 89       	ldd	r23, Y+18	; 0x12
    445a:	8b 89       	ldd	r24, Y+19	; 0x13
    445c:	9c 89       	ldd	r25, Y+20	; 0x14
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e8       	ldi	r20, 0x80	; 128
    4464:	5f e3       	ldi	r21, 0x3F	; 63
    4466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    446a:	88 23       	and	r24, r24
    446c:	1c f4       	brge	.+6      	; 0x4474 <EF_void_LCD_send_data+0x564>
		__ticks = 1;
    446e:	81 e0       	ldi	r24, 0x01	; 1
    4470:	88 8b       	std	Y+16, r24	; 0x10
    4472:	91 c0       	rjmp	.+290    	; 0x4596 <EF_void_LCD_send_data+0x686>
	else if (__tmp > 255)
    4474:	69 89       	ldd	r22, Y+17	; 0x11
    4476:	7a 89       	ldd	r23, Y+18	; 0x12
    4478:	8b 89       	ldd	r24, Y+19	; 0x13
    447a:	9c 89       	ldd	r25, Y+20	; 0x14
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	4f e7       	ldi	r20, 0x7F	; 127
    4482:	53 e4       	ldi	r21, 0x43	; 67
    4484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4488:	18 16       	cp	r1, r24
    448a:	0c f0       	brlt	.+2      	; 0x448e <EF_void_LCD_send_data+0x57e>
    448c:	7b c0       	rjmp	.+246    	; 0x4584 <EF_void_LCD_send_data+0x674>
	{
		_delay_ms(__us / 1000.0);
    448e:	6d 89       	ldd	r22, Y+21	; 0x15
    4490:	7e 89       	ldd	r23, Y+22	; 0x16
    4492:	8f 89       	ldd	r24, Y+23	; 0x17
    4494:	98 8d       	ldd	r25, Y+24	; 0x18
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	4a e7       	ldi	r20, 0x7A	; 122
    449c:	54 e4       	ldi	r21, 0x44	; 68
    449e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	8c 87       	std	Y+12, r24	; 0x0c
    44a8:	9d 87       	std	Y+13, r25	; 0x0d
    44aa:	ae 87       	std	Y+14, r26	; 0x0e
    44ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    44b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    44b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    44b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	4a ef       	ldi	r20, 0xFA	; 250
    44bc:	54 e4       	ldi	r21, 0x44	; 68
    44be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	88 87       	std	Y+8, r24	; 0x08
    44c8:	99 87       	std	Y+9, r25	; 0x09
    44ca:	aa 87       	std	Y+10, r26	; 0x0a
    44cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    44ce:	68 85       	ldd	r22, Y+8	; 0x08
    44d0:	79 85       	ldd	r23, Y+9	; 0x09
    44d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	40 e8       	ldi	r20, 0x80	; 128
    44dc:	5f e3       	ldi	r21, 0x3F	; 63
    44de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44e2:	88 23       	and	r24, r24
    44e4:	2c f4       	brge	.+10     	; 0x44f0 <EF_void_LCD_send_data+0x5e0>
		__ticks = 1;
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	9f 83       	std	Y+7, r25	; 0x07
    44ec:	8e 83       	std	Y+6, r24	; 0x06
    44ee:	3f c0       	rjmp	.+126    	; 0x456e <EF_void_LCD_send_data+0x65e>
	else if (__tmp > 65535)
    44f0:	68 85       	ldd	r22, Y+8	; 0x08
    44f2:	79 85       	ldd	r23, Y+9	; 0x09
    44f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    44f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	3f ef       	ldi	r19, 0xFF	; 255
    44fc:	4f e7       	ldi	r20, 0x7F	; 127
    44fe:	57 e4       	ldi	r21, 0x47	; 71
    4500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4504:	18 16       	cp	r1, r24
    4506:	4c f5       	brge	.+82     	; 0x455a <EF_void_LCD_send_data+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4508:	6c 85       	ldd	r22, Y+12	; 0x0c
    450a:	7d 85       	ldd	r23, Y+13	; 0x0d
    450c:	8e 85       	ldd	r24, Y+14	; 0x0e
    450e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e2       	ldi	r20, 0x20	; 32
    4516:	51 e4       	ldi	r21, 0x41	; 65
    4518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	9f 83       	std	Y+7, r25	; 0x07
    452e:	8e 83       	std	Y+6, r24	; 0x06
    4530:	0f c0       	rjmp	.+30     	; 0x4550 <EF_void_LCD_send_data+0x640>
    4532:	88 ec       	ldi	r24, 0xC8	; 200
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	9d 83       	std	Y+5, r25	; 0x05
    4538:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    453a:	8c 81       	ldd	r24, Y+4	; 0x04
    453c:	9d 81       	ldd	r25, Y+5	; 0x05
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <EF_void_LCD_send_data+0x62e>
    4542:	9d 83       	std	Y+5, r25	; 0x05
    4544:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4546:	8e 81       	ldd	r24, Y+6	; 0x06
    4548:	9f 81       	ldd	r25, Y+7	; 0x07
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	9f 83       	std	Y+7, r25	; 0x07
    454e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4550:	8e 81       	ldd	r24, Y+6	; 0x06
    4552:	9f 81       	ldd	r25, Y+7	; 0x07
    4554:	00 97       	sbiw	r24, 0x00	; 0
    4556:	69 f7       	brne	.-38     	; 0x4532 <EF_void_LCD_send_data+0x622>
    4558:	24 c0       	rjmp	.+72     	; 0x45a2 <EF_void_LCD_send_data+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    455a:	68 85       	ldd	r22, Y+8	; 0x08
    455c:	79 85       	ldd	r23, Y+9	; 0x09
    455e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4560:	9b 85       	ldd	r25, Y+11	; 0x0b
    4562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	9f 83       	std	Y+7, r25	; 0x07
    456c:	8e 83       	std	Y+6, r24	; 0x06
    456e:	8e 81       	ldd	r24, Y+6	; 0x06
    4570:	9f 81       	ldd	r25, Y+7	; 0x07
    4572:	9b 83       	std	Y+3, r25	; 0x03
    4574:	8a 83       	std	Y+2, r24	; 0x02
    4576:	8a 81       	ldd	r24, Y+2	; 0x02
    4578:	9b 81       	ldd	r25, Y+3	; 0x03
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	f1 f7       	brne	.-4      	; 0x457a <EF_void_LCD_send_data+0x66a>
    457e:	9b 83       	std	Y+3, r25	; 0x03
    4580:	8a 83       	std	Y+2, r24	; 0x02
    4582:	0f c0       	rjmp	.+30     	; 0x45a2 <EF_void_LCD_send_data+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4584:	69 89       	ldd	r22, Y+17	; 0x11
    4586:	7a 89       	ldd	r23, Y+18	; 0x12
    4588:	8b 89       	ldd	r24, Y+19	; 0x13
    458a:	9c 89       	ldd	r25, Y+20	; 0x14
    458c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	88 8b       	std	Y+16, r24	; 0x10
    4596:	88 89       	ldd	r24, Y+16	; 0x10
    4598:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	8a 95       	dec	r24
    459e:	f1 f7       	brne	.-4      	; 0x459c <EF_void_LCD_send_data+0x68c>
    45a0:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    45a2:	c7 5b       	subi	r28, 0xB7	; 183
    45a4:	df 4f       	sbci	r29, 0xFF	; 255
    45a6:	0f b6       	in	r0, 0x3f	; 63
    45a8:	f8 94       	cli
    45aa:	de bf       	out	0x3e, r29	; 62
    45ac:	0f be       	out	0x3f, r0	; 63
    45ae:	cd bf       	out	0x3d, r28	; 61
    45b0:	cf 91       	pop	r28
    45b2:	df 91       	pop	r29
    45b4:	1f 91       	pop	r17
    45b6:	0f 91       	pop	r16
    45b8:	08 95       	ret

000045ba <EF_void_LCD_goto>:
 * PARAMETERS  : U8_t y, U8_t x.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_goto(U8_t y, U8_t x)
{
    45ba:	df 93       	push	r29
    45bc:	cf 93       	push	r28
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	64 97       	sbiw	r28, 0x14	; 20
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	f8 94       	cli
    45c8:	de bf       	out	0x3e, r29	; 62
    45ca:	0f be       	out	0x3f, r0	; 63
    45cc:	cd bf       	out	0x3d, r28	; 61
    45ce:	8b 8b       	std	Y+19, r24	; 0x13
    45d0:	6c 8b       	std	Y+20, r22	; 0x14
	U8_t firstAddress[] = {0x80,0xC0,0x94,0xD4};
    45d2:	80 e8       	ldi	r24, 0x80	; 128
    45d4:	8f 87       	std	Y+15, r24	; 0x0f
    45d6:	80 ec       	ldi	r24, 0xC0	; 192
    45d8:	88 8b       	std	Y+16, r24	; 0x10
    45da:	84 e9       	ldi	r24, 0x94	; 148
    45dc:	89 8b       	std	Y+17, r24	; 0x11
    45de:	84 ed       	ldi	r24, 0xD4	; 212
    45e0:	8a 8b       	std	Y+18, r24	; 0x12

	EF_void_LCD_send_command(firstAddress[y-1] + x-1);
    45e2:	8b 89       	ldd	r24, Y+19	; 0x13
    45e4:	88 2f       	mov	r24, r24
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9c 01       	movw	r18, r24
    45ea:	21 50       	subi	r18, 0x01	; 1
    45ec:	30 40       	sbci	r19, 0x00	; 0
    45ee:	ce 01       	movw	r24, r28
    45f0:	0f 96       	adiw	r24, 0x0f	; 15
    45f2:	fc 01       	movw	r30, r24
    45f4:	e2 0f       	add	r30, r18
    45f6:	f3 1f       	adc	r31, r19
    45f8:	90 81       	ld	r25, Z
    45fa:	8c 89       	ldd	r24, Y+20	; 0x14
    45fc:	89 0f       	add	r24, r25
    45fe:	81 50       	subi	r24, 0x01	; 1
    4600:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	a0 ea       	ldi	r26, 0xA0	; 160
    460a:	b1 e4       	ldi	r27, 0x41	; 65
    460c:	8b 87       	std	Y+11, r24	; 0x0b
    460e:	9c 87       	std	Y+12, r25	; 0x0c
    4610:	ad 87       	std	Y+13, r26	; 0x0d
    4612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4614:	6b 85       	ldd	r22, Y+11	; 0x0b
    4616:	7c 85       	ldd	r23, Y+12	; 0x0c
    4618:	8d 85       	ldd	r24, Y+13	; 0x0d
    461a:	9e 85       	ldd	r25, Y+14	; 0x0e
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	4a ef       	ldi	r20, 0xFA	; 250
    4622:	54 e4       	ldi	r21, 0x44	; 68
    4624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	8f 83       	std	Y+7, r24	; 0x07
    462e:	98 87       	std	Y+8, r25	; 0x08
    4630:	a9 87       	std	Y+9, r26	; 0x09
    4632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4634:	6f 81       	ldd	r22, Y+7	; 0x07
    4636:	78 85       	ldd	r23, Y+8	; 0x08
    4638:	89 85       	ldd	r24, Y+9	; 0x09
    463a:	9a 85       	ldd	r25, Y+10	; 0x0a
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	40 e8       	ldi	r20, 0x80	; 128
    4642:	5f e3       	ldi	r21, 0x3F	; 63
    4644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4648:	88 23       	and	r24, r24
    464a:	2c f4       	brge	.+10     	; 0x4656 <EF_void_LCD_goto+0x9c>
		__ticks = 1;
    464c:	81 e0       	ldi	r24, 0x01	; 1
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	9e 83       	std	Y+6, r25	; 0x06
    4652:	8d 83       	std	Y+5, r24	; 0x05
    4654:	3f c0       	rjmp	.+126    	; 0x46d4 <EF_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    4656:	6f 81       	ldd	r22, Y+7	; 0x07
    4658:	78 85       	ldd	r23, Y+8	; 0x08
    465a:	89 85       	ldd	r24, Y+9	; 0x09
    465c:	9a 85       	ldd	r25, Y+10	; 0x0a
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	3f ef       	ldi	r19, 0xFF	; 255
    4662:	4f e7       	ldi	r20, 0x7F	; 127
    4664:	57 e4       	ldi	r21, 0x47	; 71
    4666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    466a:	18 16       	cp	r1, r24
    466c:	4c f5       	brge	.+82     	; 0x46c0 <EF_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    466e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4670:	7c 85       	ldd	r23, Y+12	; 0x0c
    4672:	8d 85       	ldd	r24, Y+13	; 0x0d
    4674:	9e 85       	ldd	r25, Y+14	; 0x0e
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	40 e2       	ldi	r20, 0x20	; 32
    467c:	51 e4       	ldi	r21, 0x41	; 65
    467e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	bc 01       	movw	r22, r24
    4688:	cd 01       	movw	r24, r26
    468a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	9e 83       	std	Y+6, r25	; 0x06
    4694:	8d 83       	std	Y+5, r24	; 0x05
    4696:	0f c0       	rjmp	.+30     	; 0x46b6 <EF_void_LCD_goto+0xfc>
    4698:	88 ec       	ldi	r24, 0xC8	; 200
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	9c 83       	std	Y+4, r25	; 0x04
    469e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46a0:	8b 81       	ldd	r24, Y+3	; 0x03
    46a2:	9c 81       	ldd	r25, Y+4	; 0x04
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	f1 f7       	brne	.-4      	; 0x46a4 <EF_void_LCD_goto+0xea>
    46a8:	9c 83       	std	Y+4, r25	; 0x04
    46aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ac:	8d 81       	ldd	r24, Y+5	; 0x05
    46ae:	9e 81       	ldd	r25, Y+6	; 0x06
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	9e 83       	std	Y+6, r25	; 0x06
    46b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b6:	8d 81       	ldd	r24, Y+5	; 0x05
    46b8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ba:	00 97       	sbiw	r24, 0x00	; 0
    46bc:	69 f7       	brne	.-38     	; 0x4698 <EF_void_LCD_goto+0xde>
    46be:	14 c0       	rjmp	.+40     	; 0x46e8 <EF_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c0:	6f 81       	ldd	r22, Y+7	; 0x07
    46c2:	78 85       	ldd	r23, Y+8	; 0x08
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	9e 83       	std	Y+6, r25	; 0x06
    46d2:	8d 83       	std	Y+5, r24	; 0x05
    46d4:	8d 81       	ldd	r24, Y+5	; 0x05
    46d6:	9e 81       	ldd	r25, Y+6	; 0x06
    46d8:	9a 83       	std	Y+2, r25	; 0x02
    46da:	89 83       	std	Y+1, r24	; 0x01
    46dc:	89 81       	ldd	r24, Y+1	; 0x01
    46de:	9a 81       	ldd	r25, Y+2	; 0x02
    46e0:	01 97       	sbiw	r24, 0x01	; 1
    46e2:	f1 f7       	brne	.-4      	; 0x46e0 <EF_void_LCD_goto+0x126>
    46e4:	9a 83       	std	Y+2, r25	; 0x02
    46e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    46e8:	64 96       	adiw	r28, 0x14	; 20
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	f8 94       	cli
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	cf 91       	pop	r28
    46f6:	df 91       	pop	r29
    46f8:	08 95       	ret

000046fa <EF_void_LCD_print_NUM>:
 *				take 1 for first row, 2: for the second row
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_NUM(S16_t s16Numberstring,U8_t u8RowNumber)
{
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	2a 97       	sbiw	r28, 0x0a	; 10
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	99 87       	std	Y+9, r25	; 0x09
    4710:	88 87       	std	Y+8, r24	; 0x08
    4712:	6a 87       	std	Y+10, r22	; 0x0a
	U8_t ArrayIndex = 0;
    4714:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    4716:	86 e0       	ldi	r24, 0x06	; 6
    4718:	fe 01       	movw	r30, r28
    471a:	32 96       	adiw	r30, 0x02	; 2
    471c:	df 01       	movw	r26, r30
    471e:	98 2f       	mov	r25, r24
    4720:	1d 92       	st	X+, r1
    4722:	9a 95       	dec	r25
    4724:	e9 f7       	brne	.-6      	; 0x4720 <EF_void_LCD_print_NUM+0x26>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    4726:	88 85       	ldd	r24, Y+8	; 0x08
    4728:	99 85       	ldd	r25, Y+9	; 0x09
    472a:	9e 01       	movw	r18, r28
    472c:	2e 5f       	subi	r18, 0xFE	; 254
    472e:	3f 4f       	sbci	r19, 0xFF	; 255
    4730:	b9 01       	movw	r22, r18
    4732:	4a e0       	ldi	r20, 0x0A	; 10
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    473a:	19 82       	std	Y+1, r1	; 0x01
    473c:	15 c0       	rjmp	.+42     	; 0x4768 <EF_void_LCD_print_NUM+0x6e>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
    473e:	89 81       	ldd	r24, Y+1	; 0x01
    4740:	98 2f       	mov	r25, r24
    4742:	9f 5f       	subi	r25, 0xFF	; 255
    4744:	8a 85       	ldd	r24, Y+10	; 0x0a
    4746:	69 2f       	mov	r22, r25
    4748:	0e 94 dd 22 	call	0x45ba	; 0x45ba <EF_void_LCD_goto>
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	28 2f       	mov	r18, r24
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	ce 01       	movw	r24, r28
    4754:	02 96       	adiw	r24, 0x02	; 2
    4756:	fc 01       	movw	r30, r24
    4758:	e2 0f       	add	r30, r18
    475a:	f3 1f       	adc	r31, r19
    475c:	80 81       	ld	r24, Z
    475e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    4762:	89 81       	ldd	r24, Y+1	; 0x01
    4764:	8f 5f       	subi	r24, 0xFF	; 255
    4766:	89 83       	std	Y+1, r24	; 0x01
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	28 2f       	mov	r18, r24
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	ce 01       	movw	r24, r28
    4770:	02 96       	adiw	r24, 0x02	; 2
    4772:	fc 01       	movw	r30, r24
    4774:	e2 0f       	add	r30, r18
    4776:	f3 1f       	adc	r31, r19
    4778:	80 81       	ld	r24, Z
    477a:	88 23       	and	r24, r24
    477c:	01 f7       	brne	.-64     	; 0x473e <EF_void_LCD_print_NUM+0x44>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    477e:	2a 96       	adiw	r28, 0x0a	; 10
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	cf 91       	pop	r28
    478c:	df 91       	pop	r29
    478e:	08 95       	ret

00004790 <EF_void_LCD_print>:
 * PARAMETERS  : U8_t *string:  String User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print(U8_t *string)
{
    4790:	df 93       	push	r29
    4792:	cf 93       	push	r28
    4794:	00 d0       	rcall	.+0      	; 0x4796 <EF_void_LCD_print+0x6>
    4796:	0f 92       	push	r0
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
    479c:	9b 83       	std	Y+3, r25	; 0x03
    479e:	8a 83       	std	Y+2, r24	; 0x02
	U8_t i = 0;
    47a0:	19 82       	std	Y+1, r1	; 0x01
    47a2:	0e c0       	rjmp	.+28     	; 0x47c0 <EF_void_LCD_print+0x30>

	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	28 2f       	mov	r18, r24
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	8a 81       	ldd	r24, Y+2	; 0x02
    47ac:	9b 81       	ldd	r25, Y+3	; 0x03
    47ae:	fc 01       	movw	r30, r24
    47b0:	e2 0f       	add	r30, r18
    47b2:	f3 1f       	adc	r31, r19
    47b4:	80 81       	ld	r24, Z
    47b6:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>
		i++;
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	8f 5f       	subi	r24, 0xFF	; 255
    47be:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print(U8_t *string)
{
	U8_t i = 0;

	while(string[i]!=0)
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	28 2f       	mov	r18, r24
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	8a 81       	ldd	r24, Y+2	; 0x02
    47c8:	9b 81       	ldd	r25, Y+3	; 0x03
    47ca:	fc 01       	movw	r30, r24
    47cc:	e2 0f       	add	r30, r18
    47ce:	f3 1f       	adc	r31, r19
    47d0:	80 81       	ld	r24, Z
    47d2:	88 23       	and	r24, r24
    47d4:	39 f7       	brne	.-50     	; 0x47a4 <EF_void_LCD_print+0x14>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    47d6:	0f 90       	pop	r0
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	cf 91       	pop	r28
    47de:	df 91       	pop	r29
    47e0:	08 95       	ret

000047e2 <EF_void_LCD_print_ByLength>:
 * 				U8_t  length:  number of characters to be displayed
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
    47e2:	df 93       	push	r29
    47e4:	cf 93       	push	r28
    47e6:	00 d0       	rcall	.+0      	; 0x47e8 <EF_void_LCD_print_ByLength+0x6>
    47e8:	00 d0       	rcall	.+0      	; 0x47ea <EF_void_LCD_print_ByLength+0x8>
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
    47ee:	9b 83       	std	Y+3, r25	; 0x03
    47f0:	8a 83       	std	Y+2, r24	; 0x02
    47f2:	6c 83       	std	Y+4, r22	; 0x04
	U8_t i = 0;
    47f4:	19 82       	std	Y+1, r1	; 0x01
    47f6:	0e c0       	rjmp	.+28     	; 0x4814 <EF_void_LCD_print_ByLength+0x32>

	while( i < length)
	{
		EF_void_LCD_send_data(string[i]);
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	28 2f       	mov	r18, r24
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4800:	9b 81       	ldd	r25, Y+3	; 0x03
    4802:	fc 01       	movw	r30, r24
    4804:	e2 0f       	add	r30, r18
    4806:	f3 1f       	adc	r31, r19
    4808:	80 81       	ld	r24, Z
    480a:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>
		i++;
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	8f 5f       	subi	r24, 0xFF	; 255
    4812:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
	U8_t i = 0;

	while( i < length)
    4814:	99 81       	ldd	r25, Y+1	; 0x01
    4816:	8c 81       	ldd	r24, Y+4	; 0x04
    4818:	98 17       	cp	r25, r24
    481a:	70 f3       	brcs	.-36     	; 0x47f8 <EF_void_LCD_print_ByLength+0x16>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	0f 90       	pop	r0
    4824:	cf 91       	pop	r28
    4826:	df 91       	pop	r29
    4828:	08 95       	ret

0000482a <EF_void_LCD_Clear_Screen>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_Clear_Screen(void)
{
    482a:	df 93       	push	r29
    482c:	cf 93       	push	r28
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
    4832:	a6 97       	sbiw	r28, 0x26	; 38
    4834:	0f b6       	in	r0, 0x3f	; 63
    4836:	f8 94       	cli
    4838:	de bf       	out	0x3e, r29	; 62
    483a:	0f be       	out	0x3f, r0	; 63
    483c:	cd bf       	out	0x3d, r28	; 61
	EF_void_LCD_send_command(1<<0);
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	a0 e0       	ldi	r26, 0x00	; 0
    484a:	b0 e4       	ldi	r27, 0x40	; 64
    484c:	8b a3       	std	Y+35, r24	; 0x23
    484e:	9c a3       	std	Y+36, r25	; 0x24
    4850:	ad a3       	std	Y+37, r26	; 0x25
    4852:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4854:	6b a1       	ldd	r22, Y+35	; 0x23
    4856:	7c a1       	ldd	r23, Y+36	; 0x24
    4858:	8d a1       	ldd	r24, Y+37	; 0x25
    485a:	9e a1       	ldd	r25, Y+38	; 0x26
    485c:	2b ea       	ldi	r18, 0xAB	; 171
    485e:	3a ea       	ldi	r19, 0xAA	; 170
    4860:	4a e2       	ldi	r20, 0x2A	; 42
    4862:	50 e4       	ldi	r21, 0x40	; 64
    4864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	8f 8f       	std	Y+31, r24	; 0x1f
    486e:	98 a3       	std	Y+32, r25	; 0x20
    4870:	a9 a3       	std	Y+33, r26	; 0x21
    4872:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4874:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4876:	78 a1       	ldd	r23, Y+32	; 0x20
    4878:	89 a1       	ldd	r24, Y+33	; 0x21
    487a:	9a a1       	ldd	r25, Y+34	; 0x22
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e8       	ldi	r20, 0x80	; 128
    4882:	5f e3       	ldi	r21, 0x3F	; 63
    4884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4888:	88 23       	and	r24, r24
    488a:	1c f4       	brge	.+6      	; 0x4892 <EF_void_LCD_Clear_Screen+0x68>
		__ticks = 1;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	8e 8f       	std	Y+30, r24	; 0x1e
    4890:	91 c0       	rjmp	.+290    	; 0x49b4 <EF_void_LCD_Clear_Screen+0x18a>
	else if (__tmp > 255)
    4892:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4894:	78 a1       	ldd	r23, Y+32	; 0x20
    4896:	89 a1       	ldd	r24, Y+33	; 0x21
    4898:	9a a1       	ldd	r25, Y+34	; 0x22
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	4f e7       	ldi	r20, 0x7F	; 127
    48a0:	53 e4       	ldi	r21, 0x43	; 67
    48a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48a6:	18 16       	cp	r1, r24
    48a8:	0c f0       	brlt	.+2      	; 0x48ac <EF_void_LCD_Clear_Screen+0x82>
    48aa:	7b c0       	rjmp	.+246    	; 0x49a2 <EF_void_LCD_Clear_Screen+0x178>
	{
		_delay_ms(__us / 1000.0);
    48ac:	6b a1       	ldd	r22, Y+35	; 0x23
    48ae:	7c a1       	ldd	r23, Y+36	; 0x24
    48b0:	8d a1       	ldd	r24, Y+37	; 0x25
    48b2:	9e a1       	ldd	r25, Y+38	; 0x26
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	4a e7       	ldi	r20, 0x7A	; 122
    48ba:	54 e4       	ldi	r21, 0x44	; 68
    48bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	8a 8f       	std	Y+26, r24	; 0x1a
    48c6:	9b 8f       	std	Y+27, r25	; 0x1b
    48c8:	ac 8f       	std	Y+28, r26	; 0x1c
    48ca:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48cc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    48ce:	7b 8d       	ldd	r23, Y+27	; 0x1b
    48d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	4a ef       	ldi	r20, 0xFA	; 250
    48da:	54 e4       	ldi	r21, 0x44	; 68
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	8e 8b       	std	Y+22, r24	; 0x16
    48e6:	9f 8b       	std	Y+23, r25	; 0x17
    48e8:	a8 8f       	std	Y+24, r26	; 0x18
    48ea:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    48ec:	6e 89       	ldd	r22, Y+22	; 0x16
    48ee:	7f 89       	ldd	r23, Y+23	; 0x17
    48f0:	88 8d       	ldd	r24, Y+24	; 0x18
    48f2:	99 8d       	ldd	r25, Y+25	; 0x19
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	40 e8       	ldi	r20, 0x80	; 128
    48fa:	5f e3       	ldi	r21, 0x3F	; 63
    48fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4900:	88 23       	and	r24, r24
    4902:	2c f4       	brge	.+10     	; 0x490e <EF_void_LCD_Clear_Screen+0xe4>
		__ticks = 1;
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	9d 8b       	std	Y+21, r25	; 0x15
    490a:	8c 8b       	std	Y+20, r24	; 0x14
    490c:	3f c0       	rjmp	.+126    	; 0x498c <EF_void_LCD_Clear_Screen+0x162>
	else if (__tmp > 65535)
    490e:	6e 89       	ldd	r22, Y+22	; 0x16
    4910:	7f 89       	ldd	r23, Y+23	; 0x17
    4912:	88 8d       	ldd	r24, Y+24	; 0x18
    4914:	99 8d       	ldd	r25, Y+25	; 0x19
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	3f ef       	ldi	r19, 0xFF	; 255
    491a:	4f e7       	ldi	r20, 0x7F	; 127
    491c:	57 e4       	ldi	r21, 0x47	; 71
    491e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4922:	18 16       	cp	r1, r24
    4924:	4c f5       	brge	.+82     	; 0x4978 <EF_void_LCD_Clear_Screen+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4926:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4928:	7b 8d       	ldd	r23, Y+27	; 0x1b
    492a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    492c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    492e:	20 e0       	ldi	r18, 0x00	; 0
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	40 e2       	ldi	r20, 0x20	; 32
    4934:	51 e4       	ldi	r21, 0x41	; 65
    4936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	bc 01       	movw	r22, r24
    4940:	cd 01       	movw	r24, r26
    4942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4946:	dc 01       	movw	r26, r24
    4948:	cb 01       	movw	r24, r22
    494a:	9d 8b       	std	Y+21, r25	; 0x15
    494c:	8c 8b       	std	Y+20, r24	; 0x14
    494e:	0f c0       	rjmp	.+30     	; 0x496e <EF_void_LCD_Clear_Screen+0x144>
    4950:	88 ec       	ldi	r24, 0xC8	; 200
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	9b 8b       	std	Y+19, r25	; 0x13
    4956:	8a 8b       	std	Y+18, r24	; 0x12
    4958:	8a 89       	ldd	r24, Y+18	; 0x12
    495a:	9b 89       	ldd	r25, Y+19	; 0x13
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	f1 f7       	brne	.-4      	; 0x495c <EF_void_LCD_Clear_Screen+0x132>
    4960:	9b 8b       	std	Y+19, r25	; 0x13
    4962:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4964:	8c 89       	ldd	r24, Y+20	; 0x14
    4966:	9d 89       	ldd	r25, Y+21	; 0x15
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	9d 8b       	std	Y+21, r25	; 0x15
    496c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    496e:	8c 89       	ldd	r24, Y+20	; 0x14
    4970:	9d 89       	ldd	r25, Y+21	; 0x15
    4972:	00 97       	sbiw	r24, 0x00	; 0
    4974:	69 f7       	brne	.-38     	; 0x4950 <EF_void_LCD_Clear_Screen+0x126>
    4976:	24 c0       	rjmp	.+72     	; 0x49c0 <EF_void_LCD_Clear_Screen+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4978:	6e 89       	ldd	r22, Y+22	; 0x16
    497a:	7f 89       	ldd	r23, Y+23	; 0x17
    497c:	88 8d       	ldd	r24, Y+24	; 0x18
    497e:	99 8d       	ldd	r25, Y+25	; 0x19
    4980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	9d 8b       	std	Y+21, r25	; 0x15
    498a:	8c 8b       	std	Y+20, r24	; 0x14
    498c:	8c 89       	ldd	r24, Y+20	; 0x14
    498e:	9d 89       	ldd	r25, Y+21	; 0x15
    4990:	99 8b       	std	Y+17, r25	; 0x11
    4992:	88 8b       	std	Y+16, r24	; 0x10
    4994:	88 89       	ldd	r24, Y+16	; 0x10
    4996:	99 89       	ldd	r25, Y+17	; 0x11
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	f1 f7       	brne	.-4      	; 0x4998 <EF_void_LCD_Clear_Screen+0x16e>
    499c:	99 8b       	std	Y+17, r25	; 0x11
    499e:	88 8b       	std	Y+16, r24	; 0x10
    49a0:	0f c0       	rjmp	.+30     	; 0x49c0 <EF_void_LCD_Clear_Screen+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    49a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    49a4:	78 a1       	ldd	r23, Y+32	; 0x20
    49a6:	89 a1       	ldd	r24, Y+33	; 0x21
    49a8:	9a a1       	ldd	r25, Y+34	; 0x22
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	8e 8f       	std	Y+30, r24	; 0x1e
    49b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    49b6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    49b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ba:	8a 95       	dec	r24
    49bc:	f1 f7       	brne	.-4      	; 0x49ba <EF_void_LCD_Clear_Screen+0x190>
    49be:	8f 87       	std	Y+15, r24	; 0x0f
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	a0 e2       	ldi	r26, 0x20	; 32
    49c6:	b1 e4       	ldi	r27, 0x41	; 65
    49c8:	8b 87       	std	Y+11, r24	; 0x0b
    49ca:	9c 87       	std	Y+12, r25	; 0x0c
    49cc:	ad 87       	std	Y+13, r26	; 0x0d
    49ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    49d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    49d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	4a ef       	ldi	r20, 0xFA	; 250
    49de:	54 e4       	ldi	r21, 0x44	; 68
    49e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	8f 83       	std	Y+7, r24	; 0x07
    49ea:	98 87       	std	Y+8, r25	; 0x08
    49ec:	a9 87       	std	Y+9, r26	; 0x09
    49ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49f0:	6f 81       	ldd	r22, Y+7	; 0x07
    49f2:	78 85       	ldd	r23, Y+8	; 0x08
    49f4:	89 85       	ldd	r24, Y+9	; 0x09
    49f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	40 e8       	ldi	r20, 0x80	; 128
    49fe:	5f e3       	ldi	r21, 0x3F	; 63
    4a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a04:	88 23       	and	r24, r24
    4a06:	2c f4       	brge	.+10     	; 0x4a12 <EF_void_LCD_Clear_Screen+0x1e8>
		__ticks = 1;
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	9e 83       	std	Y+6, r25	; 0x06
    4a0e:	8d 83       	std	Y+5, r24	; 0x05
    4a10:	3f c0       	rjmp	.+126    	; 0x4a90 <EF_void_LCD_Clear_Screen+0x266>
	else if (__tmp > 65535)
    4a12:	6f 81       	ldd	r22, Y+7	; 0x07
    4a14:	78 85       	ldd	r23, Y+8	; 0x08
    4a16:	89 85       	ldd	r24, Y+9	; 0x09
    4a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	3f ef       	ldi	r19, 0xFF	; 255
    4a1e:	4f e7       	ldi	r20, 0x7F	; 127
    4a20:	57 e4       	ldi	r21, 0x47	; 71
    4a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a26:	18 16       	cp	r1, r24
    4a28:	4c f5       	brge	.+82     	; 0x4a7c <EF_void_LCD_Clear_Screen+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a32:	20 e0       	ldi	r18, 0x00	; 0
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	40 e2       	ldi	r20, 0x20	; 32
    4a38:	51 e4       	ldi	r21, 0x41	; 65
    4a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	bc 01       	movw	r22, r24
    4a44:	cd 01       	movw	r24, r26
    4a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	9e 83       	std	Y+6, r25	; 0x06
    4a50:	8d 83       	std	Y+5, r24	; 0x05
    4a52:	0f c0       	rjmp	.+30     	; 0x4a72 <EF_void_LCD_Clear_Screen+0x248>
    4a54:	88 ec       	ldi	r24, 0xC8	; 200
    4a56:	90 e0       	ldi	r25, 0x00	; 0
    4a58:	9c 83       	std	Y+4, r25	; 0x04
    4a5a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a60:	01 97       	sbiw	r24, 0x01	; 1
    4a62:	f1 f7       	brne	.-4      	; 0x4a60 <EF_void_LCD_Clear_Screen+0x236>
    4a64:	9c 83       	std	Y+4, r25	; 0x04
    4a66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a68:	8d 81       	ldd	r24, Y+5	; 0x05
    4a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a6c:	01 97       	sbiw	r24, 0x01	; 1
    4a6e:	9e 83       	std	Y+6, r25	; 0x06
    4a70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a72:	8d 81       	ldd	r24, Y+5	; 0x05
    4a74:	9e 81       	ldd	r25, Y+6	; 0x06
    4a76:	00 97       	sbiw	r24, 0x00	; 0
    4a78:	69 f7       	brne	.-38     	; 0x4a54 <EF_void_LCD_Clear_Screen+0x22a>
    4a7a:	14 c0       	rjmp	.+40     	; 0x4aa4 <EF_void_LCD_Clear_Screen+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a7e:	78 85       	ldd	r23, Y+8	; 0x08
    4a80:	89 85       	ldd	r24, Y+9	; 0x09
    4a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	9e 83       	std	Y+6, r25	; 0x06
    4a8e:	8d 83       	std	Y+5, r24	; 0x05
    4a90:	8d 81       	ldd	r24, Y+5	; 0x05
    4a92:	9e 81       	ldd	r25, Y+6	; 0x06
    4a94:	9a 83       	std	Y+2, r25	; 0x02
    4a96:	89 83       	std	Y+1, r24	; 0x01
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	f1 f7       	brne	.-4      	; 0x4a9c <EF_void_LCD_Clear_Screen+0x272>
    4aa0:	9a 83       	std	Y+2, r25	; 0x02
    4aa2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	_delay_ms(10);
}
    4aa4:	a6 96       	adiw	r28, 0x26	; 38
    4aa6:	0f b6       	in	r0, 0x3f	; 63
    4aa8:	f8 94       	cli
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	cd bf       	out	0x3d, r28	; 61
    4ab0:	cf 91       	pop	r28
    4ab2:	df 91       	pop	r29
    4ab4:	08 95       	ret

00004ab6 <EF_void_uploadCustomChar>:
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_uploadCustomChar(U8_t location, unsigned char *character)

{
    4ab6:	df 93       	push	r29
    4ab8:	cf 93       	push	r28
    4aba:	00 d0       	rcall	.+0      	; 0x4abc <EF_void_uploadCustomChar+0x6>
    4abc:	00 d0       	rcall	.+0      	; 0x4abe <EF_void_uploadCustomChar+0x8>
    4abe:	cd b7       	in	r28, 0x3d	; 61
    4ac0:	de b7       	in	r29, 0x3e	; 62
    4ac2:	8a 83       	std	Y+2, r24	; 0x02
    4ac4:	7c 83       	std	Y+4, r23	; 0x04
    4ac6:	6b 83       	std	Y+3, r22	; 0x03
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	88 30       	cpi	r24, 0x08	; 8
    4acc:	f8 f4       	brcc	.+62     	; 0x4b0c <EF_void_uploadCustomChar+0x56>
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
    4ace:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad0:	88 2f       	mov	r24, r24
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	08 96       	adiw	r24, 0x08	; 8
    4ad6:	88 0f       	add	r24, r24
    4ad8:	99 1f       	adc	r25, r25
    4ada:	88 0f       	add	r24, r24
    4adc:	99 1f       	adc	r25, r25
    4ade:	88 0f       	add	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    4ae6:	19 82       	std	Y+1, r1	; 0x01
    4ae8:	0e c0       	rjmp	.+28     	; 0x4b06 <EF_void_uploadCustomChar+0x50>
		{
			EF_void_LCD_send_data(character[ArrayIndex]);
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	28 2f       	mov	r18, r24
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	8b 81       	ldd	r24, Y+3	; 0x03
    4af2:	9c 81       	ldd	r25, Y+4	; 0x04
    4af4:	fc 01       	movw	r30, r24
    4af6:	e2 0f       	add	r30, r18
    4af8:	f3 1f       	adc	r31, r19
    4afa:	80 81       	ld	r24, Z
    4afc:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    4b00:	89 81       	ldd	r24, Y+1	; 0x01
    4b02:	8f 5f       	subi	r24, 0xFF	; 255
    4b04:	89 83       	std	Y+1, r24	; 0x01
    4b06:	89 81       	ldd	r24, Y+1	; 0x01
    4b08:	88 30       	cpi	r24, 0x08	; 8
    4b0a:	78 f3       	brcs	.-34     	; 0x4aea <EF_void_uploadCustomChar+0x34>
	else
	{
		/* TODO: return Error */
	}

}
    4b0c:	0f 90       	pop	r0
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	08 95       	ret

00004b1a <EF_void_LCD_HextoASCII>:
 * PARAMETERS  : hex: pointer to hex (one byte)
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_HextoASCII(U8_t *hex)
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	00 d0       	rcall	.+0      	; 0x4b20 <EF_void_LCD_HextoASCII+0x6>
    4b20:	00 d0       	rcall	.+0      	; 0x4b22 <EF_void_LCD_HextoASCII+0x8>
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	9c 83       	std	Y+4, r25	; 0x04
    4b28:	8b 83       	std	Y+3, r24	; 0x03

	U8_t temp_L = 0;                    // dummy variable that will hold LSBs of Hex number
    4b2a:	1a 82       	std	Y+2, r1	; 0x02
	U8_t temp_H = 0;                    // dummy variable that will hold MSBs of Hex number
    4b2c:	19 82       	std	Y+1, r1	; 0x01

	temp_H = *hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
    4b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    4b30:	fc 81       	ldd	r31, Y+4	; 0x04
    4b32:	80 81       	ld	r24, Z
    4b34:	80 7f       	andi	r24, 0xF0	; 240
    4b36:	89 83       	std	Y+1, r24	; 0x01
	temp_H = temp_H >> 4;           //
    4b38:	89 81       	ldd	r24, Y+1	; 0x01
    4b3a:	82 95       	swap	r24
    4b3c:	8f 70       	andi	r24, 0x0F	; 15
    4b3e:	89 83       	std	Y+1, r24	; 0x01

	if(temp_H >9)                   // Check if the number is a letter
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	8a 30       	cpi	r24, 0x0A	; 10
    4b44:	20 f0       	brcs	.+8      	; 0x4b4e <EF_void_LCD_HextoASCII+0x34>
	{
		temp_H += 0x37;             // Convert the number to a letter in ASCII
    4b46:	89 81       	ldd	r24, Y+1	; 0x01
    4b48:	89 5c       	subi	r24, 0xC9	; 201
    4b4a:	89 83       	std	Y+1, r24	; 0x01
    4b4c:	03 c0       	rjmp	.+6      	; 0x4b54 <EF_void_LCD_HextoASCII+0x3a>
	}
	else
	{
		temp_H += 0x30;             // Convert the number to ASCII number
    4b4e:	89 81       	ldd	r24, Y+1	; 0x01
    4b50:	80 5d       	subi	r24, 0xD0	; 208
    4b52:	89 83       	std	Y+1, r24	; 0x01
	}

	EF_void_LCD_send_data(temp_H);           // Display the number
    4b54:	89 81       	ldd	r24, Y+1	; 0x01
    4b56:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>

	temp_L = *hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
    4b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    4b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    4b5e:	80 81       	ld	r24, Z
    4b60:	8f 70       	andi	r24, 0x0F	; 15
    4b62:	8a 83       	std	Y+2, r24	; 0x02

	if(temp_L >9)                   // Check if the the number is a letter
    4b64:	8a 81       	ldd	r24, Y+2	; 0x02
    4b66:	8a 30       	cpi	r24, 0x0A	; 10
    4b68:	20 f0       	brcs	.+8      	; 0x4b72 <EF_void_LCD_HextoASCII+0x58>
	{
		temp_L += 0x37;             // Convert the number to a letter in ASCII
    4b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6c:	89 5c       	subi	r24, 0xC9	; 201
    4b6e:	8a 83       	std	Y+2, r24	; 0x02
    4b70:	03 c0       	rjmp	.+6      	; 0x4b78 <EF_void_LCD_HextoASCII+0x5e>
	}
	else
	{
		temp_L += 0x30;             // Convert the number to ASCII number
    4b72:	8a 81       	ldd	r24, Y+2	; 0x02
    4b74:	80 5d       	subi	r24, 0xD0	; 208
    4b76:	8a 83       	std	Y+2, r24	; 0x02
	}

	EF_void_LCD_send_data(temp_L);           // Display the number
    4b78:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7a:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>
}
    4b7e:	0f 90       	pop	r0
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	cf 91       	pop	r28
    4b88:	df 91       	pop	r29
    4b8a:	08 95       	ret

00004b8c <LCD_4BIT_Write_Init>:




void LCD_4BIT_Write_Init ( U8_t temp)
{
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
    4b94:	6d 97       	sbiw	r28, 0x1d	; 29
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	f8 94       	cli
    4b9a:	de bf       	out	0x3e, r29	; 62
    4b9c:	0f be       	out	0x3f, r0	; 63
    4b9e:	cd bf       	out	0x3d, r28	; 61
    4ba0:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = temp;
    4ba2:	e8 e3       	ldi	r30, 0x38	; 56
    4ba4:	f0 e0       	ldi	r31, 0x00	; 0
    4ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ba8:	80 83       	st	Z, r24
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    4baa:	a5 e3       	ldi	r26, 0x35	; 53
    4bac:	b0 e0       	ldi	r27, 0x00	; 0
    4bae:	e5 e3       	ldi	r30, 0x35	; 53
    4bb0:	f0 e0       	ldi	r31, 0x00	; 0
    4bb2:	80 81       	ld	r24, Z
    4bb4:	8f 7b       	andi	r24, 0xBF	; 191
    4bb6:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    4bb8:	a5 e3       	ldi	r26, 0x35	; 53
    4bba:	b0 e0       	ldi	r27, 0x00	; 0
    4bbc:	e5 e3       	ldi	r30, 0x35	; 53
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	80 68       	ori	r24, 0x80	; 128
    4bc4:	8c 93       	st	X, r24
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	a0 e8       	ldi	r26, 0x80	; 128
    4bcc:	bf e3       	ldi	r27, 0x3F	; 63
    4bce:	89 8f       	std	Y+25, r24	; 0x19
    4bd0:	9a 8f       	std	Y+26, r25	; 0x1a
    4bd2:	ab 8f       	std	Y+27, r26	; 0x1b
    4bd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    4bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	4a ef       	ldi	r20, 0xFA	; 250
    4be4:	54 e4       	ldi	r21, 0x44	; 68
    4be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	8d 8b       	std	Y+21, r24	; 0x15
    4bf0:	9e 8b       	std	Y+22, r25	; 0x16
    4bf2:	af 8b       	std	Y+23, r26	; 0x17
    4bf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    4bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    4bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	40 e8       	ldi	r20, 0x80	; 128
    4c04:	5f e3       	ldi	r21, 0x3F	; 63
    4c06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c0a:	88 23       	and	r24, r24
    4c0c:	2c f4       	brge	.+10     	; 0x4c18 <LCD_4BIT_Write_Init+0x8c>
		__ticks = 1;
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	9c 8b       	std	Y+20, r25	; 0x14
    4c14:	8b 8b       	std	Y+19, r24	; 0x13
    4c16:	3f c0       	rjmp	.+126    	; 0x4c96 <LCD_4BIT_Write_Init+0x10a>
	else if (__tmp > 65535)
    4c18:	6d 89       	ldd	r22, Y+21	; 0x15
    4c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    4c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	3f ef       	ldi	r19, 0xFF	; 255
    4c24:	4f e7       	ldi	r20, 0x7F	; 127
    4c26:	57 e4       	ldi	r21, 0x47	; 71
    4c28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c2c:	18 16       	cp	r1, r24
    4c2e:	4c f5       	brge	.+82     	; 0x4c82 <LCD_4BIT_Write_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c30:	69 8d       	ldd	r22, Y+25	; 0x19
    4c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	40 e2       	ldi	r20, 0x20	; 32
    4c3e:	51 e4       	ldi	r21, 0x41	; 65
    4c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	bc 01       	movw	r22, r24
    4c4a:	cd 01       	movw	r24, r26
    4c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	9c 8b       	std	Y+20, r25	; 0x14
    4c56:	8b 8b       	std	Y+19, r24	; 0x13
    4c58:	0f c0       	rjmp	.+30     	; 0x4c78 <LCD_4BIT_Write_Init+0xec>
    4c5a:	88 ec       	ldi	r24, 0xC8	; 200
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	9a 8b       	std	Y+18, r25	; 0x12
    4c60:	89 8b       	std	Y+17, r24	; 0x11
    4c62:	89 89       	ldd	r24, Y+17	; 0x11
    4c64:	9a 89       	ldd	r25, Y+18	; 0x12
    4c66:	01 97       	sbiw	r24, 0x01	; 1
    4c68:	f1 f7       	brne	.-4      	; 0x4c66 <LCD_4BIT_Write_Init+0xda>
    4c6a:	9a 8b       	std	Y+18, r25	; 0x12
    4c6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    4c70:	9c 89       	ldd	r25, Y+20	; 0x14
    4c72:	01 97       	sbiw	r24, 0x01	; 1
    4c74:	9c 8b       	std	Y+20, r25	; 0x14
    4c76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c78:	8b 89       	ldd	r24, Y+19	; 0x13
    4c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	69 f7       	brne	.-38     	; 0x4c5a <LCD_4BIT_Write_Init+0xce>
    4c80:	14 c0       	rjmp	.+40     	; 0x4caa <LCD_4BIT_Write_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c82:	6d 89       	ldd	r22, Y+21	; 0x15
    4c84:	7e 89       	ldd	r23, Y+22	; 0x16
    4c86:	8f 89       	ldd	r24, Y+23	; 0x17
    4c88:	98 8d       	ldd	r25, Y+24	; 0x18
    4c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	9c 8b       	std	Y+20, r25	; 0x14
    4c94:	8b 8b       	std	Y+19, r24	; 0x13
    4c96:	8b 89       	ldd	r24, Y+19	; 0x13
    4c98:	9c 89       	ldd	r25, Y+20	; 0x14
    4c9a:	98 8b       	std	Y+16, r25	; 0x10
    4c9c:	8f 87       	std	Y+15, r24	; 0x0f
    4c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ca0:	98 89       	ldd	r25, Y+16	; 0x10
    4ca2:	01 97       	sbiw	r24, 0x01	; 1
    4ca4:	f1 f7       	brne	.-4      	; 0x4ca2 <LCD_4BIT_Write_Init+0x116>
    4ca6:	98 8b       	std	Y+16, r25	; 0x10
    4ca8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    4caa:	a5 e3       	ldi	r26, 0x35	; 53
    4cac:	b0 e0       	ldi	r27, 0x00	; 0
    4cae:	e5 e3       	ldi	r30, 0x35	; 53
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	80 81       	ld	r24, Z
    4cb4:	8f 77       	andi	r24, 0x7F	; 127
    4cb6:	8c 93       	st	X, r24
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	a0 e8       	ldi	r26, 0x80	; 128
    4cbe:	bf e3       	ldi	r27, 0x3F	; 63
    4cc0:	8b 87       	std	Y+11, r24	; 0x0b
    4cc2:	9c 87       	std	Y+12, r25	; 0x0c
    4cc4:	ad 87       	std	Y+13, r26	; 0x0d
    4cc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	4a ef       	ldi	r20, 0xFA	; 250
    4cd6:	54 e4       	ldi	r21, 0x44	; 68
    4cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cdc:	dc 01       	movw	r26, r24
    4cde:	cb 01       	movw	r24, r22
    4ce0:	8f 83       	std	Y+7, r24	; 0x07
    4ce2:	98 87       	std	Y+8, r25	; 0x08
    4ce4:	a9 87       	std	Y+9, r26	; 0x09
    4ce6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cea:	78 85       	ldd	r23, Y+8	; 0x08
    4cec:	89 85       	ldd	r24, Y+9	; 0x09
    4cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	40 e8       	ldi	r20, 0x80	; 128
    4cf6:	5f e3       	ldi	r21, 0x3F	; 63
    4cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cfc:	88 23       	and	r24, r24
    4cfe:	2c f4       	brge	.+10     	; 0x4d0a <LCD_4BIT_Write_Init+0x17e>
		__ticks = 1;
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	9e 83       	std	Y+6, r25	; 0x06
    4d06:	8d 83       	std	Y+5, r24	; 0x05
    4d08:	3f c0       	rjmp	.+126    	; 0x4d88 <LCD_4BIT_Write_Init+0x1fc>
	else if (__tmp > 65535)
    4d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d0c:	78 85       	ldd	r23, Y+8	; 0x08
    4d0e:	89 85       	ldd	r24, Y+9	; 0x09
    4d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	3f ef       	ldi	r19, 0xFF	; 255
    4d16:	4f e7       	ldi	r20, 0x7F	; 127
    4d18:	57 e4       	ldi	r21, 0x47	; 71
    4d1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d1e:	18 16       	cp	r1, r24
    4d20:	4c f5       	brge	.+82     	; 0x4d74 <LCD_4BIT_Write_Init+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	40 e2       	ldi	r20, 0x20	; 32
    4d30:	51 e4       	ldi	r21, 0x41	; 65
    4d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	bc 01       	movw	r22, r24
    4d3c:	cd 01       	movw	r24, r26
    4d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d42:	dc 01       	movw	r26, r24
    4d44:	cb 01       	movw	r24, r22
    4d46:	9e 83       	std	Y+6, r25	; 0x06
    4d48:	8d 83       	std	Y+5, r24	; 0x05
    4d4a:	0f c0       	rjmp	.+30     	; 0x4d6a <LCD_4BIT_Write_Init+0x1de>
    4d4c:	88 ec       	ldi	r24, 0xC8	; 200
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	9c 83       	std	Y+4, r25	; 0x04
    4d52:	8b 83       	std	Y+3, r24	; 0x03
    4d54:	8b 81       	ldd	r24, Y+3	; 0x03
    4d56:	9c 81       	ldd	r25, Y+4	; 0x04
    4d58:	01 97       	sbiw	r24, 0x01	; 1
    4d5a:	f1 f7       	brne	.-4      	; 0x4d58 <LCD_4BIT_Write_Init+0x1cc>
    4d5c:	9c 83       	std	Y+4, r25	; 0x04
    4d5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d60:	8d 81       	ldd	r24, Y+5	; 0x05
    4d62:	9e 81       	ldd	r25, Y+6	; 0x06
    4d64:	01 97       	sbiw	r24, 0x01	; 1
    4d66:	9e 83       	std	Y+6, r25	; 0x06
    4d68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6e:	00 97       	sbiw	r24, 0x00	; 0
    4d70:	69 f7       	brne	.-38     	; 0x4d4c <LCD_4BIT_Write_Init+0x1c0>
    4d72:	14 c0       	rjmp	.+40     	; 0x4d9c <LCD_4BIT_Write_Init+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d74:	6f 81       	ldd	r22, Y+7	; 0x07
    4d76:	78 85       	ldd	r23, Y+8	; 0x08
    4d78:	89 85       	ldd	r24, Y+9	; 0x09
    4d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d80:	dc 01       	movw	r26, r24
    4d82:	cb 01       	movw	r24, r22
    4d84:	9e 83       	std	Y+6, r25	; 0x06
    4d86:	8d 83       	std	Y+5, r24	; 0x05
    4d88:	8d 81       	ldd	r24, Y+5	; 0x05
    4d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d8c:	9a 83       	std	Y+2, r25	; 0x02
    4d8e:	89 83       	std	Y+1, r24	; 0x01
    4d90:	89 81       	ldd	r24, Y+1	; 0x01
    4d92:	9a 81       	ldd	r25, Y+2	; 0x02
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <LCD_4BIT_Write_Init+0x208>
    4d98:	9a 83       	std	Y+2, r25	; 0x02
    4d9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    4d9c:	6d 96       	adiw	r28, 0x1d	; 29
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	f8 94       	cli
    4da2:	de bf       	out	0x3e, r29	; 62
    4da4:	0f be       	out	0x3f, r0	; 63
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	cf 91       	pop	r28
    4daa:	df 91       	pop	r29
    4dac:	08 95       	ret

00004dae <EF_void_LCD_Newline>:


void EF_void_LCD_Newline()
{
    4dae:	df 93       	push	r29
    4db0:	cf 93       	push	r28
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	2e 97       	sbiw	r28, 0x0e	; 14
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61

	EF_void_LCD_send_command(0xC0);
    4dc2:	80 ec       	ldi	r24, 0xC0	; 192
    4dc4:	0e 94 33 1c 	call	0x3866	; 0x3866 <EF_void_LCD_send_command>
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	a0 ea       	ldi	r26, 0xA0	; 160
    4dce:	b1 e4       	ldi	r27, 0x41	; 65
    4dd0:	8b 87       	std	Y+11, r24	; 0x0b
    4dd2:	9c 87       	std	Y+12, r25	; 0x0c
    4dd4:	ad 87       	std	Y+13, r26	; 0x0d
    4dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	4a ef       	ldi	r20, 0xFA	; 250
    4de6:	54 e4       	ldi	r21, 0x44	; 68
    4de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	8f 83       	std	Y+7, r24	; 0x07
    4df2:	98 87       	std	Y+8, r25	; 0x08
    4df4:	a9 87       	std	Y+9, r26	; 0x09
    4df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4df8:	6f 81       	ldd	r22, Y+7	; 0x07
    4dfa:	78 85       	ldd	r23, Y+8	; 0x08
    4dfc:	89 85       	ldd	r24, Y+9	; 0x09
    4dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	40 e8       	ldi	r20, 0x80	; 128
    4e06:	5f e3       	ldi	r21, 0x3F	; 63
    4e08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e0c:	88 23       	and	r24, r24
    4e0e:	2c f4       	brge	.+10     	; 0x4e1a <EF_void_LCD_Newline+0x6c>
		__ticks = 1;
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	9e 83       	std	Y+6, r25	; 0x06
    4e16:	8d 83       	std	Y+5, r24	; 0x05
    4e18:	3f c0       	rjmp	.+126    	; 0x4e98 <EF_void_LCD_Newline+0xea>
	else if (__tmp > 65535)
    4e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e1c:	78 85       	ldd	r23, Y+8	; 0x08
    4e1e:	89 85       	ldd	r24, Y+9	; 0x09
    4e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	3f ef       	ldi	r19, 0xFF	; 255
    4e26:	4f e7       	ldi	r20, 0x7F	; 127
    4e28:	57 e4       	ldi	r21, 0x47	; 71
    4e2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e2e:	18 16       	cp	r1, r24
    4e30:	4c f5       	brge	.+82     	; 0x4e84 <EF_void_LCD_Newline+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	40 e2       	ldi	r20, 0x20	; 32
    4e40:	51 e4       	ldi	r21, 0x41	; 65
    4e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	bc 01       	movw	r22, r24
    4e4c:	cd 01       	movw	r24, r26
    4e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	9e 83       	std	Y+6, r25	; 0x06
    4e58:	8d 83       	std	Y+5, r24	; 0x05
    4e5a:	0f c0       	rjmp	.+30     	; 0x4e7a <EF_void_LCD_Newline+0xcc>
    4e5c:	88 ec       	ldi	r24, 0xC8	; 200
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	9c 83       	std	Y+4, r25	; 0x04
    4e62:	8b 83       	std	Y+3, r24	; 0x03
    4e64:	8b 81       	ldd	r24, Y+3	; 0x03
    4e66:	9c 81       	ldd	r25, Y+4	; 0x04
    4e68:	01 97       	sbiw	r24, 0x01	; 1
    4e6a:	f1 f7       	brne	.-4      	; 0x4e68 <EF_void_LCD_Newline+0xba>
    4e6c:	9c 83       	std	Y+4, r25	; 0x04
    4e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e70:	8d 81       	ldd	r24, Y+5	; 0x05
    4e72:	9e 81       	ldd	r25, Y+6	; 0x06
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	9e 83       	std	Y+6, r25	; 0x06
    4e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	69 f7       	brne	.-38     	; 0x4e5c <EF_void_LCD_Newline+0xae>
    4e82:	14 c0       	rjmp	.+40     	; 0x4eac <EF_void_LCD_Newline+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e84:	6f 81       	ldd	r22, Y+7	; 0x07
    4e86:	78 85       	ldd	r23, Y+8	; 0x08
    4e88:	89 85       	ldd	r24, Y+9	; 0x09
    4e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	9e 83       	std	Y+6, r25	; 0x06
    4e96:	8d 83       	std	Y+5, r24	; 0x05
    4e98:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e9c:	9a 83       	std	Y+2, r25	; 0x02
    4e9e:	89 83       	std	Y+1, r24	; 0x01
    4ea0:	89 81       	ldd	r24, Y+1	; 0x01
    4ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	f1 f7       	brne	.-4      	; 0x4ea4 <EF_void_LCD_Newline+0xf6>
    4ea8:	9a 83       	std	Y+2, r25	; 0x02
    4eaa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    4eac:	2e 96       	adiw	r28, 0x0e	; 14
    4eae:	0f b6       	in	r0, 0x3f	; 63
    4eb0:	f8 94       	cli
    4eb2:	de bf       	out	0x3e, r29	; 62
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	cd bf       	out	0x3d, r28	; 61
    4eb8:	cf 91       	pop	r28
    4eba:	df 91       	pop	r29
    4ebc:	08 95       	ret

00004ebe <EF_void_LCD_print_Number>:


void EF_void_LCD_print_Number(S16_t s16Numberstring)
{
    4ebe:	df 93       	push	r29
    4ec0:	cf 93       	push	r28
    4ec2:	cd b7       	in	r28, 0x3d	; 61
    4ec4:	de b7       	in	r29, 0x3e	; 62
    4ec6:	29 97       	sbiw	r28, 0x09	; 9
    4ec8:	0f b6       	in	r0, 0x3f	; 63
    4eca:	f8 94       	cli
    4ecc:	de bf       	out	0x3e, r29	; 62
    4ece:	0f be       	out	0x3f, r0	; 63
    4ed0:	cd bf       	out	0x3d, r28	; 61
    4ed2:	99 87       	std	Y+9, r25	; 0x09
    4ed4:	88 87       	std	Y+8, r24	; 0x08
	U8_t ArrayIndex = 0;
    4ed6:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    4ed8:	86 e0       	ldi	r24, 0x06	; 6
    4eda:	fe 01       	movw	r30, r28
    4edc:	32 96       	adiw	r30, 0x02	; 2
    4ede:	df 01       	movw	r26, r30
    4ee0:	98 2f       	mov	r25, r24
    4ee2:	1d 92       	st	X+, r1
    4ee4:	9a 95       	dec	r25
    4ee6:	e9 f7       	brne	.-6      	; 0x4ee2 <EF_void_LCD_print_Number+0x24>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    4ee8:	88 85       	ldd	r24, Y+8	; 0x08
    4eea:	99 85       	ldd	r25, Y+9	; 0x09
    4eec:	9e 01       	movw	r18, r28
    4eee:	2e 5f       	subi	r18, 0xFE	; 254
    4ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef2:	b9 01       	movw	r22, r18
    4ef4:	4a e0       	ldi	r20, 0x0A	; 10
    4ef6:	50 e0       	ldi	r21, 0x00	; 0
    4ef8:	0e 94 a4 38 	call	0x7148	; 0x7148 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    4efc:	19 82       	std	Y+1, r1	; 0x01
    4efe:	0e c0       	rjmp	.+28     	; 0x4f1c <EF_void_LCD_print_Number+0x5e>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    4f00:	89 81       	ldd	r24, Y+1	; 0x01
    4f02:	28 2f       	mov	r18, r24
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	ce 01       	movw	r24, r28
    4f08:	02 96       	adiw	r24, 0x02	; 2
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	e2 0f       	add	r30, r18
    4f0e:	f3 1f       	adc	r31, r19
    4f10:	80 81       	ld	r24, Z
    4f12:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	8f 5f       	subi	r24, 0xFF	; 255
    4f1a:	89 83       	std	Y+1, r24	; 0x01
    4f1c:	89 81       	ldd	r24, Y+1	; 0x01
    4f1e:	28 2f       	mov	r18, r24
    4f20:	30 e0       	ldi	r19, 0x00	; 0
    4f22:	ce 01       	movw	r24, r28
    4f24:	02 96       	adiw	r24, 0x02	; 2
    4f26:	fc 01       	movw	r30, r24
    4f28:	e2 0f       	add	r30, r18
    4f2a:	f3 1f       	adc	r31, r19
    4f2c:	80 81       	ld	r24, Z
    4f2e:	88 23       	and	r24, r24
    4f30:	39 f7       	brne	.-50     	; 0x4f00 <EF_void_LCD_print_Number+0x42>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    4f32:	29 96       	adiw	r28, 0x09	; 9
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	f8 94       	cli
    4f38:	de bf       	out	0x3e, r29	; 62
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	cd bf       	out	0x3d, r28	; 61
    4f3e:	cf 91       	pop	r28
    4f40:	df 91       	pop	r29
    4f42:	08 95       	ret

00004f44 <init_fun>:
 */
#include"../main.h"


ret_state init_fun(void)
{
    4f44:	0f 93       	push	r16
    4f46:	1f 93       	push	r17
    4f48:	df 93       	push	r29
    4f4a:	cf 93       	push	r28
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
    4f50:	ca 52       	subi	r28, 0x2A	; 42
    4f52:	d1 40       	sbci	r29, 0x01	; 1
    4f54:	0f b6       	in	r0, 0x3f	; 63
    4f56:	f8 94       	cli
    4f58:	de bf       	out	0x3e, r29	; 62
    4f5a:	0f be       	out	0x3f, r0	; 63
    4f5c:	cd bf       	out	0x3d, r28	; 61

	char data1=0,data2=0,data3=0,data4=0,Status=0,First_Reading=TRUE;
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e6 5d       	subi	r30, 0xD6	; 214
    4f62:	fe 4f       	sbci	r31, 0xFE	; 254
    4f64:	10 82       	st	Z, r1
    4f66:	fe 01       	movw	r30, r28
    4f68:	e7 5d       	subi	r30, 0xD7	; 215
    4f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f6c:	10 82       	st	Z, r1
    4f6e:	fe 01       	movw	r30, r28
    4f70:	e8 5d       	subi	r30, 0xD8	; 216
    4f72:	fe 4f       	sbci	r31, 0xFE	; 254
    4f74:	10 82       	st	Z, r1
    4f76:	fe 01       	movw	r30, r28
    4f78:	e9 5d       	subi	r30, 0xD9	; 217
    4f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f7c:	10 82       	st	Z, r1
    4f7e:	fe 01       	movw	r30, r28
    4f80:	ea 5d       	subi	r30, 0xDA	; 218
    4f82:	fe 4f       	sbci	r31, 0xFE	; 254
    4f84:	10 82       	st	Z, r1
    4f86:	fe 01       	movw	r30, r28
    4f88:	eb 5d       	subi	r30, 0xDB	; 219
    4f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	80 83       	st	Z, r24
	unsigned int CO2=0,TVOC=0;
    4f90:	fe 01       	movw	r30, r28
    4f92:	ed 5d       	subi	r30, 0xDD	; 221
    4f94:	fe 4f       	sbci	r31, 0xFE	; 254
    4f96:	11 82       	std	Z+1, r1	; 0x01
    4f98:	10 82       	st	Z, r1
    4f9a:	fe 01       	movw	r30, r28
    4f9c:	ef 5d       	subi	r30, 0xDF	; 223
    4f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa0:	11 82       	std	Z+1, r1	; 0x01
    4fa2:	10 82       	st	Z, r1
	unsigned long int i=0,CO2_AVG;
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	e3 5e       	subi	r30, 0xE3	; 227
    4fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4faa:	10 82       	st	Z, r1
    4fac:	11 82       	std	Z+1, r1	; 0x01
    4fae:	12 82       	std	Z+2, r1	; 0x02
    4fb0:	13 82       	std	Z+3, r1	; 0x03
	DDRD |=(1<<PD5);
    4fb2:	a1 e3       	ldi	r26, 0x31	; 49
    4fb4:	b0 e0       	ldi	r27, 0x00	; 0
    4fb6:	e1 e3       	ldi	r30, 0x31	; 49
    4fb8:	f0 e0       	ldi	r31, 0x00	; 0
    4fba:	80 81       	ld	r24, Z
    4fbc:	80 62       	ori	r24, 0x20	; 32
    4fbe:	8c 93       	st	X, r24
	UART_INIT();
    4fc0:	0e 94 67 13 	call	0x26ce	; 0x26ce <UART_INIT>
	EF_void_LCD_init();
    4fc4:	0e 94 e7 18 	call	0x31ce	; 0x31ce <EF_void_LCD_init>


	EF_void_LCD_Clear_Screen();
    4fc8:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Init state");
    4fcc:	89 e8       	ldi	r24, 0x89	; 137
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	eb 5e       	subi	r30, 0xEB	; 235
    4fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	aa ef       	ldi	r26, 0xFA	; 250
    4fe0:	b4 e4       	ldi	r27, 0x44	; 68
    4fe2:	80 83       	st	Z, r24
    4fe4:	91 83       	std	Z+1, r25	; 0x01
    4fe6:	a2 83       	std	Z+2, r26	; 0x02
    4fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fea:	8e 01       	movw	r16, r28
    4fec:	0f 5e       	subi	r16, 0xEF	; 239
    4fee:	1e 4f       	sbci	r17, 0xFE	; 254
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	eb 5e       	subi	r30, 0xEB	; 235
    4ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ff6:	60 81       	ld	r22, Z
    4ff8:	71 81       	ldd	r23, Z+1	; 0x01
    4ffa:	82 81       	ldd	r24, Z+2	; 0x02
    4ffc:	93 81       	ldd	r25, Z+3	; 0x03
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	4a ef       	ldi	r20, 0xFA	; 250
    5004:	54 e4       	ldi	r21, 0x44	; 68
    5006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    500a:	dc 01       	movw	r26, r24
    500c:	cb 01       	movw	r24, r22
    500e:	f8 01       	movw	r30, r16
    5010:	80 83       	st	Z, r24
    5012:	91 83       	std	Z+1, r25	; 0x01
    5014:	a2 83       	std	Z+2, r26	; 0x02
    5016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5018:	fe 01       	movw	r30, r28
    501a:	ef 5e       	subi	r30, 0xEF	; 239
    501c:	fe 4f       	sbci	r31, 0xFE	; 254
    501e:	60 81       	ld	r22, Z
    5020:	71 81       	ldd	r23, Z+1	; 0x01
    5022:	82 81       	ldd	r24, Z+2	; 0x02
    5024:	93 81       	ldd	r25, Z+3	; 0x03
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	40 e8       	ldi	r20, 0x80	; 128
    502c:	5f e3       	ldi	r21, 0x3F	; 63
    502e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5032:	88 23       	and	r24, r24
    5034:	44 f4       	brge	.+16     	; 0x5046 <init_fun+0x102>
		__ticks = 1;
    5036:	fe 01       	movw	r30, r28
    5038:	e1 5f       	subi	r30, 0xF1	; 241
    503a:	fe 4f       	sbci	r31, 0xFE	; 254
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	91 83       	std	Z+1, r25	; 0x01
    5042:	80 83       	st	Z, r24
    5044:	64 c0       	rjmp	.+200    	; 0x510e <init_fun+0x1ca>
	else if (__tmp > 65535)
    5046:	fe 01       	movw	r30, r28
    5048:	ef 5e       	subi	r30, 0xEF	; 239
    504a:	fe 4f       	sbci	r31, 0xFE	; 254
    504c:	60 81       	ld	r22, Z
    504e:	71 81       	ldd	r23, Z+1	; 0x01
    5050:	82 81       	ldd	r24, Z+2	; 0x02
    5052:	93 81       	ldd	r25, Z+3	; 0x03
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	3f ef       	ldi	r19, 0xFF	; 255
    5058:	4f e7       	ldi	r20, 0x7F	; 127
    505a:	57 e4       	ldi	r21, 0x47	; 71
    505c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5060:	18 16       	cp	r1, r24
    5062:	0c f0       	brlt	.+2      	; 0x5066 <init_fun+0x122>
    5064:	43 c0       	rjmp	.+134    	; 0x50ec <init_fun+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5066:	fe 01       	movw	r30, r28
    5068:	eb 5e       	subi	r30, 0xEB	; 235
    506a:	fe 4f       	sbci	r31, 0xFE	; 254
    506c:	60 81       	ld	r22, Z
    506e:	71 81       	ldd	r23, Z+1	; 0x01
    5070:	82 81       	ldd	r24, Z+2	; 0x02
    5072:	93 81       	ldd	r25, Z+3	; 0x03
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	40 e2       	ldi	r20, 0x20	; 32
    507a:	51 e4       	ldi	r21, 0x41	; 65
    507c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	8e 01       	movw	r16, r28
    5086:	01 5f       	subi	r16, 0xF1	; 241
    5088:	1e 4f       	sbci	r17, 0xFE	; 254
    508a:	bc 01       	movw	r22, r24
    508c:	cd 01       	movw	r24, r26
    508e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5092:	dc 01       	movw	r26, r24
    5094:	cb 01       	movw	r24, r22
    5096:	f8 01       	movw	r30, r16
    5098:	91 83       	std	Z+1, r25	; 0x01
    509a:	80 83       	st	Z, r24
    509c:	1f c0       	rjmp	.+62     	; 0x50dc <init_fun+0x198>
    509e:	fe 01       	movw	r30, r28
    50a0:	e3 5f       	subi	r30, 0xF3	; 243
    50a2:	fe 4f       	sbci	r31, 0xFE	; 254
    50a4:	88 ec       	ldi	r24, 0xC8	; 200
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	80 83       	st	Z, r24
    50ac:	fe 01       	movw	r30, r28
    50ae:	e3 5f       	subi	r30, 0xF3	; 243
    50b0:	fe 4f       	sbci	r31, 0xFE	; 254
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	01 97       	sbiw	r24, 0x01	; 1
    50b8:	f1 f7       	brne	.-4      	; 0x50b6 <init_fun+0x172>
    50ba:	fe 01       	movw	r30, r28
    50bc:	e3 5f       	subi	r30, 0xF3	; 243
    50be:	fe 4f       	sbci	r31, 0xFE	; 254
    50c0:	91 83       	std	Z+1, r25	; 0x01
    50c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c4:	de 01       	movw	r26, r28
    50c6:	a1 5f       	subi	r26, 0xF1	; 241
    50c8:	be 4f       	sbci	r27, 0xFE	; 254
    50ca:	fe 01       	movw	r30, r28
    50cc:	e1 5f       	subi	r30, 0xF1	; 241
    50ce:	fe 4f       	sbci	r31, 0xFE	; 254
    50d0:	80 81       	ld	r24, Z
    50d2:	91 81       	ldd	r25, Z+1	; 0x01
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	11 96       	adiw	r26, 0x01	; 1
    50d8:	9c 93       	st	X, r25
    50da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50dc:	fe 01       	movw	r30, r28
    50de:	e1 5f       	subi	r30, 0xF1	; 241
    50e0:	fe 4f       	sbci	r31, 0xFE	; 254
    50e2:	80 81       	ld	r24, Z
    50e4:	91 81       	ldd	r25, Z+1	; 0x01
    50e6:	00 97       	sbiw	r24, 0x00	; 0
    50e8:	d1 f6       	brne	.-76     	; 0x509e <init_fun+0x15a>
    50ea:	27 c0       	rjmp	.+78     	; 0x513a <init_fun+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ec:	8e 01       	movw	r16, r28
    50ee:	01 5f       	subi	r16, 0xF1	; 241
    50f0:	1e 4f       	sbci	r17, 0xFE	; 254
    50f2:	fe 01       	movw	r30, r28
    50f4:	ef 5e       	subi	r30, 0xEF	; 239
    50f6:	fe 4f       	sbci	r31, 0xFE	; 254
    50f8:	60 81       	ld	r22, Z
    50fa:	71 81       	ldd	r23, Z+1	; 0x01
    50fc:	82 81       	ldd	r24, Z+2	; 0x02
    50fe:	93 81       	ldd	r25, Z+3	; 0x03
    5100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5104:	dc 01       	movw	r26, r24
    5106:	cb 01       	movw	r24, r22
    5108:	f8 01       	movw	r30, r16
    510a:	91 83       	std	Z+1, r25	; 0x01
    510c:	80 83       	st	Z, r24
    510e:	de 01       	movw	r26, r28
    5110:	a5 5f       	subi	r26, 0xF5	; 245
    5112:	be 4f       	sbci	r27, 0xFE	; 254
    5114:	fe 01       	movw	r30, r28
    5116:	e1 5f       	subi	r30, 0xF1	; 241
    5118:	fe 4f       	sbci	r31, 0xFE	; 254
    511a:	80 81       	ld	r24, Z
    511c:	91 81       	ldd	r25, Z+1	; 0x01
    511e:	8d 93       	st	X+, r24
    5120:	9c 93       	st	X, r25
    5122:	fe 01       	movw	r30, r28
    5124:	e5 5f       	subi	r30, 0xF5	; 245
    5126:	fe 4f       	sbci	r31, 0xFE	; 254
    5128:	80 81       	ld	r24, Z
    512a:	91 81       	ldd	r25, Z+1	; 0x01
    512c:	01 97       	sbiw	r24, 0x01	; 1
    512e:	f1 f7       	brne	.-4      	; 0x512c <init_fun+0x1e8>
    5130:	fe 01       	movw	r30, r28
    5132:	e5 5f       	subi	r30, 0xF5	; 245
    5134:	fe 4f       	sbci	r31, 0xFE	; 254
    5136:	91 83       	std	Z+1, r25	; 0x01
    5138:	80 83       	st	Z, r24
	_delay_ms(2000);

	EF_void_I2C_Init();
    513a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <EF_void_I2C_Init>



	EF_void_UART_SendString((U8_t *)"ATE1\r\n");
    513e:	84 e9       	ldi	r24, 0x94	; 148
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_LCD_Clear_Screen();
    5146:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Enable EChO");
    514a:	8b e9       	ldi	r24, 0x9B	; 155
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    5152:	fe 01       	movw	r30, r28
    5154:	e9 5f       	subi	r30, 0xF9	; 249
    5156:	fe 4f       	sbci	r31, 0xFE	; 254
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	90 e8       	ldi	r25, 0x80	; 128
    515c:	ab e3       	ldi	r26, 0x3B	; 59
    515e:	b5 e4       	ldi	r27, 0x45	; 69
    5160:	80 83       	st	Z, r24
    5162:	91 83       	std	Z+1, r25	; 0x01
    5164:	a2 83       	std	Z+2, r26	; 0x02
    5166:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5168:	8e 01       	movw	r16, r28
    516a:	0d 5f       	subi	r16, 0xFD	; 253
    516c:	1e 4f       	sbci	r17, 0xFE	; 254
    516e:	fe 01       	movw	r30, r28
    5170:	e9 5f       	subi	r30, 0xF9	; 249
    5172:	fe 4f       	sbci	r31, 0xFE	; 254
    5174:	60 81       	ld	r22, Z
    5176:	71 81       	ldd	r23, Z+1	; 0x01
    5178:	82 81       	ldd	r24, Z+2	; 0x02
    517a:	93 81       	ldd	r25, Z+3	; 0x03
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	4a ef       	ldi	r20, 0xFA	; 250
    5182:	54 e4       	ldi	r21, 0x44	; 68
    5184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5188:	dc 01       	movw	r26, r24
    518a:	cb 01       	movw	r24, r22
    518c:	f8 01       	movw	r30, r16
    518e:	80 83       	st	Z, r24
    5190:	91 83       	std	Z+1, r25	; 0x01
    5192:	a2 83       	std	Z+2, r26	; 0x02
    5194:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5196:	fe 01       	movw	r30, r28
    5198:	ed 5f       	subi	r30, 0xFD	; 253
    519a:	fe 4f       	sbci	r31, 0xFE	; 254
    519c:	60 81       	ld	r22, Z
    519e:	71 81       	ldd	r23, Z+1	; 0x01
    51a0:	82 81       	ldd	r24, Z+2	; 0x02
    51a2:	93 81       	ldd	r25, Z+3	; 0x03
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e8       	ldi	r20, 0x80	; 128
    51aa:	5f e3       	ldi	r21, 0x3F	; 63
    51ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51b0:	88 23       	and	r24, r24
    51b2:	44 f4       	brge	.+16     	; 0x51c4 <init_fun+0x280>
		__ticks = 1;
    51b4:	fe 01       	movw	r30, r28
    51b6:	ef 5f       	subi	r30, 0xFF	; 255
    51b8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ba:	81 e0       	ldi	r24, 0x01	; 1
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	91 83       	std	Z+1, r25	; 0x01
    51c0:	80 83       	st	Z, r24
    51c2:	64 c0       	rjmp	.+200    	; 0x528c <init_fun+0x348>
	else if (__tmp > 65535)
    51c4:	fe 01       	movw	r30, r28
    51c6:	ed 5f       	subi	r30, 0xFD	; 253
    51c8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ca:	60 81       	ld	r22, Z
    51cc:	71 81       	ldd	r23, Z+1	; 0x01
    51ce:	82 81       	ldd	r24, Z+2	; 0x02
    51d0:	93 81       	ldd	r25, Z+3	; 0x03
    51d2:	20 e0       	ldi	r18, 0x00	; 0
    51d4:	3f ef       	ldi	r19, 0xFF	; 255
    51d6:	4f e7       	ldi	r20, 0x7F	; 127
    51d8:	57 e4       	ldi	r21, 0x47	; 71
    51da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51de:	18 16       	cp	r1, r24
    51e0:	0c f0       	brlt	.+2      	; 0x51e4 <init_fun+0x2a0>
    51e2:	43 c0       	rjmp	.+134    	; 0x526a <init_fun+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51e4:	fe 01       	movw	r30, r28
    51e6:	e9 5f       	subi	r30, 0xF9	; 249
    51e8:	fe 4f       	sbci	r31, 0xFE	; 254
    51ea:	60 81       	ld	r22, Z
    51ec:	71 81       	ldd	r23, Z+1	; 0x01
    51ee:	82 81       	ldd	r24, Z+2	; 0x02
    51f0:	93 81       	ldd	r25, Z+3	; 0x03
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	40 e2       	ldi	r20, 0x20	; 32
    51f8:	51 e4       	ldi	r21, 0x41	; 65
    51fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	8e 01       	movw	r16, r28
    5204:	0f 5f       	subi	r16, 0xFF	; 255
    5206:	1e 4f       	sbci	r17, 0xFE	; 254
    5208:	bc 01       	movw	r22, r24
    520a:	cd 01       	movw	r24, r26
    520c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	f8 01       	movw	r30, r16
    5216:	91 83       	std	Z+1, r25	; 0x01
    5218:	80 83       	st	Z, r24
    521a:	1f c0       	rjmp	.+62     	; 0x525a <init_fun+0x316>
    521c:	fe 01       	movw	r30, r28
    521e:	e1 50       	subi	r30, 0x01	; 1
    5220:	ff 4f       	sbci	r31, 0xFF	; 255
    5222:	88 ec       	ldi	r24, 0xC8	; 200
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	91 83       	std	Z+1, r25	; 0x01
    5228:	80 83       	st	Z, r24
    522a:	fe 01       	movw	r30, r28
    522c:	e1 50       	subi	r30, 0x01	; 1
    522e:	ff 4f       	sbci	r31, 0xFF	; 255
    5230:	80 81       	ld	r24, Z
    5232:	91 81       	ldd	r25, Z+1	; 0x01
    5234:	01 97       	sbiw	r24, 0x01	; 1
    5236:	f1 f7       	brne	.-4      	; 0x5234 <init_fun+0x2f0>
    5238:	fe 01       	movw	r30, r28
    523a:	e1 50       	subi	r30, 0x01	; 1
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	91 83       	std	Z+1, r25	; 0x01
    5240:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5242:	de 01       	movw	r26, r28
    5244:	af 5f       	subi	r26, 0xFF	; 255
    5246:	be 4f       	sbci	r27, 0xFE	; 254
    5248:	fe 01       	movw	r30, r28
    524a:	ef 5f       	subi	r30, 0xFF	; 255
    524c:	fe 4f       	sbci	r31, 0xFE	; 254
    524e:	80 81       	ld	r24, Z
    5250:	91 81       	ldd	r25, Z+1	; 0x01
    5252:	01 97       	sbiw	r24, 0x01	; 1
    5254:	11 96       	adiw	r26, 0x01	; 1
    5256:	9c 93       	st	X, r25
    5258:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    525a:	fe 01       	movw	r30, r28
    525c:	ef 5f       	subi	r30, 0xFF	; 255
    525e:	fe 4f       	sbci	r31, 0xFE	; 254
    5260:	80 81       	ld	r24, Z
    5262:	91 81       	ldd	r25, Z+1	; 0x01
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	d1 f6       	brne	.-76     	; 0x521c <init_fun+0x2d8>
    5268:	27 c0       	rjmp	.+78     	; 0x52b8 <init_fun+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    526a:	8e 01       	movw	r16, r28
    526c:	0f 5f       	subi	r16, 0xFF	; 255
    526e:	1e 4f       	sbci	r17, 0xFE	; 254
    5270:	fe 01       	movw	r30, r28
    5272:	ed 5f       	subi	r30, 0xFD	; 253
    5274:	fe 4f       	sbci	r31, 0xFE	; 254
    5276:	60 81       	ld	r22, Z
    5278:	71 81       	ldd	r23, Z+1	; 0x01
    527a:	82 81       	ldd	r24, Z+2	; 0x02
    527c:	93 81       	ldd	r25, Z+3	; 0x03
    527e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5282:	dc 01       	movw	r26, r24
    5284:	cb 01       	movw	r24, r22
    5286:	f8 01       	movw	r30, r16
    5288:	91 83       	std	Z+1, r25	; 0x01
    528a:	80 83       	st	Z, r24
    528c:	de 01       	movw	r26, r28
    528e:	a3 50       	subi	r26, 0x03	; 3
    5290:	bf 4f       	sbci	r27, 0xFF	; 255
    5292:	fe 01       	movw	r30, r28
    5294:	ef 5f       	subi	r30, 0xFF	; 255
    5296:	fe 4f       	sbci	r31, 0xFE	; 254
    5298:	80 81       	ld	r24, Z
    529a:	91 81       	ldd	r25, Z+1	; 0x01
    529c:	8d 93       	st	X+, r24
    529e:	9c 93       	st	X, r25
    52a0:	fe 01       	movw	r30, r28
    52a2:	e3 50       	subi	r30, 0x03	; 3
    52a4:	ff 4f       	sbci	r31, 0xFF	; 255
    52a6:	80 81       	ld	r24, Z
    52a8:	91 81       	ldd	r25, Z+1	; 0x01
    52aa:	01 97       	sbiw	r24, 0x01	; 1
    52ac:	f1 f7       	brne	.-4      	; 0x52aa <init_fun+0x366>
    52ae:	fe 01       	movw	r30, r28
    52b0:	e3 50       	subi	r30, 0x03	; 3
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	91 83       	std	Z+1, r25	; 0x01
    52b6:	80 83       	st	Z, r24
	_delay_ms(3000);

	EF_void_UART_SendString((U8_t *)"AT+CWMODE=3\r\n");
    52b8:	87 ea       	ldi	r24, 0xA7	; 167
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_LCD_Clear_Screen();
    52c0:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"ESP as Client");
    52c4:	85 eb       	ldi	r24, 0xB5	; 181
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    52cc:	fe 01       	movw	r30, r28
    52ce:	e7 50       	subi	r30, 0x07	; 7
    52d0:	ff 4f       	sbci	r31, 0xFF	; 255
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	90 e8       	ldi	r25, 0x80	; 128
    52d6:	ab e3       	ldi	r26, 0x3B	; 59
    52d8:	b5 e4       	ldi	r27, 0x45	; 69
    52da:	80 83       	st	Z, r24
    52dc:	91 83       	std	Z+1, r25	; 0x01
    52de:	a2 83       	std	Z+2, r26	; 0x02
    52e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e2:	8e 01       	movw	r16, r28
    52e4:	0b 50       	subi	r16, 0x0B	; 11
    52e6:	1f 4f       	sbci	r17, 0xFF	; 255
    52e8:	fe 01       	movw	r30, r28
    52ea:	e7 50       	subi	r30, 0x07	; 7
    52ec:	ff 4f       	sbci	r31, 0xFF	; 255
    52ee:	60 81       	ld	r22, Z
    52f0:	71 81       	ldd	r23, Z+1	; 0x01
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	4a ef       	ldi	r20, 0xFA	; 250
    52fc:	54 e4       	ldi	r21, 0x44	; 68
    52fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5302:	dc 01       	movw	r26, r24
    5304:	cb 01       	movw	r24, r22
    5306:	f8 01       	movw	r30, r16
    5308:	80 83       	st	Z, r24
    530a:	91 83       	std	Z+1, r25	; 0x01
    530c:	a2 83       	std	Z+2, r26	; 0x02
    530e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5310:	fe 01       	movw	r30, r28
    5312:	eb 50       	subi	r30, 0x0B	; 11
    5314:	ff 4f       	sbci	r31, 0xFF	; 255
    5316:	60 81       	ld	r22, Z
    5318:	71 81       	ldd	r23, Z+1	; 0x01
    531a:	82 81       	ldd	r24, Z+2	; 0x02
    531c:	93 81       	ldd	r25, Z+3	; 0x03
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	40 e8       	ldi	r20, 0x80	; 128
    5324:	5f e3       	ldi	r21, 0x3F	; 63
    5326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    532a:	88 23       	and	r24, r24
    532c:	44 f4       	brge	.+16     	; 0x533e <init_fun+0x3fa>
		__ticks = 1;
    532e:	fe 01       	movw	r30, r28
    5330:	ed 50       	subi	r30, 0x0D	; 13
    5332:	ff 4f       	sbci	r31, 0xFF	; 255
    5334:	81 e0       	ldi	r24, 0x01	; 1
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	91 83       	std	Z+1, r25	; 0x01
    533a:	80 83       	st	Z, r24
    533c:	64 c0       	rjmp	.+200    	; 0x5406 <init_fun+0x4c2>
	else if (__tmp > 65535)
    533e:	fe 01       	movw	r30, r28
    5340:	eb 50       	subi	r30, 0x0B	; 11
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	60 81       	ld	r22, Z
    5346:	71 81       	ldd	r23, Z+1	; 0x01
    5348:	82 81       	ldd	r24, Z+2	; 0x02
    534a:	93 81       	ldd	r25, Z+3	; 0x03
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	3f ef       	ldi	r19, 0xFF	; 255
    5350:	4f e7       	ldi	r20, 0x7F	; 127
    5352:	57 e4       	ldi	r21, 0x47	; 71
    5354:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5358:	18 16       	cp	r1, r24
    535a:	0c f0       	brlt	.+2      	; 0x535e <init_fun+0x41a>
    535c:	43 c0       	rjmp	.+134    	; 0x53e4 <init_fun+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    535e:	fe 01       	movw	r30, r28
    5360:	e7 50       	subi	r30, 0x07	; 7
    5362:	ff 4f       	sbci	r31, 0xFF	; 255
    5364:	60 81       	ld	r22, Z
    5366:	71 81       	ldd	r23, Z+1	; 0x01
    5368:	82 81       	ldd	r24, Z+2	; 0x02
    536a:	93 81       	ldd	r25, Z+3	; 0x03
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	40 e2       	ldi	r20, 0x20	; 32
    5372:	51 e4       	ldi	r21, 0x41	; 65
    5374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	8e 01       	movw	r16, r28
    537e:	0d 50       	subi	r16, 0x0D	; 13
    5380:	1f 4f       	sbci	r17, 0xFF	; 255
    5382:	bc 01       	movw	r22, r24
    5384:	cd 01       	movw	r24, r26
    5386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    538a:	dc 01       	movw	r26, r24
    538c:	cb 01       	movw	r24, r22
    538e:	f8 01       	movw	r30, r16
    5390:	91 83       	std	Z+1, r25	; 0x01
    5392:	80 83       	st	Z, r24
    5394:	1f c0       	rjmp	.+62     	; 0x53d4 <init_fun+0x490>
    5396:	fe 01       	movw	r30, r28
    5398:	ef 50       	subi	r30, 0x0F	; 15
    539a:	ff 4f       	sbci	r31, 0xFF	; 255
    539c:	88 ec       	ldi	r24, 0xC8	; 200
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	91 83       	std	Z+1, r25	; 0x01
    53a2:	80 83       	st	Z, r24
    53a4:	fe 01       	movw	r30, r28
    53a6:	ef 50       	subi	r30, 0x0F	; 15
    53a8:	ff 4f       	sbci	r31, 0xFF	; 255
    53aa:	80 81       	ld	r24, Z
    53ac:	91 81       	ldd	r25, Z+1	; 0x01
    53ae:	01 97       	sbiw	r24, 0x01	; 1
    53b0:	f1 f7       	brne	.-4      	; 0x53ae <init_fun+0x46a>
    53b2:	fe 01       	movw	r30, r28
    53b4:	ef 50       	subi	r30, 0x0F	; 15
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	91 83       	std	Z+1, r25	; 0x01
    53ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53bc:	de 01       	movw	r26, r28
    53be:	ad 50       	subi	r26, 0x0D	; 13
    53c0:	bf 4f       	sbci	r27, 0xFF	; 255
    53c2:	fe 01       	movw	r30, r28
    53c4:	ed 50       	subi	r30, 0x0D	; 13
    53c6:	ff 4f       	sbci	r31, 0xFF	; 255
    53c8:	80 81       	ld	r24, Z
    53ca:	91 81       	ldd	r25, Z+1	; 0x01
    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	11 96       	adiw	r26, 0x01	; 1
    53d0:	9c 93       	st	X, r25
    53d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d4:	fe 01       	movw	r30, r28
    53d6:	ed 50       	subi	r30, 0x0D	; 13
    53d8:	ff 4f       	sbci	r31, 0xFF	; 255
    53da:	80 81       	ld	r24, Z
    53dc:	91 81       	ldd	r25, Z+1	; 0x01
    53de:	00 97       	sbiw	r24, 0x00	; 0
    53e0:	d1 f6       	brne	.-76     	; 0x5396 <init_fun+0x452>
    53e2:	27 c0       	rjmp	.+78     	; 0x5432 <init_fun+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e4:	8e 01       	movw	r16, r28
    53e6:	0d 50       	subi	r16, 0x0D	; 13
    53e8:	1f 4f       	sbci	r17, 0xFF	; 255
    53ea:	fe 01       	movw	r30, r28
    53ec:	eb 50       	subi	r30, 0x0B	; 11
    53ee:	ff 4f       	sbci	r31, 0xFF	; 255
    53f0:	60 81       	ld	r22, Z
    53f2:	71 81       	ldd	r23, Z+1	; 0x01
    53f4:	82 81       	ldd	r24, Z+2	; 0x02
    53f6:	93 81       	ldd	r25, Z+3	; 0x03
    53f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	f8 01       	movw	r30, r16
    5402:	91 83       	std	Z+1, r25	; 0x01
    5404:	80 83       	st	Z, r24
    5406:	de 01       	movw	r26, r28
    5408:	a1 51       	subi	r26, 0x11	; 17
    540a:	bf 4f       	sbci	r27, 0xFF	; 255
    540c:	fe 01       	movw	r30, r28
    540e:	ed 50       	subi	r30, 0x0D	; 13
    5410:	ff 4f       	sbci	r31, 0xFF	; 255
    5412:	80 81       	ld	r24, Z
    5414:	91 81       	ldd	r25, Z+1	; 0x01
    5416:	8d 93       	st	X+, r24
    5418:	9c 93       	st	X, r25
    541a:	fe 01       	movw	r30, r28
    541c:	e1 51       	subi	r30, 0x11	; 17
    541e:	ff 4f       	sbci	r31, 0xFF	; 255
    5420:	80 81       	ld	r24, Z
    5422:	91 81       	ldd	r25, Z+1	; 0x01
    5424:	01 97       	sbiw	r24, 0x01	; 1
    5426:	f1 f7       	brne	.-4      	; 0x5424 <init_fun+0x4e0>
    5428:	fe 01       	movw	r30, r28
    542a:	e1 51       	subi	r30, 0x11	; 17
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	91 83       	std	Z+1, r25	; 0x01
    5430:	80 83       	st	Z, r24
	_delay_ms(3000);

	EF_void_UART_SendString((U8_t *)"AT+CIPMUX=0\r\n");
    5432:	83 ec       	ldi	r24, 0xC3	; 195
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_LCD_Clear_Screen();
    543a:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Single Channel");
    543e:	81 ed       	ldi	r24, 0xD1	; 209
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    5446:	fe 01       	movw	r30, r28
    5448:	e5 51       	subi	r30, 0x15	; 21
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	80 e0       	ldi	r24, 0x00	; 0
    544e:	90 e8       	ldi	r25, 0x80	; 128
    5450:	ab e3       	ldi	r26, 0x3B	; 59
    5452:	b5 e4       	ldi	r27, 0x45	; 69
    5454:	80 83       	st	Z, r24
    5456:	91 83       	std	Z+1, r25	; 0x01
    5458:	a2 83       	std	Z+2, r26	; 0x02
    545a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    545c:	8e 01       	movw	r16, r28
    545e:	09 51       	subi	r16, 0x19	; 25
    5460:	1f 4f       	sbci	r17, 0xFF	; 255
    5462:	fe 01       	movw	r30, r28
    5464:	e5 51       	subi	r30, 0x15	; 21
    5466:	ff 4f       	sbci	r31, 0xFF	; 255
    5468:	60 81       	ld	r22, Z
    546a:	71 81       	ldd	r23, Z+1	; 0x01
    546c:	82 81       	ldd	r24, Z+2	; 0x02
    546e:	93 81       	ldd	r25, Z+3	; 0x03
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	4a ef       	ldi	r20, 0xFA	; 250
    5476:	54 e4       	ldi	r21, 0x44	; 68
    5478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547c:	dc 01       	movw	r26, r24
    547e:	cb 01       	movw	r24, r22
    5480:	f8 01       	movw	r30, r16
    5482:	80 83       	st	Z, r24
    5484:	91 83       	std	Z+1, r25	; 0x01
    5486:	a2 83       	std	Z+2, r26	; 0x02
    5488:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    548a:	fe 01       	movw	r30, r28
    548c:	e9 51       	subi	r30, 0x19	; 25
    548e:	ff 4f       	sbci	r31, 0xFF	; 255
    5490:	60 81       	ld	r22, Z
    5492:	71 81       	ldd	r23, Z+1	; 0x01
    5494:	82 81       	ldd	r24, Z+2	; 0x02
    5496:	93 81       	ldd	r25, Z+3	; 0x03
    5498:	20 e0       	ldi	r18, 0x00	; 0
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e8       	ldi	r20, 0x80	; 128
    549e:	5f e3       	ldi	r21, 0x3F	; 63
    54a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54a4:	88 23       	and	r24, r24
    54a6:	44 f4       	brge	.+16     	; 0x54b8 <init_fun+0x574>
		__ticks = 1;
    54a8:	fe 01       	movw	r30, r28
    54aa:	eb 51       	subi	r30, 0x1B	; 27
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	90 e0       	ldi	r25, 0x00	; 0
    54b2:	91 83       	std	Z+1, r25	; 0x01
    54b4:	80 83       	st	Z, r24
    54b6:	64 c0       	rjmp	.+200    	; 0x5580 <init_fun+0x63c>
	else if (__tmp > 65535)
    54b8:	fe 01       	movw	r30, r28
    54ba:	e9 51       	subi	r30, 0x19	; 25
    54bc:	ff 4f       	sbci	r31, 0xFF	; 255
    54be:	60 81       	ld	r22, Z
    54c0:	71 81       	ldd	r23, Z+1	; 0x01
    54c2:	82 81       	ldd	r24, Z+2	; 0x02
    54c4:	93 81       	ldd	r25, Z+3	; 0x03
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	3f ef       	ldi	r19, 0xFF	; 255
    54ca:	4f e7       	ldi	r20, 0x7F	; 127
    54cc:	57 e4       	ldi	r21, 0x47	; 71
    54ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54d2:	18 16       	cp	r1, r24
    54d4:	0c f0       	brlt	.+2      	; 0x54d8 <init_fun+0x594>
    54d6:	43 c0       	rjmp	.+134    	; 0x555e <init_fun+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d8:	fe 01       	movw	r30, r28
    54da:	e5 51       	subi	r30, 0x15	; 21
    54dc:	ff 4f       	sbci	r31, 0xFF	; 255
    54de:	60 81       	ld	r22, Z
    54e0:	71 81       	ldd	r23, Z+1	; 0x01
    54e2:	82 81       	ldd	r24, Z+2	; 0x02
    54e4:	93 81       	ldd	r25, Z+3	; 0x03
    54e6:	20 e0       	ldi	r18, 0x00	; 0
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e2       	ldi	r20, 0x20	; 32
    54ec:	51 e4       	ldi	r21, 0x41	; 65
    54ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54f2:	dc 01       	movw	r26, r24
    54f4:	cb 01       	movw	r24, r22
    54f6:	8e 01       	movw	r16, r28
    54f8:	0b 51       	subi	r16, 0x1B	; 27
    54fa:	1f 4f       	sbci	r17, 0xFF	; 255
    54fc:	bc 01       	movw	r22, r24
    54fe:	cd 01       	movw	r24, r26
    5500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5504:	dc 01       	movw	r26, r24
    5506:	cb 01       	movw	r24, r22
    5508:	f8 01       	movw	r30, r16
    550a:	91 83       	std	Z+1, r25	; 0x01
    550c:	80 83       	st	Z, r24
    550e:	1f c0       	rjmp	.+62     	; 0x554e <init_fun+0x60a>
    5510:	fe 01       	movw	r30, r28
    5512:	ed 51       	subi	r30, 0x1D	; 29
    5514:	ff 4f       	sbci	r31, 0xFF	; 255
    5516:	88 ec       	ldi	r24, 0xC8	; 200
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	91 83       	std	Z+1, r25	; 0x01
    551c:	80 83       	st	Z, r24
    551e:	fe 01       	movw	r30, r28
    5520:	ed 51       	subi	r30, 0x1D	; 29
    5522:	ff 4f       	sbci	r31, 0xFF	; 255
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	01 97       	sbiw	r24, 0x01	; 1
    552a:	f1 f7       	brne	.-4      	; 0x5528 <init_fun+0x5e4>
    552c:	fe 01       	movw	r30, r28
    552e:	ed 51       	subi	r30, 0x1D	; 29
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
    5532:	91 83       	std	Z+1, r25	; 0x01
    5534:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5536:	de 01       	movw	r26, r28
    5538:	ab 51       	subi	r26, 0x1B	; 27
    553a:	bf 4f       	sbci	r27, 0xFF	; 255
    553c:	fe 01       	movw	r30, r28
    553e:	eb 51       	subi	r30, 0x1B	; 27
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	80 81       	ld	r24, Z
    5544:	91 81       	ldd	r25, Z+1	; 0x01
    5546:	01 97       	sbiw	r24, 0x01	; 1
    5548:	11 96       	adiw	r26, 0x01	; 1
    554a:	9c 93       	st	X, r25
    554c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    554e:	fe 01       	movw	r30, r28
    5550:	eb 51       	subi	r30, 0x1B	; 27
    5552:	ff 4f       	sbci	r31, 0xFF	; 255
    5554:	80 81       	ld	r24, Z
    5556:	91 81       	ldd	r25, Z+1	; 0x01
    5558:	00 97       	sbiw	r24, 0x00	; 0
    555a:	d1 f6       	brne	.-76     	; 0x5510 <init_fun+0x5cc>
    555c:	27 c0       	rjmp	.+78     	; 0x55ac <init_fun+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    555e:	8e 01       	movw	r16, r28
    5560:	0b 51       	subi	r16, 0x1B	; 27
    5562:	1f 4f       	sbci	r17, 0xFF	; 255
    5564:	fe 01       	movw	r30, r28
    5566:	e9 51       	subi	r30, 0x19	; 25
    5568:	ff 4f       	sbci	r31, 0xFF	; 255
    556a:	60 81       	ld	r22, Z
    556c:	71 81       	ldd	r23, Z+1	; 0x01
    556e:	82 81       	ldd	r24, Z+2	; 0x02
    5570:	93 81       	ldd	r25, Z+3	; 0x03
    5572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5576:	dc 01       	movw	r26, r24
    5578:	cb 01       	movw	r24, r22
    557a:	f8 01       	movw	r30, r16
    557c:	91 83       	std	Z+1, r25	; 0x01
    557e:	80 83       	st	Z, r24
    5580:	de 01       	movw	r26, r28
    5582:	af 51       	subi	r26, 0x1F	; 31
    5584:	bf 4f       	sbci	r27, 0xFF	; 255
    5586:	fe 01       	movw	r30, r28
    5588:	eb 51       	subi	r30, 0x1B	; 27
    558a:	ff 4f       	sbci	r31, 0xFF	; 255
    558c:	80 81       	ld	r24, Z
    558e:	91 81       	ldd	r25, Z+1	; 0x01
    5590:	8d 93       	st	X+, r24
    5592:	9c 93       	st	X, r25
    5594:	fe 01       	movw	r30, r28
    5596:	ef 51       	subi	r30, 0x1F	; 31
    5598:	ff 4f       	sbci	r31, 0xFF	; 255
    559a:	80 81       	ld	r24, Z
    559c:	91 81       	ldd	r25, Z+1	; 0x01
    559e:	01 97       	sbiw	r24, 0x01	; 1
    55a0:	f1 f7       	brne	.-4      	; 0x559e <init_fun+0x65a>
    55a2:	fe 01       	movw	r30, r28
    55a4:	ef 51       	subi	r30, 0x1F	; 31
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	91 83       	std	Z+1, r25	; 0x01
    55aa:	80 83       	st	Z, r24
	_delay_ms(3000);

	EF_void_UART_SendString((U8_t *)"AT+CIPMODE=0\r\n");
    55ac:	80 ee       	ldi	r24, 0xE0	; 224
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_LCD_Clear_Screen();
    55b4:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Normal Mode");
    55b8:	8f ee       	ldi	r24, 0xEF	; 239
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    55c0:	fe 01       	movw	r30, r28
    55c2:	e3 52       	subi	r30, 0x23	; 35
    55c4:	ff 4f       	sbci	r31, 0xFF	; 255
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	90 e8       	ldi	r25, 0x80	; 128
    55ca:	ab e3       	ldi	r26, 0x3B	; 59
    55cc:	b5 e4       	ldi	r27, 0x45	; 69
    55ce:	80 83       	st	Z, r24
    55d0:	91 83       	std	Z+1, r25	; 0x01
    55d2:	a2 83       	std	Z+2, r26	; 0x02
    55d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55d6:	8e 01       	movw	r16, r28
    55d8:	07 52       	subi	r16, 0x27	; 39
    55da:	1f 4f       	sbci	r17, 0xFF	; 255
    55dc:	fe 01       	movw	r30, r28
    55de:	e3 52       	subi	r30, 0x23	; 35
    55e0:	ff 4f       	sbci	r31, 0xFF	; 255
    55e2:	60 81       	ld	r22, Z
    55e4:	71 81       	ldd	r23, Z+1	; 0x01
    55e6:	82 81       	ldd	r24, Z+2	; 0x02
    55e8:	93 81       	ldd	r25, Z+3	; 0x03
    55ea:	20 e0       	ldi	r18, 0x00	; 0
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	4a ef       	ldi	r20, 0xFA	; 250
    55f0:	54 e4       	ldi	r21, 0x44	; 68
    55f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f6:	dc 01       	movw	r26, r24
    55f8:	cb 01       	movw	r24, r22
    55fa:	f8 01       	movw	r30, r16
    55fc:	80 83       	st	Z, r24
    55fe:	91 83       	std	Z+1, r25	; 0x01
    5600:	a2 83       	std	Z+2, r26	; 0x02
    5602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5604:	fe 01       	movw	r30, r28
    5606:	e7 52       	subi	r30, 0x27	; 39
    5608:	ff 4f       	sbci	r31, 0xFF	; 255
    560a:	60 81       	ld	r22, Z
    560c:	71 81       	ldd	r23, Z+1	; 0x01
    560e:	82 81       	ldd	r24, Z+2	; 0x02
    5610:	93 81       	ldd	r25, Z+3	; 0x03
    5612:	20 e0       	ldi	r18, 0x00	; 0
    5614:	30 e0       	ldi	r19, 0x00	; 0
    5616:	40 e8       	ldi	r20, 0x80	; 128
    5618:	5f e3       	ldi	r21, 0x3F	; 63
    561a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    561e:	88 23       	and	r24, r24
    5620:	44 f4       	brge	.+16     	; 0x5632 <init_fun+0x6ee>
		__ticks = 1;
    5622:	fe 01       	movw	r30, r28
    5624:	e9 52       	subi	r30, 0x29	; 41
    5626:	ff 4f       	sbci	r31, 0xFF	; 255
    5628:	81 e0       	ldi	r24, 0x01	; 1
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	91 83       	std	Z+1, r25	; 0x01
    562e:	80 83       	st	Z, r24
    5630:	64 c0       	rjmp	.+200    	; 0x56fa <init_fun+0x7b6>
	else if (__tmp > 65535)
    5632:	fe 01       	movw	r30, r28
    5634:	e7 52       	subi	r30, 0x27	; 39
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	60 81       	ld	r22, Z
    563a:	71 81       	ldd	r23, Z+1	; 0x01
    563c:	82 81       	ldd	r24, Z+2	; 0x02
    563e:	93 81       	ldd	r25, Z+3	; 0x03
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	3f ef       	ldi	r19, 0xFF	; 255
    5644:	4f e7       	ldi	r20, 0x7F	; 127
    5646:	57 e4       	ldi	r21, 0x47	; 71
    5648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    564c:	18 16       	cp	r1, r24
    564e:	0c f0       	brlt	.+2      	; 0x5652 <init_fun+0x70e>
    5650:	43 c0       	rjmp	.+134    	; 0x56d8 <init_fun+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5652:	fe 01       	movw	r30, r28
    5654:	e3 52       	subi	r30, 0x23	; 35
    5656:	ff 4f       	sbci	r31, 0xFF	; 255
    5658:	60 81       	ld	r22, Z
    565a:	71 81       	ldd	r23, Z+1	; 0x01
    565c:	82 81       	ldd	r24, Z+2	; 0x02
    565e:	93 81       	ldd	r25, Z+3	; 0x03
    5660:	20 e0       	ldi	r18, 0x00	; 0
    5662:	30 e0       	ldi	r19, 0x00	; 0
    5664:	40 e2       	ldi	r20, 0x20	; 32
    5666:	51 e4       	ldi	r21, 0x41	; 65
    5668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	8e 01       	movw	r16, r28
    5672:	09 52       	subi	r16, 0x29	; 41
    5674:	1f 4f       	sbci	r17, 0xFF	; 255
    5676:	bc 01       	movw	r22, r24
    5678:	cd 01       	movw	r24, r26
    567a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    567e:	dc 01       	movw	r26, r24
    5680:	cb 01       	movw	r24, r22
    5682:	f8 01       	movw	r30, r16
    5684:	91 83       	std	Z+1, r25	; 0x01
    5686:	80 83       	st	Z, r24
    5688:	1f c0       	rjmp	.+62     	; 0x56c8 <init_fun+0x784>
    568a:	fe 01       	movw	r30, r28
    568c:	eb 52       	subi	r30, 0x2B	; 43
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	88 ec       	ldi	r24, 0xC8	; 200
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	91 83       	std	Z+1, r25	; 0x01
    5696:	80 83       	st	Z, r24
    5698:	fe 01       	movw	r30, r28
    569a:	eb 52       	subi	r30, 0x2B	; 43
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
    569e:	80 81       	ld	r24, Z
    56a0:	91 81       	ldd	r25, Z+1	; 0x01
    56a2:	01 97       	sbiw	r24, 0x01	; 1
    56a4:	f1 f7       	brne	.-4      	; 0x56a2 <init_fun+0x75e>
    56a6:	fe 01       	movw	r30, r28
    56a8:	eb 52       	subi	r30, 0x2B	; 43
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	91 83       	std	Z+1, r25	; 0x01
    56ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b0:	de 01       	movw	r26, r28
    56b2:	a9 52       	subi	r26, 0x29	; 41
    56b4:	bf 4f       	sbci	r27, 0xFF	; 255
    56b6:	fe 01       	movw	r30, r28
    56b8:	e9 52       	subi	r30, 0x29	; 41
    56ba:	ff 4f       	sbci	r31, 0xFF	; 255
    56bc:	80 81       	ld	r24, Z
    56be:	91 81       	ldd	r25, Z+1	; 0x01
    56c0:	01 97       	sbiw	r24, 0x01	; 1
    56c2:	11 96       	adiw	r26, 0x01	; 1
    56c4:	9c 93       	st	X, r25
    56c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c8:	fe 01       	movw	r30, r28
    56ca:	e9 52       	subi	r30, 0x29	; 41
    56cc:	ff 4f       	sbci	r31, 0xFF	; 255
    56ce:	80 81       	ld	r24, Z
    56d0:	91 81       	ldd	r25, Z+1	; 0x01
    56d2:	00 97       	sbiw	r24, 0x00	; 0
    56d4:	d1 f6       	brne	.-76     	; 0x568a <init_fun+0x746>
    56d6:	27 c0       	rjmp	.+78     	; 0x5726 <init_fun+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56d8:	8e 01       	movw	r16, r28
    56da:	09 52       	subi	r16, 0x29	; 41
    56dc:	1f 4f       	sbci	r17, 0xFF	; 255
    56de:	fe 01       	movw	r30, r28
    56e0:	e7 52       	subi	r30, 0x27	; 39
    56e2:	ff 4f       	sbci	r31, 0xFF	; 255
    56e4:	60 81       	ld	r22, Z
    56e6:	71 81       	ldd	r23, Z+1	; 0x01
    56e8:	82 81       	ldd	r24, Z+2	; 0x02
    56ea:	93 81       	ldd	r25, Z+3	; 0x03
    56ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f0:	dc 01       	movw	r26, r24
    56f2:	cb 01       	movw	r24, r22
    56f4:	f8 01       	movw	r30, r16
    56f6:	91 83       	std	Z+1, r25	; 0x01
    56f8:	80 83       	st	Z, r24
    56fa:	de 01       	movw	r26, r28
    56fc:	ad 52       	subi	r26, 0x2D	; 45
    56fe:	bf 4f       	sbci	r27, 0xFF	; 255
    5700:	fe 01       	movw	r30, r28
    5702:	e9 52       	subi	r30, 0x29	; 41
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	80 81       	ld	r24, Z
    5708:	91 81       	ldd	r25, Z+1	; 0x01
    570a:	8d 93       	st	X+, r24
    570c:	9c 93       	st	X, r25
    570e:	fe 01       	movw	r30, r28
    5710:	ed 52       	subi	r30, 0x2D	; 45
    5712:	ff 4f       	sbci	r31, 0xFF	; 255
    5714:	80 81       	ld	r24, Z
    5716:	91 81       	ldd	r25, Z+1	; 0x01
    5718:	01 97       	sbiw	r24, 0x01	; 1
    571a:	f1 f7       	brne	.-4      	; 0x5718 <init_fun+0x7d4>
    571c:	fe 01       	movw	r30, r28
    571e:	ed 52       	subi	r30, 0x2D	; 45
    5720:	ff 4f       	sbci	r31, 0xFF	; 255
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	80 83       	st	Z, r24
	_delay_ms(3000);

	EF_void_UART_SendString((U8_t *)"AT+CWJAP_DEF=\"ahmed\",\"135792468\"\r\n");
    5726:	8b ef       	ldi	r24, 0xFB	; 251
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
	EF_void_LCD_Clear_Screen();
    572e:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Connect to Wifi");
    5732:	8e e1       	ldi	r24, 0x1E	; 30
    5734:	91 e0       	ldi	r25, 0x01	; 1
    5736:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    573a:	fe 01       	movw	r30, r28
    573c:	e1 53       	subi	r30, 0x31	; 49
    573e:	ff 4f       	sbci	r31, 0xFF	; 255
    5740:	80 e0       	ldi	r24, 0x00	; 0
    5742:	90 e8       	ldi	r25, 0x80	; 128
    5744:	ab e3       	ldi	r26, 0x3B	; 59
    5746:	b5 e4       	ldi	r27, 0x45	; 69
    5748:	80 83       	st	Z, r24
    574a:	91 83       	std	Z+1, r25	; 0x01
    574c:	a2 83       	std	Z+2, r26	; 0x02
    574e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5750:	8e 01       	movw	r16, r28
    5752:	05 53       	subi	r16, 0x35	; 53
    5754:	1f 4f       	sbci	r17, 0xFF	; 255
    5756:	fe 01       	movw	r30, r28
    5758:	e1 53       	subi	r30, 0x31	; 49
    575a:	ff 4f       	sbci	r31, 0xFF	; 255
    575c:	60 81       	ld	r22, Z
    575e:	71 81       	ldd	r23, Z+1	; 0x01
    5760:	82 81       	ldd	r24, Z+2	; 0x02
    5762:	93 81       	ldd	r25, Z+3	; 0x03
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	4a ef       	ldi	r20, 0xFA	; 250
    576a:	54 e4       	ldi	r21, 0x44	; 68
    576c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5770:	dc 01       	movw	r26, r24
    5772:	cb 01       	movw	r24, r22
    5774:	f8 01       	movw	r30, r16
    5776:	80 83       	st	Z, r24
    5778:	91 83       	std	Z+1, r25	; 0x01
    577a:	a2 83       	std	Z+2, r26	; 0x02
    577c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    577e:	fe 01       	movw	r30, r28
    5780:	e5 53       	subi	r30, 0x35	; 53
    5782:	ff 4f       	sbci	r31, 0xFF	; 255
    5784:	60 81       	ld	r22, Z
    5786:	71 81       	ldd	r23, Z+1	; 0x01
    5788:	82 81       	ldd	r24, Z+2	; 0x02
    578a:	93 81       	ldd	r25, Z+3	; 0x03
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	30 e0       	ldi	r19, 0x00	; 0
    5790:	40 e8       	ldi	r20, 0x80	; 128
    5792:	5f e3       	ldi	r21, 0x3F	; 63
    5794:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5798:	88 23       	and	r24, r24
    579a:	44 f4       	brge	.+16     	; 0x57ac <init_fun+0x868>
		__ticks = 1;
    579c:	fe 01       	movw	r30, r28
    579e:	e7 53       	subi	r30, 0x37	; 55
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	81 e0       	ldi	r24, 0x01	; 1
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	91 83       	std	Z+1, r25	; 0x01
    57a8:	80 83       	st	Z, r24
    57aa:	64 c0       	rjmp	.+200    	; 0x5874 <init_fun+0x930>
	else if (__tmp > 65535)
    57ac:	fe 01       	movw	r30, r28
    57ae:	e5 53       	subi	r30, 0x35	; 53
    57b0:	ff 4f       	sbci	r31, 0xFF	; 255
    57b2:	60 81       	ld	r22, Z
    57b4:	71 81       	ldd	r23, Z+1	; 0x01
    57b6:	82 81       	ldd	r24, Z+2	; 0x02
    57b8:	93 81       	ldd	r25, Z+3	; 0x03
    57ba:	20 e0       	ldi	r18, 0x00	; 0
    57bc:	3f ef       	ldi	r19, 0xFF	; 255
    57be:	4f e7       	ldi	r20, 0x7F	; 127
    57c0:	57 e4       	ldi	r21, 0x47	; 71
    57c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57c6:	18 16       	cp	r1, r24
    57c8:	0c f0       	brlt	.+2      	; 0x57cc <init_fun+0x888>
    57ca:	43 c0       	rjmp	.+134    	; 0x5852 <init_fun+0x90e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57cc:	fe 01       	movw	r30, r28
    57ce:	e1 53       	subi	r30, 0x31	; 49
    57d0:	ff 4f       	sbci	r31, 0xFF	; 255
    57d2:	60 81       	ld	r22, Z
    57d4:	71 81       	ldd	r23, Z+1	; 0x01
    57d6:	82 81       	ldd	r24, Z+2	; 0x02
    57d8:	93 81       	ldd	r25, Z+3	; 0x03
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	40 e2       	ldi	r20, 0x20	; 32
    57e0:	51 e4       	ldi	r21, 0x41	; 65
    57e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	8e 01       	movw	r16, r28
    57ec:	07 53       	subi	r16, 0x37	; 55
    57ee:	1f 4f       	sbci	r17, 0xFF	; 255
    57f0:	bc 01       	movw	r22, r24
    57f2:	cd 01       	movw	r24, r26
    57f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	f8 01       	movw	r30, r16
    57fe:	91 83       	std	Z+1, r25	; 0x01
    5800:	80 83       	st	Z, r24
    5802:	1f c0       	rjmp	.+62     	; 0x5842 <init_fun+0x8fe>
    5804:	fe 01       	movw	r30, r28
    5806:	e9 53       	subi	r30, 0x39	; 57
    5808:	ff 4f       	sbci	r31, 0xFF	; 255
    580a:	88 ec       	ldi	r24, 0xC8	; 200
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	91 83       	std	Z+1, r25	; 0x01
    5810:	80 83       	st	Z, r24
    5812:	fe 01       	movw	r30, r28
    5814:	e9 53       	subi	r30, 0x39	; 57
    5816:	ff 4f       	sbci	r31, 0xFF	; 255
    5818:	80 81       	ld	r24, Z
    581a:	91 81       	ldd	r25, Z+1	; 0x01
    581c:	01 97       	sbiw	r24, 0x01	; 1
    581e:	f1 f7       	brne	.-4      	; 0x581c <init_fun+0x8d8>
    5820:	fe 01       	movw	r30, r28
    5822:	e9 53       	subi	r30, 0x39	; 57
    5824:	ff 4f       	sbci	r31, 0xFF	; 255
    5826:	91 83       	std	Z+1, r25	; 0x01
    5828:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    582a:	de 01       	movw	r26, r28
    582c:	a7 53       	subi	r26, 0x37	; 55
    582e:	bf 4f       	sbci	r27, 0xFF	; 255
    5830:	fe 01       	movw	r30, r28
    5832:	e7 53       	subi	r30, 0x37	; 55
    5834:	ff 4f       	sbci	r31, 0xFF	; 255
    5836:	80 81       	ld	r24, Z
    5838:	91 81       	ldd	r25, Z+1	; 0x01
    583a:	01 97       	sbiw	r24, 0x01	; 1
    583c:	11 96       	adiw	r26, 0x01	; 1
    583e:	9c 93       	st	X, r25
    5840:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5842:	fe 01       	movw	r30, r28
    5844:	e7 53       	subi	r30, 0x37	; 55
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	80 81       	ld	r24, Z
    584a:	91 81       	ldd	r25, Z+1	; 0x01
    584c:	00 97       	sbiw	r24, 0x00	; 0
    584e:	d1 f6       	brne	.-76     	; 0x5804 <init_fun+0x8c0>
    5850:	27 c0       	rjmp	.+78     	; 0x58a0 <init_fun+0x95c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5852:	8e 01       	movw	r16, r28
    5854:	07 53       	subi	r16, 0x37	; 55
    5856:	1f 4f       	sbci	r17, 0xFF	; 255
    5858:	fe 01       	movw	r30, r28
    585a:	e5 53       	subi	r30, 0x35	; 53
    585c:	ff 4f       	sbci	r31, 0xFF	; 255
    585e:	60 81       	ld	r22, Z
    5860:	71 81       	ldd	r23, Z+1	; 0x01
    5862:	82 81       	ldd	r24, Z+2	; 0x02
    5864:	93 81       	ldd	r25, Z+3	; 0x03
    5866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    586a:	dc 01       	movw	r26, r24
    586c:	cb 01       	movw	r24, r22
    586e:	f8 01       	movw	r30, r16
    5870:	91 83       	std	Z+1, r25	; 0x01
    5872:	80 83       	st	Z, r24
    5874:	de 01       	movw	r26, r28
    5876:	ab 53       	subi	r26, 0x3B	; 59
    5878:	bf 4f       	sbci	r27, 0xFF	; 255
    587a:	fe 01       	movw	r30, r28
    587c:	e7 53       	subi	r30, 0x37	; 55
    587e:	ff 4f       	sbci	r31, 0xFF	; 255
    5880:	80 81       	ld	r24, Z
    5882:	91 81       	ldd	r25, Z+1	; 0x01
    5884:	8d 93       	st	X+, r24
    5886:	9c 93       	st	X, r25
    5888:	fe 01       	movw	r30, r28
    588a:	eb 53       	subi	r30, 0x3B	; 59
    588c:	ff 4f       	sbci	r31, 0xFF	; 255
    588e:	80 81       	ld	r24, Z
    5890:	91 81       	ldd	r25, Z+1	; 0x01
    5892:	01 97       	sbiw	r24, 0x01	; 1
    5894:	f1 f7       	brne	.-4      	; 0x5892 <init_fun+0x94e>
    5896:	fe 01       	movw	r30, r28
    5898:	eb 53       	subi	r30, 0x3B	; 59
    589a:	ff 4f       	sbci	r31, 0xFF	; 255
    589c:	91 83       	std	Z+1, r25	; 0x01
    589e:	80 83       	st	Z, r24
    58a0:	fe 01       	movw	r30, r28
    58a2:	ef 53       	subi	r30, 0x3F	; 63
    58a4:	ff 4f       	sbci	r31, 0xFF	; 255
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	90 e8       	ldi	r25, 0x80	; 128
    58aa:	ab e3       	ldi	r26, 0x3B	; 59
    58ac:	b5 e4       	ldi	r27, 0x45	; 69
    58ae:	80 83       	st	Z, r24
    58b0:	91 83       	std	Z+1, r25	; 0x01
    58b2:	a2 83       	std	Z+2, r26	; 0x02
    58b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58b6:	8e 01       	movw	r16, r28
    58b8:	03 54       	subi	r16, 0x43	; 67
    58ba:	1f 4f       	sbci	r17, 0xFF	; 255
    58bc:	fe 01       	movw	r30, r28
    58be:	ef 53       	subi	r30, 0x3F	; 63
    58c0:	ff 4f       	sbci	r31, 0xFF	; 255
    58c2:	60 81       	ld	r22, Z
    58c4:	71 81       	ldd	r23, Z+1	; 0x01
    58c6:	82 81       	ldd	r24, Z+2	; 0x02
    58c8:	93 81       	ldd	r25, Z+3	; 0x03
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	4a ef       	ldi	r20, 0xFA	; 250
    58d0:	54 e4       	ldi	r21, 0x44	; 68
    58d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	f8 01       	movw	r30, r16
    58dc:	80 83       	st	Z, r24
    58de:	91 83       	std	Z+1, r25	; 0x01
    58e0:	a2 83       	std	Z+2, r26	; 0x02
    58e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58e4:	fe 01       	movw	r30, r28
    58e6:	e3 54       	subi	r30, 0x43	; 67
    58e8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ea:	60 81       	ld	r22, Z
    58ec:	71 81       	ldd	r23, Z+1	; 0x01
    58ee:	82 81       	ldd	r24, Z+2	; 0x02
    58f0:	93 81       	ldd	r25, Z+3	; 0x03
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	40 e8       	ldi	r20, 0x80	; 128
    58f8:	5f e3       	ldi	r21, 0x3F	; 63
    58fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58fe:	88 23       	and	r24, r24
    5900:	44 f4       	brge	.+16     	; 0x5912 <init_fun+0x9ce>
		__ticks = 1;
    5902:	fe 01       	movw	r30, r28
    5904:	e5 54       	subi	r30, 0x45	; 69
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	81 e0       	ldi	r24, 0x01	; 1
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	91 83       	std	Z+1, r25	; 0x01
    590e:	80 83       	st	Z, r24
    5910:	64 c0       	rjmp	.+200    	; 0x59da <init_fun+0xa96>
	else if (__tmp > 65535)
    5912:	fe 01       	movw	r30, r28
    5914:	e3 54       	subi	r30, 0x43	; 67
    5916:	ff 4f       	sbci	r31, 0xFF	; 255
    5918:	60 81       	ld	r22, Z
    591a:	71 81       	ldd	r23, Z+1	; 0x01
    591c:	82 81       	ldd	r24, Z+2	; 0x02
    591e:	93 81       	ldd	r25, Z+3	; 0x03
    5920:	20 e0       	ldi	r18, 0x00	; 0
    5922:	3f ef       	ldi	r19, 0xFF	; 255
    5924:	4f e7       	ldi	r20, 0x7F	; 127
    5926:	57 e4       	ldi	r21, 0x47	; 71
    5928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    592c:	18 16       	cp	r1, r24
    592e:	0c f0       	brlt	.+2      	; 0x5932 <init_fun+0x9ee>
    5930:	43 c0       	rjmp	.+134    	; 0x59b8 <init_fun+0xa74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5932:	fe 01       	movw	r30, r28
    5934:	ef 53       	subi	r30, 0x3F	; 63
    5936:	ff 4f       	sbci	r31, 0xFF	; 255
    5938:	60 81       	ld	r22, Z
    593a:	71 81       	ldd	r23, Z+1	; 0x01
    593c:	82 81       	ldd	r24, Z+2	; 0x02
    593e:	93 81       	ldd	r25, Z+3	; 0x03
    5940:	20 e0       	ldi	r18, 0x00	; 0
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	40 e2       	ldi	r20, 0x20	; 32
    5946:	51 e4       	ldi	r21, 0x41	; 65
    5948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    594c:	dc 01       	movw	r26, r24
    594e:	cb 01       	movw	r24, r22
    5950:	8e 01       	movw	r16, r28
    5952:	05 54       	subi	r16, 0x45	; 69
    5954:	1f 4f       	sbci	r17, 0xFF	; 255
    5956:	bc 01       	movw	r22, r24
    5958:	cd 01       	movw	r24, r26
    595a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    595e:	dc 01       	movw	r26, r24
    5960:	cb 01       	movw	r24, r22
    5962:	f8 01       	movw	r30, r16
    5964:	91 83       	std	Z+1, r25	; 0x01
    5966:	80 83       	st	Z, r24
    5968:	1f c0       	rjmp	.+62     	; 0x59a8 <init_fun+0xa64>
    596a:	fe 01       	movw	r30, r28
    596c:	e7 54       	subi	r30, 0x47	; 71
    596e:	ff 4f       	sbci	r31, 0xFF	; 255
    5970:	88 ec       	ldi	r24, 0xC8	; 200
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	91 83       	std	Z+1, r25	; 0x01
    5976:	80 83       	st	Z, r24
    5978:	fe 01       	movw	r30, r28
    597a:	e7 54       	subi	r30, 0x47	; 71
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 81       	ld	r24, Z
    5980:	91 81       	ldd	r25, Z+1	; 0x01
    5982:	01 97       	sbiw	r24, 0x01	; 1
    5984:	f1 f7       	brne	.-4      	; 0x5982 <init_fun+0xa3e>
    5986:	fe 01       	movw	r30, r28
    5988:	e7 54       	subi	r30, 0x47	; 71
    598a:	ff 4f       	sbci	r31, 0xFF	; 255
    598c:	91 83       	std	Z+1, r25	; 0x01
    598e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5990:	de 01       	movw	r26, r28
    5992:	a5 54       	subi	r26, 0x45	; 69
    5994:	bf 4f       	sbci	r27, 0xFF	; 255
    5996:	fe 01       	movw	r30, r28
    5998:	e5 54       	subi	r30, 0x45	; 69
    599a:	ff 4f       	sbci	r31, 0xFF	; 255
    599c:	80 81       	ld	r24, Z
    599e:	91 81       	ldd	r25, Z+1	; 0x01
    59a0:	01 97       	sbiw	r24, 0x01	; 1
    59a2:	11 96       	adiw	r26, 0x01	; 1
    59a4:	9c 93       	st	X, r25
    59a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59a8:	fe 01       	movw	r30, r28
    59aa:	e5 54       	subi	r30, 0x45	; 69
    59ac:	ff 4f       	sbci	r31, 0xFF	; 255
    59ae:	80 81       	ld	r24, Z
    59b0:	91 81       	ldd	r25, Z+1	; 0x01
    59b2:	00 97       	sbiw	r24, 0x00	; 0
    59b4:	d1 f6       	brne	.-76     	; 0x596a <init_fun+0xa26>
    59b6:	27 c0       	rjmp	.+78     	; 0x5a06 <init_fun+0xac2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59b8:	8e 01       	movw	r16, r28
    59ba:	05 54       	subi	r16, 0x45	; 69
    59bc:	1f 4f       	sbci	r17, 0xFF	; 255
    59be:	fe 01       	movw	r30, r28
    59c0:	e3 54       	subi	r30, 0x43	; 67
    59c2:	ff 4f       	sbci	r31, 0xFF	; 255
    59c4:	60 81       	ld	r22, Z
    59c6:	71 81       	ldd	r23, Z+1	; 0x01
    59c8:	82 81       	ldd	r24, Z+2	; 0x02
    59ca:	93 81       	ldd	r25, Z+3	; 0x03
    59cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d0:	dc 01       	movw	r26, r24
    59d2:	cb 01       	movw	r24, r22
    59d4:	f8 01       	movw	r30, r16
    59d6:	91 83       	std	Z+1, r25	; 0x01
    59d8:	80 83       	st	Z, r24
    59da:	de 01       	movw	r26, r28
    59dc:	a9 54       	subi	r26, 0x49	; 73
    59de:	bf 4f       	sbci	r27, 0xFF	; 255
    59e0:	fe 01       	movw	r30, r28
    59e2:	e5 54       	subi	r30, 0x45	; 69
    59e4:	ff 4f       	sbci	r31, 0xFF	; 255
    59e6:	80 81       	ld	r24, Z
    59e8:	91 81       	ldd	r25, Z+1	; 0x01
    59ea:	8d 93       	st	X+, r24
    59ec:	9c 93       	st	X, r25
    59ee:	fe 01       	movw	r30, r28
    59f0:	e9 54       	subi	r30, 0x49	; 73
    59f2:	ff 4f       	sbci	r31, 0xFF	; 255
    59f4:	80 81       	ld	r24, Z
    59f6:	91 81       	ldd	r25, Z+1	; 0x01
    59f8:	01 97       	sbiw	r24, 0x01	; 1
    59fa:	f1 f7       	brne	.-4      	; 0x59f8 <init_fun+0xab4>
    59fc:	fe 01       	movw	r30, r28
    59fe:	e9 54       	subi	r30, 0x49	; 73
    5a00:	ff 4f       	sbci	r31, 0xFF	; 255
    5a02:	91 83       	std	Z+1, r25	; 0x01
    5a04:	80 83       	st	Z, r24
    5a06:	fe 01       	movw	r30, r28
    5a08:	ed 54       	subi	r30, 0x4D	; 77
    5a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0c:	80 e0       	ldi	r24, 0x00	; 0
    5a0e:	90 e8       	ldi	r25, 0x80	; 128
    5a10:	ab e3       	ldi	r26, 0x3B	; 59
    5a12:	b5 e4       	ldi	r27, 0x45	; 69
    5a14:	80 83       	st	Z, r24
    5a16:	91 83       	std	Z+1, r25	; 0x01
    5a18:	a2 83       	std	Z+2, r26	; 0x02
    5a1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a1c:	8e 01       	movw	r16, r28
    5a1e:	01 55       	subi	r16, 0x51	; 81
    5a20:	1f 4f       	sbci	r17, 0xFF	; 255
    5a22:	fe 01       	movw	r30, r28
    5a24:	ed 54       	subi	r30, 0x4D	; 77
    5a26:	ff 4f       	sbci	r31, 0xFF	; 255
    5a28:	60 81       	ld	r22, Z
    5a2a:	71 81       	ldd	r23, Z+1	; 0x01
    5a2c:	82 81       	ldd	r24, Z+2	; 0x02
    5a2e:	93 81       	ldd	r25, Z+3	; 0x03
    5a30:	20 e0       	ldi	r18, 0x00	; 0
    5a32:	30 e0       	ldi	r19, 0x00	; 0
    5a34:	4a ef       	ldi	r20, 0xFA	; 250
    5a36:	54 e4       	ldi	r21, 0x44	; 68
    5a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a3c:	dc 01       	movw	r26, r24
    5a3e:	cb 01       	movw	r24, r22
    5a40:	f8 01       	movw	r30, r16
    5a42:	80 83       	st	Z, r24
    5a44:	91 83       	std	Z+1, r25	; 0x01
    5a46:	a2 83       	std	Z+2, r26	; 0x02
    5a48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	e1 55       	subi	r30, 0x51	; 81
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	60 81       	ld	r22, Z
    5a52:	71 81       	ldd	r23, Z+1	; 0x01
    5a54:	82 81       	ldd	r24, Z+2	; 0x02
    5a56:	93 81       	ldd	r25, Z+3	; 0x03
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	40 e8       	ldi	r20, 0x80	; 128
    5a5e:	5f e3       	ldi	r21, 0x3F	; 63
    5a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a64:	88 23       	and	r24, r24
    5a66:	44 f4       	brge	.+16     	; 0x5a78 <init_fun+0xb34>
		__ticks = 1;
    5a68:	fe 01       	movw	r30, r28
    5a6a:	e3 55       	subi	r30, 0x53	; 83
    5a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6e:	81 e0       	ldi	r24, 0x01	; 1
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	91 83       	std	Z+1, r25	; 0x01
    5a74:	80 83       	st	Z, r24
    5a76:	64 c0       	rjmp	.+200    	; 0x5b40 <init_fun+0xbfc>
	else if (__tmp > 65535)
    5a78:	fe 01       	movw	r30, r28
    5a7a:	e1 55       	subi	r30, 0x51	; 81
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	60 81       	ld	r22, Z
    5a80:	71 81       	ldd	r23, Z+1	; 0x01
    5a82:	82 81       	ldd	r24, Z+2	; 0x02
    5a84:	93 81       	ldd	r25, Z+3	; 0x03
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	3f ef       	ldi	r19, 0xFF	; 255
    5a8a:	4f e7       	ldi	r20, 0x7F	; 127
    5a8c:	57 e4       	ldi	r21, 0x47	; 71
    5a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a92:	18 16       	cp	r1, r24
    5a94:	0c f0       	brlt	.+2      	; 0x5a98 <init_fun+0xb54>
    5a96:	43 c0       	rjmp	.+134    	; 0x5b1e <init_fun+0xbda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a98:	fe 01       	movw	r30, r28
    5a9a:	ed 54       	subi	r30, 0x4D	; 77
    5a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9e:	60 81       	ld	r22, Z
    5aa0:	71 81       	ldd	r23, Z+1	; 0x01
    5aa2:	82 81       	ldd	r24, Z+2	; 0x02
    5aa4:	93 81       	ldd	r25, Z+3	; 0x03
    5aa6:	20 e0       	ldi	r18, 0x00	; 0
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	40 e2       	ldi	r20, 0x20	; 32
    5aac:	51 e4       	ldi	r21, 0x41	; 65
    5aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	cb 01       	movw	r24, r22
    5ab6:	8e 01       	movw	r16, r28
    5ab8:	03 55       	subi	r16, 0x53	; 83
    5aba:	1f 4f       	sbci	r17, 0xFF	; 255
    5abc:	bc 01       	movw	r22, r24
    5abe:	cd 01       	movw	r24, r26
    5ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	f8 01       	movw	r30, r16
    5aca:	91 83       	std	Z+1, r25	; 0x01
    5acc:	80 83       	st	Z, r24
    5ace:	1f c0       	rjmp	.+62     	; 0x5b0e <init_fun+0xbca>
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	e5 55       	subi	r30, 0x55	; 85
    5ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad6:	88 ec       	ldi	r24, 0xC8	; 200
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	91 83       	std	Z+1, r25	; 0x01
    5adc:	80 83       	st	Z, r24
    5ade:	fe 01       	movw	r30, r28
    5ae0:	e5 55       	subi	r30, 0x55	; 85
    5ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae4:	80 81       	ld	r24, Z
    5ae6:	91 81       	ldd	r25, Z+1	; 0x01
    5ae8:	01 97       	sbiw	r24, 0x01	; 1
    5aea:	f1 f7       	brne	.-4      	; 0x5ae8 <init_fun+0xba4>
    5aec:	fe 01       	movw	r30, r28
    5aee:	e5 55       	subi	r30, 0x55	; 85
    5af0:	ff 4f       	sbci	r31, 0xFF	; 255
    5af2:	91 83       	std	Z+1, r25	; 0x01
    5af4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5af6:	de 01       	movw	r26, r28
    5af8:	a3 55       	subi	r26, 0x53	; 83
    5afa:	bf 4f       	sbci	r27, 0xFF	; 255
    5afc:	fe 01       	movw	r30, r28
    5afe:	e3 55       	subi	r30, 0x53	; 83
    5b00:	ff 4f       	sbci	r31, 0xFF	; 255
    5b02:	80 81       	ld	r24, Z
    5b04:	91 81       	ldd	r25, Z+1	; 0x01
    5b06:	01 97       	sbiw	r24, 0x01	; 1
    5b08:	11 96       	adiw	r26, 0x01	; 1
    5b0a:	9c 93       	st	X, r25
    5b0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b0e:	fe 01       	movw	r30, r28
    5b10:	e3 55       	subi	r30, 0x53	; 83
    5b12:	ff 4f       	sbci	r31, 0xFF	; 255
    5b14:	80 81       	ld	r24, Z
    5b16:	91 81       	ldd	r25, Z+1	; 0x01
    5b18:	00 97       	sbiw	r24, 0x00	; 0
    5b1a:	d1 f6       	brne	.-76     	; 0x5ad0 <init_fun+0xb8c>
    5b1c:	27 c0       	rjmp	.+78     	; 0x5b6c <init_fun+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b1e:	8e 01       	movw	r16, r28
    5b20:	03 55       	subi	r16, 0x53	; 83
    5b22:	1f 4f       	sbci	r17, 0xFF	; 255
    5b24:	fe 01       	movw	r30, r28
    5b26:	e1 55       	subi	r30, 0x51	; 81
    5b28:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2a:	60 81       	ld	r22, Z
    5b2c:	71 81       	ldd	r23, Z+1	; 0x01
    5b2e:	82 81       	ldd	r24, Z+2	; 0x02
    5b30:	93 81       	ldd	r25, Z+3	; 0x03
    5b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b36:	dc 01       	movw	r26, r24
    5b38:	cb 01       	movw	r24, r22
    5b3a:	f8 01       	movw	r30, r16
    5b3c:	91 83       	std	Z+1, r25	; 0x01
    5b3e:	80 83       	st	Z, r24
    5b40:	de 01       	movw	r26, r28
    5b42:	a7 55       	subi	r26, 0x57	; 87
    5b44:	bf 4f       	sbci	r27, 0xFF	; 255
    5b46:	fe 01       	movw	r30, r28
    5b48:	e3 55       	subi	r30, 0x53	; 83
    5b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4c:	80 81       	ld	r24, Z
    5b4e:	91 81       	ldd	r25, Z+1	; 0x01
    5b50:	8d 93       	st	X+, r24
    5b52:	9c 93       	st	X, r25
    5b54:	fe 01       	movw	r30, r28
    5b56:	e7 55       	subi	r30, 0x57	; 87
    5b58:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5a:	80 81       	ld	r24, Z
    5b5c:	91 81       	ldd	r25, Z+1	; 0x01
    5b5e:	01 97       	sbiw	r24, 0x01	; 1
    5b60:	f1 f7       	brne	.-4      	; 0x5b5e <init_fun+0xc1a>
    5b62:	fe 01       	movw	r30, r28
    5b64:	e7 55       	subi	r30, 0x57	; 87
    5b66:	ff 4f       	sbci	r31, 0xFF	; 255
    5b68:	91 83       	std	Z+1, r25	; 0x01
    5b6a:	80 83       	st	Z, r24
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	eb 55       	subi	r30, 0x5B	; 91
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	80 e0       	ldi	r24, 0x00	; 0
    5b74:	90 e8       	ldi	r25, 0x80	; 128
    5b76:	ab e3       	ldi	r26, 0x3B	; 59
    5b78:	b5 e4       	ldi	r27, 0x45	; 69
    5b7a:	80 83       	st	Z, r24
    5b7c:	91 83       	std	Z+1, r25	; 0x01
    5b7e:	a2 83       	std	Z+2, r26	; 0x02
    5b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b82:	8e 01       	movw	r16, r28
    5b84:	0f 55       	subi	r16, 0x5F	; 95
    5b86:	1f 4f       	sbci	r17, 0xFF	; 255
    5b88:	fe 01       	movw	r30, r28
    5b8a:	eb 55       	subi	r30, 0x5B	; 91
    5b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8e:	60 81       	ld	r22, Z
    5b90:	71 81       	ldd	r23, Z+1	; 0x01
    5b92:	82 81       	ldd	r24, Z+2	; 0x02
    5b94:	93 81       	ldd	r25, Z+3	; 0x03
    5b96:	20 e0       	ldi	r18, 0x00	; 0
    5b98:	30 e0       	ldi	r19, 0x00	; 0
    5b9a:	4a ef       	ldi	r20, 0xFA	; 250
    5b9c:	54 e4       	ldi	r21, 0x44	; 68
    5b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	f8 01       	movw	r30, r16
    5ba8:	80 83       	st	Z, r24
    5baa:	91 83       	std	Z+1, r25	; 0x01
    5bac:	a2 83       	std	Z+2, r26	; 0x02
    5bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5bb0:	fe 01       	movw	r30, r28
    5bb2:	ef 55       	subi	r30, 0x5F	; 95
    5bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb6:	60 81       	ld	r22, Z
    5bb8:	71 81       	ldd	r23, Z+1	; 0x01
    5bba:	82 81       	ldd	r24, Z+2	; 0x02
    5bbc:	93 81       	ldd	r25, Z+3	; 0x03
    5bbe:	20 e0       	ldi	r18, 0x00	; 0
    5bc0:	30 e0       	ldi	r19, 0x00	; 0
    5bc2:	40 e8       	ldi	r20, 0x80	; 128
    5bc4:	5f e3       	ldi	r21, 0x3F	; 63
    5bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bca:	88 23       	and	r24, r24
    5bcc:	44 f4       	brge	.+16     	; 0x5bde <init_fun+0xc9a>
		__ticks = 1;
    5bce:	fe 01       	movw	r30, r28
    5bd0:	e1 56       	subi	r30, 0x61	; 97
    5bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd4:	81 e0       	ldi	r24, 0x01	; 1
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	91 83       	std	Z+1, r25	; 0x01
    5bda:	80 83       	st	Z, r24
    5bdc:	64 c0       	rjmp	.+200    	; 0x5ca6 <init_fun+0xd62>
	else if (__tmp > 65535)
    5bde:	fe 01       	movw	r30, r28
    5be0:	ef 55       	subi	r30, 0x5F	; 95
    5be2:	ff 4f       	sbci	r31, 0xFF	; 255
    5be4:	60 81       	ld	r22, Z
    5be6:	71 81       	ldd	r23, Z+1	; 0x01
    5be8:	82 81       	ldd	r24, Z+2	; 0x02
    5bea:	93 81       	ldd	r25, Z+3	; 0x03
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	3f ef       	ldi	r19, 0xFF	; 255
    5bf0:	4f e7       	ldi	r20, 0x7F	; 127
    5bf2:	57 e4       	ldi	r21, 0x47	; 71
    5bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bf8:	18 16       	cp	r1, r24
    5bfa:	0c f0       	brlt	.+2      	; 0x5bfe <init_fun+0xcba>
    5bfc:	43 c0       	rjmp	.+134    	; 0x5c84 <init_fun+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bfe:	fe 01       	movw	r30, r28
    5c00:	eb 55       	subi	r30, 0x5B	; 91
    5c02:	ff 4f       	sbci	r31, 0xFF	; 255
    5c04:	60 81       	ld	r22, Z
    5c06:	71 81       	ldd	r23, Z+1	; 0x01
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	93 81       	ldd	r25, Z+3	; 0x03
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e2       	ldi	r20, 0x20	; 32
    5c12:	51 e4       	ldi	r21, 0x41	; 65
    5c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	8e 01       	movw	r16, r28
    5c1e:	01 56       	subi	r16, 0x61	; 97
    5c20:	1f 4f       	sbci	r17, 0xFF	; 255
    5c22:	bc 01       	movw	r22, r24
    5c24:	cd 01       	movw	r24, r26
    5c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	cb 01       	movw	r24, r22
    5c2e:	f8 01       	movw	r30, r16
    5c30:	91 83       	std	Z+1, r25	; 0x01
    5c32:	80 83       	st	Z, r24
    5c34:	1f c0       	rjmp	.+62     	; 0x5c74 <init_fun+0xd30>
    5c36:	fe 01       	movw	r30, r28
    5c38:	e3 56       	subi	r30, 0x63	; 99
    5c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3c:	88 ec       	ldi	r24, 0xC8	; 200
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	91 83       	std	Z+1, r25	; 0x01
    5c42:	80 83       	st	Z, r24
    5c44:	fe 01       	movw	r30, r28
    5c46:	e3 56       	subi	r30, 0x63	; 99
    5c48:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4a:	80 81       	ld	r24, Z
    5c4c:	91 81       	ldd	r25, Z+1	; 0x01
    5c4e:	01 97       	sbiw	r24, 0x01	; 1
    5c50:	f1 f7       	brne	.-4      	; 0x5c4e <init_fun+0xd0a>
    5c52:	fe 01       	movw	r30, r28
    5c54:	e3 56       	subi	r30, 0x63	; 99
    5c56:	ff 4f       	sbci	r31, 0xFF	; 255
    5c58:	91 83       	std	Z+1, r25	; 0x01
    5c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c5c:	de 01       	movw	r26, r28
    5c5e:	a1 56       	subi	r26, 0x61	; 97
    5c60:	bf 4f       	sbci	r27, 0xFF	; 255
    5c62:	fe 01       	movw	r30, r28
    5c64:	e1 56       	subi	r30, 0x61	; 97
    5c66:	ff 4f       	sbci	r31, 0xFF	; 255
    5c68:	80 81       	ld	r24, Z
    5c6a:	91 81       	ldd	r25, Z+1	; 0x01
    5c6c:	01 97       	sbiw	r24, 0x01	; 1
    5c6e:	11 96       	adiw	r26, 0x01	; 1
    5c70:	9c 93       	st	X, r25
    5c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c74:	fe 01       	movw	r30, r28
    5c76:	e1 56       	subi	r30, 0x61	; 97
    5c78:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7a:	80 81       	ld	r24, Z
    5c7c:	91 81       	ldd	r25, Z+1	; 0x01
    5c7e:	00 97       	sbiw	r24, 0x00	; 0
    5c80:	d1 f6       	brne	.-76     	; 0x5c36 <init_fun+0xcf2>
    5c82:	27 c0       	rjmp	.+78     	; 0x5cd2 <init_fun+0xd8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c84:	8e 01       	movw	r16, r28
    5c86:	01 56       	subi	r16, 0x61	; 97
    5c88:	1f 4f       	sbci	r17, 0xFF	; 255
    5c8a:	fe 01       	movw	r30, r28
    5c8c:	ef 55       	subi	r30, 0x5F	; 95
    5c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c90:	60 81       	ld	r22, Z
    5c92:	71 81       	ldd	r23, Z+1	; 0x01
    5c94:	82 81       	ldd	r24, Z+2	; 0x02
    5c96:	93 81       	ldd	r25, Z+3	; 0x03
    5c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	cb 01       	movw	r24, r22
    5ca0:	f8 01       	movw	r30, r16
    5ca2:	91 83       	std	Z+1, r25	; 0x01
    5ca4:	80 83       	st	Z, r24
    5ca6:	de 01       	movw	r26, r28
    5ca8:	a5 56       	subi	r26, 0x65	; 101
    5caa:	bf 4f       	sbci	r27, 0xFF	; 255
    5cac:	fe 01       	movw	r30, r28
    5cae:	e1 56       	subi	r30, 0x61	; 97
    5cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb2:	80 81       	ld	r24, Z
    5cb4:	91 81       	ldd	r25, Z+1	; 0x01
    5cb6:	8d 93       	st	X+, r24
    5cb8:	9c 93       	st	X, r25
    5cba:	fe 01       	movw	r30, r28
    5cbc:	e5 56       	subi	r30, 0x65	; 101
    5cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc0:	80 81       	ld	r24, Z
    5cc2:	91 81       	ldd	r25, Z+1	; 0x01
    5cc4:	01 97       	sbiw	r24, 0x01	; 1
    5cc6:	f1 f7       	brne	.-4      	; 0x5cc4 <init_fun+0xd80>
    5cc8:	fe 01       	movw	r30, r28
    5cca:	e5 56       	subi	r30, 0x65	; 101
    5ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cce:	91 83       	std	Z+1, r25	; 0x01
    5cd0:	80 83       	st	Z, r24
    5cd2:	fe 01       	movw	r30, r28
    5cd4:	e9 56       	subi	r30, 0x69	; 105
    5cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd8:	80 e0       	ldi	r24, 0x00	; 0
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	aa e7       	ldi	r26, 0x7A	; 122
    5cde:	b4 e4       	ldi	r27, 0x44	; 68
    5ce0:	80 83       	st	Z, r24
    5ce2:	91 83       	std	Z+1, r25	; 0x01
    5ce4:	a2 83       	std	Z+2, r26	; 0x02
    5ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ce8:	8e 01       	movw	r16, r28
    5cea:	0d 56       	subi	r16, 0x6D	; 109
    5cec:	1f 4f       	sbci	r17, 0xFF	; 255
    5cee:	fe 01       	movw	r30, r28
    5cf0:	e9 56       	subi	r30, 0x69	; 105
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	60 81       	ld	r22, Z
    5cf6:	71 81       	ldd	r23, Z+1	; 0x01
    5cf8:	82 81       	ldd	r24, Z+2	; 0x02
    5cfa:	93 81       	ldd	r25, Z+3	; 0x03
    5cfc:	20 e0       	ldi	r18, 0x00	; 0
    5cfe:	30 e0       	ldi	r19, 0x00	; 0
    5d00:	4a ef       	ldi	r20, 0xFA	; 250
    5d02:	54 e4       	ldi	r21, 0x44	; 68
    5d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d08:	dc 01       	movw	r26, r24
    5d0a:	cb 01       	movw	r24, r22
    5d0c:	f8 01       	movw	r30, r16
    5d0e:	80 83       	st	Z, r24
    5d10:	91 83       	std	Z+1, r25	; 0x01
    5d12:	a2 83       	std	Z+2, r26	; 0x02
    5d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d16:	fe 01       	movw	r30, r28
    5d18:	ed 56       	subi	r30, 0x6D	; 109
    5d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d1c:	60 81       	ld	r22, Z
    5d1e:	71 81       	ldd	r23, Z+1	; 0x01
    5d20:	82 81       	ldd	r24, Z+2	; 0x02
    5d22:	93 81       	ldd	r25, Z+3	; 0x03
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	30 e0       	ldi	r19, 0x00	; 0
    5d28:	40 e8       	ldi	r20, 0x80	; 128
    5d2a:	5f e3       	ldi	r21, 0x3F	; 63
    5d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d30:	88 23       	and	r24, r24
    5d32:	44 f4       	brge	.+16     	; 0x5d44 <init_fun+0xe00>
		__ticks = 1;
    5d34:	fe 01       	movw	r30, r28
    5d36:	ef 56       	subi	r30, 0x6F	; 111
    5d38:	ff 4f       	sbci	r31, 0xFF	; 255
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	91 83       	std	Z+1, r25	; 0x01
    5d40:	80 83       	st	Z, r24
    5d42:	64 c0       	rjmp	.+200    	; 0x5e0c <init_fun+0xec8>
	else if (__tmp > 65535)
    5d44:	fe 01       	movw	r30, r28
    5d46:	ed 56       	subi	r30, 0x6D	; 109
    5d48:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4a:	60 81       	ld	r22, Z
    5d4c:	71 81       	ldd	r23, Z+1	; 0x01
    5d4e:	82 81       	ldd	r24, Z+2	; 0x02
    5d50:	93 81       	ldd	r25, Z+3	; 0x03
    5d52:	20 e0       	ldi	r18, 0x00	; 0
    5d54:	3f ef       	ldi	r19, 0xFF	; 255
    5d56:	4f e7       	ldi	r20, 0x7F	; 127
    5d58:	57 e4       	ldi	r21, 0x47	; 71
    5d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d5e:	18 16       	cp	r1, r24
    5d60:	0c f0       	brlt	.+2      	; 0x5d64 <init_fun+0xe20>
    5d62:	43 c0       	rjmp	.+134    	; 0x5dea <init_fun+0xea6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d64:	fe 01       	movw	r30, r28
    5d66:	e9 56       	subi	r30, 0x69	; 105
    5d68:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6a:	60 81       	ld	r22, Z
    5d6c:	71 81       	ldd	r23, Z+1	; 0x01
    5d6e:	82 81       	ldd	r24, Z+2	; 0x02
    5d70:	93 81       	ldd	r25, Z+3	; 0x03
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	40 e2       	ldi	r20, 0x20	; 32
    5d78:	51 e4       	ldi	r21, 0x41	; 65
    5d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d7e:	dc 01       	movw	r26, r24
    5d80:	cb 01       	movw	r24, r22
    5d82:	8e 01       	movw	r16, r28
    5d84:	0f 56       	subi	r16, 0x6F	; 111
    5d86:	1f 4f       	sbci	r17, 0xFF	; 255
    5d88:	bc 01       	movw	r22, r24
    5d8a:	cd 01       	movw	r24, r26
    5d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d90:	dc 01       	movw	r26, r24
    5d92:	cb 01       	movw	r24, r22
    5d94:	f8 01       	movw	r30, r16
    5d96:	91 83       	std	Z+1, r25	; 0x01
    5d98:	80 83       	st	Z, r24
    5d9a:	1f c0       	rjmp	.+62     	; 0x5dda <init_fun+0xe96>
    5d9c:	fe 01       	movw	r30, r28
    5d9e:	e1 57       	subi	r30, 0x71	; 113
    5da0:	ff 4f       	sbci	r31, 0xFF	; 255
    5da2:	88 ec       	ldi	r24, 0xC8	; 200
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	91 83       	std	Z+1, r25	; 0x01
    5da8:	80 83       	st	Z, r24
    5daa:	fe 01       	movw	r30, r28
    5dac:	e1 57       	subi	r30, 0x71	; 113
    5dae:	ff 4f       	sbci	r31, 0xFF	; 255
    5db0:	80 81       	ld	r24, Z
    5db2:	91 81       	ldd	r25, Z+1	; 0x01
    5db4:	01 97       	sbiw	r24, 0x01	; 1
    5db6:	f1 f7       	brne	.-4      	; 0x5db4 <init_fun+0xe70>
    5db8:	fe 01       	movw	r30, r28
    5dba:	e1 57       	subi	r30, 0x71	; 113
    5dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dbe:	91 83       	std	Z+1, r25	; 0x01
    5dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dc2:	de 01       	movw	r26, r28
    5dc4:	af 56       	subi	r26, 0x6F	; 111
    5dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    5dc8:	fe 01       	movw	r30, r28
    5dca:	ef 56       	subi	r30, 0x6F	; 111
    5dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dce:	80 81       	ld	r24, Z
    5dd0:	91 81       	ldd	r25, Z+1	; 0x01
    5dd2:	01 97       	sbiw	r24, 0x01	; 1
    5dd4:	11 96       	adiw	r26, 0x01	; 1
    5dd6:	9c 93       	st	X, r25
    5dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dda:	fe 01       	movw	r30, r28
    5ddc:	ef 56       	subi	r30, 0x6F	; 111
    5dde:	ff 4f       	sbci	r31, 0xFF	; 255
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	00 97       	sbiw	r24, 0x00	; 0
    5de6:	d1 f6       	brne	.-76     	; 0x5d9c <init_fun+0xe58>
    5de8:	27 c0       	rjmp	.+78     	; 0x5e38 <init_fun+0xef4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dea:	8e 01       	movw	r16, r28
    5dec:	0f 56       	subi	r16, 0x6F	; 111
    5dee:	1f 4f       	sbci	r17, 0xFF	; 255
    5df0:	fe 01       	movw	r30, r28
    5df2:	ed 56       	subi	r30, 0x6D	; 109
    5df4:	ff 4f       	sbci	r31, 0xFF	; 255
    5df6:	60 81       	ld	r22, Z
    5df8:	71 81       	ldd	r23, Z+1	; 0x01
    5dfa:	82 81       	ldd	r24, Z+2	; 0x02
    5dfc:	93 81       	ldd	r25, Z+3	; 0x03
    5dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e02:	dc 01       	movw	r26, r24
    5e04:	cb 01       	movw	r24, r22
    5e06:	f8 01       	movw	r30, r16
    5e08:	91 83       	std	Z+1, r25	; 0x01
    5e0a:	80 83       	st	Z, r24
    5e0c:	de 01       	movw	r26, r28
    5e0e:	a3 57       	subi	r26, 0x73	; 115
    5e10:	bf 4f       	sbci	r27, 0xFF	; 255
    5e12:	fe 01       	movw	r30, r28
    5e14:	ef 56       	subi	r30, 0x6F	; 111
    5e16:	ff 4f       	sbci	r31, 0xFF	; 255
    5e18:	80 81       	ld	r24, Z
    5e1a:	91 81       	ldd	r25, Z+1	; 0x01
    5e1c:	8d 93       	st	X+, r24
    5e1e:	9c 93       	st	X, r25
    5e20:	fe 01       	movw	r30, r28
    5e22:	e3 57       	subi	r30, 0x73	; 115
    5e24:	ff 4f       	sbci	r31, 0xFF	; 255
    5e26:	80 81       	ld	r24, Z
    5e28:	91 81       	ldd	r25, Z+1	; 0x01
    5e2a:	01 97       	sbiw	r24, 0x01	; 1
    5e2c:	f1 f7       	brne	.-4      	; 0x5e2a <init_fun+0xee6>
    5e2e:	fe 01       	movw	r30, r28
    5e30:	e3 57       	subi	r30, 0x73	; 115
    5e32:	ff 4f       	sbci	r31, 0xFF	; 255
    5e34:	91 83       	std	Z+1, r25	; 0x01
    5e36:	80 83       	st	Z, r24




	_delay_ms(1000);
	EF_void_I2C_Start();
    5e38:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
	EF_void_I2C_Write(Sensor_Write_ADD);
    5e3c:	86 eb       	ldi	r24, 0xB6	; 182
    5e3e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Write(Status_Register);
    5e42:	80 e0       	ldi	r24, 0x00	; 0
    5e44:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Stop();
    5e48:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>

	EF_void_I2C_Start();
    5e4c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
	EF_void_I2C_Write(Sensor_Read_ADD);
    5e50:	87 eb       	ldi	r24, 0xB7	; 183
    5e52:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	Status=EF_U8_I2C_Read_Byte(0);
    5e56:	80 e0       	ldi	r24, 0x00	; 0
    5e58:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    5e5c:	fe 01       	movw	r30, r28
    5e5e:	ea 5d       	subi	r30, 0xDA	; 218
    5e60:	fe 4f       	sbci	r31, 0xFE	; 254
    5e62:	80 83       	st	Z, r24
	EF_void_I2C_Stop();
    5e64:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>
    5e68:	fe 01       	movw	r30, r28
    5e6a:	e7 57       	subi	r30, 0x77	; 119
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	80 e0       	ldi	r24, 0x00	; 0
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	a8 ec       	ldi	r26, 0xC8	; 200
    5e74:	b2 e4       	ldi	r27, 0x42	; 66
    5e76:	80 83       	st	Z, r24
    5e78:	91 83       	std	Z+1, r25	; 0x01
    5e7a:	a2 83       	std	Z+2, r26	; 0x02
    5e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e7e:	8e 01       	movw	r16, r28
    5e80:	0b 57       	subi	r16, 0x7B	; 123
    5e82:	1f 4f       	sbci	r17, 0xFF	; 255
    5e84:	fe 01       	movw	r30, r28
    5e86:	e7 57       	subi	r30, 0x77	; 119
    5e88:	ff 4f       	sbci	r31, 0xFF	; 255
    5e8a:	60 81       	ld	r22, Z
    5e8c:	71 81       	ldd	r23, Z+1	; 0x01
    5e8e:	82 81       	ldd	r24, Z+2	; 0x02
    5e90:	93 81       	ldd	r25, Z+3	; 0x03
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	30 e0       	ldi	r19, 0x00	; 0
    5e96:	4a ef       	ldi	r20, 0xFA	; 250
    5e98:	54 e4       	ldi	r21, 0x44	; 68
    5e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	f8 01       	movw	r30, r16
    5ea4:	80 83       	st	Z, r24
    5ea6:	91 83       	std	Z+1, r25	; 0x01
    5ea8:	a2 83       	std	Z+2, r26	; 0x02
    5eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5eac:	fe 01       	movw	r30, r28
    5eae:	eb 57       	subi	r30, 0x7B	; 123
    5eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb2:	60 81       	ld	r22, Z
    5eb4:	71 81       	ldd	r23, Z+1	; 0x01
    5eb6:	82 81       	ldd	r24, Z+2	; 0x02
    5eb8:	93 81       	ldd	r25, Z+3	; 0x03
    5eba:	20 e0       	ldi	r18, 0x00	; 0
    5ebc:	30 e0       	ldi	r19, 0x00	; 0
    5ebe:	40 e8       	ldi	r20, 0x80	; 128
    5ec0:	5f e3       	ldi	r21, 0x3F	; 63
    5ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ec6:	88 23       	and	r24, r24
    5ec8:	44 f4       	brge	.+16     	; 0x5eda <init_fun+0xf96>
		__ticks = 1;
    5eca:	fe 01       	movw	r30, r28
    5ecc:	ed 57       	subi	r30, 0x7D	; 125
    5ece:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed0:	81 e0       	ldi	r24, 0x01	; 1
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	91 83       	std	Z+1, r25	; 0x01
    5ed6:	80 83       	st	Z, r24
    5ed8:	64 c0       	rjmp	.+200    	; 0x5fa2 <init_fun+0x105e>
	else if (__tmp > 65535)
    5eda:	fe 01       	movw	r30, r28
    5edc:	eb 57       	subi	r30, 0x7B	; 123
    5ede:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee0:	60 81       	ld	r22, Z
    5ee2:	71 81       	ldd	r23, Z+1	; 0x01
    5ee4:	82 81       	ldd	r24, Z+2	; 0x02
    5ee6:	93 81       	ldd	r25, Z+3	; 0x03
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	3f ef       	ldi	r19, 0xFF	; 255
    5eec:	4f e7       	ldi	r20, 0x7F	; 127
    5eee:	57 e4       	ldi	r21, 0x47	; 71
    5ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ef4:	18 16       	cp	r1, r24
    5ef6:	0c f0       	brlt	.+2      	; 0x5efa <init_fun+0xfb6>
    5ef8:	43 c0       	rjmp	.+134    	; 0x5f80 <init_fun+0x103c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5efa:	fe 01       	movw	r30, r28
    5efc:	e7 57       	subi	r30, 0x77	; 119
    5efe:	ff 4f       	sbci	r31, 0xFF	; 255
    5f00:	60 81       	ld	r22, Z
    5f02:	71 81       	ldd	r23, Z+1	; 0x01
    5f04:	82 81       	ldd	r24, Z+2	; 0x02
    5f06:	93 81       	ldd	r25, Z+3	; 0x03
    5f08:	20 e0       	ldi	r18, 0x00	; 0
    5f0a:	30 e0       	ldi	r19, 0x00	; 0
    5f0c:	40 e2       	ldi	r20, 0x20	; 32
    5f0e:	51 e4       	ldi	r21, 0x41	; 65
    5f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f14:	dc 01       	movw	r26, r24
    5f16:	cb 01       	movw	r24, r22
    5f18:	8e 01       	movw	r16, r28
    5f1a:	0d 57       	subi	r16, 0x7D	; 125
    5f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f1e:	bc 01       	movw	r22, r24
    5f20:	cd 01       	movw	r24, r26
    5f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	f8 01       	movw	r30, r16
    5f2c:	91 83       	std	Z+1, r25	; 0x01
    5f2e:	80 83       	st	Z, r24
    5f30:	1f c0       	rjmp	.+62     	; 0x5f70 <init_fun+0x102c>
    5f32:	fe 01       	movw	r30, r28
    5f34:	ef 57       	subi	r30, 0x7F	; 127
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	88 ec       	ldi	r24, 0xC8	; 200
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	91 83       	std	Z+1, r25	; 0x01
    5f3e:	80 83       	st	Z, r24
    5f40:	fe 01       	movw	r30, r28
    5f42:	ef 57       	subi	r30, 0x7F	; 127
    5f44:	ff 4f       	sbci	r31, 0xFF	; 255
    5f46:	80 81       	ld	r24, Z
    5f48:	91 81       	ldd	r25, Z+1	; 0x01
    5f4a:	01 97       	sbiw	r24, 0x01	; 1
    5f4c:	f1 f7       	brne	.-4      	; 0x5f4a <init_fun+0x1006>
    5f4e:	fe 01       	movw	r30, r28
    5f50:	ef 57       	subi	r30, 0x7F	; 127
    5f52:	ff 4f       	sbci	r31, 0xFF	; 255
    5f54:	91 83       	std	Z+1, r25	; 0x01
    5f56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f58:	de 01       	movw	r26, r28
    5f5a:	ad 57       	subi	r26, 0x7D	; 125
    5f5c:	bf 4f       	sbci	r27, 0xFF	; 255
    5f5e:	fe 01       	movw	r30, r28
    5f60:	ed 57       	subi	r30, 0x7D	; 125
    5f62:	ff 4f       	sbci	r31, 0xFF	; 255
    5f64:	80 81       	ld	r24, Z
    5f66:	91 81       	ldd	r25, Z+1	; 0x01
    5f68:	01 97       	sbiw	r24, 0x01	; 1
    5f6a:	11 96       	adiw	r26, 0x01	; 1
    5f6c:	9c 93       	st	X, r25
    5f6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f70:	fe 01       	movw	r30, r28
    5f72:	ed 57       	subi	r30, 0x7D	; 125
    5f74:	ff 4f       	sbci	r31, 0xFF	; 255
    5f76:	80 81       	ld	r24, Z
    5f78:	91 81       	ldd	r25, Z+1	; 0x01
    5f7a:	00 97       	sbiw	r24, 0x00	; 0
    5f7c:	d1 f6       	brne	.-76     	; 0x5f32 <init_fun+0xfee>
    5f7e:	27 c0       	rjmp	.+78     	; 0x5fce <init_fun+0x108a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f80:	8e 01       	movw	r16, r28
    5f82:	0d 57       	subi	r16, 0x7D	; 125
    5f84:	1f 4f       	sbci	r17, 0xFF	; 255
    5f86:	fe 01       	movw	r30, r28
    5f88:	eb 57       	subi	r30, 0x7B	; 123
    5f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f8c:	60 81       	ld	r22, Z
    5f8e:	71 81       	ldd	r23, Z+1	; 0x01
    5f90:	82 81       	ldd	r24, Z+2	; 0x02
    5f92:	93 81       	ldd	r25, Z+3	; 0x03
    5f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f98:	dc 01       	movw	r26, r24
    5f9a:	cb 01       	movw	r24, r22
    5f9c:	f8 01       	movw	r30, r16
    5f9e:	91 83       	std	Z+1, r25	; 0x01
    5fa0:	80 83       	st	Z, r24
    5fa2:	de 01       	movw	r26, r28
    5fa4:	a1 58       	subi	r26, 0x81	; 129
    5fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    5fa8:	fe 01       	movw	r30, r28
    5faa:	ed 57       	subi	r30, 0x7D	; 125
    5fac:	ff 4f       	sbci	r31, 0xFF	; 255
    5fae:	80 81       	ld	r24, Z
    5fb0:	91 81       	ldd	r25, Z+1	; 0x01
    5fb2:	8d 93       	st	X+, r24
    5fb4:	9c 93       	st	X, r25
    5fb6:	fe 01       	movw	r30, r28
    5fb8:	e1 58       	subi	r30, 0x81	; 129
    5fba:	ff 4f       	sbci	r31, 0xFF	; 255
    5fbc:	80 81       	ld	r24, Z
    5fbe:	91 81       	ldd	r25, Z+1	; 0x01
    5fc0:	01 97       	sbiw	r24, 0x01	; 1
    5fc2:	f1 f7       	brne	.-4      	; 0x5fc0 <init_fun+0x107c>
    5fc4:	fe 01       	movw	r30, r28
    5fc6:	e1 58       	subi	r30, 0x81	; 129
    5fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fca:	91 83       	std	Z+1, r25	; 0x01
    5fcc:	80 83       	st	Z, r24

	_delay_ms(100);

	EF_void_I2C_Start();
    5fce:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
	EF_void_I2C_Write(Sensor_Write_ADD);
    5fd2:	86 eb       	ldi	r24, 0xB6	; 182
    5fd4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Write(APP_Start);
    5fd8:	84 ef       	ldi	r24, 0xF4	; 244
    5fda:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Stop();
    5fde:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>
    5fe2:	fe 01       	movw	r30, r28
    5fe4:	e5 58       	subi	r30, 0x85	; 133
    5fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	a8 ec       	ldi	r26, 0xC8	; 200
    5fee:	b2 e4       	ldi	r27, 0x42	; 66
    5ff0:	80 83       	st	Z, r24
    5ff2:	91 83       	std	Z+1, r25	; 0x01
    5ff4:	a2 83       	std	Z+2, r26	; 0x02
    5ff6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ff8:	8e 01       	movw	r16, r28
    5ffa:	09 58       	subi	r16, 0x89	; 137
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	fe 01       	movw	r30, r28
    6000:	e5 58       	subi	r30, 0x85	; 133
    6002:	ff 4f       	sbci	r31, 0xFF	; 255
    6004:	60 81       	ld	r22, Z
    6006:	71 81       	ldd	r23, Z+1	; 0x01
    6008:	82 81       	ldd	r24, Z+2	; 0x02
    600a:	93 81       	ldd	r25, Z+3	; 0x03
    600c:	20 e0       	ldi	r18, 0x00	; 0
    600e:	30 e0       	ldi	r19, 0x00	; 0
    6010:	4a ef       	ldi	r20, 0xFA	; 250
    6012:	54 e4       	ldi	r21, 0x44	; 68
    6014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6018:	dc 01       	movw	r26, r24
    601a:	cb 01       	movw	r24, r22
    601c:	f8 01       	movw	r30, r16
    601e:	80 83       	st	Z, r24
    6020:	91 83       	std	Z+1, r25	; 0x01
    6022:	a2 83       	std	Z+2, r26	; 0x02
    6024:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6026:	fe 01       	movw	r30, r28
    6028:	e9 58       	subi	r30, 0x89	; 137
    602a:	ff 4f       	sbci	r31, 0xFF	; 255
    602c:	60 81       	ld	r22, Z
    602e:	71 81       	ldd	r23, Z+1	; 0x01
    6030:	82 81       	ldd	r24, Z+2	; 0x02
    6032:	93 81       	ldd	r25, Z+3	; 0x03
    6034:	20 e0       	ldi	r18, 0x00	; 0
    6036:	30 e0       	ldi	r19, 0x00	; 0
    6038:	40 e8       	ldi	r20, 0x80	; 128
    603a:	5f e3       	ldi	r21, 0x3F	; 63
    603c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6040:	88 23       	and	r24, r24
    6042:	44 f4       	brge	.+16     	; 0x6054 <init_fun+0x1110>
		__ticks = 1;
    6044:	fe 01       	movw	r30, r28
    6046:	eb 58       	subi	r30, 0x8B	; 139
    6048:	ff 4f       	sbci	r31, 0xFF	; 255
    604a:	81 e0       	ldi	r24, 0x01	; 1
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	91 83       	std	Z+1, r25	; 0x01
    6050:	80 83       	st	Z, r24
    6052:	64 c0       	rjmp	.+200    	; 0x611c <init_fun+0x11d8>
	else if (__tmp > 65535)
    6054:	fe 01       	movw	r30, r28
    6056:	e9 58       	subi	r30, 0x89	; 137
    6058:	ff 4f       	sbci	r31, 0xFF	; 255
    605a:	60 81       	ld	r22, Z
    605c:	71 81       	ldd	r23, Z+1	; 0x01
    605e:	82 81       	ldd	r24, Z+2	; 0x02
    6060:	93 81       	ldd	r25, Z+3	; 0x03
    6062:	20 e0       	ldi	r18, 0x00	; 0
    6064:	3f ef       	ldi	r19, 0xFF	; 255
    6066:	4f e7       	ldi	r20, 0x7F	; 127
    6068:	57 e4       	ldi	r21, 0x47	; 71
    606a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    606e:	18 16       	cp	r1, r24
    6070:	0c f0       	brlt	.+2      	; 0x6074 <init_fun+0x1130>
    6072:	43 c0       	rjmp	.+134    	; 0x60fa <init_fun+0x11b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6074:	fe 01       	movw	r30, r28
    6076:	e5 58       	subi	r30, 0x85	; 133
    6078:	ff 4f       	sbci	r31, 0xFF	; 255
    607a:	60 81       	ld	r22, Z
    607c:	71 81       	ldd	r23, Z+1	; 0x01
    607e:	82 81       	ldd	r24, Z+2	; 0x02
    6080:	93 81       	ldd	r25, Z+3	; 0x03
    6082:	20 e0       	ldi	r18, 0x00	; 0
    6084:	30 e0       	ldi	r19, 0x00	; 0
    6086:	40 e2       	ldi	r20, 0x20	; 32
    6088:	51 e4       	ldi	r21, 0x41	; 65
    608a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    608e:	dc 01       	movw	r26, r24
    6090:	cb 01       	movw	r24, r22
    6092:	8e 01       	movw	r16, r28
    6094:	0b 58       	subi	r16, 0x8B	; 139
    6096:	1f 4f       	sbci	r17, 0xFF	; 255
    6098:	bc 01       	movw	r22, r24
    609a:	cd 01       	movw	r24, r26
    609c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	f8 01       	movw	r30, r16
    60a6:	91 83       	std	Z+1, r25	; 0x01
    60a8:	80 83       	st	Z, r24
    60aa:	1f c0       	rjmp	.+62     	; 0x60ea <init_fun+0x11a6>
    60ac:	fe 01       	movw	r30, r28
    60ae:	ed 58       	subi	r30, 0x8D	; 141
    60b0:	ff 4f       	sbci	r31, 0xFF	; 255
    60b2:	88 ec       	ldi	r24, 0xC8	; 200
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	91 83       	std	Z+1, r25	; 0x01
    60b8:	80 83       	st	Z, r24
    60ba:	fe 01       	movw	r30, r28
    60bc:	ed 58       	subi	r30, 0x8D	; 141
    60be:	ff 4f       	sbci	r31, 0xFF	; 255
    60c0:	80 81       	ld	r24, Z
    60c2:	91 81       	ldd	r25, Z+1	; 0x01
    60c4:	01 97       	sbiw	r24, 0x01	; 1
    60c6:	f1 f7       	brne	.-4      	; 0x60c4 <init_fun+0x1180>
    60c8:	fe 01       	movw	r30, r28
    60ca:	ed 58       	subi	r30, 0x8D	; 141
    60cc:	ff 4f       	sbci	r31, 0xFF	; 255
    60ce:	91 83       	std	Z+1, r25	; 0x01
    60d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d2:	de 01       	movw	r26, r28
    60d4:	ab 58       	subi	r26, 0x8B	; 139
    60d6:	bf 4f       	sbci	r27, 0xFF	; 255
    60d8:	fe 01       	movw	r30, r28
    60da:	eb 58       	subi	r30, 0x8B	; 139
    60dc:	ff 4f       	sbci	r31, 0xFF	; 255
    60de:	80 81       	ld	r24, Z
    60e0:	91 81       	ldd	r25, Z+1	; 0x01
    60e2:	01 97       	sbiw	r24, 0x01	; 1
    60e4:	11 96       	adiw	r26, 0x01	; 1
    60e6:	9c 93       	st	X, r25
    60e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60ea:	fe 01       	movw	r30, r28
    60ec:	eb 58       	subi	r30, 0x8B	; 139
    60ee:	ff 4f       	sbci	r31, 0xFF	; 255
    60f0:	80 81       	ld	r24, Z
    60f2:	91 81       	ldd	r25, Z+1	; 0x01
    60f4:	00 97       	sbiw	r24, 0x00	; 0
    60f6:	d1 f6       	brne	.-76     	; 0x60ac <init_fun+0x1168>
    60f8:	27 c0       	rjmp	.+78     	; 0x6148 <init_fun+0x1204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60fa:	8e 01       	movw	r16, r28
    60fc:	0b 58       	subi	r16, 0x8B	; 139
    60fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6100:	fe 01       	movw	r30, r28
    6102:	e9 58       	subi	r30, 0x89	; 137
    6104:	ff 4f       	sbci	r31, 0xFF	; 255
    6106:	60 81       	ld	r22, Z
    6108:	71 81       	ldd	r23, Z+1	; 0x01
    610a:	82 81       	ldd	r24, Z+2	; 0x02
    610c:	93 81       	ldd	r25, Z+3	; 0x03
    610e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6112:	dc 01       	movw	r26, r24
    6114:	cb 01       	movw	r24, r22
    6116:	f8 01       	movw	r30, r16
    6118:	91 83       	std	Z+1, r25	; 0x01
    611a:	80 83       	st	Z, r24
    611c:	de 01       	movw	r26, r28
    611e:	af 58       	subi	r26, 0x8F	; 143
    6120:	bf 4f       	sbci	r27, 0xFF	; 255
    6122:	fe 01       	movw	r30, r28
    6124:	eb 58       	subi	r30, 0x8B	; 139
    6126:	ff 4f       	sbci	r31, 0xFF	; 255
    6128:	80 81       	ld	r24, Z
    612a:	91 81       	ldd	r25, Z+1	; 0x01
    612c:	8d 93       	st	X+, r24
    612e:	9c 93       	st	X, r25
    6130:	fe 01       	movw	r30, r28
    6132:	ef 58       	subi	r30, 0x8F	; 143
    6134:	ff 4f       	sbci	r31, 0xFF	; 255
    6136:	80 81       	ld	r24, Z
    6138:	91 81       	ldd	r25, Z+1	; 0x01
    613a:	01 97       	sbiw	r24, 0x01	; 1
    613c:	f1 f7       	brne	.-4      	; 0x613a <init_fun+0x11f6>
    613e:	fe 01       	movw	r30, r28
    6140:	ef 58       	subi	r30, 0x8F	; 143
    6142:	ff 4f       	sbci	r31, 0xFF	; 255
    6144:	91 83       	std	Z+1, r25	; 0x01
    6146:	80 83       	st	Z, r24

	_delay_ms(100);
	EF_void_I2C_Start();
    6148:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
	EF_void_I2C_Write(Sensor_Write_ADD);
    614c:	86 eb       	ldi	r24, 0xB6	; 182
    614e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Write(Measurment_Mode_Register);
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Write(0b00100000);
    6158:	80 e2       	ldi	r24, 0x20	; 32
    615a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
	EF_void_I2C_Stop();
    615e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>


	EF_void_LCD_Clear_Screen();
    6162:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Start");
    6166:	8e e2       	ldi	r24, 0x2E	; 46
    6168:	91 e0       	ldi	r25, 0x01	; 1
    616a:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
	while(1)
	{



		EF_void_I2C_Start();
    616e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
		EF_void_I2C_Write(Sensor_Write_ADD);
    6172:	86 eb       	ldi	r24, 0xB6	; 182
    6174:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
		EF_void_I2C_Write(Status_Register);
    6178:	80 e0       	ldi	r24, 0x00	; 0
    617a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
		EF_void_I2C_Stop();
    617e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>

		EF_void_I2C_Start();
    6182:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
		EF_void_I2C_Write(Sensor_Read_ADD);
    6186:	87 eb       	ldi	r24, 0xB7	; 183
    6188:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
		Status=EF_U8_I2C_Read_Byte(0);
    618c:	80 e0       	ldi	r24, 0x00	; 0
    618e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    6192:	fe 01       	movw	r30, r28
    6194:	ea 5d       	subi	r30, 0xDA	; 218
    6196:	fe 4f       	sbci	r31, 0xFE	; 254
    6198:	80 83       	st	Z, r24
		EF_void_I2C_Stop();
    619a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>

		if(Status==152)
    619e:	fe 01       	movw	r30, r28
    61a0:	ea 5d       	subi	r30, 0xDA	; 218
    61a2:	fe 4f       	sbci	r31, 0xFE	; 254
    61a4:	80 81       	ld	r24, Z
    61a6:	88 39       	cpi	r24, 0x98	; 152
    61a8:	09 f0       	breq	.+2      	; 0x61ac <init_fun+0x1268>
    61aa:	79 c5       	rjmp	.+2802   	; 0x6c9e <init_fun+0x1d5a>
		{

			EF_void_LCD_Clear_Screen();
    61ac:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
			EF_void_I2C_Start();
    61b0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
			EF_void_I2C_Write(Sensor_Write_ADD);
    61b4:	86 eb       	ldi	r24, 0xB6	; 182
    61b6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
			EF_void_I2C_Write(AlG_Result_Register);
    61ba:	82 e0       	ldi	r24, 0x02	; 2
    61bc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
			EF_void_I2C_Stop();
    61c0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>

			EF_void_I2C_Start();
    61c4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <EF_void_I2C_Start>
			EF_void_I2C_Write(Sensor_Read_ADD);
    61c8:	87 eb       	ldi	r24, 0xB7	; 183
    61ca:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <EF_void_I2C_Write>
			data1=EF_U8_I2C_Read_Byte(1);
    61ce:	81 e0       	ldi	r24, 0x01	; 1
    61d0:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    61d4:	fe 01       	movw	r30, r28
    61d6:	e6 5d       	subi	r30, 0xD6	; 214
    61d8:	fe 4f       	sbci	r31, 0xFE	; 254
    61da:	80 83       	st	Z, r24
			data2=EF_U8_I2C_Read_Byte(1);
    61dc:	81 e0       	ldi	r24, 0x01	; 1
    61de:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    61e2:	fe 01       	movw	r30, r28
    61e4:	e7 5d       	subi	r30, 0xD7	; 215
    61e6:	fe 4f       	sbci	r31, 0xFE	; 254
    61e8:	80 83       	st	Z, r24
			data3=EF_U8_I2C_Read_Byte(1);
    61ea:	81 e0       	ldi	r24, 0x01	; 1
    61ec:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    61f0:	fe 01       	movw	r30, r28
    61f2:	e8 5d       	subi	r30, 0xD8	; 216
    61f4:	fe 4f       	sbci	r31, 0xFE	; 254
    61f6:	80 83       	st	Z, r24
			data4=EF_U8_I2C_Read_Byte(1);
    61f8:	81 e0       	ldi	r24, 0x01	; 1
    61fa:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    61fe:	fe 01       	movw	r30, r28
    6200:	e9 5d       	subi	r30, 0xD9	; 217
    6202:	fe 4f       	sbci	r31, 0xFE	; 254
    6204:	80 83       	st	Z, r24
			Status=EF_U8_I2C_Read_Byte(0);
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <EF_U8_I2C_Read_Byte>
    620c:	fe 01       	movw	r30, r28
    620e:	ea 5d       	subi	r30, 0xDA	; 218
    6210:	fe 4f       	sbci	r31, 0xFE	; 254
    6212:	80 83       	st	Z, r24

			EF_void_I2C_Stop();
    6214:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EF_void_I2C_Stop>




			CO2=data1*256;
    6218:	fe 01       	movw	r30, r28
    621a:	e6 5d       	subi	r30, 0xD6	; 214
    621c:	fe 4f       	sbci	r31, 0xFE	; 254
    621e:	80 81       	ld	r24, Z
    6220:	88 2f       	mov	r24, r24
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	98 2f       	mov	r25, r24
    6226:	88 27       	eor	r24, r24
    6228:	fe 01       	movw	r30, r28
    622a:	ed 5d       	subi	r30, 0xDD	; 221
    622c:	fe 4f       	sbci	r31, 0xFE	; 254
    622e:	91 83       	std	Z+1, r25	; 0x01
    6230:	80 83       	st	Z, r24
			CO2+=data2;
    6232:	fe 01       	movw	r30, r28
    6234:	e7 5d       	subi	r30, 0xD7	; 215
    6236:	fe 4f       	sbci	r31, 0xFE	; 254
    6238:	80 81       	ld	r24, Z
    623a:	28 2f       	mov	r18, r24
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	de 01       	movw	r26, r28
    6240:	ad 5d       	subi	r26, 0xDD	; 221
    6242:	be 4f       	sbci	r27, 0xFE	; 254
    6244:	fe 01       	movw	r30, r28
    6246:	ed 5d       	subi	r30, 0xDD	; 221
    6248:	fe 4f       	sbci	r31, 0xFE	; 254
    624a:	80 81       	ld	r24, Z
    624c:	91 81       	ldd	r25, Z+1	; 0x01
    624e:	82 0f       	add	r24, r18
    6250:	93 1f       	adc	r25, r19
    6252:	8d 93       	st	X+, r24
    6254:	9c 93       	st	X, r25


			TVOC=data3*256;
    6256:	fe 01       	movw	r30, r28
    6258:	e8 5d       	subi	r30, 0xD8	; 216
    625a:	fe 4f       	sbci	r31, 0xFE	; 254
    625c:	80 81       	ld	r24, Z
    625e:	88 2f       	mov	r24, r24
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	98 2f       	mov	r25, r24
    6264:	88 27       	eor	r24, r24
    6266:	fe 01       	movw	r30, r28
    6268:	ef 5d       	subi	r30, 0xDF	; 223
    626a:	fe 4f       	sbci	r31, 0xFE	; 254
    626c:	91 83       	std	Z+1, r25	; 0x01
    626e:	80 83       	st	Z, r24
			TVOC+=data4;
    6270:	fe 01       	movw	r30, r28
    6272:	e9 5d       	subi	r30, 0xD9	; 217
    6274:	fe 4f       	sbci	r31, 0xFE	; 254
    6276:	80 81       	ld	r24, Z
    6278:	28 2f       	mov	r18, r24
    627a:	30 e0       	ldi	r19, 0x00	; 0
    627c:	de 01       	movw	r26, r28
    627e:	af 5d       	subi	r26, 0xDF	; 223
    6280:	be 4f       	sbci	r27, 0xFE	; 254
    6282:	fe 01       	movw	r30, r28
    6284:	ef 5d       	subi	r30, 0xDF	; 223
    6286:	fe 4f       	sbci	r31, 0xFE	; 254
    6288:	80 81       	ld	r24, Z
    628a:	91 81       	ldd	r25, Z+1	; 0x01
    628c:	82 0f       	add	r24, r18
    628e:	93 1f       	adc	r25, r19
    6290:	8d 93       	st	X+, r24
    6292:	9c 93       	st	X, r25


			EF_void_LCD_print((unsigned char*)"CO2 = ");
    6294:	84 e3       	ldi	r24, 0x34	; 52
    6296:	91 e0       	ldi	r25, 0x01	; 1
    6298:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
			EF_void_LCD_print_Number(CO2);
    629c:	fe 01       	movw	r30, r28
    629e:	ed 5d       	subi	r30, 0xDD	; 221
    62a0:	fe 4f       	sbci	r31, 0xFE	; 254
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <EF_void_LCD_print_Number>

			EF_void_LCD_Newline();
    62aa:	0e 94 d7 26 	call	0x4dae	; 0x4dae <EF_void_LCD_Newline>
			EF_void_LCD_print((unsigned char*)"TVOC = ");
    62ae:	8b e3       	ldi	r24, 0x3B	; 59
    62b0:	91 e0       	ldi	r25, 0x01	; 1
    62b2:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
			EF_void_LCD_print_Number(TVOC);
    62b6:	fe 01       	movw	r30, r28
    62b8:	ef 5d       	subi	r30, 0xDF	; 223
    62ba:	fe 4f       	sbci	r31, 0xFE	; 254
    62bc:	80 81       	ld	r24, Z
    62be:	91 81       	ldd	r25, Z+1	; 0x01
    62c0:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <EF_void_LCD_print_Number>
			EF_void_LCD_print((unsigned char*)"   i:");
    62c4:	83 e4       	ldi	r24, 0x43	; 67
    62c6:	91 e0       	ldi	r25, 0x01	; 1
    62c8:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
			EF_void_LCD_print_Number(i);
    62cc:	fe 01       	movw	r30, r28
    62ce:	e3 5e       	subi	r30, 0xE3	; 227
    62d0:	fe 4f       	sbci	r31, 0xFE	; 254
    62d2:	80 81       	ld	r24, Z
    62d4:	91 81       	ldd	r25, Z+1	; 0x01
    62d6:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <EF_void_LCD_print_Number>

			CO2_AVG+=CO2;
    62da:	fe 01       	movw	r30, r28
    62dc:	ed 5d       	subi	r30, 0xDD	; 221
    62de:	fe 4f       	sbci	r31, 0xFE	; 254
    62e0:	80 81       	ld	r24, Z
    62e2:	91 81       	ldd	r25, Z+1	; 0x01
    62e4:	9c 01       	movw	r18, r24
    62e6:	40 e0       	ldi	r20, 0x00	; 0
    62e8:	50 e0       	ldi	r21, 0x00	; 0
    62ea:	be 01       	movw	r22, r28
    62ec:	67 5e       	subi	r22, 0xE7	; 231
    62ee:	7e 4f       	sbci	r23, 0xFE	; 254
    62f0:	fe 01       	movw	r30, r28
    62f2:	e7 5e       	subi	r30, 0xE7	; 231
    62f4:	fe 4f       	sbci	r31, 0xFE	; 254
    62f6:	80 81       	ld	r24, Z
    62f8:	91 81       	ldd	r25, Z+1	; 0x01
    62fa:	a2 81       	ldd	r26, Z+2	; 0x02
    62fc:	b3 81       	ldd	r27, Z+3	; 0x03
    62fe:	82 0f       	add	r24, r18
    6300:	93 1f       	adc	r25, r19
    6302:	a4 1f       	adc	r26, r20
    6304:	b5 1f       	adc	r27, r21
    6306:	fb 01       	movw	r30, r22
    6308:	80 83       	st	Z, r24
    630a:	91 83       	std	Z+1, r25	; 0x01
    630c:	a2 83       	std	Z+2, r26	; 0x02
    630e:	b3 83       	std	Z+3, r27	; 0x03
			i++;
    6310:	9e 01       	movw	r18, r28
    6312:	23 5e       	subi	r18, 0xE3	; 227
    6314:	3e 4f       	sbci	r19, 0xFE	; 254
    6316:	fe 01       	movw	r30, r28
    6318:	e3 5e       	subi	r30, 0xE3	; 227
    631a:	fe 4f       	sbci	r31, 0xFE	; 254
    631c:	80 81       	ld	r24, Z
    631e:	91 81       	ldd	r25, Z+1	; 0x01
    6320:	a2 81       	ldd	r26, Z+2	; 0x02
    6322:	b3 81       	ldd	r27, Z+3	; 0x03
    6324:	01 96       	adiw	r24, 0x01	; 1
    6326:	a1 1d       	adc	r26, r1
    6328:	b1 1d       	adc	r27, r1
    632a:	f9 01       	movw	r30, r18
    632c:	80 83       	st	Z, r24
    632e:	91 83       	std	Z+1, r25	; 0x01
    6330:	a2 83       	std	Z+2, r26	; 0x02
    6332:	b3 83       	std	Z+3, r27	; 0x03

			if((i%90==0)&&(First_Reading==FALSE))
    6334:	fe 01       	movw	r30, r28
    6336:	e3 5e       	subi	r30, 0xE3	; 227
    6338:	fe 4f       	sbci	r31, 0xFE	; 254
    633a:	80 81       	ld	r24, Z
    633c:	91 81       	ldd	r25, Z+1	; 0x01
    633e:	a2 81       	ldd	r26, Z+2	; 0x02
    6340:	b3 81       	ldd	r27, Z+3	; 0x03
    6342:	2a e5       	ldi	r18, 0x5A	; 90
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	40 e0       	ldi	r20, 0x00	; 0
    6348:	50 e0       	ldi	r21, 0x00	; 0
    634a:	bc 01       	movw	r22, r24
    634c:	cd 01       	movw	r24, r26
    634e:	0e 94 4b 38 	call	0x7096	; 0x7096 <__udivmodsi4>
    6352:	dc 01       	movw	r26, r24
    6354:	cb 01       	movw	r24, r22
    6356:	00 97       	sbiw	r24, 0x00	; 0
    6358:	a1 05       	cpc	r26, r1
    635a:	b1 05       	cpc	r27, r1
    635c:	09 f0       	breq	.+2      	; 0x6360 <init_fun+0x141c>
    635e:	5e c4       	rjmp	.+2236   	; 0x6c1c <init_fun+0x1cd8>
    6360:	fe 01       	movw	r30, r28
    6362:	eb 5d       	subi	r30, 0xDB	; 219
    6364:	fe 4f       	sbci	r31, 0xFE	; 254
    6366:	80 81       	ld	r24, Z
    6368:	88 23       	and	r24, r24
    636a:	09 f0       	breq	.+2      	; 0x636e <init_fun+0x142a>
    636c:	57 c4       	rjmp	.+2222   	; 0x6c1c <init_fun+0x1cd8>
			{
				EF_void_UART_SendString((U8_t *)"AT+CWJAP_DEF=\"ahmed\",\"135792468\"\r\n");
    636e:	8b ef       	ldi	r24, 0xFB	; 251
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
				EF_void_LCD_Clear_Screen();
    6376:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
				EF_void_LCD_print((unsigned char*)"Connect to Wifi");
    637a:	8e e1       	ldi	r24, 0x1E	; 30
    637c:	91 e0       	ldi	r25, 0x01	; 1
    637e:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    6382:	fe 01       	movw	r30, r28
    6384:	e3 59       	subi	r30, 0x93	; 147
    6386:	ff 4f       	sbci	r31, 0xFF	; 255
    6388:	80 e0       	ldi	r24, 0x00	; 0
    638a:	90 e8       	ldi	r25, 0x80	; 128
    638c:	ab e3       	ldi	r26, 0x3B	; 59
    638e:	b5 e4       	ldi	r27, 0x45	; 69
    6390:	80 83       	st	Z, r24
    6392:	91 83       	std	Z+1, r25	; 0x01
    6394:	a2 83       	std	Z+2, r26	; 0x02
    6396:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6398:	8e 01       	movw	r16, r28
    639a:	07 59       	subi	r16, 0x97	; 151
    639c:	1f 4f       	sbci	r17, 0xFF	; 255
    639e:	fe 01       	movw	r30, r28
    63a0:	e3 59       	subi	r30, 0x93	; 147
    63a2:	ff 4f       	sbci	r31, 0xFF	; 255
    63a4:	60 81       	ld	r22, Z
    63a6:	71 81       	ldd	r23, Z+1	; 0x01
    63a8:	82 81       	ldd	r24, Z+2	; 0x02
    63aa:	93 81       	ldd	r25, Z+3	; 0x03
    63ac:	20 e0       	ldi	r18, 0x00	; 0
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	4a ef       	ldi	r20, 0xFA	; 250
    63b2:	54 e4       	ldi	r21, 0x44	; 68
    63b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63b8:	dc 01       	movw	r26, r24
    63ba:	cb 01       	movw	r24, r22
    63bc:	f8 01       	movw	r30, r16
    63be:	80 83       	st	Z, r24
    63c0:	91 83       	std	Z+1, r25	; 0x01
    63c2:	a2 83       	std	Z+2, r26	; 0x02
    63c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63c6:	fe 01       	movw	r30, r28
    63c8:	e7 59       	subi	r30, 0x97	; 151
    63ca:	ff 4f       	sbci	r31, 0xFF	; 255
    63cc:	60 81       	ld	r22, Z
    63ce:	71 81       	ldd	r23, Z+1	; 0x01
    63d0:	82 81       	ldd	r24, Z+2	; 0x02
    63d2:	93 81       	ldd	r25, Z+3	; 0x03
    63d4:	20 e0       	ldi	r18, 0x00	; 0
    63d6:	30 e0       	ldi	r19, 0x00	; 0
    63d8:	40 e8       	ldi	r20, 0x80	; 128
    63da:	5f e3       	ldi	r21, 0x3F	; 63
    63dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63e0:	88 23       	and	r24, r24
    63e2:	44 f4       	brge	.+16     	; 0x63f4 <init_fun+0x14b0>
		__ticks = 1;
    63e4:	fe 01       	movw	r30, r28
    63e6:	e9 59       	subi	r30, 0x99	; 153
    63e8:	ff 4f       	sbci	r31, 0xFF	; 255
    63ea:	81 e0       	ldi	r24, 0x01	; 1
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	91 83       	std	Z+1, r25	; 0x01
    63f0:	80 83       	st	Z, r24
    63f2:	64 c0       	rjmp	.+200    	; 0x64bc <init_fun+0x1578>
	else if (__tmp > 65535)
    63f4:	fe 01       	movw	r30, r28
    63f6:	e7 59       	subi	r30, 0x97	; 151
    63f8:	ff 4f       	sbci	r31, 0xFF	; 255
    63fa:	60 81       	ld	r22, Z
    63fc:	71 81       	ldd	r23, Z+1	; 0x01
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	93 81       	ldd	r25, Z+3	; 0x03
    6402:	20 e0       	ldi	r18, 0x00	; 0
    6404:	3f ef       	ldi	r19, 0xFF	; 255
    6406:	4f e7       	ldi	r20, 0x7F	; 127
    6408:	57 e4       	ldi	r21, 0x47	; 71
    640a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    640e:	18 16       	cp	r1, r24
    6410:	0c f0       	brlt	.+2      	; 0x6414 <init_fun+0x14d0>
    6412:	43 c0       	rjmp	.+134    	; 0x649a <init_fun+0x1556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6414:	fe 01       	movw	r30, r28
    6416:	e3 59       	subi	r30, 0x93	; 147
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	60 81       	ld	r22, Z
    641c:	71 81       	ldd	r23, Z+1	; 0x01
    641e:	82 81       	ldd	r24, Z+2	; 0x02
    6420:	93 81       	ldd	r25, Z+3	; 0x03
    6422:	20 e0       	ldi	r18, 0x00	; 0
    6424:	30 e0       	ldi	r19, 0x00	; 0
    6426:	40 e2       	ldi	r20, 0x20	; 32
    6428:	51 e4       	ldi	r21, 0x41	; 65
    642a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    642e:	dc 01       	movw	r26, r24
    6430:	cb 01       	movw	r24, r22
    6432:	8e 01       	movw	r16, r28
    6434:	09 59       	subi	r16, 0x99	; 153
    6436:	1f 4f       	sbci	r17, 0xFF	; 255
    6438:	bc 01       	movw	r22, r24
    643a:	cd 01       	movw	r24, r26
    643c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6440:	dc 01       	movw	r26, r24
    6442:	cb 01       	movw	r24, r22
    6444:	f8 01       	movw	r30, r16
    6446:	91 83       	std	Z+1, r25	; 0x01
    6448:	80 83       	st	Z, r24
    644a:	1f c0       	rjmp	.+62     	; 0x648a <init_fun+0x1546>
    644c:	fe 01       	movw	r30, r28
    644e:	eb 59       	subi	r30, 0x9B	; 155
    6450:	ff 4f       	sbci	r31, 0xFF	; 255
    6452:	88 ec       	ldi	r24, 0xC8	; 200
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	91 83       	std	Z+1, r25	; 0x01
    6458:	80 83       	st	Z, r24
    645a:	fe 01       	movw	r30, r28
    645c:	eb 59       	subi	r30, 0x9B	; 155
    645e:	ff 4f       	sbci	r31, 0xFF	; 255
    6460:	80 81       	ld	r24, Z
    6462:	91 81       	ldd	r25, Z+1	; 0x01
    6464:	01 97       	sbiw	r24, 0x01	; 1
    6466:	f1 f7       	brne	.-4      	; 0x6464 <init_fun+0x1520>
    6468:	fe 01       	movw	r30, r28
    646a:	eb 59       	subi	r30, 0x9B	; 155
    646c:	ff 4f       	sbci	r31, 0xFF	; 255
    646e:	91 83       	std	Z+1, r25	; 0x01
    6470:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6472:	de 01       	movw	r26, r28
    6474:	a9 59       	subi	r26, 0x99	; 153
    6476:	bf 4f       	sbci	r27, 0xFF	; 255
    6478:	fe 01       	movw	r30, r28
    647a:	e9 59       	subi	r30, 0x99	; 153
    647c:	ff 4f       	sbci	r31, 0xFF	; 255
    647e:	80 81       	ld	r24, Z
    6480:	91 81       	ldd	r25, Z+1	; 0x01
    6482:	01 97       	sbiw	r24, 0x01	; 1
    6484:	11 96       	adiw	r26, 0x01	; 1
    6486:	9c 93       	st	X, r25
    6488:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    648a:	fe 01       	movw	r30, r28
    648c:	e9 59       	subi	r30, 0x99	; 153
    648e:	ff 4f       	sbci	r31, 0xFF	; 255
    6490:	80 81       	ld	r24, Z
    6492:	91 81       	ldd	r25, Z+1	; 0x01
    6494:	00 97       	sbiw	r24, 0x00	; 0
    6496:	d1 f6       	brne	.-76     	; 0x644c <init_fun+0x1508>
    6498:	27 c0       	rjmp	.+78     	; 0x64e8 <init_fun+0x15a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    649a:	8e 01       	movw	r16, r28
    649c:	09 59       	subi	r16, 0x99	; 153
    649e:	1f 4f       	sbci	r17, 0xFF	; 255
    64a0:	fe 01       	movw	r30, r28
    64a2:	e7 59       	subi	r30, 0x97	; 151
    64a4:	ff 4f       	sbci	r31, 0xFF	; 255
    64a6:	60 81       	ld	r22, Z
    64a8:	71 81       	ldd	r23, Z+1	; 0x01
    64aa:	82 81       	ldd	r24, Z+2	; 0x02
    64ac:	93 81       	ldd	r25, Z+3	; 0x03
    64ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64b2:	dc 01       	movw	r26, r24
    64b4:	cb 01       	movw	r24, r22
    64b6:	f8 01       	movw	r30, r16
    64b8:	91 83       	std	Z+1, r25	; 0x01
    64ba:	80 83       	st	Z, r24
    64bc:	de 01       	movw	r26, r28
    64be:	ad 59       	subi	r26, 0x9D	; 157
    64c0:	bf 4f       	sbci	r27, 0xFF	; 255
    64c2:	fe 01       	movw	r30, r28
    64c4:	e9 59       	subi	r30, 0x99	; 153
    64c6:	ff 4f       	sbci	r31, 0xFF	; 255
    64c8:	80 81       	ld	r24, Z
    64ca:	91 81       	ldd	r25, Z+1	; 0x01
    64cc:	8d 93       	st	X+, r24
    64ce:	9c 93       	st	X, r25
    64d0:	fe 01       	movw	r30, r28
    64d2:	ed 59       	subi	r30, 0x9D	; 157
    64d4:	ff 4f       	sbci	r31, 0xFF	; 255
    64d6:	80 81       	ld	r24, Z
    64d8:	91 81       	ldd	r25, Z+1	; 0x01
    64da:	01 97       	sbiw	r24, 0x01	; 1
    64dc:	f1 f7       	brne	.-4      	; 0x64da <init_fun+0x1596>
    64de:	fe 01       	movw	r30, r28
    64e0:	ed 59       	subi	r30, 0x9D	; 157
    64e2:	ff 4f       	sbci	r31, 0xFF	; 255
    64e4:	91 83       	std	Z+1, r25	; 0x01
    64e6:	80 83       	st	Z, r24
    64e8:	fe 01       	movw	r30, r28
    64ea:	e1 5a       	subi	r30, 0xA1	; 161
    64ec:	ff 4f       	sbci	r31, 0xFF	; 255
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	90 e8       	ldi	r25, 0x80	; 128
    64f2:	ab e3       	ldi	r26, 0x3B	; 59
    64f4:	b5 e4       	ldi	r27, 0x45	; 69
    64f6:	80 83       	st	Z, r24
    64f8:	91 83       	std	Z+1, r25	; 0x01
    64fa:	a2 83       	std	Z+2, r26	; 0x02
    64fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64fe:	8e 01       	movw	r16, r28
    6500:	05 5a       	subi	r16, 0xA5	; 165
    6502:	1f 4f       	sbci	r17, 0xFF	; 255
    6504:	fe 01       	movw	r30, r28
    6506:	e1 5a       	subi	r30, 0xA1	; 161
    6508:	ff 4f       	sbci	r31, 0xFF	; 255
    650a:	60 81       	ld	r22, Z
    650c:	71 81       	ldd	r23, Z+1	; 0x01
    650e:	82 81       	ldd	r24, Z+2	; 0x02
    6510:	93 81       	ldd	r25, Z+3	; 0x03
    6512:	20 e0       	ldi	r18, 0x00	; 0
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	4a ef       	ldi	r20, 0xFA	; 250
    6518:	54 e4       	ldi	r21, 0x44	; 68
    651a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    651e:	dc 01       	movw	r26, r24
    6520:	cb 01       	movw	r24, r22
    6522:	f8 01       	movw	r30, r16
    6524:	80 83       	st	Z, r24
    6526:	91 83       	std	Z+1, r25	; 0x01
    6528:	a2 83       	std	Z+2, r26	; 0x02
    652a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    652c:	fe 01       	movw	r30, r28
    652e:	e5 5a       	subi	r30, 0xA5	; 165
    6530:	ff 4f       	sbci	r31, 0xFF	; 255
    6532:	60 81       	ld	r22, Z
    6534:	71 81       	ldd	r23, Z+1	; 0x01
    6536:	82 81       	ldd	r24, Z+2	; 0x02
    6538:	93 81       	ldd	r25, Z+3	; 0x03
    653a:	20 e0       	ldi	r18, 0x00	; 0
    653c:	30 e0       	ldi	r19, 0x00	; 0
    653e:	40 e8       	ldi	r20, 0x80	; 128
    6540:	5f e3       	ldi	r21, 0x3F	; 63
    6542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6546:	88 23       	and	r24, r24
    6548:	44 f4       	brge	.+16     	; 0x655a <init_fun+0x1616>
		__ticks = 1;
    654a:	fe 01       	movw	r30, r28
    654c:	e7 5a       	subi	r30, 0xA7	; 167
    654e:	ff 4f       	sbci	r31, 0xFF	; 255
    6550:	81 e0       	ldi	r24, 0x01	; 1
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	91 83       	std	Z+1, r25	; 0x01
    6556:	80 83       	st	Z, r24
    6558:	64 c0       	rjmp	.+200    	; 0x6622 <init_fun+0x16de>
	else if (__tmp > 65535)
    655a:	fe 01       	movw	r30, r28
    655c:	e5 5a       	subi	r30, 0xA5	; 165
    655e:	ff 4f       	sbci	r31, 0xFF	; 255
    6560:	60 81       	ld	r22, Z
    6562:	71 81       	ldd	r23, Z+1	; 0x01
    6564:	82 81       	ldd	r24, Z+2	; 0x02
    6566:	93 81       	ldd	r25, Z+3	; 0x03
    6568:	20 e0       	ldi	r18, 0x00	; 0
    656a:	3f ef       	ldi	r19, 0xFF	; 255
    656c:	4f e7       	ldi	r20, 0x7F	; 127
    656e:	57 e4       	ldi	r21, 0x47	; 71
    6570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6574:	18 16       	cp	r1, r24
    6576:	0c f0       	brlt	.+2      	; 0x657a <init_fun+0x1636>
    6578:	43 c0       	rjmp	.+134    	; 0x6600 <init_fun+0x16bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    657a:	fe 01       	movw	r30, r28
    657c:	e1 5a       	subi	r30, 0xA1	; 161
    657e:	ff 4f       	sbci	r31, 0xFF	; 255
    6580:	60 81       	ld	r22, Z
    6582:	71 81       	ldd	r23, Z+1	; 0x01
    6584:	82 81       	ldd	r24, Z+2	; 0x02
    6586:	93 81       	ldd	r25, Z+3	; 0x03
    6588:	20 e0       	ldi	r18, 0x00	; 0
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	40 e2       	ldi	r20, 0x20	; 32
    658e:	51 e4       	ldi	r21, 0x41	; 65
    6590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6594:	dc 01       	movw	r26, r24
    6596:	cb 01       	movw	r24, r22
    6598:	8e 01       	movw	r16, r28
    659a:	07 5a       	subi	r16, 0xA7	; 167
    659c:	1f 4f       	sbci	r17, 0xFF	; 255
    659e:	bc 01       	movw	r22, r24
    65a0:	cd 01       	movw	r24, r26
    65a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65a6:	dc 01       	movw	r26, r24
    65a8:	cb 01       	movw	r24, r22
    65aa:	f8 01       	movw	r30, r16
    65ac:	91 83       	std	Z+1, r25	; 0x01
    65ae:	80 83       	st	Z, r24
    65b0:	1f c0       	rjmp	.+62     	; 0x65f0 <init_fun+0x16ac>
    65b2:	fe 01       	movw	r30, r28
    65b4:	e9 5a       	subi	r30, 0xA9	; 169
    65b6:	ff 4f       	sbci	r31, 0xFF	; 255
    65b8:	88 ec       	ldi	r24, 0xC8	; 200
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	91 83       	std	Z+1, r25	; 0x01
    65be:	80 83       	st	Z, r24
    65c0:	fe 01       	movw	r30, r28
    65c2:	e9 5a       	subi	r30, 0xA9	; 169
    65c4:	ff 4f       	sbci	r31, 0xFF	; 255
    65c6:	80 81       	ld	r24, Z
    65c8:	91 81       	ldd	r25, Z+1	; 0x01
    65ca:	01 97       	sbiw	r24, 0x01	; 1
    65cc:	f1 f7       	brne	.-4      	; 0x65ca <init_fun+0x1686>
    65ce:	fe 01       	movw	r30, r28
    65d0:	e9 5a       	subi	r30, 0xA9	; 169
    65d2:	ff 4f       	sbci	r31, 0xFF	; 255
    65d4:	91 83       	std	Z+1, r25	; 0x01
    65d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65d8:	de 01       	movw	r26, r28
    65da:	a7 5a       	subi	r26, 0xA7	; 167
    65dc:	bf 4f       	sbci	r27, 0xFF	; 255
    65de:	fe 01       	movw	r30, r28
    65e0:	e7 5a       	subi	r30, 0xA7	; 167
    65e2:	ff 4f       	sbci	r31, 0xFF	; 255
    65e4:	80 81       	ld	r24, Z
    65e6:	91 81       	ldd	r25, Z+1	; 0x01
    65e8:	01 97       	sbiw	r24, 0x01	; 1
    65ea:	11 96       	adiw	r26, 0x01	; 1
    65ec:	9c 93       	st	X, r25
    65ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65f0:	fe 01       	movw	r30, r28
    65f2:	e7 5a       	subi	r30, 0xA7	; 167
    65f4:	ff 4f       	sbci	r31, 0xFF	; 255
    65f6:	80 81       	ld	r24, Z
    65f8:	91 81       	ldd	r25, Z+1	; 0x01
    65fa:	00 97       	sbiw	r24, 0x00	; 0
    65fc:	d1 f6       	brne	.-76     	; 0x65b2 <init_fun+0x166e>
    65fe:	27 c0       	rjmp	.+78     	; 0x664e <init_fun+0x170a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6600:	8e 01       	movw	r16, r28
    6602:	07 5a       	subi	r16, 0xA7	; 167
    6604:	1f 4f       	sbci	r17, 0xFF	; 255
    6606:	fe 01       	movw	r30, r28
    6608:	e5 5a       	subi	r30, 0xA5	; 165
    660a:	ff 4f       	sbci	r31, 0xFF	; 255
    660c:	60 81       	ld	r22, Z
    660e:	71 81       	ldd	r23, Z+1	; 0x01
    6610:	82 81       	ldd	r24, Z+2	; 0x02
    6612:	93 81       	ldd	r25, Z+3	; 0x03
    6614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	f8 01       	movw	r30, r16
    661e:	91 83       	std	Z+1, r25	; 0x01
    6620:	80 83       	st	Z, r24
    6622:	de 01       	movw	r26, r28
    6624:	ab 5a       	subi	r26, 0xAB	; 171
    6626:	bf 4f       	sbci	r27, 0xFF	; 255
    6628:	fe 01       	movw	r30, r28
    662a:	e7 5a       	subi	r30, 0xA7	; 167
    662c:	ff 4f       	sbci	r31, 0xFF	; 255
    662e:	80 81       	ld	r24, Z
    6630:	91 81       	ldd	r25, Z+1	; 0x01
    6632:	8d 93       	st	X+, r24
    6634:	9c 93       	st	X, r25
    6636:	fe 01       	movw	r30, r28
    6638:	eb 5a       	subi	r30, 0xAB	; 171
    663a:	ff 4f       	sbci	r31, 0xFF	; 255
    663c:	80 81       	ld	r24, Z
    663e:	91 81       	ldd	r25, Z+1	; 0x01
    6640:	01 97       	sbiw	r24, 0x01	; 1
    6642:	f1 f7       	brne	.-4      	; 0x6640 <init_fun+0x16fc>
    6644:	fe 01       	movw	r30, r28
    6646:	eb 5a       	subi	r30, 0xAB	; 171
    6648:	ff 4f       	sbci	r31, 0xFF	; 255
    664a:	91 83       	std	Z+1, r25	; 0x01
    664c:	80 83       	st	Z, r24
    664e:	fe 01       	movw	r30, r28
    6650:	ef 5a       	subi	r30, 0xAF	; 175
    6652:	ff 4f       	sbci	r31, 0xFF	; 255
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	90 e8       	ldi	r25, 0x80	; 128
    6658:	ab e3       	ldi	r26, 0x3B	; 59
    665a:	b5 e4       	ldi	r27, 0x45	; 69
    665c:	80 83       	st	Z, r24
    665e:	91 83       	std	Z+1, r25	; 0x01
    6660:	a2 83       	std	Z+2, r26	; 0x02
    6662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6664:	8e 01       	movw	r16, r28
    6666:	03 5b       	subi	r16, 0xB3	; 179
    6668:	1f 4f       	sbci	r17, 0xFF	; 255
    666a:	fe 01       	movw	r30, r28
    666c:	ef 5a       	subi	r30, 0xAF	; 175
    666e:	ff 4f       	sbci	r31, 0xFF	; 255
    6670:	60 81       	ld	r22, Z
    6672:	71 81       	ldd	r23, Z+1	; 0x01
    6674:	82 81       	ldd	r24, Z+2	; 0x02
    6676:	93 81       	ldd	r25, Z+3	; 0x03
    6678:	20 e0       	ldi	r18, 0x00	; 0
    667a:	30 e0       	ldi	r19, 0x00	; 0
    667c:	4a ef       	ldi	r20, 0xFA	; 250
    667e:	54 e4       	ldi	r21, 0x44	; 68
    6680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6684:	dc 01       	movw	r26, r24
    6686:	cb 01       	movw	r24, r22
    6688:	f8 01       	movw	r30, r16
    668a:	80 83       	st	Z, r24
    668c:	91 83       	std	Z+1, r25	; 0x01
    668e:	a2 83       	std	Z+2, r26	; 0x02
    6690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6692:	fe 01       	movw	r30, r28
    6694:	e3 5b       	subi	r30, 0xB3	; 179
    6696:	ff 4f       	sbci	r31, 0xFF	; 255
    6698:	60 81       	ld	r22, Z
    669a:	71 81       	ldd	r23, Z+1	; 0x01
    669c:	82 81       	ldd	r24, Z+2	; 0x02
    669e:	93 81       	ldd	r25, Z+3	; 0x03
    66a0:	20 e0       	ldi	r18, 0x00	; 0
    66a2:	30 e0       	ldi	r19, 0x00	; 0
    66a4:	40 e8       	ldi	r20, 0x80	; 128
    66a6:	5f e3       	ldi	r21, 0x3F	; 63
    66a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66ac:	88 23       	and	r24, r24
    66ae:	44 f4       	brge	.+16     	; 0x66c0 <init_fun+0x177c>
		__ticks = 1;
    66b0:	fe 01       	movw	r30, r28
    66b2:	e5 5b       	subi	r30, 0xB5	; 181
    66b4:	ff 4f       	sbci	r31, 0xFF	; 255
    66b6:	81 e0       	ldi	r24, 0x01	; 1
    66b8:	90 e0       	ldi	r25, 0x00	; 0
    66ba:	91 83       	std	Z+1, r25	; 0x01
    66bc:	80 83       	st	Z, r24
    66be:	64 c0       	rjmp	.+200    	; 0x6788 <init_fun+0x1844>
	else if (__tmp > 65535)
    66c0:	fe 01       	movw	r30, r28
    66c2:	e3 5b       	subi	r30, 0xB3	; 179
    66c4:	ff 4f       	sbci	r31, 0xFF	; 255
    66c6:	60 81       	ld	r22, Z
    66c8:	71 81       	ldd	r23, Z+1	; 0x01
    66ca:	82 81       	ldd	r24, Z+2	; 0x02
    66cc:	93 81       	ldd	r25, Z+3	; 0x03
    66ce:	20 e0       	ldi	r18, 0x00	; 0
    66d0:	3f ef       	ldi	r19, 0xFF	; 255
    66d2:	4f e7       	ldi	r20, 0x7F	; 127
    66d4:	57 e4       	ldi	r21, 0x47	; 71
    66d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66da:	18 16       	cp	r1, r24
    66dc:	0c f0       	brlt	.+2      	; 0x66e0 <init_fun+0x179c>
    66de:	43 c0       	rjmp	.+134    	; 0x6766 <init_fun+0x1822>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66e0:	fe 01       	movw	r30, r28
    66e2:	ef 5a       	subi	r30, 0xAF	; 175
    66e4:	ff 4f       	sbci	r31, 0xFF	; 255
    66e6:	60 81       	ld	r22, Z
    66e8:	71 81       	ldd	r23, Z+1	; 0x01
    66ea:	82 81       	ldd	r24, Z+2	; 0x02
    66ec:	93 81       	ldd	r25, Z+3	; 0x03
    66ee:	20 e0       	ldi	r18, 0x00	; 0
    66f0:	30 e0       	ldi	r19, 0x00	; 0
    66f2:	40 e2       	ldi	r20, 0x20	; 32
    66f4:	51 e4       	ldi	r21, 0x41	; 65
    66f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66fa:	dc 01       	movw	r26, r24
    66fc:	cb 01       	movw	r24, r22
    66fe:	8e 01       	movw	r16, r28
    6700:	05 5b       	subi	r16, 0xB5	; 181
    6702:	1f 4f       	sbci	r17, 0xFF	; 255
    6704:	bc 01       	movw	r22, r24
    6706:	cd 01       	movw	r24, r26
    6708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    670c:	dc 01       	movw	r26, r24
    670e:	cb 01       	movw	r24, r22
    6710:	f8 01       	movw	r30, r16
    6712:	91 83       	std	Z+1, r25	; 0x01
    6714:	80 83       	st	Z, r24
    6716:	1f c0       	rjmp	.+62     	; 0x6756 <init_fun+0x1812>
    6718:	fe 01       	movw	r30, r28
    671a:	e7 5b       	subi	r30, 0xB7	; 183
    671c:	ff 4f       	sbci	r31, 0xFF	; 255
    671e:	88 ec       	ldi	r24, 0xC8	; 200
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	91 83       	std	Z+1, r25	; 0x01
    6724:	80 83       	st	Z, r24
    6726:	fe 01       	movw	r30, r28
    6728:	e7 5b       	subi	r30, 0xB7	; 183
    672a:	ff 4f       	sbci	r31, 0xFF	; 255
    672c:	80 81       	ld	r24, Z
    672e:	91 81       	ldd	r25, Z+1	; 0x01
    6730:	01 97       	sbiw	r24, 0x01	; 1
    6732:	f1 f7       	brne	.-4      	; 0x6730 <init_fun+0x17ec>
    6734:	fe 01       	movw	r30, r28
    6736:	e7 5b       	subi	r30, 0xB7	; 183
    6738:	ff 4f       	sbci	r31, 0xFF	; 255
    673a:	91 83       	std	Z+1, r25	; 0x01
    673c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    673e:	de 01       	movw	r26, r28
    6740:	a5 5b       	subi	r26, 0xB5	; 181
    6742:	bf 4f       	sbci	r27, 0xFF	; 255
    6744:	fe 01       	movw	r30, r28
    6746:	e5 5b       	subi	r30, 0xB5	; 181
    6748:	ff 4f       	sbci	r31, 0xFF	; 255
    674a:	80 81       	ld	r24, Z
    674c:	91 81       	ldd	r25, Z+1	; 0x01
    674e:	01 97       	sbiw	r24, 0x01	; 1
    6750:	11 96       	adiw	r26, 0x01	; 1
    6752:	9c 93       	st	X, r25
    6754:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6756:	fe 01       	movw	r30, r28
    6758:	e5 5b       	subi	r30, 0xB5	; 181
    675a:	ff 4f       	sbci	r31, 0xFF	; 255
    675c:	80 81       	ld	r24, Z
    675e:	91 81       	ldd	r25, Z+1	; 0x01
    6760:	00 97       	sbiw	r24, 0x00	; 0
    6762:	d1 f6       	brne	.-76     	; 0x6718 <init_fun+0x17d4>
    6764:	27 c0       	rjmp	.+78     	; 0x67b4 <init_fun+0x1870>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6766:	8e 01       	movw	r16, r28
    6768:	05 5b       	subi	r16, 0xB5	; 181
    676a:	1f 4f       	sbci	r17, 0xFF	; 255
    676c:	fe 01       	movw	r30, r28
    676e:	e3 5b       	subi	r30, 0xB3	; 179
    6770:	ff 4f       	sbci	r31, 0xFF	; 255
    6772:	60 81       	ld	r22, Z
    6774:	71 81       	ldd	r23, Z+1	; 0x01
    6776:	82 81       	ldd	r24, Z+2	; 0x02
    6778:	93 81       	ldd	r25, Z+3	; 0x03
    677a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    677e:	dc 01       	movw	r26, r24
    6780:	cb 01       	movw	r24, r22
    6782:	f8 01       	movw	r30, r16
    6784:	91 83       	std	Z+1, r25	; 0x01
    6786:	80 83       	st	Z, r24
    6788:	de 01       	movw	r26, r28
    678a:	a9 5b       	subi	r26, 0xB9	; 185
    678c:	bf 4f       	sbci	r27, 0xFF	; 255
    678e:	fe 01       	movw	r30, r28
    6790:	e5 5b       	subi	r30, 0xB5	; 181
    6792:	ff 4f       	sbci	r31, 0xFF	; 255
    6794:	80 81       	ld	r24, Z
    6796:	91 81       	ldd	r25, Z+1	; 0x01
    6798:	8d 93       	st	X+, r24
    679a:	9c 93       	st	X, r25
    679c:	fe 01       	movw	r30, r28
    679e:	e9 5b       	subi	r30, 0xB9	; 185
    67a0:	ff 4f       	sbci	r31, 0xFF	; 255
    67a2:	80 81       	ld	r24, Z
    67a4:	91 81       	ldd	r25, Z+1	; 0x01
    67a6:	01 97       	sbiw	r24, 0x01	; 1
    67a8:	f1 f7       	brne	.-4      	; 0x67a6 <init_fun+0x1862>
    67aa:	fe 01       	movw	r30, r28
    67ac:	e9 5b       	subi	r30, 0xB9	; 185
    67ae:	ff 4f       	sbci	r31, 0xFF	; 255
    67b0:	91 83       	std	Z+1, r25	; 0x01
    67b2:	80 83       	st	Z, r24
    67b4:	fe 01       	movw	r30, r28
    67b6:	ed 5b       	subi	r30, 0xBD	; 189
    67b8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ba:	80 e0       	ldi	r24, 0x00	; 0
    67bc:	90 e8       	ldi	r25, 0x80	; 128
    67be:	ab e3       	ldi	r26, 0x3B	; 59
    67c0:	b5 e4       	ldi	r27, 0x45	; 69
    67c2:	80 83       	st	Z, r24
    67c4:	91 83       	std	Z+1, r25	; 0x01
    67c6:	a2 83       	std	Z+2, r26	; 0x02
    67c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67ca:	8e 01       	movw	r16, r28
    67cc:	01 5c       	subi	r16, 0xC1	; 193
    67ce:	1f 4f       	sbci	r17, 0xFF	; 255
    67d0:	fe 01       	movw	r30, r28
    67d2:	ed 5b       	subi	r30, 0xBD	; 189
    67d4:	ff 4f       	sbci	r31, 0xFF	; 255
    67d6:	60 81       	ld	r22, Z
    67d8:	71 81       	ldd	r23, Z+1	; 0x01
    67da:	82 81       	ldd	r24, Z+2	; 0x02
    67dc:	93 81       	ldd	r25, Z+3	; 0x03
    67de:	20 e0       	ldi	r18, 0x00	; 0
    67e0:	30 e0       	ldi	r19, 0x00	; 0
    67e2:	4a ef       	ldi	r20, 0xFA	; 250
    67e4:	54 e4       	ldi	r21, 0x44	; 68
    67e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67ea:	dc 01       	movw	r26, r24
    67ec:	cb 01       	movw	r24, r22
    67ee:	f8 01       	movw	r30, r16
    67f0:	80 83       	st	Z, r24
    67f2:	91 83       	std	Z+1, r25	; 0x01
    67f4:	a2 83       	std	Z+2, r26	; 0x02
    67f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67f8:	fe 01       	movw	r30, r28
    67fa:	ff 96       	adiw	r30, 0x3f	; 63
    67fc:	60 81       	ld	r22, Z
    67fe:	71 81       	ldd	r23, Z+1	; 0x01
    6800:	82 81       	ldd	r24, Z+2	; 0x02
    6802:	93 81       	ldd	r25, Z+3	; 0x03
    6804:	20 e0       	ldi	r18, 0x00	; 0
    6806:	30 e0       	ldi	r19, 0x00	; 0
    6808:	40 e8       	ldi	r20, 0x80	; 128
    680a:	5f e3       	ldi	r21, 0x3F	; 63
    680c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6810:	88 23       	and	r24, r24
    6812:	2c f4       	brge	.+10     	; 0x681e <init_fun+0x18da>
		__ticks = 1;
    6814:	81 e0       	ldi	r24, 0x01	; 1
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	9e af       	std	Y+62, r25	; 0x3e
    681a:	8d af       	std	Y+61, r24	; 0x3d
    681c:	46 c0       	rjmp	.+140    	; 0x68aa <init_fun+0x1966>
	else if (__tmp > 65535)
    681e:	fe 01       	movw	r30, r28
    6820:	ff 96       	adiw	r30, 0x3f	; 63
    6822:	60 81       	ld	r22, Z
    6824:	71 81       	ldd	r23, Z+1	; 0x01
    6826:	82 81       	ldd	r24, Z+2	; 0x02
    6828:	93 81       	ldd	r25, Z+3	; 0x03
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	3f ef       	ldi	r19, 0xFF	; 255
    682e:	4f e7       	ldi	r20, 0x7F	; 127
    6830:	57 e4       	ldi	r21, 0x47	; 71
    6832:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6836:	18 16       	cp	r1, r24
    6838:	64 f5       	brge	.+88     	; 0x6892 <init_fun+0x194e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    683a:	fe 01       	movw	r30, r28
    683c:	ed 5b       	subi	r30, 0xBD	; 189
    683e:	ff 4f       	sbci	r31, 0xFF	; 255
    6840:	60 81       	ld	r22, Z
    6842:	71 81       	ldd	r23, Z+1	; 0x01
    6844:	82 81       	ldd	r24, Z+2	; 0x02
    6846:	93 81       	ldd	r25, Z+3	; 0x03
    6848:	20 e0       	ldi	r18, 0x00	; 0
    684a:	30 e0       	ldi	r19, 0x00	; 0
    684c:	40 e2       	ldi	r20, 0x20	; 32
    684e:	51 e4       	ldi	r21, 0x41	; 65
    6850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6854:	dc 01       	movw	r26, r24
    6856:	cb 01       	movw	r24, r22
    6858:	bc 01       	movw	r22, r24
    685a:	cd 01       	movw	r24, r26
    685c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6860:	dc 01       	movw	r26, r24
    6862:	cb 01       	movw	r24, r22
    6864:	9e af       	std	Y+62, r25	; 0x3e
    6866:	8d af       	std	Y+61, r24	; 0x3d
    6868:	0f c0       	rjmp	.+30     	; 0x6888 <init_fun+0x1944>
    686a:	88 ec       	ldi	r24, 0xC8	; 200
    686c:	90 e0       	ldi	r25, 0x00	; 0
    686e:	9c af       	std	Y+60, r25	; 0x3c
    6870:	8b af       	std	Y+59, r24	; 0x3b
    6872:	8b ad       	ldd	r24, Y+59	; 0x3b
    6874:	9c ad       	ldd	r25, Y+60	; 0x3c
    6876:	01 97       	sbiw	r24, 0x01	; 1
    6878:	f1 f7       	brne	.-4      	; 0x6876 <init_fun+0x1932>
    687a:	9c af       	std	Y+60, r25	; 0x3c
    687c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    687e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6880:	9e ad       	ldd	r25, Y+62	; 0x3e
    6882:	01 97       	sbiw	r24, 0x01	; 1
    6884:	9e af       	std	Y+62, r25	; 0x3e
    6886:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6888:	8d ad       	ldd	r24, Y+61	; 0x3d
    688a:	9e ad       	ldd	r25, Y+62	; 0x3e
    688c:	00 97       	sbiw	r24, 0x00	; 0
    688e:	69 f7       	brne	.-38     	; 0x686a <init_fun+0x1926>
    6890:	16 c0       	rjmp	.+44     	; 0x68be <init_fun+0x197a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6892:	fe 01       	movw	r30, r28
    6894:	ff 96       	adiw	r30, 0x3f	; 63
    6896:	60 81       	ld	r22, Z
    6898:	71 81       	ldd	r23, Z+1	; 0x01
    689a:	82 81       	ldd	r24, Z+2	; 0x02
    689c:	93 81       	ldd	r25, Z+3	; 0x03
    689e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68a2:	dc 01       	movw	r26, r24
    68a4:	cb 01       	movw	r24, r22
    68a6:	9e af       	std	Y+62, r25	; 0x3e
    68a8:	8d af       	std	Y+61, r24	; 0x3d
    68aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    68ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    68ae:	9a af       	std	Y+58, r25	; 0x3a
    68b0:	89 af       	std	Y+57, r24	; 0x39
    68b2:	89 ad       	ldd	r24, Y+57	; 0x39
    68b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    68b6:	01 97       	sbiw	r24, 0x01	; 1
    68b8:	f1 f7       	brne	.-4      	; 0x68b6 <init_fun+0x1972>
    68ba:	9a af       	std	Y+58, r25	; 0x3a
    68bc:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(3000);
				_delay_ms(3000);



				EF_void_UART_SendString((U8_t *)"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
    68be:	89 e4       	ldi	r24, 0x49	; 73
    68c0:	91 e0       	ldi	r25, 0x01	; 1
    68c2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
				EF_void_LCD_Clear_Screen();
    68c6:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
				EF_void_LCD_print((unsigned char*)"Connect to");
    68ca:	85 e7       	ldi	r24, 0x75	; 117
    68cc:	91 e0       	ldi	r25, 0x01	; 1
    68ce:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
				EF_void_LCD_Newline();
    68d2:	0e 94 d7 26 	call	0x4dae	; 0x4dae <EF_void_LCD_Newline>
				EF_void_LCD_print((unsigned char*)"ThingSpeak Server");
    68d6:	80 e8       	ldi	r24, 0x80	; 128
    68d8:	91 e0       	ldi	r25, 0x01	; 1
    68da:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    68de:	80 e0       	ldi	r24, 0x00	; 0
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	aa e7       	ldi	r26, 0x7A	; 122
    68e4:	b5 e4       	ldi	r27, 0x45	; 69
    68e6:	8d ab       	std	Y+53, r24	; 0x35
    68e8:	9e ab       	std	Y+54, r25	; 0x36
    68ea:	af ab       	std	Y+55, r26	; 0x37
    68ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68ee:	6d a9       	ldd	r22, Y+53	; 0x35
    68f0:	7e a9       	ldd	r23, Y+54	; 0x36
    68f2:	8f a9       	ldd	r24, Y+55	; 0x37
    68f4:	98 ad       	ldd	r25, Y+56	; 0x38
    68f6:	20 e0       	ldi	r18, 0x00	; 0
    68f8:	30 e0       	ldi	r19, 0x00	; 0
    68fa:	4a ef       	ldi	r20, 0xFA	; 250
    68fc:	54 e4       	ldi	r21, 0x44	; 68
    68fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6902:	dc 01       	movw	r26, r24
    6904:	cb 01       	movw	r24, r22
    6906:	89 ab       	std	Y+49, r24	; 0x31
    6908:	9a ab       	std	Y+50, r25	; 0x32
    690a:	ab ab       	std	Y+51, r26	; 0x33
    690c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    690e:	69 a9       	ldd	r22, Y+49	; 0x31
    6910:	7a a9       	ldd	r23, Y+50	; 0x32
    6912:	8b a9       	ldd	r24, Y+51	; 0x33
    6914:	9c a9       	ldd	r25, Y+52	; 0x34
    6916:	20 e0       	ldi	r18, 0x00	; 0
    6918:	30 e0       	ldi	r19, 0x00	; 0
    691a:	40 e8       	ldi	r20, 0x80	; 128
    691c:	5f e3       	ldi	r21, 0x3F	; 63
    691e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6922:	88 23       	and	r24, r24
    6924:	2c f4       	brge	.+10     	; 0x6930 <init_fun+0x19ec>
		__ticks = 1;
    6926:	81 e0       	ldi	r24, 0x01	; 1
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	98 ab       	std	Y+48, r25	; 0x30
    692c:	8f a7       	std	Y+47, r24	; 0x2f
    692e:	3f c0       	rjmp	.+126    	; 0x69ae <init_fun+0x1a6a>
	else if (__tmp > 65535)
    6930:	69 a9       	ldd	r22, Y+49	; 0x31
    6932:	7a a9       	ldd	r23, Y+50	; 0x32
    6934:	8b a9       	ldd	r24, Y+51	; 0x33
    6936:	9c a9       	ldd	r25, Y+52	; 0x34
    6938:	20 e0       	ldi	r18, 0x00	; 0
    693a:	3f ef       	ldi	r19, 0xFF	; 255
    693c:	4f e7       	ldi	r20, 0x7F	; 127
    693e:	57 e4       	ldi	r21, 0x47	; 71
    6940:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6944:	18 16       	cp	r1, r24
    6946:	4c f5       	brge	.+82     	; 0x699a <init_fun+0x1a56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6948:	6d a9       	ldd	r22, Y+53	; 0x35
    694a:	7e a9       	ldd	r23, Y+54	; 0x36
    694c:	8f a9       	ldd	r24, Y+55	; 0x37
    694e:	98 ad       	ldd	r25, Y+56	; 0x38
    6950:	20 e0       	ldi	r18, 0x00	; 0
    6952:	30 e0       	ldi	r19, 0x00	; 0
    6954:	40 e2       	ldi	r20, 0x20	; 32
    6956:	51 e4       	ldi	r21, 0x41	; 65
    6958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    695c:	dc 01       	movw	r26, r24
    695e:	cb 01       	movw	r24, r22
    6960:	bc 01       	movw	r22, r24
    6962:	cd 01       	movw	r24, r26
    6964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6968:	dc 01       	movw	r26, r24
    696a:	cb 01       	movw	r24, r22
    696c:	98 ab       	std	Y+48, r25	; 0x30
    696e:	8f a7       	std	Y+47, r24	; 0x2f
    6970:	0f c0       	rjmp	.+30     	; 0x6990 <init_fun+0x1a4c>
    6972:	88 ec       	ldi	r24, 0xC8	; 200
    6974:	90 e0       	ldi	r25, 0x00	; 0
    6976:	9e a7       	std	Y+46, r25	; 0x2e
    6978:	8d a7       	std	Y+45, r24	; 0x2d
    697a:	8d a5       	ldd	r24, Y+45	; 0x2d
    697c:	9e a5       	ldd	r25, Y+46	; 0x2e
    697e:	01 97       	sbiw	r24, 0x01	; 1
    6980:	f1 f7       	brne	.-4      	; 0x697e <init_fun+0x1a3a>
    6982:	9e a7       	std	Y+46, r25	; 0x2e
    6984:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6986:	8f a5       	ldd	r24, Y+47	; 0x2f
    6988:	98 a9       	ldd	r25, Y+48	; 0x30
    698a:	01 97       	sbiw	r24, 0x01	; 1
    698c:	98 ab       	std	Y+48, r25	; 0x30
    698e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6990:	8f a5       	ldd	r24, Y+47	; 0x2f
    6992:	98 a9       	ldd	r25, Y+48	; 0x30
    6994:	00 97       	sbiw	r24, 0x00	; 0
    6996:	69 f7       	brne	.-38     	; 0x6972 <init_fun+0x1a2e>
    6998:	14 c0       	rjmp	.+40     	; 0x69c2 <init_fun+0x1a7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    699a:	69 a9       	ldd	r22, Y+49	; 0x31
    699c:	7a a9       	ldd	r23, Y+50	; 0x32
    699e:	8b a9       	ldd	r24, Y+51	; 0x33
    69a0:	9c a9       	ldd	r25, Y+52	; 0x34
    69a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69a6:	dc 01       	movw	r26, r24
    69a8:	cb 01       	movw	r24, r22
    69aa:	98 ab       	std	Y+48, r25	; 0x30
    69ac:	8f a7       	std	Y+47, r24	; 0x2f
    69ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    69b0:	98 a9       	ldd	r25, Y+48	; 0x30
    69b2:	9c a7       	std	Y+44, r25	; 0x2c
    69b4:	8b a7       	std	Y+43, r24	; 0x2b
    69b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    69b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    69ba:	01 97       	sbiw	r24, 0x01	; 1
    69bc:	f1 f7       	brne	.-4      	; 0x69ba <init_fun+0x1a76>
    69be:	9c a7       	std	Y+44, r25	; 0x2c
    69c0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(4000);


				EF_void_UART_SendString((U8_t *)"AT+CIPSEND=50\r\n");
    69c2:	82 e9       	ldi	r24, 0x92	; 146
    69c4:	91 e0       	ldi	r25, 0x01	; 1
    69c6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
				EF_void_LCD_Clear_Screen();
    69ca:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>

				EF_void_LCD_print((unsigned char*)"Uploading to");
    69ce:	82 ea       	ldi	r24, 0xA2	; 162
    69d0:	91 e0       	ldi	r25, 0x01	; 1
    69d2:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
				EF_void_LCD_Newline();
    69d6:	0e 94 d7 26 	call	0x4dae	; 0x4dae <EF_void_LCD_Newline>
				EF_void_LCD_print((unsigned char*)"ThingSpeak Server");
    69da:	80 e8       	ldi	r24, 0x80	; 128
    69dc:	91 e0       	ldi	r25, 0x01	; 1
    69de:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    69e2:	80 e0       	ldi	r24, 0x00	; 0
    69e4:	90 e8       	ldi	r25, 0x80	; 128
    69e6:	ab e3       	ldi	r26, 0x3B	; 59
    69e8:	b5 e4       	ldi	r27, 0x45	; 69
    69ea:	8f a3       	std	Y+39, r24	; 0x27
    69ec:	98 a7       	std	Y+40, r25	; 0x28
    69ee:	a9 a7       	std	Y+41, r26	; 0x29
    69f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69f2:	6f a1       	ldd	r22, Y+39	; 0x27
    69f4:	78 a5       	ldd	r23, Y+40	; 0x28
    69f6:	89 a5       	ldd	r24, Y+41	; 0x29
    69f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    69fa:	20 e0       	ldi	r18, 0x00	; 0
    69fc:	30 e0       	ldi	r19, 0x00	; 0
    69fe:	4a ef       	ldi	r20, 0xFA	; 250
    6a00:	54 e4       	ldi	r21, 0x44	; 68
    6a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a06:	dc 01       	movw	r26, r24
    6a08:	cb 01       	movw	r24, r22
    6a0a:	8b a3       	std	Y+35, r24	; 0x23
    6a0c:	9c a3       	std	Y+36, r25	; 0x24
    6a0e:	ad a3       	std	Y+37, r26	; 0x25
    6a10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6a12:	6b a1       	ldd	r22, Y+35	; 0x23
    6a14:	7c a1       	ldd	r23, Y+36	; 0x24
    6a16:	8d a1       	ldd	r24, Y+37	; 0x25
    6a18:	9e a1       	ldd	r25, Y+38	; 0x26
    6a1a:	20 e0       	ldi	r18, 0x00	; 0
    6a1c:	30 e0       	ldi	r19, 0x00	; 0
    6a1e:	40 e8       	ldi	r20, 0x80	; 128
    6a20:	5f e3       	ldi	r21, 0x3F	; 63
    6a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a26:	88 23       	and	r24, r24
    6a28:	2c f4       	brge	.+10     	; 0x6a34 <init_fun+0x1af0>
		__ticks = 1;
    6a2a:	81 e0       	ldi	r24, 0x01	; 1
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	9a a3       	std	Y+34, r25	; 0x22
    6a30:	89 a3       	std	Y+33, r24	; 0x21
    6a32:	3f c0       	rjmp	.+126    	; 0x6ab2 <init_fun+0x1b6e>
	else if (__tmp > 65535)
    6a34:	6b a1       	ldd	r22, Y+35	; 0x23
    6a36:	7c a1       	ldd	r23, Y+36	; 0x24
    6a38:	8d a1       	ldd	r24, Y+37	; 0x25
    6a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	3f ef       	ldi	r19, 0xFF	; 255
    6a40:	4f e7       	ldi	r20, 0x7F	; 127
    6a42:	57 e4       	ldi	r21, 0x47	; 71
    6a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a48:	18 16       	cp	r1, r24
    6a4a:	4c f5       	brge	.+82     	; 0x6a9e <init_fun+0x1b5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a4c:	6f a1       	ldd	r22, Y+39	; 0x27
    6a4e:	78 a5       	ldd	r23, Y+40	; 0x28
    6a50:	89 a5       	ldd	r24, Y+41	; 0x29
    6a52:	9a a5       	ldd	r25, Y+42	; 0x2a
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	40 e2       	ldi	r20, 0x20	; 32
    6a5a:	51 e4       	ldi	r21, 0x41	; 65
    6a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a60:	dc 01       	movw	r26, r24
    6a62:	cb 01       	movw	r24, r22
    6a64:	bc 01       	movw	r22, r24
    6a66:	cd 01       	movw	r24, r26
    6a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a6c:	dc 01       	movw	r26, r24
    6a6e:	cb 01       	movw	r24, r22
    6a70:	9a a3       	std	Y+34, r25	; 0x22
    6a72:	89 a3       	std	Y+33, r24	; 0x21
    6a74:	0f c0       	rjmp	.+30     	; 0x6a94 <init_fun+0x1b50>
    6a76:	88 ec       	ldi	r24, 0xC8	; 200
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	98 a3       	std	Y+32, r25	; 0x20
    6a7c:	8f 8f       	std	Y+31, r24	; 0x1f
    6a7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a80:	98 a1       	ldd	r25, Y+32	; 0x20
    6a82:	01 97       	sbiw	r24, 0x01	; 1
    6a84:	f1 f7       	brne	.-4      	; 0x6a82 <init_fun+0x1b3e>
    6a86:	98 a3       	std	Y+32, r25	; 0x20
    6a88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    6a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    6a8e:	01 97       	sbiw	r24, 0x01	; 1
    6a90:	9a a3       	std	Y+34, r25	; 0x22
    6a92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a94:	89 a1       	ldd	r24, Y+33	; 0x21
    6a96:	9a a1       	ldd	r25, Y+34	; 0x22
    6a98:	00 97       	sbiw	r24, 0x00	; 0
    6a9a:	69 f7       	brne	.-38     	; 0x6a76 <init_fun+0x1b32>
    6a9c:	14 c0       	rjmp	.+40     	; 0x6ac6 <init_fun+0x1b82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    6aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    6aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    6aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    6aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6aaa:	dc 01       	movw	r26, r24
    6aac:	cb 01       	movw	r24, r22
    6aae:	9a a3       	std	Y+34, r25	; 0x22
    6ab0:	89 a3       	std	Y+33, r24	; 0x21
    6ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    6ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    6ab6:	9e 8f       	std	Y+30, r25	; 0x1e
    6ab8:	8d 8f       	std	Y+29, r24	; 0x1d
    6aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6abc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6abe:	01 97       	sbiw	r24, 0x01	; 1
    6ac0:	f1 f7       	brne	.-4      	; 0x6abe <init_fun+0x1b7a>
    6ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    6ac4:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(3000);

				CO2=CO2_AVG/90;
    6ac6:	fe 01       	movw	r30, r28
    6ac8:	e7 5e       	subi	r30, 0xE7	; 231
    6aca:	fe 4f       	sbci	r31, 0xFE	; 254
    6acc:	80 81       	ld	r24, Z
    6ace:	91 81       	ldd	r25, Z+1	; 0x01
    6ad0:	a2 81       	ldd	r26, Z+2	; 0x02
    6ad2:	b3 81       	ldd	r27, Z+3	; 0x03
    6ad4:	2a e5       	ldi	r18, 0x5A	; 90
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	40 e0       	ldi	r20, 0x00	; 0
    6ada:	50 e0       	ldi	r21, 0x00	; 0
    6adc:	bc 01       	movw	r22, r24
    6ade:	cd 01       	movw	r24, r26
    6ae0:	0e 94 4b 38 	call	0x7096	; 0x7096 <__udivmodsi4>
    6ae4:	da 01       	movw	r26, r20
    6ae6:	c9 01       	movw	r24, r18
    6ae8:	fe 01       	movw	r30, r28
    6aea:	ed 5d       	subi	r30, 0xDD	; 221
    6aec:	fe 4f       	sbci	r31, 0xFE	; 254
    6aee:	91 83       	std	Z+1, r25	; 0x01
    6af0:	80 83       	st	Z, r24

				EF_void_UART_SendString((U8_t *)"GET /update?api_key=SD5OBD49N5H4O8RY&field2=");
    6af2:	8f ea       	ldi	r24, 0xAF	; 175
    6af4:	91 e0       	ldi	r25, 0x01	; 1
    6af6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
				EF_void_UART_Send_CO2(CO2);
    6afa:	fe 01       	movw	r30, r28
    6afc:	ed 5d       	subi	r30, 0xDD	; 221
    6afe:	fe 4f       	sbci	r31, 0xFE	; 254
    6b00:	80 81       	ld	r24, Z
    6b02:	91 81       	ldd	r25, Z+1	; 0x01
    6b04:	0e 94 69 18 	call	0x30d2	; 0x30d2 <EF_void_UART_Send_CO2>
				EF_void_UART_SendString((U8_t *)"\r\n");
    6b08:	8c ed       	ldi	r24, 0xDC	; 220
    6b0a:	91 e0       	ldi	r25, 0x01	; 1
    6b0c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>

				EF_void_LCD_Clear_Screen();
    6b10:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
				EF_void_LCD_print((unsigned char*)"Done UPloading");
    6b14:	8f ed       	ldi	r24, 0xDF	; 223
    6b16:	91 e0       	ldi	r25, 0x01	; 1
    6b18:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    6b1c:	80 e0       	ldi	r24, 0x00	; 0
    6b1e:	90 e8       	ldi	r25, 0x80	; 128
    6b20:	ab e3       	ldi	r26, 0x3B	; 59
    6b22:	b5 e4       	ldi	r27, 0x45	; 69
    6b24:	89 8f       	std	Y+25, r24	; 0x19
    6b26:	9a 8f       	std	Y+26, r25	; 0x1a
    6b28:	ab 8f       	std	Y+27, r26	; 0x1b
    6b2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    6b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b34:	20 e0       	ldi	r18, 0x00	; 0
    6b36:	30 e0       	ldi	r19, 0x00	; 0
    6b38:	4a ef       	ldi	r20, 0xFA	; 250
    6b3a:	54 e4       	ldi	r21, 0x44	; 68
    6b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b40:	dc 01       	movw	r26, r24
    6b42:	cb 01       	movw	r24, r22
    6b44:	8d 8b       	std	Y+21, r24	; 0x15
    6b46:	9e 8b       	std	Y+22, r25	; 0x16
    6b48:	af 8b       	std	Y+23, r26	; 0x17
    6b4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    6b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    6b50:	8f 89       	ldd	r24, Y+23	; 0x17
    6b52:	98 8d       	ldd	r25, Y+24	; 0x18
    6b54:	20 e0       	ldi	r18, 0x00	; 0
    6b56:	30 e0       	ldi	r19, 0x00	; 0
    6b58:	40 e8       	ldi	r20, 0x80	; 128
    6b5a:	5f e3       	ldi	r21, 0x3F	; 63
    6b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b60:	88 23       	and	r24, r24
    6b62:	2c f4       	brge	.+10     	; 0x6b6e <init_fun+0x1c2a>
		__ticks = 1;
    6b64:	81 e0       	ldi	r24, 0x01	; 1
    6b66:	90 e0       	ldi	r25, 0x00	; 0
    6b68:	9c 8b       	std	Y+20, r25	; 0x14
    6b6a:	8b 8b       	std	Y+19, r24	; 0x13
    6b6c:	3f c0       	rjmp	.+126    	; 0x6bec <init_fun+0x1ca8>
	else if (__tmp > 65535)
    6b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    6b70:	7e 89       	ldd	r23, Y+22	; 0x16
    6b72:	8f 89       	ldd	r24, Y+23	; 0x17
    6b74:	98 8d       	ldd	r25, Y+24	; 0x18
    6b76:	20 e0       	ldi	r18, 0x00	; 0
    6b78:	3f ef       	ldi	r19, 0xFF	; 255
    6b7a:	4f e7       	ldi	r20, 0x7F	; 127
    6b7c:	57 e4       	ldi	r21, 0x47	; 71
    6b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b82:	18 16       	cp	r1, r24
    6b84:	4c f5       	brge	.+82     	; 0x6bd8 <init_fun+0x1c94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b86:	69 8d       	ldd	r22, Y+25	; 0x19
    6b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b8e:	20 e0       	ldi	r18, 0x00	; 0
    6b90:	30 e0       	ldi	r19, 0x00	; 0
    6b92:	40 e2       	ldi	r20, 0x20	; 32
    6b94:	51 e4       	ldi	r21, 0x41	; 65
    6b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b9a:	dc 01       	movw	r26, r24
    6b9c:	cb 01       	movw	r24, r22
    6b9e:	bc 01       	movw	r22, r24
    6ba0:	cd 01       	movw	r24, r26
    6ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	9c 8b       	std	Y+20, r25	; 0x14
    6bac:	8b 8b       	std	Y+19, r24	; 0x13
    6bae:	0f c0       	rjmp	.+30     	; 0x6bce <init_fun+0x1c8a>
    6bb0:	88 ec       	ldi	r24, 0xC8	; 200
    6bb2:	90 e0       	ldi	r25, 0x00	; 0
    6bb4:	9a 8b       	std	Y+18, r25	; 0x12
    6bb6:	89 8b       	std	Y+17, r24	; 0x11
    6bb8:	89 89       	ldd	r24, Y+17	; 0x11
    6bba:	9a 89       	ldd	r25, Y+18	; 0x12
    6bbc:	01 97       	sbiw	r24, 0x01	; 1
    6bbe:	f1 f7       	brne	.-4      	; 0x6bbc <init_fun+0x1c78>
    6bc0:	9a 8b       	std	Y+18, r25	; 0x12
    6bc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    6bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    6bc8:	01 97       	sbiw	r24, 0x01	; 1
    6bca:	9c 8b       	std	Y+20, r25	; 0x14
    6bcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bce:	8b 89       	ldd	r24, Y+19	; 0x13
    6bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    6bd2:	00 97       	sbiw	r24, 0x00	; 0
    6bd4:	69 f7       	brne	.-38     	; 0x6bb0 <init_fun+0x1c6c>
    6bd6:	14 c0       	rjmp	.+40     	; 0x6c00 <init_fun+0x1cbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    6bda:	7e 89       	ldd	r23, Y+22	; 0x16
    6bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    6bde:	98 8d       	ldd	r25, Y+24	; 0x18
    6be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6be4:	dc 01       	movw	r26, r24
    6be6:	cb 01       	movw	r24, r22
    6be8:	9c 8b       	std	Y+20, r25	; 0x14
    6bea:	8b 8b       	std	Y+19, r24	; 0x13
    6bec:	8b 89       	ldd	r24, Y+19	; 0x13
    6bee:	9c 89       	ldd	r25, Y+20	; 0x14
    6bf0:	98 8b       	std	Y+16, r25	; 0x10
    6bf2:	8f 87       	std	Y+15, r24	; 0x0f
    6bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bf6:	98 89       	ldd	r25, Y+16	; 0x10
    6bf8:	01 97       	sbiw	r24, 0x01	; 1
    6bfa:	f1 f7       	brne	.-4      	; 0x6bf8 <init_fun+0x1cb4>
    6bfc:	98 8b       	std	Y+16, r25	; 0x10
    6bfe:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);

				i=0;
    6c00:	fe 01       	movw	r30, r28
    6c02:	e3 5e       	subi	r30, 0xE3	; 227
    6c04:	fe 4f       	sbci	r31, 0xFE	; 254
    6c06:	10 82       	st	Z, r1
    6c08:	11 82       	std	Z+1, r1	; 0x01
    6c0a:	12 82       	std	Z+2, r1	; 0x02
    6c0c:	13 82       	std	Z+3, r1	; 0x03
				CO2_AVG=0;
    6c0e:	fe 01       	movw	r30, r28
    6c10:	e7 5e       	subi	r30, 0xE7	; 231
    6c12:	fe 4f       	sbci	r31, 0xFE	; 254
    6c14:	10 82       	st	Z, r1
    6c16:	11 82       	std	Z+1, r1	; 0x01
    6c18:	12 82       	std	Z+2, r1	; 0x02
    6c1a:	13 82       	std	Z+3, r1	; 0x03
			}

			if(First_Reading==TRUE)
    6c1c:	fe 01       	movw	r30, r28
    6c1e:	eb 5d       	subi	r30, 0xDB	; 219
    6c20:	fe 4f       	sbci	r31, 0xFE	; 254
    6c22:	80 81       	ld	r24, Z
    6c24:	81 30       	cpi	r24, 0x01	; 1
    6c26:	d9 f5       	brne	.+118    	; 0x6c9e <init_fun+0x1d5a>
			{
				EF_void_LCD_Clear_Screen();
    6c28:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
				EF_void_LCD_print((unsigned char*)"Not Ready Yet");
    6c2c:	8e ee       	ldi	r24, 0xEE	; 238
    6c2e:	91 e0       	ldi	r25, 0x01	; 1
    6c30:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
				EF_void_LCD_Newline();
    6c34:	0e 94 d7 26 	call	0x4dae	; 0x4dae <EF_void_LCD_Newline>
				EF_void_LCD_print((unsigned char*)"Please Wait  ");
    6c38:	8c ef       	ldi	r24, 0xFC	; 252
    6c3a:	91 e0       	ldi	r25, 0x01	; 1
    6c3c:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
				EF_void_LCD_print_Number(4-i);
    6c40:	fe 01       	movw	r30, r28
    6c42:	e3 5e       	subi	r30, 0xE3	; 227
    6c44:	fe 4f       	sbci	r31, 0xFE	; 254
    6c46:	20 81       	ld	r18, Z
    6c48:	31 81       	ldd	r19, Z+1	; 0x01
    6c4a:	84 e0       	ldi	r24, 0x04	; 4
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	82 1b       	sub	r24, r18
    6c50:	93 0b       	sbc	r25, r19
    6c52:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <EF_void_LCD_print_Number>
				if(i>=4)
    6c56:	fe 01       	movw	r30, r28
    6c58:	e3 5e       	subi	r30, 0xE3	; 227
    6c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    6c5c:	80 81       	ld	r24, Z
    6c5e:	91 81       	ldd	r25, Z+1	; 0x01
    6c60:	a2 81       	ldd	r26, Z+2	; 0x02
    6c62:	b3 81       	ldd	r27, Z+3	; 0x03
    6c64:	84 30       	cpi	r24, 0x04	; 4
    6c66:	91 05       	cpc	r25, r1
    6c68:	a1 05       	cpc	r26, r1
    6c6a:	b1 05       	cpc	r27, r1
    6c6c:	c0 f0       	brcs	.+48     	; 0x6c9e <init_fun+0x1d5a>
				{
					i=0;
    6c6e:	fe 01       	movw	r30, r28
    6c70:	e3 5e       	subi	r30, 0xE3	; 227
    6c72:	fe 4f       	sbci	r31, 0xFE	; 254
    6c74:	10 82       	st	Z, r1
    6c76:	11 82       	std	Z+1, r1	; 0x01
    6c78:	12 82       	std	Z+2, r1	; 0x02
    6c7a:	13 82       	std	Z+3, r1	; 0x03
					CO2_AVG=0;
    6c7c:	fe 01       	movw	r30, r28
    6c7e:	e7 5e       	subi	r30, 0xE7	; 231
    6c80:	fe 4f       	sbci	r31, 0xFE	; 254
    6c82:	10 82       	st	Z, r1
    6c84:	11 82       	std	Z+1, r1	; 0x01
    6c86:	12 82       	std	Z+2, r1	; 0x02
    6c88:	13 82       	std	Z+3, r1	; 0x03
					First_Reading=FALSE;
    6c8a:	fe 01       	movw	r30, r28
    6c8c:	eb 5d       	subi	r30, 0xDB	; 219
    6c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    6c90:	10 82       	st	Z, r1
					EF_void_LCD_Clear_Screen();
    6c92:	0e 94 15 24 	call	0x482a	; 0x482a <EF_void_LCD_Clear_Screen>
					EF_void_LCD_print((unsigned char*)"Ready");
    6c96:	8a e0       	ldi	r24, 0x0A	; 10
    6c98:	92 e0       	ldi	r25, 0x02	; 2
    6c9a:	0e 94 c8 23 	call	0x4790	; 0x4790 <EF_void_LCD_print>
    6c9e:	80 e0       	ldi	r24, 0x00	; 0
    6ca0:	90 e0       	ldi	r25, 0x00	; 0
    6ca2:	aa ef       	ldi	r26, 0xFA	; 250
    6ca4:	b4 e4       	ldi	r27, 0x44	; 68
    6ca6:	8b 87       	std	Y+11, r24	; 0x0b
    6ca8:	9c 87       	std	Y+12, r25	; 0x0c
    6caa:	ad 87       	std	Y+13, r26	; 0x0d
    6cac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    6cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cb6:	20 e0       	ldi	r18, 0x00	; 0
    6cb8:	30 e0       	ldi	r19, 0x00	; 0
    6cba:	4a ef       	ldi	r20, 0xFA	; 250
    6cbc:	54 e4       	ldi	r21, 0x44	; 68
    6cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cc2:	dc 01       	movw	r26, r24
    6cc4:	cb 01       	movw	r24, r22
    6cc6:	8f 83       	std	Y+7, r24	; 0x07
    6cc8:	98 87       	std	Y+8, r25	; 0x08
    6cca:	a9 87       	std	Y+9, r26	; 0x09
    6ccc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6cce:	6f 81       	ldd	r22, Y+7	; 0x07
    6cd0:	78 85       	ldd	r23, Y+8	; 0x08
    6cd2:	89 85       	ldd	r24, Y+9	; 0x09
    6cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cd6:	20 e0       	ldi	r18, 0x00	; 0
    6cd8:	30 e0       	ldi	r19, 0x00	; 0
    6cda:	40 e8       	ldi	r20, 0x80	; 128
    6cdc:	5f e3       	ldi	r21, 0x3F	; 63
    6cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6ce2:	88 23       	and	r24, r24
    6ce4:	2c f4       	brge	.+10     	; 0x6cf0 <init_fun+0x1dac>
		__ticks = 1;
    6ce6:	81 e0       	ldi	r24, 0x01	; 1
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	9e 83       	std	Y+6, r25	; 0x06
    6cec:	8d 83       	std	Y+5, r24	; 0x05
    6cee:	3f c0       	rjmp	.+126    	; 0x6d6e <init_fun+0x1e2a>
	else if (__tmp > 65535)
    6cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    6cf2:	78 85       	ldd	r23, Y+8	; 0x08
    6cf4:	89 85       	ldd	r24, Y+9	; 0x09
    6cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cf8:	20 e0       	ldi	r18, 0x00	; 0
    6cfa:	3f ef       	ldi	r19, 0xFF	; 255
    6cfc:	4f e7       	ldi	r20, 0x7F	; 127
    6cfe:	57 e4       	ldi	r21, 0x47	; 71
    6d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d04:	18 16       	cp	r1, r24
    6d06:	4c f5       	brge	.+82     	; 0x6d5a <init_fun+0x1e16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d10:	20 e0       	ldi	r18, 0x00	; 0
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	40 e2       	ldi	r20, 0x20	; 32
    6d16:	51 e4       	ldi	r21, 0x41	; 65
    6d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d1c:	dc 01       	movw	r26, r24
    6d1e:	cb 01       	movw	r24, r22
    6d20:	bc 01       	movw	r22, r24
    6d22:	cd 01       	movw	r24, r26
    6d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d28:	dc 01       	movw	r26, r24
    6d2a:	cb 01       	movw	r24, r22
    6d2c:	9e 83       	std	Y+6, r25	; 0x06
    6d2e:	8d 83       	std	Y+5, r24	; 0x05
    6d30:	0f c0       	rjmp	.+30     	; 0x6d50 <init_fun+0x1e0c>
    6d32:	88 ec       	ldi	r24, 0xC8	; 200
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	9c 83       	std	Y+4, r25	; 0x04
    6d38:	8b 83       	std	Y+3, r24	; 0x03
    6d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d3e:	01 97       	sbiw	r24, 0x01	; 1
    6d40:	f1 f7       	brne	.-4      	; 0x6d3e <init_fun+0x1dfa>
    6d42:	9c 83       	std	Y+4, r25	; 0x04
    6d44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d46:	8d 81       	ldd	r24, Y+5	; 0x05
    6d48:	9e 81       	ldd	r25, Y+6	; 0x06
    6d4a:	01 97       	sbiw	r24, 0x01	; 1
    6d4c:	9e 83       	std	Y+6, r25	; 0x06
    6d4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d50:	8d 81       	ldd	r24, Y+5	; 0x05
    6d52:	9e 81       	ldd	r25, Y+6	; 0x06
    6d54:	00 97       	sbiw	r24, 0x00	; 0
    6d56:	69 f7       	brne	.-38     	; 0x6d32 <init_fun+0x1dee>
    6d58:	0a ca       	rjmp	.-3052   	; 0x616e <init_fun+0x122a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    6d5c:	78 85       	ldd	r23, Y+8	; 0x08
    6d5e:	89 85       	ldd	r24, Y+9	; 0x09
    6d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d66:	dc 01       	movw	r26, r24
    6d68:	cb 01       	movw	r24, r22
    6d6a:	9e 83       	std	Y+6, r25	; 0x06
    6d6c:	8d 83       	std	Y+5, r24	; 0x05
    6d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    6d70:	9e 81       	ldd	r25, Y+6	; 0x06
    6d72:	9a 83       	std	Y+2, r25	; 0x02
    6d74:	89 83       	std	Y+1, r24	; 0x01
    6d76:	89 81       	ldd	r24, Y+1	; 0x01
    6d78:	9a 81       	ldd	r25, Y+2	; 0x02
    6d7a:	01 97       	sbiw	r24, 0x01	; 1
    6d7c:	f1 f7       	brne	.-4      	; 0x6d7a <init_fun+0x1e36>
    6d7e:	9a 83       	std	Y+2, r25	; 0x02
    6d80:	89 83       	std	Y+1, r24	; 0x01
    6d82:	f5 c9       	rjmp	.-3094   	; 0x616e <init_fun+0x122a>

00006d84 <operation_fun>:
 */

#include"../main.h"

ret_state operation_fun(void)
{
    6d84:	df 93       	push	r29
    6d86:	cf 93       	push	r28
    6d88:	cd b7       	in	r28, 0x3d	; 61
    6d8a:	de b7       	in	r29, 0x3e	; 62
    6d8c:	2e 97       	sbiw	r28, 0x0e	; 14
    6d8e:	0f b6       	in	r0, 0x3f	; 63
    6d90:	f8 94       	cli
    6d92:	de bf       	out	0x3e, r29	; 62
    6d94:	0f be       	out	0x3f, r0	; 63
    6d96:	cd bf       	out	0x3d, r28	; 61

	EF_void_UART_SendString("Operation state\r\n");
    6d98:	80 e1       	ldi	r24, 0x10	; 16
    6d9a:	92 e0       	ldi	r25, 0x02	; 2
    6d9c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
    6da0:	80 e0       	ldi	r24, 0x00	; 0
    6da2:	90 e0       	ldi	r25, 0x00	; 0
    6da4:	aa ef       	ldi	r26, 0xFA	; 250
    6da6:	b4 e4       	ldi	r27, 0x44	; 68
    6da8:	8b 87       	std	Y+11, r24	; 0x0b
    6daa:	9c 87       	std	Y+12, r25	; 0x0c
    6dac:	ad 87       	std	Y+13, r26	; 0x0d
    6dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6db8:	20 e0       	ldi	r18, 0x00	; 0
    6dba:	30 e0       	ldi	r19, 0x00	; 0
    6dbc:	4a ef       	ldi	r20, 0xFA	; 250
    6dbe:	54 e4       	ldi	r21, 0x44	; 68
    6dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6dc4:	dc 01       	movw	r26, r24
    6dc6:	cb 01       	movw	r24, r22
    6dc8:	8f 83       	std	Y+7, r24	; 0x07
    6dca:	98 87       	std	Y+8, r25	; 0x08
    6dcc:	a9 87       	std	Y+9, r26	; 0x09
    6dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    6dd2:	78 85       	ldd	r23, Y+8	; 0x08
    6dd4:	89 85       	ldd	r24, Y+9	; 0x09
    6dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dd8:	20 e0       	ldi	r18, 0x00	; 0
    6dda:	30 e0       	ldi	r19, 0x00	; 0
    6ddc:	40 e8       	ldi	r20, 0x80	; 128
    6dde:	5f e3       	ldi	r21, 0x3F	; 63
    6de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6de4:	88 23       	and	r24, r24
    6de6:	2c f4       	brge	.+10     	; 0x6df2 <operation_fun+0x6e>
		__ticks = 1;
    6de8:	81 e0       	ldi	r24, 0x01	; 1
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	9e 83       	std	Y+6, r25	; 0x06
    6dee:	8d 83       	std	Y+5, r24	; 0x05
    6df0:	3f c0       	rjmp	.+126    	; 0x6e70 <operation_fun+0xec>
	else if (__tmp > 65535)
    6df2:	6f 81       	ldd	r22, Y+7	; 0x07
    6df4:	78 85       	ldd	r23, Y+8	; 0x08
    6df6:	89 85       	ldd	r24, Y+9	; 0x09
    6df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dfa:	20 e0       	ldi	r18, 0x00	; 0
    6dfc:	3f ef       	ldi	r19, 0xFF	; 255
    6dfe:	4f e7       	ldi	r20, 0x7F	; 127
    6e00:	57 e4       	ldi	r21, 0x47	; 71
    6e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e06:	18 16       	cp	r1, r24
    6e08:	4c f5       	brge	.+82     	; 0x6e5c <operation_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e12:	20 e0       	ldi	r18, 0x00	; 0
    6e14:	30 e0       	ldi	r19, 0x00	; 0
    6e16:	40 e2       	ldi	r20, 0x20	; 32
    6e18:	51 e4       	ldi	r21, 0x41	; 65
    6e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e1e:	dc 01       	movw	r26, r24
    6e20:	cb 01       	movw	r24, r22
    6e22:	bc 01       	movw	r22, r24
    6e24:	cd 01       	movw	r24, r26
    6e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e2a:	dc 01       	movw	r26, r24
    6e2c:	cb 01       	movw	r24, r22
    6e2e:	9e 83       	std	Y+6, r25	; 0x06
    6e30:	8d 83       	std	Y+5, r24	; 0x05
    6e32:	0f c0       	rjmp	.+30     	; 0x6e52 <operation_fun+0xce>
    6e34:	88 ec       	ldi	r24, 0xC8	; 200
    6e36:	90 e0       	ldi	r25, 0x00	; 0
    6e38:	9c 83       	std	Y+4, r25	; 0x04
    6e3a:	8b 83       	std	Y+3, r24	; 0x03
    6e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    6e40:	01 97       	sbiw	r24, 0x01	; 1
    6e42:	f1 f7       	brne	.-4      	; 0x6e40 <operation_fun+0xbc>
    6e44:	9c 83       	std	Y+4, r25	; 0x04
    6e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e48:	8d 81       	ldd	r24, Y+5	; 0x05
    6e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e4c:	01 97       	sbiw	r24, 0x01	; 1
    6e4e:	9e 83       	std	Y+6, r25	; 0x06
    6e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e52:	8d 81       	ldd	r24, Y+5	; 0x05
    6e54:	9e 81       	ldd	r25, Y+6	; 0x06
    6e56:	00 97       	sbiw	r24, 0x00	; 0
    6e58:	69 f7       	brne	.-38     	; 0x6e34 <operation_fun+0xb0>
    6e5a:	14 c0       	rjmp	.+40     	; 0x6e84 <operation_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    6e5e:	78 85       	ldd	r23, Y+8	; 0x08
    6e60:	89 85       	ldd	r24, Y+9	; 0x09
    6e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e68:	dc 01       	movw	r26, r24
    6e6a:	cb 01       	movw	r24, r22
    6e6c:	9e 83       	std	Y+6, r25	; 0x06
    6e6e:	8d 83       	std	Y+5, r24	; 0x05
    6e70:	8d 81       	ldd	r24, Y+5	; 0x05
    6e72:	9e 81       	ldd	r25, Y+6	; 0x06
    6e74:	9a 83       	std	Y+2, r25	; 0x02
    6e76:	89 83       	std	Y+1, r24	; 0x01
    6e78:	89 81       	ldd	r24, Y+1	; 0x01
    6e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e7c:	01 97       	sbiw	r24, 0x01	; 1
    6e7e:	f1 f7       	brne	.-4      	; 0x6e7c <operation_fun+0xf8>
    6e80:	9a 83       	std	Y+2, r25	; 0x02
    6e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);


return ret_terminate;
    6e84:	82 e0       	ldi	r24, 0x02	; 2
}
    6e86:	2e 96       	adiw	r28, 0x0e	; 14
    6e88:	0f b6       	in	r0, 0x3f	; 63
    6e8a:	f8 94       	cli
    6e8c:	de bf       	out	0x3e, r29	; 62
    6e8e:	0f be       	out	0x3f, r0	; 63
    6e90:	cd bf       	out	0x3d, r28	; 61
    6e92:	cf 91       	pop	r28
    6e94:	df 91       	pop	r29
    6e96:	08 95       	ret

00006e98 <lookup_table>:




ret_state lookup_table(state current_state,ret_state dir_state)
{
    6e98:	df 93       	push	r29
    6e9a:	cf 93       	push	r28
    6e9c:	00 d0       	rcall	.+0      	; 0x6e9e <lookup_table+0x6>
    6e9e:	0f 92       	push	r0
    6ea0:	cd b7       	in	r28, 0x3d	; 61
    6ea2:	de b7       	in	r29, 0x3e	; 62
    6ea4:	8a 83       	std	Y+2, r24	; 0x02
    6ea6:	6b 83       	std	Y+3, r22	; 0x03
	ret_state next_state=0;
    6ea8:	19 82       	std	Y+1, r1	; 0x01


	next_state=lookup_table_array[current_state][dir_state];
    6eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    6eac:	28 2f       	mov	r18, r24
    6eae:	30 e0       	ldi	r19, 0x00	; 0
    6eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    6eb2:	48 2f       	mov	r20, r24
    6eb4:	50 e0       	ldi	r21, 0x00	; 0
    6eb6:	c9 01       	movw	r24, r18
    6eb8:	88 0f       	add	r24, r24
    6eba:	99 1f       	adc	r25, r25
    6ebc:	82 0f       	add	r24, r18
    6ebe:	93 1f       	adc	r25, r19
    6ec0:	84 0f       	add	r24, r20
    6ec2:	95 1f       	adc	r25, r21
    6ec4:	fc 01       	movw	r30, r24
    6ec6:	e4 5c       	subi	r30, 0xC4	; 196
    6ec8:	fd 4f       	sbci	r31, 0xFD	; 253
    6eca:	80 81       	ld	r24, Z
    6ecc:	89 83       	std	Y+1, r24	; 0x01




	return next_state;
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    6ed0:	0f 90       	pop	r0
    6ed2:	0f 90       	pop	r0
    6ed4:	0f 90       	pop	r0
    6ed6:	cf 91       	pop	r28
    6ed8:	df 91       	pop	r29
    6eda:	08 95       	ret

00006edc <terminate_fun>:
#include"../main.h"



ret_state terminate_fun(void)
{
    6edc:	df 93       	push	r29
    6ede:	cf 93       	push	r28
    6ee0:	cd b7       	in	r28, 0x3d	; 61
    6ee2:	de b7       	in	r29, 0x3e	; 62
    6ee4:	2e 97       	sbiw	r28, 0x0e	; 14
    6ee6:	0f b6       	in	r0, 0x3f	; 63
    6ee8:	f8 94       	cli
    6eea:	de bf       	out	0x3e, r29	; 62
    6eec:	0f be       	out	0x3f, r0	; 63
    6eee:	cd bf       	out	0x3d, r28	; 61

	EF_void_UART_SendString("Terminate state\r\n");
    6ef0:	82 e2       	ldi	r24, 0x22	; 34
    6ef2:	92 e0       	ldi	r25, 0x02	; 2
    6ef4:	0e 94 6e 17 	call	0x2edc	; 0x2edc <EF_void_UART_SendString>
    6ef8:	80 e0       	ldi	r24, 0x00	; 0
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	aa ef       	ldi	r26, 0xFA	; 250
    6efe:	b4 e4       	ldi	r27, 0x44	; 68
    6f00:	8b 87       	std	Y+11, r24	; 0x0b
    6f02:	9c 87       	std	Y+12, r25	; 0x0c
    6f04:	ad 87       	std	Y+13, r26	; 0x0d
    6f06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f10:	20 e0       	ldi	r18, 0x00	; 0
    6f12:	30 e0       	ldi	r19, 0x00	; 0
    6f14:	4a ef       	ldi	r20, 0xFA	; 250
    6f16:	54 e4       	ldi	r21, 0x44	; 68
    6f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f1c:	dc 01       	movw	r26, r24
    6f1e:	cb 01       	movw	r24, r22
    6f20:	8f 83       	std	Y+7, r24	; 0x07
    6f22:	98 87       	std	Y+8, r25	; 0x08
    6f24:	a9 87       	std	Y+9, r26	; 0x09
    6f26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f28:	6f 81       	ldd	r22, Y+7	; 0x07
    6f2a:	78 85       	ldd	r23, Y+8	; 0x08
    6f2c:	89 85       	ldd	r24, Y+9	; 0x09
    6f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f30:	20 e0       	ldi	r18, 0x00	; 0
    6f32:	30 e0       	ldi	r19, 0x00	; 0
    6f34:	40 e8       	ldi	r20, 0x80	; 128
    6f36:	5f e3       	ldi	r21, 0x3F	; 63
    6f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6f3c:	88 23       	and	r24, r24
    6f3e:	2c f4       	brge	.+10     	; 0x6f4a <terminate_fun+0x6e>
		__ticks = 1;
    6f40:	81 e0       	ldi	r24, 0x01	; 1
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	9e 83       	std	Y+6, r25	; 0x06
    6f46:	8d 83       	std	Y+5, r24	; 0x05
    6f48:	3f c0       	rjmp	.+126    	; 0x6fc8 <terminate_fun+0xec>
	else if (__tmp > 65535)
    6f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    6f4c:	78 85       	ldd	r23, Y+8	; 0x08
    6f4e:	89 85       	ldd	r24, Y+9	; 0x09
    6f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f52:	20 e0       	ldi	r18, 0x00	; 0
    6f54:	3f ef       	ldi	r19, 0xFF	; 255
    6f56:	4f e7       	ldi	r20, 0x7F	; 127
    6f58:	57 e4       	ldi	r21, 0x47	; 71
    6f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6f5e:	18 16       	cp	r1, r24
    6f60:	4c f5       	brge	.+82     	; 0x6fb4 <terminate_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f6a:	20 e0       	ldi	r18, 0x00	; 0
    6f6c:	30 e0       	ldi	r19, 0x00	; 0
    6f6e:	40 e2       	ldi	r20, 0x20	; 32
    6f70:	51 e4       	ldi	r21, 0x41	; 65
    6f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f76:	dc 01       	movw	r26, r24
    6f78:	cb 01       	movw	r24, r22
    6f7a:	bc 01       	movw	r22, r24
    6f7c:	cd 01       	movw	r24, r26
    6f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f82:	dc 01       	movw	r26, r24
    6f84:	cb 01       	movw	r24, r22
    6f86:	9e 83       	std	Y+6, r25	; 0x06
    6f88:	8d 83       	std	Y+5, r24	; 0x05
    6f8a:	0f c0       	rjmp	.+30     	; 0x6faa <terminate_fun+0xce>
    6f8c:	88 ec       	ldi	r24, 0xC8	; 200
    6f8e:	90 e0       	ldi	r25, 0x00	; 0
    6f90:	9c 83       	std	Y+4, r25	; 0x04
    6f92:	8b 83       	std	Y+3, r24	; 0x03
    6f94:	8b 81       	ldd	r24, Y+3	; 0x03
    6f96:	9c 81       	ldd	r25, Y+4	; 0x04
    6f98:	01 97       	sbiw	r24, 0x01	; 1
    6f9a:	f1 f7       	brne	.-4      	; 0x6f98 <terminate_fun+0xbc>
    6f9c:	9c 83       	std	Y+4, r25	; 0x04
    6f9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    6fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    6fa4:	01 97       	sbiw	r24, 0x01	; 1
    6fa6:	9e 83       	std	Y+6, r25	; 0x06
    6fa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6faa:	8d 81       	ldd	r24, Y+5	; 0x05
    6fac:	9e 81       	ldd	r25, Y+6	; 0x06
    6fae:	00 97       	sbiw	r24, 0x00	; 0
    6fb0:	69 f7       	brne	.-38     	; 0x6f8c <terminate_fun+0xb0>
    6fb2:	14 c0       	rjmp	.+40     	; 0x6fdc <terminate_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    6fb6:	78 85       	ldd	r23, Y+8	; 0x08
    6fb8:	89 85       	ldd	r24, Y+9	; 0x09
    6fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fc0:	dc 01       	movw	r26, r24
    6fc2:	cb 01       	movw	r24, r22
    6fc4:	9e 83       	std	Y+6, r25	; 0x06
    6fc6:	8d 83       	std	Y+5, r24	; 0x05
    6fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    6fca:	9e 81       	ldd	r25, Y+6	; 0x06
    6fcc:	9a 83       	std	Y+2, r25	; 0x02
    6fce:	89 83       	std	Y+1, r24	; 0x01
    6fd0:	89 81       	ldd	r24, Y+1	; 0x01
    6fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd4:	01 97       	sbiw	r24, 0x01	; 1
    6fd6:	f1 f7       	brne	.-4      	; 0x6fd4 <terminate_fun+0xf8>
    6fd8:	9a 83       	std	Y+2, r25	; 0x02
    6fda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

return ret_operation;
    6fdc:	81 e0       	ldi	r24, 0x01	; 1
}
    6fde:	2e 96       	adiw	r28, 0x0e	; 14
    6fe0:	0f b6       	in	r0, 0x3f	; 63
    6fe2:	f8 94       	cli
    6fe4:	de bf       	out	0x3e, r29	; 62
    6fe6:	0f be       	out	0x3f, r0	; 63
    6fe8:	cd bf       	out	0x3d, r28	; 61
    6fea:	cf 91       	pop	r28
    6fec:	df 91       	pop	r29
    6fee:	08 95       	ret

00006ff0 <main>:

ret_state (* states[3])(void)={init_fun,operation_fun,terminate_fun};


int main(void)
{
    6ff0:	df 93       	push	r29
    6ff2:	cf 93       	push	r28
    6ff4:	00 d0       	rcall	.+0      	; 0x6ff6 <main+0x6>
    6ff6:	0f 92       	push	r0
    6ff8:	cd b7       	in	r28, 0x3d	; 61
    6ffa:	de b7       	in	r29, 0x3e	; 62
	state	current_state=init;
    6ffc:	1b 82       	std	Y+3, r1	; 0x03
	ret_state (*state_fun)(void);

	while(1)                     /* Super LOOP */
	{
		state_fun=states[current_state];
    6ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    7000:	88 2f       	mov	r24, r24
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	88 0f       	add	r24, r24
    7006:	99 1f       	adc	r25, r25
    7008:	fc 01       	movw	r30, r24
    700a:	eb 5b       	subi	r30, 0xBB	; 187
    700c:	fd 4f       	sbci	r31, 0xFD	; 253
    700e:	80 81       	ld	r24, Z
    7010:	91 81       	ldd	r25, Z+1	; 0x01
    7012:	9a 83       	std	Y+2, r25	; 0x02
    7014:	89 83       	std	Y+1, r24	; 0x01
		return_state=state_fun();
    7016:	e9 81       	ldd	r30, Y+1	; 0x01
    7018:	fa 81       	ldd	r31, Y+2	; 0x02
    701a:	09 95       	icall
    701c:	80 93 96 02 	sts	0x0296, r24

		current_state=lookup_table(current_state,return_state);
    7020:	90 91 96 02 	lds	r25, 0x0296
    7024:	8b 81       	ldd	r24, Y+3	; 0x03
    7026:	69 2f       	mov	r22, r25
    7028:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <lookup_table>
    702c:	8b 83       	std	Y+3, r24	; 0x03
    702e:	e7 cf       	rjmp	.-50     	; 0x6ffe <main+0xe>

00007030 <__udivmodqi4>:
    7030:	99 1b       	sub	r25, r25
    7032:	79 e0       	ldi	r23, 0x09	; 9
    7034:	04 c0       	rjmp	.+8      	; 0x703e <__udivmodqi4_ep>

00007036 <__udivmodqi4_loop>:
    7036:	99 1f       	adc	r25, r25
    7038:	96 17       	cp	r25, r22
    703a:	08 f0       	brcs	.+2      	; 0x703e <__udivmodqi4_ep>
    703c:	96 1b       	sub	r25, r22

0000703e <__udivmodqi4_ep>:
    703e:	88 1f       	adc	r24, r24
    7040:	7a 95       	dec	r23
    7042:	c9 f7       	brne	.-14     	; 0x7036 <__udivmodqi4_loop>
    7044:	80 95       	com	r24
    7046:	08 95       	ret

00007048 <__udivmodhi4>:
    7048:	aa 1b       	sub	r26, r26
    704a:	bb 1b       	sub	r27, r27
    704c:	51 e1       	ldi	r21, 0x11	; 17
    704e:	07 c0       	rjmp	.+14     	; 0x705e <__udivmodhi4_ep>

00007050 <__udivmodhi4_loop>:
    7050:	aa 1f       	adc	r26, r26
    7052:	bb 1f       	adc	r27, r27
    7054:	a6 17       	cp	r26, r22
    7056:	b7 07       	cpc	r27, r23
    7058:	10 f0       	brcs	.+4      	; 0x705e <__udivmodhi4_ep>
    705a:	a6 1b       	sub	r26, r22
    705c:	b7 0b       	sbc	r27, r23

0000705e <__udivmodhi4_ep>:
    705e:	88 1f       	adc	r24, r24
    7060:	99 1f       	adc	r25, r25
    7062:	5a 95       	dec	r21
    7064:	a9 f7       	brne	.-22     	; 0x7050 <__udivmodhi4_loop>
    7066:	80 95       	com	r24
    7068:	90 95       	com	r25
    706a:	bc 01       	movw	r22, r24
    706c:	cd 01       	movw	r24, r26
    706e:	08 95       	ret

00007070 <__divmodhi4>:
    7070:	97 fb       	bst	r25, 7
    7072:	09 2e       	mov	r0, r25
    7074:	07 26       	eor	r0, r23
    7076:	0a d0       	rcall	.+20     	; 0x708c <__divmodhi4_neg1>
    7078:	77 fd       	sbrc	r23, 7
    707a:	04 d0       	rcall	.+8      	; 0x7084 <__divmodhi4_neg2>
    707c:	e5 df       	rcall	.-54     	; 0x7048 <__udivmodhi4>
    707e:	06 d0       	rcall	.+12     	; 0x708c <__divmodhi4_neg1>
    7080:	00 20       	and	r0, r0
    7082:	1a f4       	brpl	.+6      	; 0x708a <__divmodhi4_exit>

00007084 <__divmodhi4_neg2>:
    7084:	70 95       	com	r23
    7086:	61 95       	neg	r22
    7088:	7f 4f       	sbci	r23, 0xFF	; 255

0000708a <__divmodhi4_exit>:
    708a:	08 95       	ret

0000708c <__divmodhi4_neg1>:
    708c:	f6 f7       	brtc	.-4      	; 0x708a <__divmodhi4_exit>
    708e:	90 95       	com	r25
    7090:	81 95       	neg	r24
    7092:	9f 4f       	sbci	r25, 0xFF	; 255
    7094:	08 95       	ret

00007096 <__udivmodsi4>:
    7096:	a1 e2       	ldi	r26, 0x21	; 33
    7098:	1a 2e       	mov	r1, r26
    709a:	aa 1b       	sub	r26, r26
    709c:	bb 1b       	sub	r27, r27
    709e:	fd 01       	movw	r30, r26
    70a0:	0d c0       	rjmp	.+26     	; 0x70bc <__udivmodsi4_ep>

000070a2 <__udivmodsi4_loop>:
    70a2:	aa 1f       	adc	r26, r26
    70a4:	bb 1f       	adc	r27, r27
    70a6:	ee 1f       	adc	r30, r30
    70a8:	ff 1f       	adc	r31, r31
    70aa:	a2 17       	cp	r26, r18
    70ac:	b3 07       	cpc	r27, r19
    70ae:	e4 07       	cpc	r30, r20
    70b0:	f5 07       	cpc	r31, r21
    70b2:	20 f0       	brcs	.+8      	; 0x70bc <__udivmodsi4_ep>
    70b4:	a2 1b       	sub	r26, r18
    70b6:	b3 0b       	sbc	r27, r19
    70b8:	e4 0b       	sbc	r30, r20
    70ba:	f5 0b       	sbc	r31, r21

000070bc <__udivmodsi4_ep>:
    70bc:	66 1f       	adc	r22, r22
    70be:	77 1f       	adc	r23, r23
    70c0:	88 1f       	adc	r24, r24
    70c2:	99 1f       	adc	r25, r25
    70c4:	1a 94       	dec	r1
    70c6:	69 f7       	brne	.-38     	; 0x70a2 <__udivmodsi4_loop>
    70c8:	60 95       	com	r22
    70ca:	70 95       	com	r23
    70cc:	80 95       	com	r24
    70ce:	90 95       	com	r25
    70d0:	9b 01       	movw	r18, r22
    70d2:	ac 01       	movw	r20, r24
    70d4:	bd 01       	movw	r22, r26
    70d6:	cf 01       	movw	r24, r30
    70d8:	08 95       	ret

000070da <__prologue_saves__>:
    70da:	2f 92       	push	r2
    70dc:	3f 92       	push	r3
    70de:	4f 92       	push	r4
    70e0:	5f 92       	push	r5
    70e2:	6f 92       	push	r6
    70e4:	7f 92       	push	r7
    70e6:	8f 92       	push	r8
    70e8:	9f 92       	push	r9
    70ea:	af 92       	push	r10
    70ec:	bf 92       	push	r11
    70ee:	cf 92       	push	r12
    70f0:	df 92       	push	r13
    70f2:	ef 92       	push	r14
    70f4:	ff 92       	push	r15
    70f6:	0f 93       	push	r16
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	cd b7       	in	r28, 0x3d	; 61
    7100:	de b7       	in	r29, 0x3e	; 62
    7102:	ca 1b       	sub	r28, r26
    7104:	db 0b       	sbc	r29, r27
    7106:	0f b6       	in	r0, 0x3f	; 63
    7108:	f8 94       	cli
    710a:	de bf       	out	0x3e, r29	; 62
    710c:	0f be       	out	0x3f, r0	; 63
    710e:	cd bf       	out	0x3d, r28	; 61
    7110:	09 94       	ijmp

00007112 <__epilogue_restores__>:
    7112:	2a 88       	ldd	r2, Y+18	; 0x12
    7114:	39 88       	ldd	r3, Y+17	; 0x11
    7116:	48 88       	ldd	r4, Y+16	; 0x10
    7118:	5f 84       	ldd	r5, Y+15	; 0x0f
    711a:	6e 84       	ldd	r6, Y+14	; 0x0e
    711c:	7d 84       	ldd	r7, Y+13	; 0x0d
    711e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7120:	9b 84       	ldd	r9, Y+11	; 0x0b
    7122:	aa 84       	ldd	r10, Y+10	; 0x0a
    7124:	b9 84       	ldd	r11, Y+9	; 0x09
    7126:	c8 84       	ldd	r12, Y+8	; 0x08
    7128:	df 80       	ldd	r13, Y+7	; 0x07
    712a:	ee 80       	ldd	r14, Y+6	; 0x06
    712c:	fd 80       	ldd	r15, Y+5	; 0x05
    712e:	0c 81       	ldd	r16, Y+4	; 0x04
    7130:	1b 81       	ldd	r17, Y+3	; 0x03
    7132:	aa 81       	ldd	r26, Y+2	; 0x02
    7134:	b9 81       	ldd	r27, Y+1	; 0x01
    7136:	ce 0f       	add	r28, r30
    7138:	d1 1d       	adc	r29, r1
    713a:	0f b6       	in	r0, 0x3f	; 63
    713c:	f8 94       	cli
    713e:	de bf       	out	0x3e, r29	; 62
    7140:	0f be       	out	0x3f, r0	; 63
    7142:	cd bf       	out	0x3d, r28	; 61
    7144:	ed 01       	movw	r28, r26
    7146:	08 95       	ret

00007148 <itoa>:
    7148:	fb 01       	movw	r30, r22
    714a:	9f 01       	movw	r18, r30
    714c:	e8 94       	clt
    714e:	42 30       	cpi	r20, 0x02	; 2
    7150:	c4 f0       	brlt	.+48     	; 0x7182 <itoa+0x3a>
    7152:	45 32       	cpi	r20, 0x25	; 37
    7154:	b4 f4       	brge	.+44     	; 0x7182 <itoa+0x3a>
    7156:	4a 30       	cpi	r20, 0x0A	; 10
    7158:	29 f4       	brne	.+10     	; 0x7164 <itoa+0x1c>
    715a:	97 fb       	bst	r25, 7
    715c:	1e f4       	brtc	.+6      	; 0x7164 <itoa+0x1c>
    715e:	90 95       	com	r25
    7160:	81 95       	neg	r24
    7162:	9f 4f       	sbci	r25, 0xFF	; 255
    7164:	64 2f       	mov	r22, r20
    7166:	77 27       	eor	r23, r23
    7168:	0e 94 24 38 	call	0x7048	; 0x7048 <__udivmodhi4>
    716c:	80 5d       	subi	r24, 0xD0	; 208
    716e:	8a 33       	cpi	r24, 0x3A	; 58
    7170:	0c f0       	brlt	.+2      	; 0x7174 <itoa+0x2c>
    7172:	89 5d       	subi	r24, 0xD9	; 217
    7174:	81 93       	st	Z+, r24
    7176:	cb 01       	movw	r24, r22
    7178:	00 97       	sbiw	r24, 0x00	; 0
    717a:	a1 f7       	brne	.-24     	; 0x7164 <itoa+0x1c>
    717c:	16 f4       	brtc	.+4      	; 0x7182 <itoa+0x3a>
    717e:	5d e2       	ldi	r21, 0x2D	; 45
    7180:	51 93       	st	Z+, r21
    7182:	10 82       	st	Z, r1
    7184:	c9 01       	movw	r24, r18
    7186:	0c 94 c5 38 	jmp	0x718a	; 0x718a <strrev>

0000718a <strrev>:
    718a:	dc 01       	movw	r26, r24
    718c:	fc 01       	movw	r30, r24
    718e:	67 2f       	mov	r22, r23
    7190:	71 91       	ld	r23, Z+
    7192:	77 23       	and	r23, r23
    7194:	e1 f7       	brne	.-8      	; 0x718e <strrev+0x4>
    7196:	32 97       	sbiw	r30, 0x02	; 2
    7198:	04 c0       	rjmp	.+8      	; 0x71a2 <strrev+0x18>
    719a:	7c 91       	ld	r23, X
    719c:	6d 93       	st	X+, r22
    719e:	70 83       	st	Z, r23
    71a0:	62 91       	ld	r22, -Z
    71a2:	ae 17       	cp	r26, r30
    71a4:	bf 07       	cpc	r27, r31
    71a6:	c8 f3       	brcs	.-14     	; 0x719a <strrev+0x10>
    71a8:	08 95       	ret

000071aa <_exit>:
    71aa:	f8 94       	cli

000071ac <__stop_program>:
    71ac:	ff cf       	rjmp	.-2      	; 0x71ac <__stop_program>
