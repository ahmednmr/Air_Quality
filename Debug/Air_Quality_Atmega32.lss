
Air_Quality_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000252  00800060  00005450  000054e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bf  008002b2  008002b2  00005736  2**0
                  ALLOC
  3 .stab         00005a6c  00000000  00000000  00005738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022b9  00000000  00000000  0000b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d45d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000d74c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000f791  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00010892  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00011814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00011c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000124e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <main>
      8a:	0c 94 26 2a 	jmp	0x544c	; 0x544c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e9       	ldi	r26, 0x99	; 153
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e9       	ldi	r24, 0x99	; 153
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e9       	ldi	r22, 0x99	; 153
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_init>:




void ADC_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	ADMUX=0b11000000;     // vcc refrence - ADLAR=0/CH0
     ca6:	e7 e2       	ldi	r30, 0x27	; 39
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 ec       	ldi	r24, 0xC0	; 192
     cac:	80 83       	st	Z, r24
	ADCSRA=0b10000111;    //Enable ADC - Prescaler "/128"
     cae:	e6 e2       	ldi	r30, 0x26	; 38
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	87 e8       	ldi	r24, 0x87	; 135
     cb4:	80 83       	st	Z, r24

}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <ADC_Get_reading_mv>:



unsigned int ADC_Get_reading_mv(char ch)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	0f 92       	push	r0
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 83       	std	Y+1, r24	; 0x01

ADMUX =(ADMUX&0xF8)|ch;
     cc8:	a7 e2       	ldi	r26, 0x27	; 39
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e2       	ldi	r30, 0x27	; 39
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	98 2f       	mov	r25, r24
     cd4:	98 7f       	andi	r25, 0xF8	; 248
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	89 2b       	or	r24, r25
     cda:	8c 93       	st	X, r24
	ADCSRA |=(1<<ADSC);  // start conversion
     cdc:	a6 e2       	ldi	r26, 0x26	; 38
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e6 e2       	ldi	r30, 0x26	; 38
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 64       	ori	r24, 0x40	; 64
     ce8:	8c 93       	st	X, r24
	while(!(ADCSRA&(1<<ADIF)));
     cea:	e6 e2       	ldi	r30, 0x26	; 38
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	80 71       	andi	r24, 0x10	; 16
     cf6:	90 70       	andi	r25, 0x00	; 0
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	b9 f3       	breq	.-18     	; 0xcea <ADC_Get_reading_mv+0x2e>

	return ADC;
     cfc:	e4 e2       	ldi	r30, 0x24	; 36
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01


}
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <init_UART>:




void init_UART(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <init_UART+0x6>
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	unsigned int Value_of_UBBR = 0;
     d16:	1a 82       	std	Y+2, r1	; 0x02
     d18:	19 82       	std	Y+1, r1	; 0x01


//	    UCSRA= (1<<U2X);
		UCSRB = (1 << RXEN) | (1 << TXEN)|(1<<RXCIE);
     d1a:	ea e2       	ldi	r30, 0x2A	; 42
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	88 e9       	ldi	r24, 0x98	; 152
     d20:	80 83       	st	Z, r24
       UCSRC = (1 << URSEL) | (3 << UCSZ0);
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	86 e8       	ldi	r24, 0x86	; 134
     d28:	80 83       	st	Z, r24
				UBRRL = 51;
     d2a:	e9 e2       	ldi	r30, 0x29	; 41
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	83 e3       	ldi	r24, 0x33	; 51
     d30:	80 83       	st	Z, r24
				UBRRH =0;
     d32:	e0 e4       	ldi	r30, 0x40	; 64
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	10 82       	st	Z, r1
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <UART_SendChar>:


void UART_SendChar(char data)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSRA & (1<<UDRE))) ;  /* Wait for empty transmit buffer */
     d4e:	eb e2       	ldi	r30, 0x2B	; 43
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 72       	andi	r24, 0x20	; 32
     d5a:	90 70       	andi	r25, 0x00	; 0
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	b9 f3       	breq	.-18     	; 0xd4e <UART_SendChar+0xc>

	UDR = data;                     /* Put data into buffer, sends the data */
     d60:	ec e2       	ldi	r30, 0x2C	; 44
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	80 83       	st	Z, r24
}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_getChar>:


char UART_getChar(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1<<RXC)));   /* Wait until reveived flag set */
     d78:	eb e2       	ldi	r30, 0x2B	; 43
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 23       	and	r24, r24
     d80:	dc f7       	brge	.-10     	; 0xd78 <UART_getChar+0x8>

	return UDR;                   /* Return data in received buffer */
     d82:	ec e2       	ldi	r30, 0x2C	; 44
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <UART_SEND_string>:


void UART_SEND_string(char *array)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	00 d0       	rcall	.+0      	; 0xd94 <UART_SEND_string+0x6>
     d94:	00 d0       	rcall	.+0      	; 0xd96 <UART_SEND_string+0x8>
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     d9e:	1a 82       	std	Y+2, r1	; 0x02
     da0:	19 82       	std	Y+1, r1	; 0x01
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <UART_SEND_string+0x34>
    while(array[i]!='\0')
    {

    	UART_SendChar(array[i]);
     da4:	29 81       	ldd	r18, Y+1	; 0x01
     da6:	3a 81       	ldd	r19, Y+2	; 0x02
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	fc 01       	movw	r30, r24
     dae:	e2 0f       	add	r30, r18
     db0:	f3 1f       	adc	r31, r19
     db2:	80 81       	ld	r24, Z
     db4:	0e 94 a1 06 	call	0xd42	; 0xd42 <UART_SendChar>
    	i++;
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01


void UART_SEND_string(char *array)
{
	int i=0;
    while(array[i]!='\0')
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
     dc4:	3a 81       	ldd	r19, Y+2	; 0x02
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	fc 01       	movw	r30, r24
     dcc:	e2 0f       	add	r30, r18
     dce:	f3 1f       	adc	r31, r19
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	39 f7       	brne	.-50     	; 0xda4 <UART_SEND_string+0x16>

    	UART_SendChar(array[i]);
    	i++;
    }

}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <UART_SEND_number>:



void UART_SEND_number(int number)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	66 97       	sbiw	r28, 0x16	; 22
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	9e 8b       	std	Y+22, r25	; 0x16
     dfa:	8d 8b       	std	Y+21, r24	; 0x15
   char buffer[20];

   itoa(number,buffer,10);
     dfc:	8d 89       	ldd	r24, Y+21	; 0x15
     dfe:	9e 89       	ldd	r25, Y+22	; 0x16
     e00:	9e 01       	movw	r18, r28
     e02:	2f 5f       	subi	r18, 0xFF	; 255
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	b9 01       	movw	r22, r18
     e08:	4a e0       	ldi	r20, 0x0A	; 10
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <itoa>
   UART_SEND_string(buffer);
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>


}
     e18:	66 96       	adiw	r28, 0x16	; 22
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <Set_Call_Back_fun>:


void Set_Call_Back_fun(void (*PTR)(void))
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <Set_Call_Back_fun+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01

ISR_UART_RX_fun=PTR;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	90 93 b6 02 	sts	0x02B6, r25
     e40:	80 93 b5 02 	sts	0x02B5, r24


}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <__vector_13>:

ISR (USART_RXC_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62

	ISR_UART_RX_fun();
     e78:	e0 91 b5 02 	lds	r30, 0x02B5
     e7c:	f0 91 b6 02 	lds	r31, 0x02B6
     e80:	09 95       	icall


}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <TWI_Init>:
#include<avr/delay.h>
#include"i2c.h"


void TWI_Init(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62

//	TWCR = 0;
//	TWBR= TWBR_val;

TWSR=0;
     eb0:	e1 e2       	ldi	r30, 0x21	; 33
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	10 82       	st	Z, r1
TWBR=0x47;             //50khz
     eb6:	e0 e2       	ldi	r30, 0x20	; 32
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	87 e4       	ldi	r24, 0x47	; 71
     ebc:	80 83       	st	Z, r24
TWCR=0x04;
     ebe:	e6 e5       	ldi	r30, 0x56	; 86
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	80 83       	st	Z, r24


}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <TWI_Start>:


void TWI_Start(void)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
     ed4:	e6 e5       	ldi	r30, 0x56	; 86
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	84 ea       	ldi	r24, 0xA4	; 164
     eda:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)) );   		//Wait for TWINT flag set. This indicates that the
     edc:	e6 e5       	ldi	r30, 0x56	; 86
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 23       	and	r24, r24
     ee4:	dc f7       	brge	.-10     	; 0xedc <TWI_Start+0x10>

	}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <TWI_SendAddress>:



void TWI_SendAddress(unsigned char address)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01


	TWDR = address;
     ef8:	e3 e2       	ldi	r30, 0x23	; 35
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     f00:	e6 e5       	ldi	r30, 0x56	; 86
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	84 e8       	ldi	r24, 0x84	; 132
     f06:	80 83       	st	Z, r24
                                     	//in TWCR to start transmission of address

	while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     f08:	e6 e5       	ldi	r30, 0x56	; 86
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 23       	and	r24, r24
     f10:	dc f7       	brge	.-10     	; 0xf08 <TWI_SendAddress+0x1c>

}
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <TWI_SendData>:

void TWI_SendData(unsigned char data)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
     f26:	e3 e2       	ldi	r30, 0x23	; 35
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     f2e:	e6 e5       	ldi	r30, 0x56	; 86
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	84 e8       	ldi	r24, 0x84	; 132
     f34:	80 83       	st	Z, r24
	                                   //in TWCR to start transmission of data

	while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     f36:	e6 e5       	ldi	r30, 0x56	; 86
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	dc f7       	brge	.-10     	; 0xf36 <TWI_SendData+0x1c>

	}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TWI_ReceiveData_ACK>:

void TWI_ReceiveData_ACK(unsigned char * pu8RxData)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <TWI_ReceiveData_ACK+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01


	*pu8RxData =0;
     f56:	e9 81       	ldd	r30, Y+1	; 0x01
     f58:	fa 81       	ldd	r31, Y+2	; 0x02
     f5a:	10 82       	st	Z, r1

	TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     f5c:	e6 e5       	ldi	r30, 0x56	; 86
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	84 ec       	ldi	r24, 0xC4	; 196
     f62:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));		//Wait for TWINT flag set. This indicates that the
     f64:	e6 e5       	ldi	r30, 0x56	; 86
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	dc f7       	brge	.-10     	; 0xf64 <TWI_ReceiveData_ACK+0x1c>

	*pu8RxData = TWDR;
     f6e:	e3 e2       	ldi	r30, 0x23	; 35
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	e9 81       	ldd	r30, Y+1	; 0x01
     f76:	fa 81       	ldd	r31, Y+2	; 0x02
     f78:	80 83       	st	Z, r24

}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <TWI_ReceiveData_NACK>:


void TWI_ReceiveData_NACK(unsigned char * pu8RxData)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <TWI_ReceiveData_NACK+0x6>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01

	TWCR = (1<<TWINT)|(1<<TWEN);
     f92:	e6 e5       	ldi	r30, 0x56	; 86
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	84 e8       	ldi	r24, 0x84	; 132
     f98:	80 83       	st	Z, r24


	while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     f9a:	e6 e5       	ldi	r30, 0x56	; 86
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	dc f7       	brge	.-10     	; 0xf9a <TWI_ReceiveData_NACK+0x16>
	*pu8RxData = TWDR;
     fa4:	e3 e2       	ldi	r30, 0x23	; 35
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	e9 81       	ldd	r30, Y+1	; 0x01
     fac:	fa 81       	ldd	r31, Y+2	; 0x02
     fae:	80 83       	st	Z, r24


}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TWI_Stop>:

void TWI_Stop(void)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
     fc2:	e6 e5       	ldi	r30, 0x56	; 86
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	84 e9       	ldi	r24, 0x94	; 148
     fc8:	80 83       	st	Z, r24
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <TWI_Read8>:




unsigned char  TWI_Read8(unsigned char DeviceAdd, unsigned char memory_location)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <TWI_Read8+0x6>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t DataByte = 0;
     fe0:	19 82       	std	Y+1, r1	; 0x01

	TWI_Start();                      /* Send Start Bit 						 */
     fe2:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(DeviceAdd);         /* Send Slave address with Operation Write */
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(memory_location);       /* Send Memory Location Address 			 */
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Start();                      /* Send Restart Bit 						 */
     ff2:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(DeviceAdd | 1);     /* Send Slave address with Operation read  */
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_ReceiveData_NACK(&DataByte);
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	0e 94 c2 07 	call	0xf84	; 0xf84 <TWI_ReceiveData_NACK>
	TWI_Stop();
    1006:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>

	return DataByte;
    100a:	89 81       	ldd	r24, Y+1	; 0x01

}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <TWI_Read16>:

unsigned char TWI_Read16(unsigned char DeviceAdd,unsigned char memory_location)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <TWI_Read16+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <TWI_Read16+0x8>
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	8c 83       	std	Y+4, r24	; 0x04
    1028:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t u16Data = 0;
    102a:	1a 82       	std	Y+2, r1	; 0x02
    102c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Data = 0;
    102e:	1b 82       	std	Y+3, r1	; 0x03

	TWI_Start();                      /* Send Start Bit 						 */
    1030:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(DeviceAdd);         /* Send Slave address with Operation Write */
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(memory_location);       /* Send Memory Location Address 			 */
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Start();                      /* Send Restart Bit 						 */
    1040:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(DeviceAdd | 1);     /* Send Slave address with Operation read  */
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	81 60       	ori	r24, 0x01	; 1
    1048:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_ReceiveData_ACK(&u8Data);  //read 2 or 3 bytes ?
    104c:	ce 01       	movw	r24, r28
    104e:	03 96       	adiw	r24, 0x03	; 3
    1050:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
	u16Data = u8Data<<8;
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	98 2f       	mov	r25, r24
    105c:	88 27       	eor	r24, r24
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
	TWI_ReceiveData_NACK(&u8Data);
    1062:	ce 01       	movw	r24, r28
    1064:	03 96       	adiw	r24, 0x03	; 3
    1066:	0e 94 c2 07 	call	0xf84	; 0xf84 <TWI_ReceiveData_NACK>
	TWI_Stop();
    106a:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>

	u16Data |= u8Data;
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	82 2b       	or	r24, r18
    107a:	93 2b       	or	r25, r19
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
	return u16Data;
    1080:	89 81       	ldd	r24, Y+1	; 0x01

}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <TWI_Write8>:

void  TWI_Write8(unsigned char DeviceAdd, unsigned char memory_location, unsigned char DataByte)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <TWI_Write8+0x6>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	6a 83       	std	Y+2, r22	; 0x02
    10a2:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();                      /* Send Start Bit 						 */
    10a4:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(DeviceAdd);         /* Send Slave address with Operation Write */
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(memory_location);       /* Send Memory Location Address 			 */
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(DataByte);
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Stop();
    10ba:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>

}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <spechial_timer_init>:

timer_struct  timers_list[MAX_NUMBER_OF_TIMERS];


void spechial_timer_init(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <spechial_timer_init+0x6>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
uint16_t timer_counter;

	timer_init();
    10d4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <timer_init>
	timer_set_callBack_fun(spechial_timer_update);
    10d8:	84 ed       	ldi	r24, 0xD4	; 212
    10da:	98 e0       	ldi	r25, 0x08	; 8
    10dc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <timer_set_callBack_fun>

for(timer_counter=0;timer_counter<MAX_NUMBER_OF_TIMERS;timer_counter++)
    10e0:	1a 82       	std	Y+2, r1	; 0x02
    10e2:	19 82       	std	Y+1, r1	; 0x01
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <spechial_timer_init+0x2e>
{
	timer_delete(timer_counter);
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	0e 94 86 08 	call	0x110c	; 0x110c <timer_delete>
uint16_t timer_counter;

	timer_init();
	timer_set_callBack_fun(spechial_timer_update);

for(timer_counter=0;timer_counter<MAX_NUMBER_OF_TIMERS;timer_counter++)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	8a 30       	cpi	r24, 0x0A	; 10
    10fe:	91 05       	cpc	r25, r1
    1100:	90 f3       	brcs	.-28     	; 0x10e6 <spechial_timer_init+0x1c>
{
	timer_delete(timer_counter);
}

}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <timer_delete>:


void timer_delete(uint16_t timer_number)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <timer_delete+0x6>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01
	timers_list[timer_number].time_out  =0;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	9c 01       	movw	r18, r24
    1124:	22 0f       	add	r18, r18
    1126:	33 1f       	adc	r19, r19
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	fc 01       	movw	r30, r24
    1132:	e7 54       	subi	r30, 0x47	; 71
    1134:	fd 4f       	sbci	r31, 0xFD	; 253
    1136:	10 82       	st	Z, r1
    1138:	11 82       	std	Z+1, r1	; 0x01
    113a:	12 82       	std	Z+2, r1	; 0x02
    113c:	13 82       	std	Z+3, r1	; 0x03
	timers_list[timer_number].counter  =0;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	9c 01       	movw	r18, r24
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	22 0f       	add	r18, r18
    114e:	33 1f       	adc	r19, r19
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	fc 01       	movw	r30, r24
    1156:	e3 54       	subi	r30, 0x43	; 67
    1158:	fd 4f       	sbci	r31, 0xFD	; 253
    115a:	10 82       	st	Z, r1
    115c:	11 82       	std	Z+1, r1	; 0x01
    115e:	12 82       	std	Z+2, r1	; 0x02
    1160:	13 82       	std	Z+3, r1	; 0x03
	timers_list[timer_number].is_time_out  =FALSE;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	9c 01       	movw	r18, r24
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	fc 01       	movw	r30, r24
    117a:	ef 53       	subi	r30, 0x3F	; 63
    117c:	fd 4f       	sbci	r31, 0xFD	; 253
    117e:	10 82       	st	Z, r1
	timers_list[timer_number].is_enabled  =FALSE;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	9c 01       	movw	r18, r24
    118a:	22 0f       	add	r18, r18
    118c:	33 1f       	adc	r19, r19
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	82 0f       	add	r24, r18
    1194:	93 1f       	adc	r25, r19
    1196:	fc 01       	movw	r30, r24
    1198:	ee 53       	subi	r30, 0x3E	; 62
    119a:	fd 4f       	sbci	r31, 0xFD	; 253
    119c:	10 82       	st	Z, r1
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <spechial_timer_update>:



void spechial_timer_update(void)
{
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <spechial_timer_update+0xa>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	uint16_t timer_counter;


	for(timer_counter=0;timer_counter<MAX_NUMBER_OF_TIMERS;timer_counter++)
    11b6:	1a 82       	std	Y+2, r1	; 0x02
    11b8:	19 82       	std	Y+1, r1	; 0x01
    11ba:	8c c0       	rjmp	.+280    	; 0x12d4 <spechial_timer_update+0x12c>
	{
		if(	timers_list[timer_counter].is_enabled  ==TRUE)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	9c 01       	movw	r18, r24
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	fc 01       	movw	r30, r24
    11d4:	ee 53       	subi	r30, 0x3E	; 62
    11d6:	fd 4f       	sbci	r31, 0xFD	; 253
    11d8:	80 81       	ld	r24, Z
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <spechial_timer_update+0x38>
    11de:	75 c0       	rjmp	.+234    	; 0x12ca <spechial_timer_update+0x122>
		{
			timers_list[timer_counter].counter++;
    11e0:	09 81       	ldd	r16, Y+1	; 0x01
    11e2:	1a 81       	ldd	r17, Y+2	; 0x02
    11e4:	c8 01       	movw	r24, r16
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	9c 01       	movw	r18, r24
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	82 0f       	add	r24, r18
    11f6:	93 1f       	adc	r25, r19
    11f8:	fc 01       	movw	r30, r24
    11fa:	e3 54       	subi	r30, 0x43	; 67
    11fc:	fd 4f       	sbci	r31, 0xFD	; 253
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	a2 81       	ldd	r26, Z+2	; 0x02
    1204:	b3 81       	ldd	r27, Z+3	; 0x03
    1206:	ac 01       	movw	r20, r24
    1208:	bd 01       	movw	r22, r26
    120a:	4f 5f       	subi	r20, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	6f 4f       	sbci	r22, 0xFF	; 255
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	c8 01       	movw	r24, r16
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	9c 01       	movw	r18, r24
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	82 0f       	add	r24, r18
    1224:	93 1f       	adc	r25, r19
    1226:	fc 01       	movw	r30, r24
    1228:	e3 54       	subi	r30, 0x43	; 67
    122a:	fd 4f       	sbci	r31, 0xFD	; 253
    122c:	40 83       	st	Z, r20
    122e:	51 83       	std	Z+1, r21	; 0x01
    1230:	62 83       	std	Z+2, r22	; 0x02
    1232:	73 83       	std	Z+3, r23	; 0x03
			if(	timers_list[timer_counter].counter  ==timers_list[timer_counter].time_out)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	9c 01       	movw	r18, r24
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	82 0f       	add	r24, r18
    1248:	93 1f       	adc	r25, r19
    124a:	fc 01       	movw	r30, r24
    124c:	e3 54       	subi	r30, 0x43	; 67
    124e:	fd 4f       	sbci	r31, 0xFD	; 253
    1250:	40 81       	ld	r20, Z
    1252:	51 81       	ldd	r21, Z+1	; 0x01
    1254:	62 81       	ldd	r22, Z+2	; 0x02
    1256:	73 81       	ldd	r23, Z+3	; 0x03
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	9c 01       	movw	r18, r24
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	fc 01       	movw	r30, r24
    1270:	e7 54       	subi	r30, 0x47	; 71
    1272:	fd 4f       	sbci	r31, 0xFD	; 253
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	a2 81       	ldd	r26, Z+2	; 0x02
    127a:	b3 81       	ldd	r27, Z+3	; 0x03
    127c:	48 17       	cp	r20, r24
    127e:	59 07       	cpc	r21, r25
    1280:	6a 07       	cpc	r22, r26
    1282:	7b 07       	cpc	r23, r27
    1284:	11 f5       	brne	.+68     	; 0x12ca <spechial_timer_update+0x122>
			{
				timers_list[timer_counter].is_time_out=TRUE;
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	9c 01       	movw	r18, r24
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	82 0f       	add	r24, r18
    129a:	93 1f       	adc	r25, r19
    129c:	fc 01       	movw	r30, r24
    129e:	ef 53       	subi	r30, 0x3F	; 63
    12a0:	fd 4f       	sbci	r31, 0xFD	; 253
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 83       	st	Z, r24
				timers_list[timer_counter].counter    =   0;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	fc 01       	movw	r30, r24
    12be:	e3 54       	subi	r30, 0x43	; 67
    12c0:	fd 4f       	sbci	r31, 0xFD	; 253
    12c2:	10 82       	st	Z, r1
    12c4:	11 82       	std	Z+1, r1	; 0x01
    12c6:	12 82       	std	Z+2, r1	; 0x02
    12c8:	13 82       	std	Z+3, r1	; 0x03
void spechial_timer_update(void)
{
	uint16_t timer_counter;


	for(timer_counter=0;timer_counter<MAX_NUMBER_OF_TIMERS;timer_counter++)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	8a 30       	cpi	r24, 0x0A	; 10
    12da:	91 05       	cpc	r25, r1
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <spechial_timer_update+0x138>
    12de:	6e cf       	rjmp	.-292    	; 0x11bc <spechial_timer_update+0x14>

		}
	}


}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <timer_create>:


void timer_create(uint8_t timer_number,uint32_t timer_time_out)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <timer_create+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <timer_create+0x8>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	4a 83       	std	Y+2, r20	; 0x02
    1300:	5b 83       	std	Y+3, r21	; 0x03
    1302:	6c 83       	std	Y+4, r22	; 0x04
    1304:	7d 83       	std	Y+5, r23	; 0x05
	if(	timers_list[timer_number].time_out==0)
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	9c 01       	movw	r18, r24
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	fc 01       	movw	r30, r24
    1320:	e7 54       	subi	r30, 0x47	; 71
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	a2 81       	ldd	r26, Z+2	; 0x02
    132a:	b3 81       	ldd	r27, Z+3	; 0x03
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	a1 05       	cpc	r26, r1
    1330:	b1 05       	cpc	r27, r1
    1332:	09 f0       	breq	.+2      	; 0x1336 <timer_create+0x48>
    1334:	4a c0       	rjmp	.+148    	; 0x13ca <timer_create+0xdc>
	{

		timers_list[timer_number].time_out  =timer_time_out;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	9c 01       	movw	r18, r24
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	fc 01       	movw	r30, r24
    1350:	e7 54       	subi	r30, 0x47	; 71
    1352:	fd 4f       	sbci	r31, 0xFD	; 253
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	ac 81       	ldd	r26, Y+4	; 0x04
    135a:	bd 81       	ldd	r27, Y+5	; 0x05
    135c:	80 83       	st	Z, r24
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	a2 83       	std	Z+2, r26	; 0x02
    1362:	b3 83       	std	Z+3, r27	; 0x03
		timers_list[timer_number].counter  =0;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	9c 01       	movw	r18, r24
    1370:	22 0f       	add	r18, r18
    1372:	33 1f       	adc	r19, r19
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	fc 01       	movw	r30, r24
    137e:	e3 54       	subi	r30, 0x43	; 67
    1380:	fd 4f       	sbci	r31, 0xFD	; 253
    1382:	10 82       	st	Z, r1
    1384:	11 82       	std	Z+1, r1	; 0x01
    1386:	12 82       	std	Z+2, r1	; 0x02
    1388:	13 82       	std	Z+3, r1	; 0x03
		timers_list[timer_number].is_time_out  =FALSE;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	9c 01       	movw	r18, r24
    1396:	22 0f       	add	r18, r18
    1398:	33 1f       	adc	r19, r19
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	82 0f       	add	r24, r18
    13a0:	93 1f       	adc	r25, r19
    13a2:	fc 01       	movw	r30, r24
    13a4:	ef 53       	subi	r30, 0x3F	; 63
    13a6:	fd 4f       	sbci	r31, 0xFD	; 253
    13a8:	10 82       	st	Z, r1
		timers_list[timer_number].is_enabled  =FALSE;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	9c 01       	movw	r18, r24
    13b6:	22 0f       	add	r18, r18
    13b8:	33 1f       	adc	r19, r19
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	fc 01       	movw	r30, r24
    13c4:	ee 53       	subi	r30, 0x3E	; 62
    13c6:	fd 4f       	sbci	r31, 0xFD	; 253
    13c8:	10 82       	st	Z, r1

	}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <timer_start>:


void timer_start(uint8_t timer_number)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	89 83       	std	Y+1, r24	; 0x01
	if(	timers_list[timer_number].time_out!=0)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	9c 01       	movw	r18, r24
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	fc 01       	movw	r30, r24
    1400:	e7 54       	subi	r30, 0x47	; 71
    1402:	fd 4f       	sbci	r31, 0xFD	; 253
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	a2 81       	ldd	r26, Z+2	; 0x02
    140a:	b3 81       	ldd	r27, Z+3	; 0x03
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	a1 05       	cpc	r26, r1
    1410:	b1 05       	cpc	r27, r1
    1412:	89 f0       	breq	.+34     	; 0x1436 <timer_start+0x5c>
	{
		timers_list[timer_number].is_enabled  =TRUE;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	9c 01       	movw	r18, r24
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	22 0f       	add	r18, r18
    1426:	33 1f       	adc	r19, r19
    1428:	82 0f       	add	r24, r18
    142a:	93 1f       	adc	r25, r19
    142c:	fc 01       	movw	r30, r24
    142e:	ee 53       	subi	r30, 0x3E	; 62
    1430:	fd 4f       	sbci	r31, 0xFD	; 253
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 83       	st	Z, r24
	}

}
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <timer_stop>:

void timer_stop(uint8_t timer_number)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	0f 92       	push	r0
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
		timers_list[timer_number].is_enabled  =FALSE;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	9c 01       	movw	r18, r24
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	fc 01       	movw	r30, r24
    1464:	ee 53       	subi	r30, 0x3E	; 62
    1466:	fd 4f       	sbci	r31, 0xFD	; 253
    1468:	10 82       	st	Z, r1
}
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <timer_reset>:

void timer_reset(uint8_t timer_number)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
		timers_list[timer_number].counter  =0;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	9c 01       	movw	r18, r24
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	22 0f       	add	r18, r18
    1490:	33 1f       	adc	r19, r19
    1492:	82 0f       	add	r24, r18
    1494:	93 1f       	adc	r25, r19
    1496:	fc 01       	movw	r30, r24
    1498:	e3 54       	subi	r30, 0x43	; 67
    149a:	fd 4f       	sbci	r31, 0xFD	; 253
    149c:	10 82       	st	Z, r1
    149e:	11 82       	std	Z+1, r1	; 0x01
    14a0:	12 82       	std	Z+2, r1	; 0x02
    14a2:	13 82       	std	Z+3, r1	; 0x03
}
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <timer_change_timeout>:

void timer_change_timeout(uint8_t timer_number,uint32_t timer_time_out)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <timer_change_timeout+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <timer_change_timeout+0x8>
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	4a 83       	std	Y+2, r20	; 0x02
    14be:	5b 83       	std	Y+3, r21	; 0x03
    14c0:	6c 83       	std	Y+4, r22	; 0x04
    14c2:	7d 83       	std	Y+5, r23	; 0x05

		timers_list[timer_number].time_out  =timer_time_out;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	9c 01       	movw	r18, r24
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	fc 01       	movw	r30, r24
    14de:	e7 54       	subi	r30, 0x47	; 71
    14e0:	fd 4f       	sbci	r31, 0xFD	; 253
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	ac 81       	ldd	r26, Y+4	; 0x04
    14e8:	bd 81       	ldd	r27, Y+5	; 0x05
    14ea:	80 83       	st	Z, r24
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	a2 83       	std	Z+2, r26	; 0x02
    14f0:	b3 83       	std	Z+3, r27	; 0x03

}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <timer_is_time_out>:

uint8_t timer_is_time_out(uint8_t timer_number)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
	return(	timers_list[timer_number].is_time_out);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	9c 01       	movw	r18, r24
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	82 0f       	add	r24, r18
    1524:	93 1f       	adc	r25, r19
    1526:	fc 01       	movw	r30, r24
    1528:	ef 53       	subi	r30, 0x3F	; 63
    152a:	fd 4f       	sbci	r31, 0xFD	; 253
    152c:	80 81       	ld	r24, Z
}
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <timer_check>:

uint8_t timer_check(uint8_t timer_number)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <timer_check+0x6>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t timer_time_OUT=FALSE;
    1542:	19 82       	std	Y+1, r1	; 0x01
	if(timers_list[timer_number].is_time_out)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	9c 01       	movw	r18, r24
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	82 0f       	add	r24, r18
    155a:	93 1f       	adc	r25, r19
    155c:	fc 01       	movw	r30, r24
    155e:	ef 53       	subi	r30, 0x3F	; 63
    1560:	fd 4f       	sbci	r31, 0xFD	; 253
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	91 f0       	breq	.+36     	; 0x158c <timer_check+0x56>
	{
		timers_list[timer_number].is_time_out=FALSE;
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	9c 01       	movw	r18, r24
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	82 0f       	add	r24, r18
    157e:	93 1f       	adc	r25, r19
    1580:	fc 01       	movw	r30, r24
    1582:	ef 53       	subi	r30, 0x3F	; 63
    1584:	fd 4f       	sbci	r31, 0xFD	; 253
    1586:	10 82       	st	Z, r1
		timer_time_OUT=TRUE;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	89 83       	std	Y+1, r24	; 0x01
	}
	return timer_time_OUT;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <timer_counter_current_value>:


uint32_t timer_counter_current_value(uint8_t timer_number)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	89 83       	std	Y+1, r24	; 0x01
	return(	timers_list[timer_number].counter);
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	9c 01       	movw	r18, r24
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	82 0f       	add	r24, r18
    15ba:	93 1f       	adc	r25, r19
    15bc:	fc 01       	movw	r30, r24
    15be:	e3 54       	subi	r30, 0x43	; 67
    15c0:	fd 4f       	sbci	r31, 0xFD	; 253
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	a2 81       	ldd	r26, Z+2	; 0x02
    15c8:	b3 81       	ldd	r27, Z+3	; 0x03
}
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <timer_init>:
#include"timer.h"



void timer_init (void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62

	TCCR0=0b00001011;
    15de:	e3 e5       	ldi	r30, 0x53	; 83
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8b e0       	ldi	r24, 0x0B	; 11
    15e4:	80 83       	st	Z, r24
	TCNT0=0;
    15e6:	e2 e5       	ldi	r30, 0x52	; 82
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	10 82       	st	Z, r1
	OCR0=125;
    15ec:	ec e5       	ldi	r30, 0x5C	; 92
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8d e7       	ldi	r24, 0x7D	; 125
    15f2:	80 83       	st	Z, r24
	TIMSK |=0x02;
    15f4:	a9 e5       	ldi	r26, 0x59	; 89
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e9 e5       	ldi	r30, 0x59	; 89
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	82 60       	ori	r24, 0x02	; 2
    1600:	8c 93       	st	X, r24
	TIFR  |=0x02;
    1602:	a8 e5       	ldi	r26, 0x58	; 88
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 e5       	ldi	r30, 0x58	; 88
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	82 60       	ori	r24, 0x02	; 2
    160e:	8c 93       	st	X, r24

	sei();
    1610:	78 94       	sei
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <timer_set_callBack_fun>:


void timer_set_callBack_fun(void (*User_fun)(void))
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <timer_set_callBack_fun+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
	ISR_timer0_fun=User_fun;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	90 93 b8 02 	sts	0x02B8, r25
    162e:	80 93 b7 02 	sts	0x02B7, r24
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <__vector_10>:



ISR(TIMER0_COMP_vect)
{
    163c:	1f 92       	push	r1
    163e:	0f 92       	push	r0
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	ISR_timer0_fun();
    1666:	e0 91 b7 02 	lds	r30, 0x02B7
    166a:	f0 91 b8 02 	lds	r31, 0x02B8
    166e:	09 95       	icall
}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <CS811_init>:




void CS811_init(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	6d 97       	sbiw	r28, 0x1d	; 29
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
	unsigned char Status=0;
    16aa:	1d 8e       	std	Y+29, r1	; 0x1d
	TWI_Init();
    16ac:	0e 94 54 07 	call	0xea8	; 0xea8 <TWI_Init>

	if (read_HW_ID ())
    16b0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <read_HW_ID>
    16b4:	88 23       	and	r24, r24
    16b6:	09 f4       	brne	.+2      	; 0x16ba <CS811_init+0x24>
    16b8:	04 c1       	rjmp	.+520    	; 0x18c2 <CS811_init+0x22c>
	{

		Status=Read_Status_Register();
    16ba:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Read_Status_Register>
    16be:	8d 8f       	std	Y+29, r24	; 0x1d

		EF_void_LCD_Clear_Screen();
    16c0:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
		EF_void_LCD_print((unsigned char*)"Status");
    16c4:	80 e6       	ldi	r24, 0x60	; 96
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
		EF_void_LCD_print_Number(Status);
    16cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <EF_void_LCD_print_Number>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a8 ec       	ldi	r26, 0xC8	; 200
    16dc:	b3 e4       	ldi	r27, 0x43	; 67
    16de:	89 8f       	std	Y+25, r24	; 0x19
    16e0:	9a 8f       	std	Y+26, r25	; 0x1a
    16e2:	ab 8f       	std	Y+27, r26	; 0x1b
    16e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	69 8d       	ldd	r22, Y+25	; 0x19
    16e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8d 8b       	std	Y+21, r24	; 0x15
    1700:	9e 8b       	std	Y+22, r25	; 0x16
    1702:	af 8b       	std	Y+23, r26	; 0x17
    1704:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <CS811_init+0x92>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 8b       	std	Y+20, r25	; 0x14
    1724:	8b 8b       	std	Y+19, r24	; 0x13
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <CS811_init+0x110>
	else if (__tmp > 65535)
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <CS811_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	69 8d       	ldd	r22, Y+25	; 0x19
    1742:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <CS811_init+0xf2>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9a 8b       	std	Y+18, r25	; 0x12
    1770:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1772:	89 89       	ldd	r24, Y+17	; 0x11
    1774:	9a 89       	ldd	r25, Y+18	; 0x12
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <CS811_init+0xe0>
    177a:	9a 8b       	std	Y+18, r25	; 0x12
    177c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9c 8b       	std	Y+20, r25	; 0x14
    1786:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <CS811_init+0xd4>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <CS811_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9c 8b       	std	Y+20, r25	; 0x14
    17a4:	8b 8b       	std	Y+19, r24	; 0x13
    17a6:	8b 89       	ldd	r24, Y+19	; 0x13
    17a8:	9c 89       	ldd	r25, Y+20	; 0x14
    17aa:	98 8b       	std	Y+16, r25	; 0x10
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
    17ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b0:	98 89       	ldd	r25, Y+16	; 0x10
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <CS811_init+0x11c>
    17b6:	98 8b       	std	Y+16, r25	; 0x10
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);


		APP_start();
    17ba:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <APP_start>

		Status=Read_Status_Register();
    17be:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Read_Status_Register>
    17c2:	8d 8f       	std	Y+29, r24	; 0x1d

		EF_void_LCD_Clear_Screen();
    17c4:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
		EF_void_LCD_print((unsigned char*)"Status");
    17c8:	80 e6       	ldi	r24, 0x60	; 96
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
		EF_void_LCD_print_Number(Status);
    17d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <EF_void_LCD_print_Number>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a8 ec       	ldi	r26, 0xC8	; 200
    17e0:	b3 e4       	ldi	r27, 0x43	; 67
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
    17e4:	9c 87       	std	Y+12, r25	; 0x0c
    17e6:	ad 87       	std	Y+13, r26	; 0x0d
    17e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8f 83       	std	Y+7, r24	; 0x07
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	a9 87       	std	Y+9, r26	; 0x09
    1808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <CS811_init+0x196>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <CS811_init+0x214>
	else if (__tmp > 65535)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <CS811_init+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	0f c0       	rjmp	.+30     	; 0x188c <CS811_init+0x1f6>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <CS811_init+0x1e4>
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <CS811_init+0x1d8>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <CS811_init+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <CS811_init+0x220>
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);


		 Measurment_Mode_set();
    18be:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <Measurment_Mode_set>

	}



}
    18c2:	6d 96       	adiw	r28, 0x1d	; 29
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <APP_start>:

void APP_start(void)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	2e 97       	sbiw	r28, 0x0e	; 14
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61

	TWI_Start();
    18e8:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(Sensor_Write_ADD);
    18ec:	86 eb       	ldi	r24, 0xB6	; 182
    18ee:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(APP_Start);
    18f2:	84 ef       	ldi	r24, 0xF4	; 244
    18f4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Stop();
    18f8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>

#if	Enable_CS811_debug

	EF_void_LCD_Clear_Screen();
    18fc:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"app start ");   //send APP Start
    1900:	87 e6       	ldi	r24, 0x67	; 103
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	aa e7       	ldi	r26, 0x7A	; 122
    190e:	b4 e4       	ldi	r27, 0x44	; 68
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	9c 87       	std	Y+12, r25	; 0x0c
    1914:	ad 87       	std	Y+13, r26	; 0x0d
    1916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a ef       	ldi	r20, 0xFA	; 250
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8f 83       	std	Y+7, r24	; 0x07
    1932:	98 87       	std	Y+8, r25	; 0x08
    1934:	a9 87       	std	Y+9, r26	; 0x09
    1936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <APP_start+0x86>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <APP_start+0x104>
	else if (__tmp > 65535)
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <APP_start+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <APP_start+0xe6>
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <APP_start+0xd4>
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <APP_start+0xc8>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <APP_start+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <APP_start+0x110>
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

#endif
}
    19ec:	2e 96       	adiw	r28, 0x0e	; 14
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <read_HW_ID>:


BOOLEAN read_HW_ID (void)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	6e 97       	sbiw	r28, 0x1e	; 30
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
	unsigned char HW_ID=0;
    1a12:	1d 8e       	std	Y+29, r1	; 0x1d
	// read HW ID  //it should be 129

	TWI_Start();
    1a14:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(Sensor_Write_ADD);
    1a18:	86 eb       	ldi	r24, 0xB6	; 182
    1a1a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(0x20);
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Stop();
    1a24:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>
	TWI_Start();
    1a28:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(Sensor_Read_ADD);
    1a2c:	87 eb       	ldi	r24, 0xB7	; 183
    1a2e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_ReceiveData_NACK(&HW_ID);
    1a32:	ce 01       	movw	r24, r28
    1a34:	4d 96       	adiw	r24, 0x1d	; 29
    1a36:	0e 94 c2 07 	call	0xf84	; 0xf84 <TWI_ReceiveData_NACK>
	TWI_Stop();
    1a3a:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a8 ec       	ldi	r26, 0xC8	; 200
    1a44:	b2 e4       	ldi	r27, 0x42	; 66
    1a46:	89 8f       	std	Y+25, r24	; 0x19
    1a48:	9a 8f       	std	Y+26, r25	; 0x1a
    1a4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a ef       	ldi	r20, 0xFA	; 250
    1a5c:	54 e4       	ldi	r21, 0x44	; 68
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8d 8b       	std	Y+21, r24	; 0x15
    1a68:	9e 8b       	std	Y+22, r25	; 0x16
    1a6a:	af 8b       	std	Y+23, r26	; 0x17
    1a6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a70:	7e 89       	ldd	r23, Y+22	; 0x16
    1a72:	8f 89       	ldd	r24, Y+23	; 0x17
    1a74:	98 8d       	ldd	r25, Y+24	; 0x18
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a82:	88 23       	and	r24, r24
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <read_HW_ID+0x92>
		__ticks = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9c 8b       	std	Y+20, r25	; 0x14
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
    1a8e:	3f c0       	rjmp	.+126    	; 0x1b0e <read_HW_ID+0x110>
	else if (__tmp > 65535)
    1a90:	6d 89       	ldd	r22, Y+21	; 0x15
    1a92:	7e 89       	ldd	r23, Y+22	; 0x16
    1a94:	8f 89       	ldd	r24, Y+23	; 0x17
    1a96:	98 8d       	ldd	r25, Y+24	; 0x18
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	4c f5       	brge	.+82     	; 0x1afa <read_HW_ID+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e2       	ldi	r20, 0x20	; 32
    1ab6:	51 e4       	ldi	r21, 0x41	; 65
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <read_HW_ID+0xf2>
    1ad2:	88 ec       	ldi	r24, 0xC8	; 200
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9a 8b       	std	Y+18, r25	; 0x12
    1ad8:	89 8b       	std	Y+17, r24	; 0x11
    1ada:	89 89       	ldd	r24, Y+17	; 0x11
    1adc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <read_HW_ID+0xe0>
    1ae2:	9a 8b       	std	Y+18, r25	; 0x12
    1ae4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <read_HW_ID+0xd4>
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <read_HW_ID+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afa:	6d 89       	ldd	r22, Y+21	; 0x15
    1afc:	7e 89       	ldd	r23, Y+22	; 0x16
    1afe:	8f 89       	ldd	r24, Y+23	; 0x17
    1b00:	98 8d       	ldd	r25, Y+24	; 0x18
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9c 8b       	std	Y+20, r25	; 0x14
    1b0c:	8b 8b       	std	Y+19, r24	; 0x13
    1b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b10:	9c 89       	ldd	r25, Y+20	; 0x14
    1b12:	98 8b       	std	Y+16, r25	; 0x10
    1b14:	8f 87       	std	Y+15, r24	; 0x0f
    1b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b18:	98 89       	ldd	r25, Y+16	; 0x10
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <read_HW_ID+0x11c>
    1b1e:	98 8b       	std	Y+16, r25	; 0x10
    1b20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);


#if	Enable_CS811_debug

	EF_void_LCD_Clear_Screen();
    1b22:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"H.W ID Reading ");
    1b26:	82 e7       	ldi	r24, 0x72	; 114
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
	EF_void_LCD_print_Number(HW_ID);
    1b2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <EF_void_LCD_print_Number>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	aa e7       	ldi	r26, 0x7A	; 122
    1b3e:	b4 e4       	ldi	r27, 0x44	; 68
    1b40:	8b 87       	std	Y+11, r24	; 0x0b
    1b42:	9c 87       	std	Y+12, r25	; 0x0c
    1b44:	ad 87       	std	Y+13, r26	; 0x0d
    1b46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a ef       	ldi	r20, 0xFA	; 250
    1b56:	54 e4       	ldi	r21, 0x44	; 68
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8f 83       	std	Y+7, r24	; 0x07
    1b62:	98 87       	std	Y+8, r25	; 0x08
    1b64:	a9 87       	std	Y+9, r26	; 0x09
    1b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <read_HW_ID+0x18c>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <read_HW_ID+0x20a>
	else if (__tmp > 65535)
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <read_HW_ID+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <read_HW_ID+0x1ec>
    1bcc:	88 ec       	ldi	r24, 0xC8	; 200
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <read_HW_ID+0x1da>
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <read_HW_ID+0x1ce>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <read_HW_ID+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <read_HW_ID+0x216>
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

#endif

	if (HW_ID==129)
    1c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1e:	81 38       	cpi	r24, 0x81	; 129
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <read_HW_ID+0x22a>
	{
		return TRUE;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	8e 8f       	std	Y+30, r24	; 0x1e
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <read_HW_ID+0x22c>
	}


	return FALSE;
    1c28:	1e 8e       	std	Y+30, r1	; 0x1e
    1c2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    1c2c:	6e 96       	adiw	r28, 0x1e	; 30
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <Read_Status_Register>:
unsigned char Read_Status_Register(void)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0f 92       	push	r0
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
	unsigned char Status=0;
    1c48:	19 82       	std	Y+1, r1	; 0x01

	TWI_Start();
    1c4a:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(Sensor_Write_ADD);
    1c4e:	86 eb       	ldi	r24, 0xB6	; 182
    1c50:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(Status_Register);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Stop();
    1c5a:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>
	TWI_Start();
    1c5e:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(Sensor_Read_ADD);
    1c62:	87 eb       	ldi	r24, 0xB7	; 183
    1c64:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_ReceiveData_NACK(&Status);
    1c68:	ce 01       	movw	r24, r28
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	0e 94 c2 07 	call	0xf84	; 0xf84 <TWI_ReceiveData_NACK>
	TWI_Stop();
    1c70:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>
//	EF_void_LCD_print_Number(Status);
//	_delay_ms(100);

#endif

	return Status;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <Measurment_Mode_set>:



void Measurment_Mode_set(void)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	TWI_Start();
    1c86:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
	TWI_SendData(Sensor_Write_ADD);
    1c8a:	86 eb       	ldi	r24, 0xB6	; 182
    1c8c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(Measurment_Mode_Register);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_SendData(0b00100000);               //sample Every 10 seconds
    1c96:	80 e2       	ldi	r24, 0x20	; 32
    1c98:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
	TWI_Stop();
    1c9c:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>

}
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <CS811_CO2_TVOC_Reading>:



void CS811_CO2_TVOC_Reading(CS811_sensor* my_CS811)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	2a 97       	sbiw	r28, 0x0a	; 10
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	9a 87       	std	Y+10, r25	; 0x0a
    1cbc:	89 87       	std	Y+9, r24	; 0x09
	unsigned char ERROR_ID,RAW_DATA1,RAW_DATA2,Status=0;
    1cbe:	1c 82       	std	Y+4, r1	; 0x04

	unsigned int CO2=0,TVOC=0;
    1cc0:	1e 82       	std	Y+6, r1	; 0x06
    1cc2:	1d 82       	std	Y+5, r1	; 0x05
    1cc4:	18 86       	std	Y+8, r1	; 0x08
    1cc6:	1f 82       	std	Y+7, r1	; 0x07

//			_delay_ms(100);
TWI_Start();
    1cc8:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
TWI_SendData(Sensor_Write_ADD);
    1ccc:	86 eb       	ldi	r24, 0xB6	; 182
    1cce:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
TWI_SendData(AlG_Result_Register);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
TWI_Stop();
    1cd8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>

TWI_Start();
    1cdc:	0e 94 66 07 	call	0xecc	; 0xecc <TWI_Start>
TWI_SendData(Sensor_Read_ADD);
    1ce0:	87 eb       	ldi	r24, 0xB7	; 183
    1ce2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <TWI_SendData>
TWI_ReceiveData_ACK((unsigned char *)&CO2);
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	05 96       	adiw	r24, 0x05	; 5
    1cea:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
CO2<<=8;
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	88 27       	eor	r24, r24
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
TWI_ReceiveData_ACK((unsigned char *)&CO2);
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	05 96       	adiw	r24, 0x05	; 5
    1cfe:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
TWI_ReceiveData_ACK((unsigned char *)&TVOC);
    1d02:	ce 01       	movw	r24, r28
    1d04:	07 96       	adiw	r24, 0x07	; 7
    1d06:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
TVOC<<=8;
    1d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0c:	98 85       	ldd	r25, Y+8	; 0x08
    1d0e:	98 2f       	mov	r25, r24
    1d10:	88 27       	eor	r24, r24
    1d12:	98 87       	std	Y+8, r25	; 0x08
    1d14:	8f 83       	std	Y+7, r24	; 0x07
TWI_ReceiveData_ACK((unsigned char *)&TVOC);
    1d16:	ce 01       	movw	r24, r28
    1d18:	07 96       	adiw	r24, 0x07	; 7
    1d1a:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
TWI_ReceiveData_ACK(&Status);
    1d1e:	ce 01       	movw	r24, r28
    1d20:	04 96       	adiw	r24, 0x04	; 4
    1d22:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
TWI_ReceiveData_ACK(&ERROR_ID);
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
TWI_ReceiveData_ACK(&RAW_DATA1);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	02 96       	adiw	r24, 0x02	; 2
    1d32:	0e 94 a4 07 	call	0xf48	; 0xf48 <TWI_ReceiveData_ACK>
TWI_ReceiveData_NACK(&RAW_DATA2);
    1d36:	ce 01       	movw	r24, r28
    1d38:	03 96       	adiw	r24, 0x03	; 3
    1d3a:	0e 94 c2 07 	call	0xf84	; 0xf84 <TWI_ReceiveData_NACK>

TWI_Stop();
    1d3e:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Stop>


my_CS811->CO2=CO2;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	e9 85       	ldd	r30, Y+9	; 0x09
    1d48:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
my_CS811->TVOC=TVOC;
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	98 85       	ldd	r25, Y+8	; 0x08
    1d52:	e9 85       	ldd	r30, Y+9	; 0x09
    1d54:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d56:	93 83       	std	Z+3, r25	; 0x03
    1d58:	82 83       	std	Z+2, r24	; 0x02
//	EF_void_LCD_print((unsigned char*)"CS811_CO2_TVOC_Reading");
//	_delay_ms(400);

#endif

}
    1d5a:	2a 96       	adiw	r28, 0x0a	; 10
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <EF_void_LCD_init>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_init()
{
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	c4 55       	subi	r28, 0x54	; 84
    1d7a:	d0 40       	sbci	r29, 0x00	; 0
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
	/* Init Control PIN as Output */
	LCD_EN_DDR |=  (1 << LCD_ENABLE_PIN);
    1d86:	a4 e3       	ldi	r26, 0x34	; 52
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e4 e3       	ldi	r30, 0x34	; 52
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 68       	ori	r24, 0x80	; 128
    1d92:	8c 93       	st	X, r24
	LCD_RS_DDR |=	(1 << LCD_RS_PIN) ;
    1d94:	a4 e3       	ldi	r26, 0x34	; 52
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e4 e3       	ldi	r30, 0x34	; 52
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	80 64       	ori	r24, 0x40	; 64
    1da0:	8c 93       	st	X, r24

	/* Init Data PIN as Output 0,1,2,3 */
//	LCD_DATA_DDR  |= 0x0F;

//	LCD_DATA_DDR  |= 0xF0;
	LCD_DATA_DDR  |= ((1 << LCD_DATA0_PIN) | (1 << LCD_DATA1_PIN) | (1 << LCD_DATA2_PIN) | (1 << LCD_DATA3_PIN));
    1da2:	a7 e3       	ldi	r26, 0x37	; 55
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 e3       	ldi	r30, 0x37	; 55
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 6f       	ori	r24, 0xF0	; 240
    1dae:	8c 93       	st	X, r24

	LCD_DATA_PORT |= 0x00;
    1db0:	a8 e3       	ldi	r26, 0x38	; 56
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e8 e3       	ldi	r30, 0x38	; 56
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8c 93       	st	X, r24
	/* after power up , delay 10ms should be existed */
	LCD_4BIT_Write_Init(0x30);
    1dbc:	80 e3       	ldi	r24, 0x30	; 48
    1dbe:	0e 94 97 1b 	call	0x372e	; 0x372e <LCD_4BIT_Write_Init>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ef 5a       	subi	r30, 0xAF	; 175
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e2       	ldi	r26, 0x20	; 32
    1dce:	b1 e4       	ldi	r27, 0x41	; 65
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	03 5b       	subi	r16, 0xB3	; 179
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	ef 5a       	subi	r30, 0xAF	; 175
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 83       	st	Z, r24
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	a2 83       	std	Z+2, r26	; 0x02
    1e04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e06:	fe 01       	movw	r30, r28
    1e08:	e3 5b       	subi	r30, 0xB3	; 179
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e8       	ldi	r20, 0x80	; 128
    1e1a:	5f e3       	ldi	r21, 0x3F	; 63
    1e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	44 f4       	brge	.+16     	; 0x1e34 <EF_void_LCD_init+0xc8>
		__ticks = 1;
    1e24:	fe 01       	movw	r30, r28
    1e26:	e5 5b       	subi	r30, 0xB5	; 181
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
    1e32:	64 c0       	rjmp	.+200    	; 0x1efc <EF_void_LCD_init+0x190>
	else if (__tmp > 65535)
    1e34:	fe 01       	movw	r30, r28
    1e36:	e3 5b       	subi	r30, 0xB3	; 179
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	0c f0       	brlt	.+2      	; 0x1e54 <EF_void_LCD_init+0xe8>
    1e52:	43 c0       	rjmp	.+134    	; 0x1eda <EF_void_LCD_init+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	fe 01       	movw	r30, r28
    1e56:	ef 5a       	subi	r30, 0xAF	; 175
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8e 01       	movw	r16, r28
    1e74:	05 5b       	subi	r16, 0xB5	; 181
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	f8 01       	movw	r30, r16
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
    1e8a:	1f c0       	rjmp	.+62     	; 0x1eca <EF_void_LCD_init+0x15e>
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e7 5b       	subi	r30, 0xB7	; 183
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	88 ec       	ldi	r24, 0xC8	; 200
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e7 5b       	subi	r30, 0xB7	; 183
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	91 81       	ldd	r25, Z+1	; 0x01
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <EF_void_LCD_init+0x138>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5b       	subi	r30, 0xB7	; 183
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	de 01       	movw	r26, r28
    1eb4:	a5 5b       	subi	r26, 0xB5	; 181
    1eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e5 5b       	subi	r30, 0xB5	; 181
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	11 96       	adiw	r26, 0x01	; 1
    1ec6:	9c 93       	st	X, r25
    1ec8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e5 5b       	subi	r30, 0xB5	; 181
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	d1 f6       	brne	.-76     	; 0x1e8c <EF_void_LCD_init+0x120>
    1ed8:	27 c0       	rjmp	.+78     	; 0x1f28 <EF_void_LCD_init+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	8e 01       	movw	r16, r28
    1edc:	05 5b       	subi	r16, 0xB5	; 181
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e3 5b       	subi	r30, 0xB3	; 179
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    1efc:	de 01       	movw	r26, r28
    1efe:	a9 5b       	subi	r26, 0xB9	; 185
    1f00:	bf 4f       	sbci	r27, 0xFF	; 255
    1f02:	fe 01       	movw	r30, r28
    1f04:	e5 5b       	subi	r30, 0xB5	; 181
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	8d 93       	st	X+, r24
    1f0e:	9c 93       	st	X, r25
    1f10:	fe 01       	movw	r30, r28
    1f12:	e9 5b       	subi	r30, 0xB9	; 185
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <EF_void_LCD_init+0x1ae>
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e9 5b       	subi	r30, 0xB9	; 185
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    1f28:	80 e3       	ldi	r24, 0x30	; 48
    1f2a:	0e 94 97 1b 	call	0x372e	; 0x372e <LCD_4BIT_Write_Init>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ed 5b       	subi	r30, 0xBD	; 189
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a0 e2       	ldi	r26, 0x20	; 32
    1f3a:	b1 e4       	ldi	r27, 0x41	; 65
    1f3c:	80 83       	st	Z, r24
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	a2 83       	std	Z+2, r26	; 0x02
    1f42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	8e 01       	movw	r16, r28
    1f46:	01 5c       	subi	r16, 0xC1	; 193
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ed 5b       	subi	r30, 0xBD	; 189
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a ef       	ldi	r20, 0xFA	; 250
    1f5e:	54 e4       	ldi	r21, 0x44	; 68
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	f8 01       	movw	r30, r16
    1f6a:	80 83       	st	Z, r24
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	a2 83       	std	Z+2, r26	; 0x02
    1f70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f72:	fe 01       	movw	r30, r28
    1f74:	ff 96       	adiw	r30, 0x3f	; 63
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <EF_void_LCD_init+0x22c>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9e af       	std	Y+62, r25	; 0x3e
    1f94:	8d af       	std	Y+61, r24	; 0x3d
    1f96:	46 c0       	rjmp	.+140    	; 0x2024 <EF_void_LCD_init+0x2b8>
	else if (__tmp > 65535)
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ff 96       	adiw	r30, 0x3f	; 63
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	64 f5       	brge	.+88     	; 0x200c <EF_void_LCD_init+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ed 5b       	subi	r30, 0xBD	; 189
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9e af       	std	Y+62, r25	; 0x3e
    1fe0:	8d af       	std	Y+61, r24	; 0x3d
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <EF_void_LCD_init+0x296>
    1fe4:	88 ec       	ldi	r24, 0xC8	; 200
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c af       	std	Y+60, r25	; 0x3c
    1fea:	8b af       	std	Y+59, r24	; 0x3b
    1fec:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fee:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <EF_void_LCD_init+0x284>
    1ff4:	9c af       	std	Y+60, r25	; 0x3c
    1ff6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ffa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9e af       	std	Y+62, r25	; 0x3e
    2000:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	8d ad       	ldd	r24, Y+61	; 0x3d
    2004:	9e ad       	ldd	r25, Y+62	; 0x3e
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <EF_void_LCD_init+0x278>
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <EF_void_LCD_init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	fe 01       	movw	r30, r28
    200e:	ff 96       	adiw	r30, 0x3f	; 63
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e af       	std	Y+62, r25	; 0x3e
    2022:	8d af       	std	Y+61, r24	; 0x3d
    2024:	8d ad       	ldd	r24, Y+61	; 0x3d
    2026:	9e ad       	ldd	r25, Y+62	; 0x3e
    2028:	9a af       	std	Y+58, r25	; 0x3a
    202a:	89 af       	std	Y+57, r24	; 0x39
    202c:	89 ad       	ldd	r24, Y+57	; 0x39
    202e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <EF_void_LCD_init+0x2c4>
    2034:	9a af       	std	Y+58, r25	; 0x3a
    2036:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    2038:	80 e3       	ldi	r24, 0x30	; 48
    203a:	0e 94 97 1b 	call	0x372e	; 0x372e <LCD_4BIT_Write_Init>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e2       	ldi	r26, 0x20	; 32
    2044:	b1 e4       	ldi	r27, 0x41	; 65
    2046:	8d ab       	std	Y+53, r24	; 0x35
    2048:	9e ab       	std	Y+54, r25	; 0x36
    204a:	af ab       	std	Y+55, r26	; 0x37
    204c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	6d a9       	ldd	r22, Y+53	; 0x35
    2050:	7e a9       	ldd	r23, Y+54	; 0x36
    2052:	8f a9       	ldd	r24, Y+55	; 0x37
    2054:	98 ad       	ldd	r25, Y+56	; 0x38
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4a ef       	ldi	r20, 0xFA	; 250
    205c:	54 e4       	ldi	r21, 0x44	; 68
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	89 ab       	std	Y+49, r24	; 0x31
    2068:	9a ab       	std	Y+50, r25	; 0x32
    206a:	ab ab       	std	Y+51, r26	; 0x33
    206c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    206e:	69 a9       	ldd	r22, Y+49	; 0x31
    2070:	7a a9       	ldd	r23, Y+50	; 0x32
    2072:	8b a9       	ldd	r24, Y+51	; 0x33
    2074:	9c a9       	ldd	r25, Y+52	; 0x34
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	2c f4       	brge	.+10     	; 0x2090 <EF_void_LCD_init+0x324>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	98 ab       	std	Y+48, r25	; 0x30
    208c:	8f a7       	std	Y+47, r24	; 0x2f
    208e:	3f c0       	rjmp	.+126    	; 0x210e <EF_void_LCD_init+0x3a2>
	else if (__tmp > 65535)
    2090:	69 a9       	ldd	r22, Y+49	; 0x31
    2092:	7a a9       	ldd	r23, Y+50	; 0x32
    2094:	8b a9       	ldd	r24, Y+51	; 0x33
    2096:	9c a9       	ldd	r25, Y+52	; 0x34
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	4c f5       	brge	.+82     	; 0x20fa <EF_void_LCD_init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	6d a9       	ldd	r22, Y+53	; 0x35
    20aa:	7e a9       	ldd	r23, Y+54	; 0x36
    20ac:	8f a9       	ldd	r24, Y+55	; 0x37
    20ae:	98 ad       	ldd	r25, Y+56	; 0x38
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	98 ab       	std	Y+48, r25	; 0x30
    20ce:	8f a7       	std	Y+47, r24	; 0x2f
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <EF_void_LCD_init+0x384>
    20d2:	88 ec       	ldi	r24, 0xC8	; 200
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9e a7       	std	Y+46, r25	; 0x2e
    20d8:	8d a7       	std	Y+45, r24	; 0x2d
    20da:	8d a5       	ldd	r24, Y+45	; 0x2d
    20dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <EF_void_LCD_init+0x372>
    20e2:	9e a7       	std	Y+46, r25	; 0x2e
    20e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	98 ab       	std	Y+48, r25	; 0x30
    20ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f2:	98 a9       	ldd	r25, Y+48	; 0x30
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <EF_void_LCD_init+0x366>
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <EF_void_LCD_init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	69 a9       	ldd	r22, Y+49	; 0x31
    20fc:	7a a9       	ldd	r23, Y+50	; 0x32
    20fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2100:	9c a9       	ldd	r25, Y+52	; 0x34
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	98 ab       	std	Y+48, r25	; 0x30
    210c:	8f a7       	std	Y+47, r24	; 0x2f
    210e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2110:	98 a9       	ldd	r25, Y+48	; 0x30
    2112:	9c a7       	std	Y+44, r25	; 0x2c
    2114:	8b a7       	std	Y+43, r24	; 0x2b
    2116:	8b a5       	ldd	r24, Y+43	; 0x2b
    2118:	9c a5       	ldd	r25, Y+44	; 0x2c
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <EF_void_LCD_init+0x3ae>
    211e:	9c a7       	std	Y+44, r25	; 0x2c
    2120:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x20);
    2122:	80 e2       	ldi	r24, 0x20	; 32
    2124:	0e 94 97 1b 	call	0x372e	; 0x372e <LCD_4BIT_Write_Init>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e2       	ldi	r26, 0x20	; 32
    212e:	b1 e4       	ldi	r27, 0x41	; 65
    2130:	8f a3       	std	Y+39, r24	; 0x27
    2132:	98 a7       	std	Y+40, r25	; 0x28
    2134:	a9 a7       	std	Y+41, r26	; 0x29
    2136:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6f a1       	ldd	r22, Y+39	; 0x27
    213a:	78 a5       	ldd	r23, Y+40	; 0x28
    213c:	89 a5       	ldd	r24, Y+41	; 0x29
    213e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8b a3       	std	Y+35, r24	; 0x23
    2152:	9c a3       	std	Y+36, r25	; 0x24
    2154:	ad a3       	std	Y+37, r26	; 0x25
    2156:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2158:	6b a1       	ldd	r22, Y+35	; 0x23
    215a:	7c a1       	ldd	r23, Y+36	; 0x24
    215c:	8d a1       	ldd	r24, Y+37	; 0x25
    215e:	9e a1       	ldd	r25, Y+38	; 0x26
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <EF_void_LCD_init+0x40e>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9a a3       	std	Y+34, r25	; 0x22
    2176:	89 a3       	std	Y+33, r24	; 0x21
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <EF_void_LCD_init+0x48c>
	else if (__tmp > 65535)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <EF_void_LCD_init+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6f a1       	ldd	r22, Y+39	; 0x27
    2194:	78 a5       	ldd	r23, Y+40	; 0x28
    2196:	89 a5       	ldd	r24, Y+41	; 0x29
    2198:	9a a5       	ldd	r25, Y+42	; 0x2a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9a a3       	std	Y+34, r25	; 0x22
    21b8:	89 a3       	std	Y+33, r24	; 0x21
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <EF_void_LCD_init+0x46e>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	98 a3       	std	Y+32, r25	; 0x20
    21c2:	8f 8f       	std	Y+31, r24	; 0x1f
    21c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c6:	98 a1       	ldd	r25, Y+32	; 0x20
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <EF_void_LCD_init+0x45c>
    21cc:	98 a3       	std	Y+32, r25	; 0x20
    21ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	89 a1       	ldd	r24, Y+33	; 0x21
    21d2:	9a a1       	ldd	r25, Y+34	; 0x22
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9a a3       	std	Y+34, r25	; 0x22
    21d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	9a a1       	ldd	r25, Y+34	; 0x22
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <EF_void_LCD_init+0x450>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <EF_void_LCD_init+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6b a1       	ldd	r22, Y+35	; 0x23
    21e6:	7c a1       	ldd	r23, Y+36	; 0x24
    21e8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ea:	9e a1       	ldd	r25, Y+38	; 0x26
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9a a3       	std	Y+34, r25	; 0x22
    21f6:	89 a3       	std	Y+33, r24	; 0x21
    21f8:	89 a1       	ldd	r24, Y+33	; 0x21
    21fa:	9a a1       	ldd	r25, Y+34	; 0x22
    21fc:	9e 8f       	std	Y+30, r25	; 0x1e
    21fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <EF_void_LCD_init+0x498>
    2208:	9e 8f       	std	Y+30, r25	; 0x1e
    220a:	8d 8f       	std	Y+29, r24	; 0x1d
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	a0 e2       	ldi	r26, 0x20	; 32
    2212:	b1 e4       	ldi	r27, 0x41	; 65
    2214:	89 8f       	std	Y+25, r24	; 0x19
    2216:	9a 8f       	std	Y+26, r25	; 0x1a
    2218:	ab 8f       	std	Y+27, r26	; 0x1b
    221a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221c:	69 8d       	ldd	r22, Y+25	; 0x19
    221e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a ef       	ldi	r20, 0xFA	; 250
    222a:	54 e4       	ldi	r21, 0x44	; 68
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	8d 8b       	std	Y+21, r24	; 0x15
    2236:	9e 8b       	std	Y+22, r25	; 0x16
    2238:	af 8b       	std	Y+23, r26	; 0x17
    223a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    223c:	6d 89       	ldd	r22, Y+21	; 0x15
    223e:	7e 89       	ldd	r23, Y+22	; 0x16
    2240:	8f 89       	ldd	r24, Y+23	; 0x17
    2242:	98 8d       	ldd	r25, Y+24	; 0x18
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	2c f4       	brge	.+10     	; 0x225e <EF_void_LCD_init+0x4f2>
		__ticks = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9c 8b       	std	Y+20, r25	; 0x14
    225a:	8b 8b       	std	Y+19, r24	; 0x13
    225c:	3f c0       	rjmp	.+126    	; 0x22dc <EF_void_LCD_init+0x570>
	else if (__tmp > 65535)
    225e:	6d 89       	ldd	r22, Y+21	; 0x15
    2260:	7e 89       	ldd	r23, Y+22	; 0x16
    2262:	8f 89       	ldd	r24, Y+23	; 0x17
    2264:	98 8d       	ldd	r25, Y+24	; 0x18
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	4c f5       	brge	.+82     	; 0x22c8 <EF_void_LCD_init+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	69 8d       	ldd	r22, Y+25	; 0x19
    2278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e2       	ldi	r20, 0x20	; 32
    2284:	51 e4       	ldi	r21, 0x41	; 65
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9c 8b       	std	Y+20, r25	; 0x14
    229c:	8b 8b       	std	Y+19, r24	; 0x13
    229e:	0f c0       	rjmp	.+30     	; 0x22be <EF_void_LCD_init+0x552>
    22a0:	88 ec       	ldi	r24, 0xC8	; 200
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9a 8b       	std	Y+18, r25	; 0x12
    22a6:	89 8b       	std	Y+17, r24	; 0x11
    22a8:	89 89       	ldd	r24, Y+17	; 0x11
    22aa:	9a 89       	ldd	r25, Y+18	; 0x12
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <EF_void_LCD_init+0x540>
    22b0:	9a 8b       	std	Y+18, r25	; 0x12
    22b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b4:	8b 89       	ldd	r24, Y+19	; 0x13
    22b6:	9c 89       	ldd	r25, Y+20	; 0x14
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	69 f7       	brne	.-38     	; 0x22a0 <EF_void_LCD_init+0x534>
    22c6:	14 c0       	rjmp	.+40     	; 0x22f0 <EF_void_LCD_init+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ca:	7e 89       	ldd	r23, Y+22	; 0x16
    22cc:	8f 89       	ldd	r24, Y+23	; 0x17
    22ce:	98 8d       	ldd	r25, Y+24	; 0x18
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9c 8b       	std	Y+20, r25	; 0x14
    22da:	8b 8b       	std	Y+19, r24	; 0x13
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	9c 89       	ldd	r25, Y+20	; 0x14
    22e0:	98 8b       	std	Y+16, r25	; 0x10
    22e2:	8f 87       	std	Y+15, r24	; 0x0f
    22e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e6:	98 89       	ldd	r25, Y+16	; 0x10
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <EF_void_LCD_init+0x57c>
    22ec:	98 8b       	std	Y+16, r25	; 0x10
    22ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	_delay_ms(10);
	EF_void_LCD_send_command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    22f0:	88 e2       	ldi	r24, 0x28	; 40
    22f2:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    22f6:	8c e0       	ldi	r24, 0x0C	; 12
    22f8:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    22fc:	86 e0       	ldi	r24, 0x06	; 6
    22fe:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    2302:	80 e8       	ldi	r24, 0x80	; 128
    2304:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 ea       	ldi	r26, 0xA0	; 160
    230e:	b1 e4       	ldi	r27, 0x41	; 65
    2310:	8b 87       	std	Y+11, r24	; 0x0b
    2312:	9c 87       	std	Y+12, r25	; 0x0c
    2314:	ad 87       	std	Y+13, r26	; 0x0d
    2316:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a ef       	ldi	r20, 0xFA	; 250
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8f 83       	std	Y+7, r24	; 0x07
    2332:	98 87       	std	Y+8, r25	; 0x08
    2334:	a9 87       	std	Y+9, r26	; 0x09
    2336:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	2c f4       	brge	.+10     	; 0x235a <EF_void_LCD_init+0x5ee>
		__ticks = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	3f c0       	rjmp	.+126    	; 0x23d8 <EF_void_LCD_init+0x66c>
	else if (__tmp > 65535)
    235a:	6f 81       	ldd	r22, Y+7	; 0x07
    235c:	78 85       	ldd	r23, Y+8	; 0x08
    235e:	89 85       	ldd	r24, Y+9	; 0x09
    2360:	9a 85       	ldd	r25, Y+10	; 0x0a
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	4c f5       	brge	.+82     	; 0x23c4 <EF_void_LCD_init+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <EF_void_LCD_init+0x64e>
    239c:	88 ec       	ldi	r24, 0xC8	; 200
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <EF_void_LCD_init+0x63c>
    23ac:	9c 83       	std	Y+4, r25	; 0x04
    23ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
    23b2:	9e 81       	ldd	r25, Y+6	; 0x06
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f7       	brne	.-38     	; 0x239c <EF_void_LCD_init+0x630>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <EF_void_LCD_init+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	9e 81       	ldd	r25, Y+6	; 0x06
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <EF_void_LCD_init+0x678>
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	EF_void_LCD_Clear_Screen();
    23ec:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>

}
    23f0:	cc 5a       	subi	r28, 0xAC	; 172
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <EF_void_LCD_send_command>:
 * PARAMETERS  : U8_t cmnd:  Command User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_command(U8_t cmnd)
{
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	c9 54       	subi	r28, 0x49	; 73
    2416:	d0 40       	sbci	r29, 0x00	; 0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	fe 01       	movw	r30, r28
    2424:	e7 5b       	subi	r30, 0xB7	; 183
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 83       	st	Z, r24
	/*RS and RW will be LOW */

	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    242a:	a5 e3       	ldi	r26, 0x35	; 53
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e5 e3       	ldi	r30, 0x35	; 53
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8f 7b       	andi	r24, 0xBF	; 191
    2436:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2438:	a8 e3       	ldi	r26, 0x38	; 56
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e8 e3       	ldi	r30, 0x38	; 56
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	8f 77       	andi	r24, 0x7F	; 127
    2444:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2446:	a8 e3       	ldi	r26, 0x38	; 56
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e8 e3       	ldi	r30, 0x38	; 56
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8f 7b       	andi	r24, 0xBF	; 191
    2452:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2454:	a8 e3       	ldi	r26, 0x38	; 56
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e8 e3       	ldi	r30, 0x38	; 56
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8f 7d       	andi	r24, 0xDF	; 223
    2460:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2462:	a8 e3       	ldi	r26, 0x38	; 56
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e8 e3       	ldi	r30, 0x38	; 56
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	8f 7e       	andi	r24, 0xEF	; 239
    246e:	8c 93       	st	X, r24

	if(cmnd & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2470:	fe 01       	movw	r30, r28
    2472:	e7 5b       	subi	r30, 0xB7	; 183
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	88 23       	and	r24, r24
    247a:	3c f4       	brge	.+14     	; 0x248a <EF_void_LCD_send_command+0x82>
    247c:	a8 e3       	ldi	r26, 0x38	; 56
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e8 e3       	ldi	r30, 0x38	; 56
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	80 68       	ori	r24, 0x80	; 128
    2488:	8c 93       	st	X, r24
	if(cmnd & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    248a:	fe 01       	movw	r30, r28
    248c:	e7 5b       	subi	r30, 0xB7	; 183
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	80 74       	andi	r24, 0x40	; 64
    2498:	90 70       	andi	r25, 0x00	; 0
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	39 f0       	breq	.+14     	; 0x24ac <EF_void_LCD_send_command+0xa4>
    249e:	a8 e3       	ldi	r26, 0x38	; 56
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e8 e3       	ldi	r30, 0x38	; 56
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 64       	ori	r24, 0x40	; 64
    24aa:	8c 93       	st	X, r24
	if(cmnd & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    24ac:	fe 01       	movw	r30, r28
    24ae:	e7 5b       	subi	r30, 0xB7	; 183
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	80 72       	andi	r24, 0x20	; 32
    24ba:	90 70       	andi	r25, 0x00	; 0
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	39 f0       	breq	.+14     	; 0x24ce <EF_void_LCD_send_command+0xc6>
    24c0:	a8 e3       	ldi	r26, 0x38	; 56
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e8 e3       	ldi	r30, 0x38	; 56
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 62       	ori	r24, 0x20	; 32
    24cc:	8c 93       	st	X, r24
	if(cmnd & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5b       	subi	r30, 0xB7	; 183
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	80 71       	andi	r24, 0x10	; 16
    24dc:	90 70       	andi	r25, 0x00	; 0
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	39 f0       	breq	.+14     	; 0x24f0 <EF_void_LCD_send_command+0xe8>
    24e2:	a8 e3       	ldi	r26, 0x38	; 56
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e8 e3       	ldi	r30, 0x38	; 56
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	80 61       	ori	r24, 0x10	; 16
    24ee:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    24f0:	a5 e3       	ldi	r26, 0x35	; 53
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e5 e3       	ldi	r30, 0x35	; 53
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	80 68       	ori	r24, 0x80	; 128
    24fc:	8c 93       	st	X, r24
    24fe:	fe 01       	movw	r30, r28
    2500:	eb 5b       	subi	r30, 0xBB	; 187
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a0 e0       	ldi	r26, 0x00	; 0
    250a:	b0 e4       	ldi	r27, 0x40	; 64
    250c:	80 83       	st	Z, r24
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	a2 83       	std	Z+2, r26	; 0x02
    2512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2514:	8e 01       	movw	r16, r28
    2516:	0f 5b       	subi	r16, 0xBF	; 191
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	eb 5b       	subi	r30, 0xBB	; 187
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	2b ea       	ldi	r18, 0xAB	; 171
    252a:	3a ea       	ldi	r19, 0xAA	; 170
    252c:	4a e2       	ldi	r20, 0x2A	; 42
    252e:	50 e4       	ldi	r21, 0x40	; 64
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	80 83       	st	Z, r24
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	a2 83       	std	Z+2, r26	; 0x02
    2540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2542:	fe 01       	movw	r30, r28
    2544:	ef 5b       	subi	r30, 0xBF	; 191
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	34 f4       	brge	.+12     	; 0x256c <EF_void_LCD_send_command+0x164>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	fe 01       	movw	r30, r28
    2564:	e0 5c       	subi	r30, 0xC0	; 192
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 83       	st	Z, r24
    256a:	9d c0       	rjmp	.+314    	; 0x26a6 <EF_void_LCD_send_command+0x29e>
	else if (__tmp > 255)
    256c:	fe 01       	movw	r30, r28
    256e:	ef 5b       	subi	r30, 0xBF	; 191
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	53 e4       	ldi	r21, 0x43	; 67
    2582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	0c f0       	brlt	.+2      	; 0x258c <EF_void_LCD_send_command+0x184>
    258a:	7e c0       	rjmp	.+252    	; 0x2688 <EF_void_LCD_send_command+0x280>
	{
		_delay_ms(__us / 1000.0);
    258c:	fe 01       	movw	r30, r28
    258e:	eb 5b       	subi	r30, 0xBB	; 187
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a e7       	ldi	r20, 0x7A	; 122
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8c af       	std	Y+60, r24	; 0x3c
    25ac:	9d af       	std	Y+61, r25	; 0x3d
    25ae:	ae af       	std	Y+62, r26	; 0x3e
    25b0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    25b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    25b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    25b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a ef       	ldi	r20, 0xFA	; 250
    25c0:	54 e4       	ldi	r21, 0x44	; 68
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	88 af       	std	Y+56, r24	; 0x38
    25cc:	99 af       	std	Y+57, r25	; 0x39
    25ce:	aa af       	std	Y+58, r26	; 0x3a
    25d0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    25d2:	68 ad       	ldd	r22, Y+56	; 0x38
    25d4:	79 ad       	ldd	r23, Y+57	; 0x39
    25d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    25d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <EF_void_LCD_send_command+0x1ec>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9f ab       	std	Y+55, r25	; 0x37
    25f0:	8e ab       	std	Y+54, r24	; 0x36
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <EF_void_LCD_send_command+0x26a>
	else if (__tmp > 65535)
    25f4:	68 ad       	ldd	r22, Y+56	; 0x38
    25f6:	79 ad       	ldd	r23, Y+57	; 0x39
    25f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    25fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <EF_void_LCD_send_command+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	6c ad       	ldd	r22, Y+60	; 0x3c
    260e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2610:	8e ad       	ldd	r24, Y+62	; 0x3e
    2612:	9f ad       	ldd	r25, Y+63	; 0x3f
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9f ab       	std	Y+55, r25	; 0x37
    2632:	8e ab       	std	Y+54, r24	; 0x36
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <EF_void_LCD_send_command+0x24c>
    2636:	88 ec       	ldi	r24, 0xC8	; 200
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9d ab       	std	Y+53, r25	; 0x35
    263c:	8c ab       	std	Y+52, r24	; 0x34
    263e:	8c a9       	ldd	r24, Y+52	; 0x34
    2640:	9d a9       	ldd	r25, Y+53	; 0x35
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <EF_void_LCD_send_command+0x23a>
    2646:	9d ab       	std	Y+53, r25	; 0x35
    2648:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8e a9       	ldd	r24, Y+54	; 0x36
    264c:	9f a9       	ldd	r25, Y+55	; 0x37
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9f ab       	std	Y+55, r25	; 0x37
    2652:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8e a9       	ldd	r24, Y+54	; 0x36
    2656:	9f a9       	ldd	r25, Y+55	; 0x37
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <EF_void_LCD_send_command+0x22e>
    265c:	2d c0       	rjmp	.+90     	; 0x26b8 <EF_void_LCD_send_command+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	68 ad       	ldd	r22, Y+56	; 0x38
    2660:	79 ad       	ldd	r23, Y+57	; 0x39
    2662:	8a ad       	ldd	r24, Y+58	; 0x3a
    2664:	9b ad       	ldd	r25, Y+59	; 0x3b
    2666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9f ab       	std	Y+55, r25	; 0x37
    2670:	8e ab       	std	Y+54, r24	; 0x36
    2672:	8e a9       	ldd	r24, Y+54	; 0x36
    2674:	9f a9       	ldd	r25, Y+55	; 0x37
    2676:	9b ab       	std	Y+51, r25	; 0x33
    2678:	8a ab       	std	Y+50, r24	; 0x32
    267a:	8a a9       	ldd	r24, Y+50	; 0x32
    267c:	9b a9       	ldd	r25, Y+51	; 0x33
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <EF_void_LCD_send_command+0x276>
    2682:	9b ab       	std	Y+51, r25	; 0x33
    2684:	8a ab       	std	Y+50, r24	; 0x32
    2686:	18 c0       	rjmp	.+48     	; 0x26b8 <EF_void_LCD_send_command+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2688:	fe 01       	movw	r30, r28
    268a:	ef 5b       	subi	r30, 0xBF	; 191
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	fe 01       	movw	r30, r28
    26a0:	e0 5c       	subi	r30, 0xC0	; 192
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 83       	st	Z, r24
    26a6:	fe 01       	movw	r30, r28
    26a8:	e0 5c       	subi	r30, 0xC0	; 192
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26b0:	89 a9       	ldd	r24, Y+49	; 0x31
    26b2:	8a 95       	dec	r24
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <EF_void_LCD_send_command+0x2aa>
    26b6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    26b8:	a5 e3       	ldi	r26, 0x35	; 53
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e3       	ldi	r30, 0x35	; 53
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 77       	andi	r24, 0x7F	; 127
    26c4:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    26c6:	a8 e3       	ldi	r26, 0x38	; 56
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e8 e3       	ldi	r30, 0x38	; 56
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	8f 77       	andi	r24, 0x7F	; 127
    26d2:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    26d4:	a8 e3       	ldi	r26, 0x38	; 56
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e8 e3       	ldi	r30, 0x38	; 56
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	8f 7b       	andi	r24, 0xBF	; 191
    26e0:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    26e2:	a8 e3       	ldi	r26, 0x38	; 56
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e8 e3       	ldi	r30, 0x38	; 56
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8f 7d       	andi	r24, 0xDF	; 223
    26ee:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    26f0:	a8 e3       	ldi	r26, 0x38	; 56
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e8 e3       	ldi	r30, 0x38	; 56
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	8f 7e       	andi	r24, 0xEF	; 239
    26fc:	8c 93       	st	X, r24
	if(cmnd & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 5b       	subi	r30, 0xB7	; 183
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	88 70       	andi	r24, 0x08	; 8
    270c:	90 70       	andi	r25, 0x00	; 0
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	39 f0       	breq	.+14     	; 0x2720 <EF_void_LCD_send_command+0x318>
    2712:	a8 e3       	ldi	r26, 0x38	; 56
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e8 e3       	ldi	r30, 0x38	; 56
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	80 68       	ori	r24, 0x80	; 128
    271e:	8c 93       	st	X, r24
	if(cmnd & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2720:	fe 01       	movw	r30, r28
    2722:	e7 5b       	subi	r30, 0xB7	; 183
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	84 70       	andi	r24, 0x04	; 4
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	39 f0       	breq	.+14     	; 0x2742 <EF_void_LCD_send_command+0x33a>
    2734:	a8 e3       	ldi	r26, 0x38	; 56
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e8 e3       	ldi	r30, 0x38	; 56
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 64       	ori	r24, 0x40	; 64
    2740:	8c 93       	st	X, r24
	if(cmnd & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2742:	fe 01       	movw	r30, r28
    2744:	e7 5b       	subi	r30, 0xB7	; 183
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	82 70       	andi	r24, 0x02	; 2
    2750:	90 70       	andi	r25, 0x00	; 0
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	39 f0       	breq	.+14     	; 0x2764 <EF_void_LCD_send_command+0x35c>
    2756:	a8 e3       	ldi	r26, 0x38	; 56
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e8 e3       	ldi	r30, 0x38	; 56
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	80 62       	ori	r24, 0x20	; 32
    2762:	8c 93       	st	X, r24
	if(cmnd & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2764:	fe 01       	movw	r30, r28
    2766:	e7 5b       	subi	r30, 0xB7	; 183
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	81 70       	andi	r24, 0x01	; 1
    2772:	90 70       	andi	r25, 0x00	; 0
    2774:	88 23       	and	r24, r24
    2776:	39 f0       	breq	.+14     	; 0x2786 <EF_void_LCD_send_command+0x37e>
    2778:	a8 e3       	ldi	r26, 0x38	; 56
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e8 e3       	ldi	r30, 0x38	; 56
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	80 61       	ori	r24, 0x10	; 16
    2784:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    2786:	a5 e3       	ldi	r26, 0x35	; 53
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e5 e3       	ldi	r30, 0x35	; 53
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	80 68       	ori	r24, 0x80	; 128
    2792:	8c 93       	st	X, r24
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a0 e0       	ldi	r26, 0x00	; 0
    279a:	b0 e4       	ldi	r27, 0x40	; 64
    279c:	8d a7       	std	Y+45, r24	; 0x2d
    279e:	9e a7       	std	Y+46, r25	; 0x2e
    27a0:	af a7       	std	Y+47, r26	; 0x2f
    27a2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    27a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    27a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27aa:	98 a9       	ldd	r25, Y+48	; 0x30
    27ac:	2b ea       	ldi	r18, 0xAB	; 171
    27ae:	3a ea       	ldi	r19, 0xAA	; 170
    27b0:	4a e2       	ldi	r20, 0x2A	; 42
    27b2:	50 e4       	ldi	r21, 0x40	; 64
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	89 a7       	std	Y+41, r24	; 0x29
    27be:	9a a7       	std	Y+42, r25	; 0x2a
    27c0:	ab a7       	std	Y+43, r26	; 0x2b
    27c2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    27c4:	69 a5       	ldd	r22, Y+41	; 0x29
    27c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    27c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	1c f4       	brge	.+6      	; 0x27e2 <EF_void_LCD_send_command+0x3da>
		__ticks = 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	88 a7       	std	Y+40, r24	; 0x28
    27e0:	91 c0       	rjmp	.+290    	; 0x2904 <EF_void_LCD_send_command+0x4fc>
	else if (__tmp > 255)
    27e2:	69 a5       	ldd	r22, Y+41	; 0x29
    27e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    27e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	53 e4       	ldi	r21, 0x43	; 67
    27f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	0c f0       	brlt	.+2      	; 0x27fc <EF_void_LCD_send_command+0x3f4>
    27fa:	7b c0       	rjmp	.+246    	; 0x28f2 <EF_void_LCD_send_command+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    27fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    27fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2800:	8f a5       	ldd	r24, Y+47	; 0x2f
    2802:	98 a9       	ldd	r25, Y+48	; 0x30
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a e7       	ldi	r20, 0x7A	; 122
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8c a3       	std	Y+36, r24	; 0x24
    2816:	9d a3       	std	Y+37, r25	; 0x25
    2818:	ae a3       	std	Y+38, r26	; 0x26
    281a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	6c a1       	ldd	r22, Y+36	; 0x24
    281e:	7d a1       	ldd	r23, Y+37	; 0x25
    2820:	8e a1       	ldd	r24, Y+38	; 0x26
    2822:	9f a1       	ldd	r25, Y+39	; 0x27
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a ef       	ldi	r20, 0xFA	; 250
    282a:	54 e4       	ldi	r21, 0x44	; 68
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	88 a3       	std	Y+32, r24	; 0x20
    2836:	99 a3       	std	Y+33, r25	; 0x21
    2838:	aa a3       	std	Y+34, r26	; 0x22
    283a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    283c:	68 a1       	ldd	r22, Y+32	; 0x20
    283e:	79 a1       	ldd	r23, Y+33	; 0x21
    2840:	8a a1       	ldd	r24, Y+34	; 0x22
    2842:	9b a1       	ldd	r25, Y+35	; 0x23
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	2c f4       	brge	.+10     	; 0x285e <EF_void_LCD_send_command+0x456>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9f 8f       	std	Y+31, r25	; 0x1f
    285a:	8e 8f       	std	Y+30, r24	; 0x1e
    285c:	3f c0       	rjmp	.+126    	; 0x28dc <EF_void_LCD_send_command+0x4d4>
	else if (__tmp > 65535)
    285e:	68 a1       	ldd	r22, Y+32	; 0x20
    2860:	79 a1       	ldd	r23, Y+33	; 0x21
    2862:	8a a1       	ldd	r24, Y+34	; 0x22
    2864:	9b a1       	ldd	r25, Y+35	; 0x23
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	4c f5       	brge	.+82     	; 0x28c8 <EF_void_LCD_send_command+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	6c a1       	ldd	r22, Y+36	; 0x24
    2878:	7d a1       	ldd	r23, Y+37	; 0x25
    287a:	8e a1       	ldd	r24, Y+38	; 0x26
    287c:	9f a1       	ldd	r25, Y+39	; 0x27
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9f 8f       	std	Y+31, r25	; 0x1f
    289c:	8e 8f       	std	Y+30, r24	; 0x1e
    289e:	0f c0       	rjmp	.+30     	; 0x28be <EF_void_LCD_send_command+0x4b6>
    28a0:	88 ec       	ldi	r24, 0xC8	; 200
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9d 8f       	std	Y+29, r25	; 0x1d
    28a6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <EF_void_LCD_send_command+0x4a4>
    28b0:	9d 8f       	std	Y+29, r25	; 0x1d
    28b2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	9f 8f       	std	Y+31, r25	; 0x1f
    28bc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	69 f7       	brne	.-38     	; 0x28a0 <EF_void_LCD_send_command+0x498>
    28c6:	24 c0       	rjmp	.+72     	; 0x2910 <EF_void_LCD_send_command+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c8:	68 a1       	ldd	r22, Y+32	; 0x20
    28ca:	79 a1       	ldd	r23, Y+33	; 0x21
    28cc:	8a a1       	ldd	r24, Y+34	; 0x22
    28ce:	9b a1       	ldd	r25, Y+35	; 0x23
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9f 8f       	std	Y+31, r25	; 0x1f
    28da:	8e 8f       	std	Y+30, r24	; 0x1e
    28dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28e0:	9b 8f       	std	Y+27, r25	; 0x1b
    28e2:	8a 8f       	std	Y+26, r24	; 0x1a
    28e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <EF_void_LCD_send_command+0x4e0>
    28ec:	9b 8f       	std	Y+27, r25	; 0x1b
    28ee:	8a 8f       	std	Y+26, r24	; 0x1a
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <EF_void_LCD_send_command+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28f2:	69 a5       	ldd	r22, Y+41	; 0x29
    28f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    28f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	88 a7       	std	Y+40, r24	; 0x28
    2904:	88 a5       	ldd	r24, Y+40	; 0x28
    2906:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2908:	89 8d       	ldd	r24, Y+25	; 0x19
    290a:	8a 95       	dec	r24
    290c:	f1 f7       	brne	.-4      	; 0x290a <EF_void_LCD_send_command+0x502>
    290e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    2910:	a5 e3       	ldi	r26, 0x35	; 53
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e5 e3       	ldi	r30, 0x35	; 53
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	8f 77       	andi	r24, 0x7F	; 127
    291c:	8c 93       	st	X, r24
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a6 e9       	ldi	r26, 0x96	; 150
    2924:	b3 e4       	ldi	r27, 0x43	; 67
    2926:	8d 8b       	std	Y+21, r24	; 0x15
    2928:	9e 8b       	std	Y+22, r25	; 0x16
    292a:	af 8b       	std	Y+23, r26	; 0x17
    292c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    292e:	6d 89       	ldd	r22, Y+21	; 0x15
    2930:	7e 89       	ldd	r23, Y+22	; 0x16
    2932:	8f 89       	ldd	r24, Y+23	; 0x17
    2934:	98 8d       	ldd	r25, Y+24	; 0x18
    2936:	2b ea       	ldi	r18, 0xAB	; 171
    2938:	3a ea       	ldi	r19, 0xAA	; 170
    293a:	4a e2       	ldi	r20, 0x2A	; 42
    293c:	50 e4       	ldi	r21, 0x40	; 64
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	89 8b       	std	Y+17, r24	; 0x11
    2948:	9a 8b       	std	Y+18, r25	; 0x12
    294a:	ab 8b       	std	Y+19, r26	; 0x13
    294c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    294e:	69 89       	ldd	r22, Y+17	; 0x11
    2950:	7a 89       	ldd	r23, Y+18	; 0x12
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	1c f4       	brge	.+6      	; 0x296c <EF_void_LCD_send_command+0x564>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	88 8b       	std	Y+16, r24	; 0x10
    296a:	91 c0       	rjmp	.+290    	; 0x2a8e <EF_void_LCD_send_command+0x686>
	else if (__tmp > 255)
    296c:	69 89       	ldd	r22, Y+17	; 0x11
    296e:	7a 89       	ldd	r23, Y+18	; 0x12
    2970:	8b 89       	ldd	r24, Y+19	; 0x13
    2972:	9c 89       	ldd	r25, Y+20	; 0x14
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	53 e4       	ldi	r21, 0x43	; 67
    297c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	0c f0       	brlt	.+2      	; 0x2986 <EF_void_LCD_send_command+0x57e>
    2984:	7b c0       	rjmp	.+246    	; 0x2a7c <EF_void_LCD_send_command+0x674>
	{
		_delay_ms(__us / 1000.0);
    2986:	6d 89       	ldd	r22, Y+21	; 0x15
    2988:	7e 89       	ldd	r23, Y+22	; 0x16
    298a:	8f 89       	ldd	r24, Y+23	; 0x17
    298c:	98 8d       	ldd	r25, Y+24	; 0x18
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a e7       	ldi	r20, 0x7A	; 122
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8c 87       	std	Y+12, r24	; 0x0c
    29a0:	9d 87       	std	Y+13, r25	; 0x0d
    29a2:	ae 87       	std	Y+14, r26	; 0x0e
    29a4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    29a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    29aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    29ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a ef       	ldi	r20, 0xFA	; 250
    29b4:	54 e4       	ldi	r21, 0x44	; 68
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	88 87       	std	Y+8, r24	; 0x08
    29c0:	99 87       	std	Y+9, r25	; 0x09
    29c2:	aa 87       	std	Y+10, r26	; 0x0a
    29c4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29c6:	68 85       	ldd	r22, Y+8	; 0x08
    29c8:	79 85       	ldd	r23, Y+9	; 0x09
    29ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    29cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <EF_void_LCD_send_command+0x5e0>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9f 83       	std	Y+7, r25	; 0x07
    29e4:	8e 83       	std	Y+6, r24	; 0x06
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <EF_void_LCD_send_command+0x65e>
	else if (__tmp > 65535)
    29e8:	68 85       	ldd	r22, Y+8	; 0x08
    29ea:	79 85       	ldd	r23, Y+9	; 0x09
    29ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <EF_void_LCD_send_command+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a02:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a04:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a06:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9f 83       	std	Y+7, r25	; 0x07
    2a26:	8e 83       	std	Y+6, r24	; 0x06
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <EF_void_LCD_send_command+0x640>
    2a2a:	88 ec       	ldi	r24, 0xC8	; 200
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9d 83       	std	Y+5, r25	; 0x05
    2a30:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <EF_void_LCD_send_command+0x62e>
    2a3a:	9d 83       	std	Y+5, r25	; 0x05
    2a3c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a40:	9f 81       	ldd	r25, Y+7	; 0x07
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9f 83       	std	Y+7, r25	; 0x07
    2a46:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <EF_void_LCD_send_command+0x622>
    2a50:	24 c0       	rjmp	.+72     	; 0x2a9a <EF_void_LCD_send_command+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	68 85       	ldd	r22, Y+8	; 0x08
    2a54:	79 85       	ldd	r23, Y+9	; 0x09
    2a56:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a58:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9f 83       	std	Y+7, r25	; 0x07
    2a64:	8e 83       	std	Y+6, r24	; 0x06
    2a66:	8e 81       	ldd	r24, Y+6	; 0x06
    2a68:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6a:	9b 83       	std	Y+3, r25	; 0x03
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	9b 81       	ldd	r25, Y+3	; 0x03
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <EF_void_LCD_send_command+0x66a>
    2a76:	9b 83       	std	Y+3, r25	; 0x03
    2a78:	8a 83       	std	Y+2, r24	; 0x02
    2a7a:	0f c0       	rjmp	.+30     	; 0x2a9a <EF_void_LCD_send_command+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a7c:	69 89       	ldd	r22, Y+17	; 0x11
    2a7e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a80:	8b 89       	ldd	r24, Y+19	; 0x13
    2a82:	9c 89       	ldd	r25, Y+20	; 0x14
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	88 8b       	std	Y+16, r24	; 0x10
    2a8e:	88 89       	ldd	r24, Y+16	; 0x10
    2a90:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	8a 95       	dec	r24
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <EF_void_LCD_send_command+0x68c>
    2a98:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    2a9a:	c7 5b       	subi	r28, 0xB7	; 183
    2a9c:	df 4f       	sbci	r29, 0xFF	; 255
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	08 95       	ret

00002ab2 <EF_void_LCD_send_data>:
 * PARAMETERS  : U8_t Data:  Data User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_data(char data)
{
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	c9 54       	subi	r28, 0x49	; 73
    2ac0:	d0 40       	sbci	r29, 0x00	; 0
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	fe 01       	movw	r30, r28
    2ace:	e7 5b       	subi	r30, 0xB7	; 183
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 83       	st	Z, r24
	/*RS will be high and RW will be LOW */
	//LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
    2ad4:	a5 e3       	ldi	r26, 0x35	; 53
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e5 e3       	ldi	r30, 0x35	; 53
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	80 64       	ori	r24, 0x40	; 64
    2ae0:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2ae2:	a8 e3       	ldi	r26, 0x38	; 56
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e8 e3       	ldi	r30, 0x38	; 56
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8f 77       	andi	r24, 0x7F	; 127
    2aee:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2af0:	a8 e3       	ldi	r26, 0x38	; 56
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e8 e3       	ldi	r30, 0x38	; 56
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	8f 7b       	andi	r24, 0xBF	; 191
    2afc:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2afe:	a8 e3       	ldi	r26, 0x38	; 56
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e8 e3       	ldi	r30, 0x38	; 56
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	8f 7d       	andi	r24, 0xDF	; 223
    2b0a:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2b0c:	a8 e3       	ldi	r26, 0x38	; 56
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e8 e3       	ldi	r30, 0x38	; 56
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	8f 7e       	andi	r24, 0xEF	; 239
    2b18:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e7 5b       	subi	r30, 0xB7	; 183
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	3c f4       	brge	.+14     	; 0x2b34 <EF_void_LCD_send_data+0x82>
    2b26:	a8 e3       	ldi	r26, 0x38	; 56
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e8 e3       	ldi	r30, 0x38	; 56
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	80 68       	ori	r24, 0x80	; 128
    2b32:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2b34:	fe 01       	movw	r30, r28
    2b36:	e7 5b       	subi	r30, 0xB7	; 183
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	80 74       	andi	r24, 0x40	; 64
    2b42:	90 70       	andi	r25, 0x00	; 0
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	39 f0       	breq	.+14     	; 0x2b56 <EF_void_LCD_send_data+0xa4>
    2b48:	a8 e3       	ldi	r26, 0x38	; 56
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e8 e3       	ldi	r30, 0x38	; 56
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	80 64       	ori	r24, 0x40	; 64
    2b54:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2b56:	fe 01       	movw	r30, r28
    2b58:	e7 5b       	subi	r30, 0xB7	; 183
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	80 72       	andi	r24, 0x20	; 32
    2b64:	90 70       	andi	r25, 0x00	; 0
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	39 f0       	breq	.+14     	; 0x2b78 <EF_void_LCD_send_data+0xc6>
    2b6a:	a8 e3       	ldi	r26, 0x38	; 56
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e8 e3       	ldi	r30, 0x38	; 56
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 62       	ori	r24, 0x20	; 32
    2b76:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e7 5b       	subi	r30, 0xB7	; 183
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	80 71       	andi	r24, 0x10	; 16
    2b86:	90 70       	andi	r25, 0x00	; 0
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	39 f0       	breq	.+14     	; 0x2b9a <EF_void_LCD_send_data+0xe8>
    2b8c:	a8 e3       	ldi	r26, 0x38	; 56
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e8 e3       	ldi	r30, 0x38	; 56
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	80 61       	ori	r24, 0x10	; 16
    2b98:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    2b9a:	a5 e3       	ldi	r26, 0x35	; 53
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	80 68       	ori	r24, 0x80	; 128
    2ba6:	8c 93       	st	X, r24
    2ba8:	fe 01       	movw	r30, r28
    2baa:	eb 5b       	subi	r30, 0xBB	; 187
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	a0 e0       	ldi	r26, 0x00	; 0
    2bb4:	b0 e4       	ldi	r27, 0x40	; 64
    2bb6:	80 83       	st	Z, r24
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	a2 83       	std	Z+2, r26	; 0x02
    2bbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bbe:	8e 01       	movw	r16, r28
    2bc0:	0f 5b       	subi	r16, 0xBF	; 191
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	eb 5b       	subi	r30, 0xBB	; 187
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	2b ea       	ldi	r18, 0xAB	; 171
    2bd4:	3a ea       	ldi	r19, 0xAA	; 170
    2bd6:	4a e2       	ldi	r20, 0x2A	; 42
    2bd8:	50 e4       	ldi	r21, 0x40	; 64
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	f8 01       	movw	r30, r16
    2be4:	80 83       	st	Z, r24
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	a2 83       	std	Z+2, r26	; 0x02
    2bea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bec:	fe 01       	movw	r30, r28
    2bee:	ef 5b       	subi	r30, 0xBF	; 191
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	60 81       	ld	r22, Z
    2bf4:	71 81       	ldd	r23, Z+1	; 0x01
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	93 81       	ldd	r25, Z+3	; 0x03
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e8       	ldi	r20, 0x80	; 128
    2c00:	5f e3       	ldi	r21, 0x3F	; 63
    2c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c06:	88 23       	and	r24, r24
    2c08:	34 f4       	brge	.+12     	; 0x2c16 <EF_void_LCD_send_data+0x164>
		__ticks = 1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e0 5c       	subi	r30, 0xC0	; 192
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 83       	st	Z, r24
    2c14:	9d c0       	rjmp	.+314    	; 0x2d50 <EF_void_LCD_send_data+0x29e>
	else if (__tmp > 255)
    2c16:	fe 01       	movw	r30, r28
    2c18:	ef 5b       	subi	r30, 0xBF	; 191
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	53 e4       	ldi	r21, 0x43	; 67
    2c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c30:	18 16       	cp	r1, r24
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <EF_void_LCD_send_data+0x184>
    2c34:	7e c0       	rjmp	.+252    	; 0x2d32 <EF_void_LCD_send_data+0x280>
	{
		_delay_ms(__us / 1000.0);
    2c36:	fe 01       	movw	r30, r28
    2c38:	eb 5b       	subi	r30, 0xBB	; 187
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a e7       	ldi	r20, 0x7A	; 122
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8c af       	std	Y+60, r24	; 0x3c
    2c56:	9d af       	std	Y+61, r25	; 0x3d
    2c58:	ae af       	std	Y+62, r26	; 0x3e
    2c5a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c60:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c62:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	88 af       	std	Y+56, r24	; 0x38
    2c76:	99 af       	std	Y+57, r25	; 0x39
    2c78:	aa af       	std	Y+58, r26	; 0x3a
    2c7a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2c7c:	68 ad       	ldd	r22, Y+56	; 0x38
    2c7e:	79 ad       	ldd	r23, Y+57	; 0x39
    2c80:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c82:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <EF_void_LCD_send_data+0x1ec>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9f ab       	std	Y+55, r25	; 0x37
    2c9a:	8e ab       	std	Y+54, r24	; 0x36
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <EF_void_LCD_send_data+0x26a>
	else if (__tmp > 65535)
    2c9e:	68 ad       	ldd	r22, Y+56	; 0x38
    2ca0:	79 ad       	ldd	r23, Y+57	; 0x39
    2ca2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ca4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <EF_void_LCD_send_data+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	6c ad       	ldd	r22, Y+60	; 0x3c
    2cb8:	7d ad       	ldd	r23, Y+61	; 0x3d
    2cba:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9f ab       	std	Y+55, r25	; 0x37
    2cdc:	8e ab       	std	Y+54, r24	; 0x36
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <EF_void_LCD_send_data+0x24c>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9d ab       	std	Y+53, r25	; 0x35
    2ce6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ce8:	8c a9       	ldd	r24, Y+52	; 0x34
    2cea:	9d a9       	ldd	r25, Y+53	; 0x35
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <EF_void_LCD_send_data+0x23a>
    2cf0:	9d ab       	std	Y+53, r25	; 0x35
    2cf2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8e a9       	ldd	r24, Y+54	; 0x36
    2cf6:	9f a9       	ldd	r25, Y+55	; 0x37
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9f ab       	std	Y+55, r25	; 0x37
    2cfc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8e a9       	ldd	r24, Y+54	; 0x36
    2d00:	9f a9       	ldd	r25, Y+55	; 0x37
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <EF_void_LCD_send_data+0x22e>
    2d06:	2d c0       	rjmp	.+90     	; 0x2d62 <EF_void_LCD_send_data+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	68 ad       	ldd	r22, Y+56	; 0x38
    2d0a:	79 ad       	ldd	r23, Y+57	; 0x39
    2d0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9f ab       	std	Y+55, r25	; 0x37
    2d1a:	8e ab       	std	Y+54, r24	; 0x36
    2d1c:	8e a9       	ldd	r24, Y+54	; 0x36
    2d1e:	9f a9       	ldd	r25, Y+55	; 0x37
    2d20:	9b ab       	std	Y+51, r25	; 0x33
    2d22:	8a ab       	std	Y+50, r24	; 0x32
    2d24:	8a a9       	ldd	r24, Y+50	; 0x32
    2d26:	9b a9       	ldd	r25, Y+51	; 0x33
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <EF_void_LCD_send_data+0x276>
    2d2c:	9b ab       	std	Y+51, r25	; 0x33
    2d2e:	8a ab       	std	Y+50, r24	; 0x32
    2d30:	18 c0       	rjmp	.+48     	; 0x2d62 <EF_void_LCD_send_data+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d32:	fe 01       	movw	r30, r28
    2d34:	ef 5b       	subi	r30, 0xBF	; 191
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e0 5c       	subi	r30, 0xC0	; 192
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 83       	st	Z, r24
    2d50:	fe 01       	movw	r30, r28
    2d52:	e0 5c       	subi	r30, 0xC0	; 192
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d5a:	89 a9       	ldd	r24, Y+49	; 0x31
    2d5c:	8a 95       	dec	r24
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <EF_void_LCD_send_data+0x2aa>
    2d60:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    2d62:	a5 e3       	ldi	r26, 0x35	; 53
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e5 e3       	ldi	r30, 0x35	; 53
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8f 77       	andi	r24, 0x7F	; 127
    2d6e:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2d70:	a8 e3       	ldi	r26, 0x38	; 56
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e8 e3       	ldi	r30, 0x38	; 56
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	8f 77       	andi	r24, 0x7F	; 127
    2d7c:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2d7e:	a8 e3       	ldi	r26, 0x38	; 56
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e8 e3       	ldi	r30, 0x38	; 56
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	8f 7b       	andi	r24, 0xBF	; 191
    2d8a:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2d8c:	a8 e3       	ldi	r26, 0x38	; 56
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e8 e3       	ldi	r30, 0x38	; 56
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 7d       	andi	r24, 0xDF	; 223
    2d98:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2d9a:	a8 e3       	ldi	r26, 0x38	; 56
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e8 e3       	ldi	r30, 0x38	; 56
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 7e       	andi	r24, 0xEF	; 239
    2da6:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2da8:	fe 01       	movw	r30, r28
    2daa:	e7 5b       	subi	r30, 0xB7	; 183
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	88 2f       	mov	r24, r24
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	88 70       	andi	r24, 0x08	; 8
    2db6:	90 70       	andi	r25, 0x00	; 0
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	39 f0       	breq	.+14     	; 0x2dca <EF_void_LCD_send_data+0x318>
    2dbc:	a8 e3       	ldi	r26, 0x38	; 56
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e8 e3       	ldi	r30, 0x38	; 56
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	80 68       	ori	r24, 0x80	; 128
    2dc8:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e7 5b       	subi	r30, 0xB7	; 183
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	88 2f       	mov	r24, r24
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	84 70       	andi	r24, 0x04	; 4
    2dd8:	90 70       	andi	r25, 0x00	; 0
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	39 f0       	breq	.+14     	; 0x2dec <EF_void_LCD_send_data+0x33a>
    2dde:	a8 e3       	ldi	r26, 0x38	; 56
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e8 e3       	ldi	r30, 0x38	; 56
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	80 64       	ori	r24, 0x40	; 64
    2dea:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    2dec:	fe 01       	movw	r30, r28
    2dee:	e7 5b       	subi	r30, 0xB7	; 183
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	82 70       	andi	r24, 0x02	; 2
    2dfa:	90 70       	andi	r25, 0x00	; 0
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	39 f0       	breq	.+14     	; 0x2e0e <EF_void_LCD_send_data+0x35c>
    2e00:	a8 e3       	ldi	r26, 0x38	; 56
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e8 e3       	ldi	r30, 0x38	; 56
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	80 62       	ori	r24, 0x20	; 32
    2e0c:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e7 5b       	subi	r30, 0xB7	; 183
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	81 70       	andi	r24, 0x01	; 1
    2e1c:	90 70       	andi	r25, 0x00	; 0
    2e1e:	88 23       	and	r24, r24
    2e20:	39 f0       	breq	.+14     	; 0x2e30 <EF_void_LCD_send_data+0x37e>
    2e22:	a8 e3       	ldi	r26, 0x38	; 56
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e8 e3       	ldi	r30, 0x38	; 56
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	80 61       	ori	r24, 0x10	; 16
    2e2e:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    2e30:	a5 e3       	ldi	r26, 0x35	; 53
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e5 e3       	ldi	r30, 0x35	; 53
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	80 68       	ori	r24, 0x80	; 128
    2e3c:	8c 93       	st	X, r24
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a0 e0       	ldi	r26, 0x00	; 0
    2e44:	b0 e4       	ldi	r27, 0x40	; 64
    2e46:	8d a7       	std	Y+45, r24	; 0x2d
    2e48:	9e a7       	std	Y+46, r25	; 0x2e
    2e4a:	af a7       	std	Y+47, r26	; 0x2f
    2e4c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e50:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e54:	98 a9       	ldd	r25, Y+48	; 0x30
    2e56:	2b ea       	ldi	r18, 0xAB	; 171
    2e58:	3a ea       	ldi	r19, 0xAA	; 170
    2e5a:	4a e2       	ldi	r20, 0x2A	; 42
    2e5c:	50 e4       	ldi	r21, 0x40	; 64
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	89 a7       	std	Y+41, r24	; 0x29
    2e68:	9a a7       	std	Y+42, r25	; 0x2a
    2e6a:	ab a7       	std	Y+43, r26	; 0x2b
    2e6c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e6e:	69 a5       	ldd	r22, Y+41	; 0x29
    2e70:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e8       	ldi	r20, 0x80	; 128
    2e7c:	5f e3       	ldi	r21, 0x3F	; 63
    2e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e82:	88 23       	and	r24, r24
    2e84:	1c f4       	brge	.+6      	; 0x2e8c <EF_void_LCD_send_data+0x3da>
		__ticks = 1;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	88 a7       	std	Y+40, r24	; 0x28
    2e8a:	91 c0       	rjmp	.+290    	; 0x2fae <EF_void_LCD_send_data+0x4fc>
	else if (__tmp > 255)
    2e8c:	69 a5       	ldd	r22, Y+41	; 0x29
    2e8e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e90:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e92:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4f e7       	ldi	r20, 0x7F	; 127
    2e9a:	53 e4       	ldi	r21, 0x43	; 67
    2e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea0:	18 16       	cp	r1, r24
    2ea2:	0c f0       	brlt	.+2      	; 0x2ea6 <EF_void_LCD_send_data+0x3f4>
    2ea4:	7b c0       	rjmp	.+246    	; 0x2f9c <EF_void_LCD_send_data+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    2ea6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ea8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eac:	98 a9       	ldd	r25, Y+48	; 0x30
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4a e7       	ldi	r20, 0x7A	; 122
    2eb4:	54 e4       	ldi	r21, 0x44	; 68
    2eb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8c a3       	std	Y+36, r24	; 0x24
    2ec0:	9d a3       	std	Y+37, r25	; 0x25
    2ec2:	ae a3       	std	Y+38, r26	; 0x26
    2ec4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	6c a1       	ldd	r22, Y+36	; 0x24
    2ec8:	7d a1       	ldd	r23, Y+37	; 0x25
    2eca:	8e a1       	ldd	r24, Y+38	; 0x26
    2ecc:	9f a1       	ldd	r25, Y+39	; 0x27
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a ef       	ldi	r20, 0xFA	; 250
    2ed4:	54 e4       	ldi	r21, 0x44	; 68
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	88 a3       	std	Y+32, r24	; 0x20
    2ee0:	99 a3       	std	Y+33, r25	; 0x21
    2ee2:	aa a3       	std	Y+34, r26	; 0x22
    2ee4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ee6:	68 a1       	ldd	r22, Y+32	; 0x20
    2ee8:	79 a1       	ldd	r23, Y+33	; 0x21
    2eea:	8a a1       	ldd	r24, Y+34	; 0x22
    2eec:	9b a1       	ldd	r25, Y+35	; 0x23
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <EF_void_LCD_send_data+0x456>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9f 8f       	std	Y+31, r25	; 0x1f
    2f04:	8e 8f       	std	Y+30, r24	; 0x1e
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <EF_void_LCD_send_data+0x4d4>
	else if (__tmp > 65535)
    2f08:	68 a1       	ldd	r22, Y+32	; 0x20
    2f0a:	79 a1       	ldd	r23, Y+33	; 0x21
    2f0c:	8a a1       	ldd	r24, Y+34	; 0x22
    2f0e:	9b a1       	ldd	r25, Y+35	; 0x23
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <EF_void_LCD_send_data+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	6c a1       	ldd	r22, Y+36	; 0x24
    2f22:	7d a1       	ldd	r23, Y+37	; 0x25
    2f24:	8e a1       	ldd	r24, Y+38	; 0x26
    2f26:	9f a1       	ldd	r25, Y+39	; 0x27
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9f 8f       	std	Y+31, r25	; 0x1f
    2f46:	8e 8f       	std	Y+30, r24	; 0x1e
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <EF_void_LCD_send_data+0x4b6>
    2f4a:	88 ec       	ldi	r24, 0xC8	; 200
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	9d 8f       	std	Y+29, r25	; 0x1d
    2f50:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <EF_void_LCD_send_data+0x4a4>
    2f5a:	9d 8f       	std	Y+29, r25	; 0x1d
    2f5c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9f 8f       	std	Y+31, r25	; 0x1f
    2f66:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <EF_void_LCD_send_data+0x498>
    2f70:	24 c0       	rjmp	.+72     	; 0x2fba <EF_void_LCD_send_data+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	68 a1       	ldd	r22, Y+32	; 0x20
    2f74:	79 a1       	ldd	r23, Y+33	; 0x21
    2f76:	8a a1       	ldd	r24, Y+34	; 0x22
    2f78:	9b a1       	ldd	r25, Y+35	; 0x23
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9f 8f       	std	Y+31, r25	; 0x1f
    2f84:	8e 8f       	std	Y+30, r24	; 0x1e
    2f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f8a:	9b 8f       	std	Y+27, r25	; 0x1b
    2f8c:	8a 8f       	std	Y+26, r24	; 0x1a
    2f8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <EF_void_LCD_send_data+0x4e0>
    2f96:	9b 8f       	std	Y+27, r25	; 0x1b
    2f98:	8a 8f       	std	Y+26, r24	; 0x1a
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <EF_void_LCD_send_data+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f9c:	69 a5       	ldd	r22, Y+41	; 0x29
    2f9e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	88 a7       	std	Y+40, r24	; 0x28
    2fae:	88 a5       	ldd	r24, Y+40	; 0x28
    2fb0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fb2:	89 8d       	ldd	r24, Y+25	; 0x19
    2fb4:	8a 95       	dec	r24
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <EF_void_LCD_send_data+0x502>
    2fb8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    2fba:	a5 e3       	ldi	r26, 0x35	; 53
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e5 e3       	ldi	r30, 0x35	; 53
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8f 77       	andi	r24, 0x7F	; 127
    2fc6:	8c 93       	st	X, r24
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	a6 e9       	ldi	r26, 0x96	; 150
    2fce:	b3 e4       	ldi	r27, 0x43	; 67
    2fd0:	8d 8b       	std	Y+21, r24	; 0x15
    2fd2:	9e 8b       	std	Y+22, r25	; 0x16
    2fd4:	af 8b       	std	Y+23, r26	; 0x17
    2fd6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fda:	7e 89       	ldd	r23, Y+22	; 0x16
    2fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fde:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe0:	2b ea       	ldi	r18, 0xAB	; 171
    2fe2:	3a ea       	ldi	r19, 0xAA	; 170
    2fe4:	4a e2       	ldi	r20, 0x2A	; 42
    2fe6:	50 e4       	ldi	r21, 0x40	; 64
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	89 8b       	std	Y+17, r24	; 0x11
    2ff2:	9a 8b       	std	Y+18, r25	; 0x12
    2ff4:	ab 8b       	std	Y+19, r26	; 0x13
    2ff6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ff8:	69 89       	ldd	r22, Y+17	; 0x11
    2ffa:	7a 89       	ldd	r23, Y+18	; 0x12
    2ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e8       	ldi	r20, 0x80	; 128
    3006:	5f e3       	ldi	r21, 0x3F	; 63
    3008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    300c:	88 23       	and	r24, r24
    300e:	1c f4       	brge	.+6      	; 0x3016 <EF_void_LCD_send_data+0x564>
		__ticks = 1;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	88 8b       	std	Y+16, r24	; 0x10
    3014:	91 c0       	rjmp	.+290    	; 0x3138 <EF_void_LCD_send_data+0x686>
	else if (__tmp > 255)
    3016:	69 89       	ldd	r22, Y+17	; 0x11
    3018:	7a 89       	ldd	r23, Y+18	; 0x12
    301a:	8b 89       	ldd	r24, Y+19	; 0x13
    301c:	9c 89       	ldd	r25, Y+20	; 0x14
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	53 e4       	ldi	r21, 0x43	; 67
    3026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	0c f0       	brlt	.+2      	; 0x3030 <EF_void_LCD_send_data+0x57e>
    302e:	7b c0       	rjmp	.+246    	; 0x3126 <EF_void_LCD_send_data+0x674>
	{
		_delay_ms(__us / 1000.0);
    3030:	6d 89       	ldd	r22, Y+21	; 0x15
    3032:	7e 89       	ldd	r23, Y+22	; 0x16
    3034:	8f 89       	ldd	r24, Y+23	; 0x17
    3036:	98 8d       	ldd	r25, Y+24	; 0x18
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	4a e7       	ldi	r20, 0x7A	; 122
    303e:	54 e4       	ldi	r21, 0x44	; 68
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	8c 87       	std	Y+12, r24	; 0x0c
    304a:	9d 87       	std	Y+13, r25	; 0x0d
    304c:	ae 87       	std	Y+14, r26	; 0x0e
    304e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	6c 85       	ldd	r22, Y+12	; 0x0c
    3052:	7d 85       	ldd	r23, Y+13	; 0x0d
    3054:	8e 85       	ldd	r24, Y+14	; 0x0e
    3056:	9f 85       	ldd	r25, Y+15	; 0x0f
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a ef       	ldi	r20, 0xFA	; 250
    305e:	54 e4       	ldi	r21, 0x44	; 68
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	88 87       	std	Y+8, r24	; 0x08
    306a:	99 87       	std	Y+9, r25	; 0x09
    306c:	aa 87       	std	Y+10, r26	; 0x0a
    306e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3070:	68 85       	ldd	r22, Y+8	; 0x08
    3072:	79 85       	ldd	r23, Y+9	; 0x09
    3074:	8a 85       	ldd	r24, Y+10	; 0x0a
    3076:	9b 85       	ldd	r25, Y+11	; 0x0b
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	2c f4       	brge	.+10     	; 0x3092 <EF_void_LCD_send_data+0x5e0>
		__ticks = 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9f 83       	std	Y+7, r25	; 0x07
    308e:	8e 83       	std	Y+6, r24	; 0x06
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <EF_void_LCD_send_data+0x65e>
	else if (__tmp > 65535)
    3092:	68 85       	ldd	r22, Y+8	; 0x08
    3094:	79 85       	ldd	r23, Y+9	; 0x09
    3096:	8a 85       	ldd	r24, Y+10	; 0x0a
    3098:	9b 85       	ldd	r25, Y+11	; 0x0b
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	4c f5       	brge	.+82     	; 0x30fc <EF_void_LCD_send_data+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    30ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    30ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    30b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9f 83       	std	Y+7, r25	; 0x07
    30d0:	8e 83       	std	Y+6, r24	; 0x06
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <EF_void_LCD_send_data+0x640>
    30d4:	88 ec       	ldi	r24, 0xC8	; 200
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9d 83       	std	Y+5, r25	; 0x05
    30da:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30dc:	8c 81       	ldd	r24, Y+4	; 0x04
    30de:	9d 81       	ldd	r25, Y+5	; 0x05
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <EF_void_LCD_send_data+0x62e>
    30e4:	9d 83       	std	Y+5, r25	; 0x05
    30e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ea:	9f 81       	ldd	r25, Y+7	; 0x07
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	9f 83       	std	Y+7, r25	; 0x07
    30f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f2:	8e 81       	ldd	r24, Y+6	; 0x06
    30f4:	9f 81       	ldd	r25, Y+7	; 0x07
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <EF_void_LCD_send_data+0x622>
    30fa:	24 c0       	rjmp	.+72     	; 0x3144 <EF_void_LCD_send_data+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	68 85       	ldd	r22, Y+8	; 0x08
    30fe:	79 85       	ldd	r23, Y+9	; 0x09
    3100:	8a 85       	ldd	r24, Y+10	; 0x0a
    3102:	9b 85       	ldd	r25, Y+11	; 0x0b
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9f 83       	std	Y+7, r25	; 0x07
    310e:	8e 83       	std	Y+6, r24	; 0x06
    3110:	8e 81       	ldd	r24, Y+6	; 0x06
    3112:	9f 81       	ldd	r25, Y+7	; 0x07
    3114:	9b 83       	std	Y+3, r25	; 0x03
    3116:	8a 83       	std	Y+2, r24	; 0x02
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <EF_void_LCD_send_data+0x66a>
    3120:	9b 83       	std	Y+3, r25	; 0x03
    3122:	8a 83       	std	Y+2, r24	; 0x02
    3124:	0f c0       	rjmp	.+30     	; 0x3144 <EF_void_LCD_send_data+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3126:	69 89       	ldd	r22, Y+17	; 0x11
    3128:	7a 89       	ldd	r23, Y+18	; 0x12
    312a:	8b 89       	ldd	r24, Y+19	; 0x13
    312c:	9c 89       	ldd	r25, Y+20	; 0x14
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	88 8b       	std	Y+16, r24	; 0x10
    3138:	88 89       	ldd	r24, Y+16	; 0x10
    313a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	8a 95       	dec	r24
    3140:	f1 f7       	brne	.-4      	; 0x313e <EF_void_LCD_send_data+0x68c>
    3142:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    3144:	c7 5b       	subi	r28, 0xB7	; 183
    3146:	df 4f       	sbci	r29, 0xFF	; 255
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

0000315c <EF_void_LCD_goto>:
 * PARAMETERS  : U8_t y, U8_t x.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_goto(U8_t y, U8_t x)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	64 97       	sbiw	r28, 0x14	; 20
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	8b 8b       	std	Y+19, r24	; 0x13
    3172:	6c 8b       	std	Y+20, r22	; 0x14
	U8_t firstAddress[] = {0x80,0xC0,0x94,0xD4};
    3174:	80 e8       	ldi	r24, 0x80	; 128
    3176:	8f 87       	std	Y+15, r24	; 0x0f
    3178:	80 ec       	ldi	r24, 0xC0	; 192
    317a:	88 8b       	std	Y+16, r24	; 0x10
    317c:	84 e9       	ldi	r24, 0x94	; 148
    317e:	89 8b       	std	Y+17, r24	; 0x11
    3180:	84 ed       	ldi	r24, 0xD4	; 212
    3182:	8a 8b       	std	Y+18, r24	; 0x12

	EF_void_LCD_send_command(firstAddress[y-1] + x-1);
    3184:	8b 89       	ldd	r24, Y+19	; 0x13
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	9c 01       	movw	r18, r24
    318c:	21 50       	subi	r18, 0x01	; 1
    318e:	30 40       	sbci	r19, 0x00	; 0
    3190:	ce 01       	movw	r24, r28
    3192:	0f 96       	adiw	r24, 0x0f	; 15
    3194:	fc 01       	movw	r30, r24
    3196:	e2 0f       	add	r30, r18
    3198:	f3 1f       	adc	r31, r19
    319a:	90 81       	ld	r25, Z
    319c:	8c 89       	ldd	r24, Y+20	; 0x14
    319e:	89 0f       	add	r24, r25
    31a0:	81 50       	subi	r24, 0x01	; 1
    31a2:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 ea       	ldi	r26, 0xA0	; 160
    31ac:	b1 e4       	ldi	r27, 0x41	; 65
    31ae:	8b 87       	std	Y+11, r24	; 0x0b
    31b0:	9c 87       	std	Y+12, r25	; 0x0c
    31b2:	ad 87       	std	Y+13, r26	; 0x0d
    31b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8f 83       	std	Y+7, r24	; 0x07
    31d0:	98 87       	std	Y+8, r25	; 0x08
    31d2:	a9 87       	std	Y+9, r26	; 0x09
    31d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <EF_void_LCD_goto+0x9c>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <EF_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <EF_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	6b 85       	ldd	r22, Y+11	; 0x0b
    3212:	7c 85       	ldd	r23, Y+12	; 0x0c
    3214:	8d 85       	ldd	r24, Y+13	; 0x0d
    3216:	9e 85       	ldd	r25, Y+14	; 0x0e
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <EF_void_LCD_goto+0xfc>
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9c 83       	std	Y+4, r25	; 0x04
    3240:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <EF_void_LCD_goto+0xea>
    324a:	9c 83       	std	Y+4, r25	; 0x04
    324c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <EF_void_LCD_goto+0xde>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <EF_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6f 81       	ldd	r22, Y+7	; 0x07
    3264:	78 85       	ldd	r23, Y+8	; 0x08
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <EF_void_LCD_goto+0x126>
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    328a:	64 96       	adiw	r28, 0x14	; 20
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <EF_void_LCD_print_NUM>:
 *				take 1 for first row, 2: for the second row
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_NUM(S16_t s16Numberstring,U8_t u8RowNumber)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	2a 97       	sbiw	r28, 0x0a	; 10
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	99 87       	std	Y+9, r25	; 0x09
    32b2:	88 87       	std	Y+8, r24	; 0x08
    32b4:	6a 87       	std	Y+10, r22	; 0x0a
	U8_t ArrayIndex = 0;
    32b6:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    32b8:	86 e0       	ldi	r24, 0x06	; 6
    32ba:	fe 01       	movw	r30, r28
    32bc:	32 96       	adiw	r30, 0x02	; 2
    32be:	df 01       	movw	r26, r30
    32c0:	98 2f       	mov	r25, r24
    32c2:	1d 92       	st	X+, r1
    32c4:	9a 95       	dec	r25
    32c6:	e9 f7       	brne	.-6      	; 0x32c2 <EF_void_LCD_print_NUM+0x26>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    32c8:	88 85       	ldd	r24, Y+8	; 0x08
    32ca:	99 85       	ldd	r25, Y+9	; 0x09
    32cc:	9e 01       	movw	r18, r28
    32ce:	2e 5f       	subi	r18, 0xFE	; 254
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	b9 01       	movw	r22, r18
    32d4:	4a e0       	ldi	r20, 0x0A	; 10
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    32dc:	19 82       	std	Y+1, r1	; 0x01
    32de:	15 c0       	rjmp	.+42     	; 0x330a <EF_void_LCD_print_NUM+0x6e>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	98 2f       	mov	r25, r24
    32e4:	9f 5f       	subi	r25, 0xFF	; 255
    32e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    32e8:	69 2f       	mov	r22, r25
    32ea:	0e 94 ae 18 	call	0x315c	; 0x315c <EF_void_LCD_goto>
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	28 2f       	mov	r18, r24
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	ce 01       	movw	r24, r28
    32f6:	02 96       	adiw	r24, 0x02	; 2
    32f8:	fc 01       	movw	r30, r24
    32fa:	e2 0f       	add	r30, r18
    32fc:	f3 1f       	adc	r31, r19
    32fe:	80 81       	ld	r24, Z
    3300:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	8f 5f       	subi	r24, 0xFF	; 255
    3308:	89 83       	std	Y+1, r24	; 0x01
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	28 2f       	mov	r18, r24
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	ce 01       	movw	r24, r28
    3312:	02 96       	adiw	r24, 0x02	; 2
    3314:	fc 01       	movw	r30, r24
    3316:	e2 0f       	add	r30, r18
    3318:	f3 1f       	adc	r31, r19
    331a:	80 81       	ld	r24, Z
    331c:	88 23       	and	r24, r24
    331e:	01 f7       	brne	.-64     	; 0x32e0 <EF_void_LCD_print_NUM+0x44>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    3320:	2a 96       	adiw	r28, 0x0a	; 10
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <EF_void_LCD_print>:
 * PARAMETERS  : U8_t *string:  String User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print(U8_t *string)
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	00 d0       	rcall	.+0      	; 0x3338 <EF_void_LCD_print+0x6>
    3338:	0f 92       	push	r0
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	9b 83       	std	Y+3, r25	; 0x03
    3340:	8a 83       	std	Y+2, r24	; 0x02
	U8_t i = 0;
    3342:	19 82       	std	Y+1, r1	; 0x01
    3344:	0e c0       	rjmp	.+28     	; 0x3362 <EF_void_LCD_print+0x30>

	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	9b 81       	ldd	r25, Y+3	; 0x03
    3350:	fc 01       	movw	r30, r24
    3352:	e2 0f       	add	r30, r18
    3354:	f3 1f       	adc	r31, r19
    3356:	80 81       	ld	r24, Z
    3358:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>
		i++;
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	8f 5f       	subi	r24, 0xFF	; 255
    3360:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print(U8_t *string)
{
	U8_t i = 0;

	while(string[i]!=0)
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	fc 01       	movw	r30, r24
    336e:	e2 0f       	add	r30, r18
    3370:	f3 1f       	adc	r31, r19
    3372:	80 81       	ld	r24, Z
    3374:	88 23       	and	r24, r24
    3376:	39 f7       	brne	.-50     	; 0x3346 <EF_void_LCD_print+0x14>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	08 95       	ret

00003384 <EF_void_LCD_print_ByLength>:
 * 				U8_t  length:  number of characters to be displayed
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <EF_void_LCD_print_ByLength+0x6>
    338a:	00 d0       	rcall	.+0      	; 0x338c <EF_void_LCD_print_ByLength+0x8>
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	9b 83       	std	Y+3, r25	; 0x03
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	6c 83       	std	Y+4, r22	; 0x04
	U8_t i = 0;
    3396:	19 82       	std	Y+1, r1	; 0x01
    3398:	0e c0       	rjmp	.+28     	; 0x33b6 <EF_void_LCD_print_ByLength+0x32>

	while( i < length)
	{
		EF_void_LCD_send_data(string[i]);
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	fc 01       	movw	r30, r24
    33a6:	e2 0f       	add	r30, r18
    33a8:	f3 1f       	adc	r31, r19
    33aa:	80 81       	ld	r24, Z
    33ac:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>
		i++;
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	8f 5f       	subi	r24, 0xFF	; 255
    33b4:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
	U8_t i = 0;

	while( i < length)
    33b6:	99 81       	ldd	r25, Y+1	; 0x01
    33b8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ba:	98 17       	cp	r25, r24
    33bc:	70 f3       	brcs	.-36     	; 0x339a <EF_void_LCD_print_ByLength+0x16>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <EF_void_LCD_Clear_Screen>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_Clear_Screen(void)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	a6 97       	sbiw	r28, 0x26	; 38
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
	EF_void_LCD_send_command(1<<0);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 e0       	ldi	r26, 0x00	; 0
    33ec:	b0 e4       	ldi	r27, 0x40	; 64
    33ee:	8b a3       	std	Y+35, r24	; 0x23
    33f0:	9c a3       	std	Y+36, r25	; 0x24
    33f2:	ad a3       	std	Y+37, r26	; 0x25
    33f4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33f6:	6b a1       	ldd	r22, Y+35	; 0x23
    33f8:	7c a1       	ldd	r23, Y+36	; 0x24
    33fa:	8d a1       	ldd	r24, Y+37	; 0x25
    33fc:	9e a1       	ldd	r25, Y+38	; 0x26
    33fe:	2b ea       	ldi	r18, 0xAB	; 171
    3400:	3a ea       	ldi	r19, 0xAA	; 170
    3402:	4a e2       	ldi	r20, 0x2A	; 42
    3404:	50 e4       	ldi	r21, 0x40	; 64
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8f 8f       	std	Y+31, r24	; 0x1f
    3410:	98 a3       	std	Y+32, r25	; 0x20
    3412:	a9 a3       	std	Y+33, r26	; 0x21
    3414:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3416:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3418:	78 a1       	ldd	r23, Y+32	; 0x20
    341a:	89 a1       	ldd	r24, Y+33	; 0x21
    341c:	9a a1       	ldd	r25, Y+34	; 0x22
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	1c f4       	brge	.+6      	; 0x3434 <EF_void_LCD_Clear_Screen+0x68>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	8e 8f       	std	Y+30, r24	; 0x1e
    3432:	91 c0       	rjmp	.+290    	; 0x3556 <EF_void_LCD_Clear_Screen+0x18a>
	else if (__tmp > 255)
    3434:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3436:	78 a1       	ldd	r23, Y+32	; 0x20
    3438:	89 a1       	ldd	r24, Y+33	; 0x21
    343a:	9a a1       	ldd	r25, Y+34	; 0x22
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	53 e4       	ldi	r21, 0x43	; 67
    3444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	0c f0       	brlt	.+2      	; 0x344e <EF_void_LCD_Clear_Screen+0x82>
    344c:	7b c0       	rjmp	.+246    	; 0x3544 <EF_void_LCD_Clear_Screen+0x178>
	{
		_delay_ms(__us / 1000.0);
    344e:	6b a1       	ldd	r22, Y+35	; 0x23
    3450:	7c a1       	ldd	r23, Y+36	; 0x24
    3452:	8d a1       	ldd	r24, Y+37	; 0x25
    3454:	9e a1       	ldd	r25, Y+38	; 0x26
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a e7       	ldi	r20, 0x7A	; 122
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	8a 8f       	std	Y+26, r24	; 0x1a
    3468:	9b 8f       	std	Y+27, r25	; 0x1b
    346a:	ac 8f       	std	Y+28, r26	; 0x1c
    346c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3470:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3472:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3474:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a ef       	ldi	r20, 0xFA	; 250
    347c:	54 e4       	ldi	r21, 0x44	; 68
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	8e 8b       	std	Y+22, r24	; 0x16
    3488:	9f 8b       	std	Y+23, r25	; 0x17
    348a:	a8 8f       	std	Y+24, r26	; 0x18
    348c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    348e:	6e 89       	ldd	r22, Y+22	; 0x16
    3490:	7f 89       	ldd	r23, Y+23	; 0x17
    3492:	88 8d       	ldd	r24, Y+24	; 0x18
    3494:	99 8d       	ldd	r25, Y+25	; 0x19
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <EF_void_LCD_Clear_Screen+0xe4>
		__ticks = 1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9d 8b       	std	Y+21, r25	; 0x15
    34ac:	8c 8b       	std	Y+20, r24	; 0x14
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <EF_void_LCD_Clear_Screen+0x162>
	else if (__tmp > 65535)
    34b0:	6e 89       	ldd	r22, Y+22	; 0x16
    34b2:	7f 89       	ldd	r23, Y+23	; 0x17
    34b4:	88 8d       	ldd	r24, Y+24	; 0x18
    34b6:	99 8d       	ldd	r25, Y+25	; 0x19
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	4c f5       	brge	.+82     	; 0x351a <EF_void_LCD_Clear_Screen+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    34cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9d 8b       	std	Y+21, r25	; 0x15
    34ee:	8c 8b       	std	Y+20, r24	; 0x14
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <EF_void_LCD_Clear_Screen+0x144>
    34f2:	88 ec       	ldi	r24, 0xC8	; 200
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9b 8b       	std	Y+19, r25	; 0x13
    34f8:	8a 8b       	std	Y+18, r24	; 0x12
    34fa:	8a 89       	ldd	r24, Y+18	; 0x12
    34fc:	9b 89       	ldd	r25, Y+19	; 0x13
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <EF_void_LCD_Clear_Screen+0x132>
    3502:	9b 8b       	std	Y+19, r25	; 0x13
    3504:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3506:	8c 89       	ldd	r24, Y+20	; 0x14
    3508:	9d 89       	ldd	r25, Y+21	; 0x15
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9d 8b       	std	Y+21, r25	; 0x15
    350e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3510:	8c 89       	ldd	r24, Y+20	; 0x14
    3512:	9d 89       	ldd	r25, Y+21	; 0x15
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	69 f7       	brne	.-38     	; 0x34f2 <EF_void_LCD_Clear_Screen+0x126>
    3518:	24 c0       	rjmp	.+72     	; 0x3562 <EF_void_LCD_Clear_Screen+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	6e 89       	ldd	r22, Y+22	; 0x16
    351c:	7f 89       	ldd	r23, Y+23	; 0x17
    351e:	88 8d       	ldd	r24, Y+24	; 0x18
    3520:	99 8d       	ldd	r25, Y+25	; 0x19
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9d 8b       	std	Y+21, r25	; 0x15
    352c:	8c 8b       	std	Y+20, r24	; 0x14
    352e:	8c 89       	ldd	r24, Y+20	; 0x14
    3530:	9d 89       	ldd	r25, Y+21	; 0x15
    3532:	99 8b       	std	Y+17, r25	; 0x11
    3534:	88 8b       	std	Y+16, r24	; 0x10
    3536:	88 89       	ldd	r24, Y+16	; 0x10
    3538:	99 89       	ldd	r25, Y+17	; 0x11
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <EF_void_LCD_Clear_Screen+0x16e>
    353e:	99 8b       	std	Y+17, r25	; 0x11
    3540:	88 8b       	std	Y+16, r24	; 0x10
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <EF_void_LCD_Clear_Screen+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3544:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3546:	78 a1       	ldd	r23, Y+32	; 0x20
    3548:	89 a1       	ldd	r24, Y+33	; 0x21
    354a:	9a a1       	ldd	r25, Y+34	; 0x22
    354c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	8e 8f       	std	Y+30, r24	; 0x1e
    3556:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3558:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    355a:	8f 85       	ldd	r24, Y+15	; 0x0f
    355c:	8a 95       	dec	r24
    355e:	f1 f7       	brne	.-4      	; 0x355c <EF_void_LCD_Clear_Screen+0x190>
    3560:	8f 87       	std	Y+15, r24	; 0x0f
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a0 e2       	ldi	r26, 0x20	; 32
    3568:	b1 e4       	ldi	r27, 0x41	; 65
    356a:	8b 87       	std	Y+11, r24	; 0x0b
    356c:	9c 87       	std	Y+12, r25	; 0x0c
    356e:	ad 87       	std	Y+13, r26	; 0x0d
    3570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3572:	6b 85       	ldd	r22, Y+11	; 0x0b
    3574:	7c 85       	ldd	r23, Y+12	; 0x0c
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	9e 85       	ldd	r25, Y+14	; 0x0e
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4a ef       	ldi	r20, 0xFA	; 250
    3580:	54 e4       	ldi	r21, 0x44	; 68
    3582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	8f 83       	std	Y+7, r24	; 0x07
    358c:	98 87       	std	Y+8, r25	; 0x08
    358e:	a9 87       	std	Y+9, r26	; 0x09
    3590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3592:	6f 81       	ldd	r22, Y+7	; 0x07
    3594:	78 85       	ldd	r23, Y+8	; 0x08
    3596:	89 85       	ldd	r24, Y+9	; 0x09
    3598:	9a 85       	ldd	r25, Y+10	; 0x0a
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e8       	ldi	r20, 0x80	; 128
    35a0:	5f e3       	ldi	r21, 0x3F	; 63
    35a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <EF_void_LCD_Clear_Screen+0x1e8>
		__ticks = 1;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9e 83       	std	Y+6, r25	; 0x06
    35b0:	8d 83       	std	Y+5, r24	; 0x05
    35b2:	3f c0       	rjmp	.+126    	; 0x3632 <EF_void_LCD_Clear_Screen+0x266>
	else if (__tmp > 65535)
    35b4:	6f 81       	ldd	r22, Y+7	; 0x07
    35b6:	78 85       	ldd	r23, Y+8	; 0x08
    35b8:	89 85       	ldd	r24, Y+9	; 0x09
    35ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	3f ef       	ldi	r19, 0xFF	; 255
    35c0:	4f e7       	ldi	r20, 0x7F	; 127
    35c2:	57 e4       	ldi	r21, 0x47	; 71
    35c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35c8:	18 16       	cp	r1, r24
    35ca:	4c f5       	brge	.+82     	; 0x361e <EF_void_LCD_Clear_Screen+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e2       	ldi	r20, 0x20	; 32
    35da:	51 e4       	ldi	r21, 0x41	; 65
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	8d 83       	std	Y+5, r24	; 0x05
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <EF_void_LCD_Clear_Screen+0x248>
    35f6:	88 ec       	ldi	r24, 0xC8	; 200
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	9c 81       	ldd	r25, Y+4	; 0x04
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <EF_void_LCD_Clear_Screen+0x236>
    3606:	9c 83       	std	Y+4, r25	; 0x04
    3608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9e 83       	std	Y+6, r25	; 0x06
    3612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f7       	brne	.-38     	; 0x35f6 <EF_void_LCD_Clear_Screen+0x22a>
    361c:	14 c0       	rjmp	.+40     	; 0x3646 <EF_void_LCD_Clear_Screen+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	6f 81       	ldd	r22, Y+7	; 0x07
    3620:	78 85       	ldd	r23, Y+8	; 0x08
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	9a 85       	ldd	r25, Y+10	; 0x0a
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9e 83       	std	Y+6, r25	; 0x06
    3630:	8d 83       	std	Y+5, r24	; 0x05
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	9e 81       	ldd	r25, Y+6	; 0x06
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <EF_void_LCD_Clear_Screen+0x272>
    3642:	9a 83       	std	Y+2, r25	; 0x02
    3644:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	_delay_ms(10);
}
    3646:	a6 96       	adiw	r28, 0x26	; 38
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <EF_void_uploadCustomChar>:
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_uploadCustomChar(U8_t location, unsigned char *character)

{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	00 d0       	rcall	.+0      	; 0x365e <EF_void_uploadCustomChar+0x6>
    365e:	00 d0       	rcall	.+0      	; 0x3660 <EF_void_uploadCustomChar+0x8>
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    3664:	8a 83       	std	Y+2, r24	; 0x02
    3666:	7c 83       	std	Y+4, r23	; 0x04
    3668:	6b 83       	std	Y+3, r22	; 0x03
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	88 30       	cpi	r24, 0x08	; 8
    366e:	f8 f4       	brcc	.+62     	; 0x36ae <EF_void_uploadCustomChar+0x56>
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	08 96       	adiw	r24, 0x08	; 8
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    3688:	19 82       	std	Y+1, r1	; 0x01
    368a:	0e c0       	rjmp	.+28     	; 0x36a8 <EF_void_uploadCustomChar+0x50>
		{
			EF_void_LCD_send_data(character[ArrayIndex]);
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	9c 81       	ldd	r25, Y+4	; 0x04
    3696:	fc 01       	movw	r30, r24
    3698:	e2 0f       	add	r30, r18
    369a:	f3 1f       	adc	r31, r19
    369c:	80 81       	ld	r24, Z
    369e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	89 83       	std	Y+1, r24	; 0x01
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	88 30       	cpi	r24, 0x08	; 8
    36ac:	78 f3       	brcs	.-34     	; 0x368c <EF_void_uploadCustomChar+0x34>
	else
	{
		/* TODO: return Error */
	}

}
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <EF_void_LCD_HextoASCII>:
 * PARAMETERS  : hex: pointer to hex (one byte)
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_HextoASCII(U8_t *hex)
{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <EF_void_LCD_HextoASCII+0x6>
    36c2:	00 d0       	rcall	.+0      	; 0x36c4 <EF_void_LCD_HextoASCII+0x8>
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	9c 83       	std	Y+4, r25	; 0x04
    36ca:	8b 83       	std	Y+3, r24	; 0x03

	U8_t temp_L = 0;                    // dummy variable that will hold LSBs of Hex number
    36cc:	1a 82       	std	Y+2, r1	; 0x02
	U8_t temp_H = 0;                    // dummy variable that will hold MSBs of Hex number
    36ce:	19 82       	std	Y+1, r1	; 0x01

	temp_H = *hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
    36d0:	eb 81       	ldd	r30, Y+3	; 0x03
    36d2:	fc 81       	ldd	r31, Y+4	; 0x04
    36d4:	80 81       	ld	r24, Z
    36d6:	80 7f       	andi	r24, 0xF0	; 240
    36d8:	89 83       	std	Y+1, r24	; 0x01
	temp_H = temp_H >> 4;           //
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	82 95       	swap	r24
    36de:	8f 70       	andi	r24, 0x0F	; 15
    36e0:	89 83       	std	Y+1, r24	; 0x01

	if(temp_H >9)                   // Check if the number is a letter
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	8a 30       	cpi	r24, 0x0A	; 10
    36e6:	20 f0       	brcs	.+8      	; 0x36f0 <EF_void_LCD_HextoASCII+0x34>
	{
		temp_H += 0x37;             // Convert the number to a letter in ASCII
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	89 5c       	subi	r24, 0xC9	; 201
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	03 c0       	rjmp	.+6      	; 0x36f6 <EF_void_LCD_HextoASCII+0x3a>
	}
	else
	{
		temp_H += 0x30;             // Convert the number to ASCII number
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	80 5d       	subi	r24, 0xD0	; 208
    36f4:	89 83       	std	Y+1, r24	; 0x01
	}

	EF_void_LCD_send_data(temp_H);           // Display the number
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>

	temp_L = *hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
    36fc:	eb 81       	ldd	r30, Y+3	; 0x03
    36fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3700:	80 81       	ld	r24, Z
    3702:	8f 70       	andi	r24, 0x0F	; 15
    3704:	8a 83       	std	Y+2, r24	; 0x02

	if(temp_L >9)                   // Check if the the number is a letter
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	8a 30       	cpi	r24, 0x0A	; 10
    370a:	20 f0       	brcs	.+8      	; 0x3714 <EF_void_LCD_HextoASCII+0x58>
	{
		temp_L += 0x37;             // Convert the number to a letter in ASCII
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	89 5c       	subi	r24, 0xC9	; 201
    3710:	8a 83       	std	Y+2, r24	; 0x02
    3712:	03 c0       	rjmp	.+6      	; 0x371a <EF_void_LCD_HextoASCII+0x5e>
	}
	else
	{
		temp_L += 0x30;             // Convert the number to ASCII number
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	80 5d       	subi	r24, 0xD0	; 208
    3718:	8a 83       	std	Y+2, r24	; 0x02
	}

	EF_void_LCD_send_data(temp_L);           // Display the number
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>
}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	08 95       	ret

0000372e <LCD_4BIT_Write_Init>:




void LCD_4BIT_Write_Init ( U8_t temp)
{
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	6d 97       	sbiw	r28, 0x1d	; 29
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = temp;
    3744:	e8 e3       	ldi	r30, 0x38	; 56
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	8d 8d       	ldd	r24, Y+29	; 0x1d
    374a:	80 83       	st	Z, r24
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    374c:	a5 e3       	ldi	r26, 0x35	; 53
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e5 e3       	ldi	r30, 0x35	; 53
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	8f 7b       	andi	r24, 0xBF	; 191
    3758:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    375a:	a5 e3       	ldi	r26, 0x35	; 53
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	e5 e3       	ldi	r30, 0x35	; 53
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	80 68       	ori	r24, 0x80	; 128
    3766:	8c 93       	st	X, r24
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	a0 e8       	ldi	r26, 0x80	; 128
    376e:	bf e3       	ldi	r27, 0x3F	; 63
    3770:	89 8f       	std	Y+25, r24	; 0x19
    3772:	9a 8f       	std	Y+26, r25	; 0x1a
    3774:	ab 8f       	std	Y+27, r26	; 0x1b
    3776:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3778:	69 8d       	ldd	r22, Y+25	; 0x19
    377a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    377c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    377e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	4a ef       	ldi	r20, 0xFA	; 250
    3786:	54 e4       	ldi	r21, 0x44	; 68
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	8d 8b       	std	Y+21, r24	; 0x15
    3792:	9e 8b       	std	Y+22, r25	; 0x16
    3794:	af 8b       	std	Y+23, r26	; 0x17
    3796:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3798:	6d 89       	ldd	r22, Y+21	; 0x15
    379a:	7e 89       	ldd	r23, Y+22	; 0x16
    379c:	8f 89       	ldd	r24, Y+23	; 0x17
    379e:	98 8d       	ldd	r25, Y+24	; 0x18
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e8       	ldi	r20, 0x80	; 128
    37a6:	5f e3       	ldi	r21, 0x3F	; 63
    37a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	2c f4       	brge	.+10     	; 0x37ba <LCD_4BIT_Write_Init+0x8c>
		__ticks = 1;
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	9c 8b       	std	Y+20, r25	; 0x14
    37b6:	8b 8b       	std	Y+19, r24	; 0x13
    37b8:	3f c0       	rjmp	.+126    	; 0x3838 <LCD_4BIT_Write_Init+0x10a>
	else if (__tmp > 65535)
    37ba:	6d 89       	ldd	r22, Y+21	; 0x15
    37bc:	7e 89       	ldd	r23, Y+22	; 0x16
    37be:	8f 89       	ldd	r24, Y+23	; 0x17
    37c0:	98 8d       	ldd	r25, Y+24	; 0x18
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	3f ef       	ldi	r19, 0xFF	; 255
    37c6:	4f e7       	ldi	r20, 0x7F	; 127
    37c8:	57 e4       	ldi	r21, 0x47	; 71
    37ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ce:	18 16       	cp	r1, r24
    37d0:	4c f5       	brge	.+82     	; 0x3824 <LCD_4BIT_Write_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d2:	69 8d       	ldd	r22, Y+25	; 0x19
    37d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e2       	ldi	r20, 0x20	; 32
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	9c 8b       	std	Y+20, r25	; 0x14
    37f8:	8b 8b       	std	Y+19, r24	; 0x13
    37fa:	0f c0       	rjmp	.+30     	; 0x381a <LCD_4BIT_Write_Init+0xec>
    37fc:	88 ec       	ldi	r24, 0xC8	; 200
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9a 8b       	std	Y+18, r25	; 0x12
    3802:	89 8b       	std	Y+17, r24	; 0x11
    3804:	89 89       	ldd	r24, Y+17	; 0x11
    3806:	9a 89       	ldd	r25, Y+18	; 0x12
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <LCD_4BIT_Write_Init+0xda>
    380c:	9a 8b       	std	Y+18, r25	; 0x12
    380e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3810:	8b 89       	ldd	r24, Y+19	; 0x13
    3812:	9c 89       	ldd	r25, Y+20	; 0x14
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	9c 8b       	std	Y+20, r25	; 0x14
    3818:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381a:	8b 89       	ldd	r24, Y+19	; 0x13
    381c:	9c 89       	ldd	r25, Y+20	; 0x14
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	69 f7       	brne	.-38     	; 0x37fc <LCD_4BIT_Write_Init+0xce>
    3822:	14 c0       	rjmp	.+40     	; 0x384c <LCD_4BIT_Write_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3824:	6d 89       	ldd	r22, Y+21	; 0x15
    3826:	7e 89       	ldd	r23, Y+22	; 0x16
    3828:	8f 89       	ldd	r24, Y+23	; 0x17
    382a:	98 8d       	ldd	r25, Y+24	; 0x18
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	9c 8b       	std	Y+20, r25	; 0x14
    3836:	8b 8b       	std	Y+19, r24	; 0x13
    3838:	8b 89       	ldd	r24, Y+19	; 0x13
    383a:	9c 89       	ldd	r25, Y+20	; 0x14
    383c:	98 8b       	std	Y+16, r25	; 0x10
    383e:	8f 87       	std	Y+15, r24	; 0x0f
    3840:	8f 85       	ldd	r24, Y+15	; 0x0f
    3842:	98 89       	ldd	r25, Y+16	; 0x10
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	f1 f7       	brne	.-4      	; 0x3844 <LCD_4BIT_Write_Init+0x116>
    3848:	98 8b       	std	Y+16, r25	; 0x10
    384a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    384c:	a5 e3       	ldi	r26, 0x35	; 53
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	e5 e3       	ldi	r30, 0x35	; 53
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	8f 77       	andi	r24, 0x7F	; 127
    3858:	8c 93       	st	X, r24
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a0 e8       	ldi	r26, 0x80	; 128
    3860:	bf e3       	ldi	r27, 0x3F	; 63
    3862:	8b 87       	std	Y+11, r24	; 0x0b
    3864:	9c 87       	std	Y+12, r25	; 0x0c
    3866:	ad 87       	std	Y+13, r26	; 0x0d
    3868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386a:	6b 85       	ldd	r22, Y+11	; 0x0b
    386c:	7c 85       	ldd	r23, Y+12	; 0x0c
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a ef       	ldi	r20, 0xFA	; 250
    3878:	54 e4       	ldi	r21, 0x44	; 68
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8f 83       	std	Y+7, r24	; 0x07
    3884:	98 87       	std	Y+8, r25	; 0x08
    3886:	a9 87       	std	Y+9, r26	; 0x09
    3888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <LCD_4BIT_Write_Init+0x17e>
		__ticks = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <LCD_4BIT_Write_Init+0x1fc>
	else if (__tmp > 65535)
    38ac:	6f 81       	ldd	r22, Y+7	; 0x07
    38ae:	78 85       	ldd	r23, Y+8	; 0x08
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <LCD_4BIT_Write_Init+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	8d 83       	std	Y+5, r24	; 0x05
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <LCD_4BIT_Write_Init+0x1de>
    38ee:	88 ec       	ldi	r24, 0xC8	; 200
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9c 83       	std	Y+4, r25	; 0x04
    38f4:	8b 83       	std	Y+3, r24	; 0x03
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <LCD_4BIT_Write_Init+0x1cc>
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3902:	8d 81       	ldd	r24, Y+5	; 0x05
    3904:	9e 81       	ldd	r25, Y+6	; 0x06
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390c:	8d 81       	ldd	r24, Y+5	; 0x05
    390e:	9e 81       	ldd	r25, Y+6	; 0x06
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <LCD_4BIT_Write_Init+0x1c0>
    3914:	14 c0       	rjmp	.+40     	; 0x393e <LCD_4BIT_Write_Init+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	6f 81       	ldd	r22, Y+7	; 0x07
    3918:	78 85       	ldd	r23, Y+8	; 0x08
    391a:	89 85       	ldd	r24, Y+9	; 0x09
    391c:	9a 85       	ldd	r25, Y+10	; 0x0a
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	9e 81       	ldd	r25, Y+6	; 0x06
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	9a 81       	ldd	r25, Y+2	; 0x02
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <LCD_4BIT_Write_Init+0x208>
    393a:	9a 83       	std	Y+2, r25	; 0x02
    393c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    393e:	6d 96       	adiw	r28, 0x1d	; 29
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <EF_void_LCD_Newline>:


void EF_void_LCD_Newline()
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	2e 97       	sbiw	r28, 0x0e	; 14
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61

	EF_void_LCD_send_command(0xC0);
    3964:	80 ec       	ldi	r24, 0xC0	; 192
    3966:	0e 94 04 12 	call	0x2408	; 0x2408 <EF_void_LCD_send_command>
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	a0 ea       	ldi	r26, 0xA0	; 160
    3970:	b1 e4       	ldi	r27, 0x41	; 65
    3972:	8b 87       	std	Y+11, r24	; 0x0b
    3974:	9c 87       	std	Y+12, r25	; 0x0c
    3976:	ad 87       	std	Y+13, r26	; 0x0d
    3978:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397a:	6b 85       	ldd	r22, Y+11	; 0x0b
    397c:	7c 85       	ldd	r23, Y+12	; 0x0c
    397e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3980:	9e 85       	ldd	r25, Y+14	; 0x0e
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	4a ef       	ldi	r20, 0xFA	; 250
    3988:	54 e4       	ldi	r21, 0x44	; 68
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	8f 83       	std	Y+7, r24	; 0x07
    3994:	98 87       	std	Y+8, r25	; 0x08
    3996:	a9 87       	std	Y+9, r26	; 0x09
    3998:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    399a:	6f 81       	ldd	r22, Y+7	; 0x07
    399c:	78 85       	ldd	r23, Y+8	; 0x08
    399e:	89 85       	ldd	r24, Y+9	; 0x09
    39a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e8       	ldi	r20, 0x80	; 128
    39a8:	5f e3       	ldi	r21, 0x3F	; 63
    39aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ae:	88 23       	and	r24, r24
    39b0:	2c f4       	brge	.+10     	; 0x39bc <EF_void_LCD_Newline+0x6c>
		__ticks = 1;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	9e 83       	std	Y+6, r25	; 0x06
    39b8:	8d 83       	std	Y+5, r24	; 0x05
    39ba:	3f c0       	rjmp	.+126    	; 0x3a3a <EF_void_LCD_Newline+0xea>
	else if (__tmp > 65535)
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	3f ef       	ldi	r19, 0xFF	; 255
    39c8:	4f e7       	ldi	r20, 0x7F	; 127
    39ca:	57 e4       	ldi	r21, 0x47	; 71
    39cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d0:	18 16       	cp	r1, r24
    39d2:	4c f5       	brge	.+82     	; 0x3a26 <EF_void_LCD_Newline+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e2       	ldi	r20, 0x20	; 32
    39e2:	51 e4       	ldi	r21, 0x41	; 65
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	0f c0       	rjmp	.+30     	; 0x3a1c <EF_void_LCD_Newline+0xcc>
    39fe:	88 ec       	ldi	r24, 0xC8	; 200
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9c 83       	std	Y+4, r25	; 0x04
    3a04:	8b 83       	std	Y+3, r24	; 0x03
    3a06:	8b 81       	ldd	r24, Y+3	; 0x03
    3a08:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <EF_void_LCD_Newline+0xba>
    3a0e:	9c 83       	std	Y+4, r25	; 0x04
    3a10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	69 f7       	brne	.-38     	; 0x39fe <EF_void_LCD_Newline+0xae>
    3a24:	14 c0       	rjmp	.+40     	; 0x3a4e <EF_void_LCD_Newline+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	9a 83       	std	Y+2, r25	; 0x02
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	9a 81       	ldd	r25, Y+2	; 0x02
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <EF_void_LCD_Newline+0xf6>
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3a4e:	2e 96       	adiw	r28, 0x0e	; 14
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	f8 94       	cli
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	0f be       	out	0x3f, r0	; 63
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <EF_void_LCD_print_Number>:


void EF_void_LCD_print_Number(S16_t s16Numberstring)
{
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	29 97       	sbiw	r28, 0x09	; 9
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	99 87       	std	Y+9, r25	; 0x09
    3a76:	88 87       	std	Y+8, r24	; 0x08
	U8_t ArrayIndex = 0;
    3a78:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    3a7a:	86 e0       	ldi	r24, 0x06	; 6
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	32 96       	adiw	r30, 0x02	; 2
    3a80:	df 01       	movw	r26, r30
    3a82:	98 2f       	mov	r25, r24
    3a84:	1d 92       	st	X+, r1
    3a86:	9a 95       	dec	r25
    3a88:	e9 f7       	brne	.-6      	; 0x3a84 <EF_void_LCD_print_Number+0x24>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    3a8a:	88 85       	ldd	r24, Y+8	; 0x08
    3a8c:	99 85       	ldd	r25, Y+9	; 0x09
    3a8e:	9e 01       	movw	r18, r28
    3a90:	2e 5f       	subi	r18, 0xFE	; 254
    3a92:	3f 4f       	sbci	r19, 0xFF	; 255
    3a94:	b9 01       	movw	r22, r18
    3a96:	4a e0       	ldi	r20, 0x0A	; 10
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    3a9e:	19 82       	std	Y+1, r1	; 0x01
    3aa0:	0e c0       	rjmp	.+28     	; 0x3abe <EF_void_LCD_print_Number+0x5e>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    3aa2:	89 81       	ldd	r24, Y+1	; 0x01
    3aa4:	28 2f       	mov	r18, r24
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	ce 01       	movw	r24, r28
    3aaa:	02 96       	adiw	r24, 0x02	; 2
    3aac:	fc 01       	movw	r30, r24
    3aae:	e2 0f       	add	r30, r18
    3ab0:	f3 1f       	adc	r31, r19
    3ab2:	80 81       	ld	r24, Z
    3ab4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	8f 5f       	subi	r24, 0xFF	; 255
    3abc:	89 83       	std	Y+1, r24	; 0x01
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	28 2f       	mov	r18, r24
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	02 96       	adiw	r24, 0x02	; 2
    3ac8:	fc 01       	movw	r30, r24
    3aca:	e2 0f       	add	r30, r18
    3acc:	f3 1f       	adc	r31, r19
    3ace:	80 81       	ld	r24, Z
    3ad0:	88 23       	and	r24, r24
    3ad2:	39 f7       	brne	.-50     	; 0x3aa2 <EF_void_LCD_print_Number+0x42>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    3ad4:	29 96       	adiw	r28, 0x09	; 9
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	de bf       	out	0x3e, r29	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	cf 91       	pop	r28
    3ae2:	df 91       	pop	r29
    3ae4:	08 95       	ret

00003ae6 <ESP_init>:
#define DEFAULT_BUFFER_SIZE 60
char  Rec_Data[DEFAULT_BUFFER_SIZE];
char  Counter=0;

void ESP_init(void)
{
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	cd b7       	in	r28, 0x3d	; 61
    3aec:	de b7       	in	r29, 0x3e	; 62
	init_UART();
    3aee:	0e 94 86 06 	call	0xd0c	; 0xd0c <init_UART>
	Set_Call_Back_fun(REC_from_interrupt);
    3af2:	8e e8       	ldi	r24, 0x8E	; 142
    3af4:	91 e2       	ldi	r25, 0x21	; 33
    3af6:	0e 94 15 07 	call	0xe2a	; 0xe2a <Set_Call_Back_fun>
	Clear_REC_Buffer();
    3afa:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>

	timer_create(wifi_module_timer_ID,wifi_module_timer_time_OUT);
    3afe:	83 e0       	ldi	r24, 0x03	; 3
    3b00:	40 e1       	ldi	r20, 0x10	; 16
    3b02:	57 e2       	ldi	r21, 0x27	; 39
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	70 e0       	ldi	r23, 0x00	; 0
    3b08:	0e 94 77 09 	call	0x12ee	; 0x12ee <timer_create>


	ESP_Echo_Enable(FALSE);
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <ESP_Echo_Enable>
	ESP_Work_Mode(BOTH);
    3b12:	83 e0       	ldi	r24, 0x03	; 3
    3b14:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <ESP_Work_Mode>
	ESP_Multiple_Connections_Enable(FALSE);
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <ESP_Multiple_Connections_Enable>
	ESP_transmission_Mode(NORMAL);
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <ESP_transmission_Mode>

	if(ESP_check_connection()==FALSE)
    3b24:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <ESP_check_connection>
    3b28:	88 23       	and	r24, r24
    3b2a:	39 f4       	brne	.+14     	; 0x3b3a <ESP_init+0x54>
	{
		ESP_connect_to_WIFI(WIFI_USER_NAME,WIFI_PASSWORD);
    3b2c:	82 e8       	ldi	r24, 0x82	; 130
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	2c e8       	ldi	r18, 0x8C	; 140
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	b9 01       	movw	r22, r18
    3b36:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <ESP_connect_to_WIFI>
	}

}
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <ESP_Echo_Enable>:

void ESP_Echo_Enable(BOOLEAN Choose)
{
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	0f 92       	push	r0
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	89 83       	std	Y+1, r24	; 0x01
	Clear_REC_Buffer();
    3b4c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>

	if(Choose==TRUE)
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	29 f4       	brne	.+10     	; 0x3b60 <ESP_Echo_Enable+0x20>
	{
		UART_SEND_string("ATE1\r\n");
    3b56:	85 e9       	ldi	r24, 0x95	; 149
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
    3b5e:	07 c0       	rjmp	.+14     	; 0x3b6e <ESP_Echo_Enable+0x2e>
	}
	else if(Choose==FALSE)
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	88 23       	and	r24, r24
    3b64:	21 f4       	brne	.+8      	; 0x3b6e <ESP_Echo_Enable+0x2e>
	{
		UART_SEND_string( "ATE0\r\n");
    3b66:	8c e9       	ldi	r24, 0x9C	; 156
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	}

	timer_reset(wifi_module_timer_ID);
    3b6e:	83 e0       	ldi	r24, 0x03	; 3
    3b70:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3b74:	83 e0       	ldi	r24, 0x03	; 3
    3b76:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!((Check_Respond("\r\nOK\r\n"))||(Check_Respond("ATE0\r\r\n\r\nOK\r\n")))));
    3b7a:	83 e0       	ldi	r24, 0x03	; 3
    3b7c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3b80:	88 23       	and	r24, r24
    3b82:	61 f4       	brne	.+24     	; 0x3b9c <ESP_Echo_Enable+0x5c>
    3b84:	83 ea       	ldi	r24, 0xA3	; 163
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3b8c:	88 23       	and	r24, r24
    3b8e:	31 f4       	brne	.+12     	; 0x3b9c <ESP_Echo_Enable+0x5c>
    3b90:	8a ea       	ldi	r24, 0xAA	; 170
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3b98:	88 23       	and	r24, r24
    3b9a:	79 f3       	breq	.-34     	; 0x3b7a <ESP_Echo_Enable+0x3a>
	timer_stop(wifi_module_timer_ID);
    3b9c:	83 e0       	ldi	r24, 0x03	; 3
    3b9e:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
	EF_void_LCD_Clear_Screen();
	EF_void_LCD_print((unsigned char*)"ESP EChO ");
	EF_void_LCD_print_Number(Choose);
	_delay_ms(2000);
#endif
}
    3ba2:	0f 90       	pop	r0
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <ESP_Work_Mode>:


void ESP_Work_Mode(U8_t work_mode)
{
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	0f 92       	push	r0
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	89 83       	std	Y+1, r24	; 0x01
	Clear_REC_Buffer();
    3bb6:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	if(work_mode==CLIENT)
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	81 30       	cpi	r24, 0x01	; 1
    3bbe:	29 f4       	brne	.+10     	; 0x3bca <ESP_Work_Mode+0x20>
	{
		UART_SEND_string( "AT+CWMODE=1\r\n");
    3bc0:	88 eb       	ldi	r24, 0xB8	; 184
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
    3bc8:	0f c0       	rjmp	.+30     	; 0x3be8 <ESP_Work_Mode+0x3e>
	}
	else if(work_mode==SERVER)
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	82 30       	cpi	r24, 0x02	; 2
    3bce:	29 f4       	brne	.+10     	; 0x3bda <ESP_Work_Mode+0x30>
	{
		UART_SEND_string( "AT+CWMODE=2\r\n");
    3bd0:	86 ec       	ldi	r24, 0xC6	; 198
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
    3bd8:	07 c0       	rjmp	.+14     	; 0x3be8 <ESP_Work_Mode+0x3e>
	}
	else if(work_mode==BOTH)
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	83 30       	cpi	r24, 0x03	; 3
    3bde:	21 f4       	brne	.+8      	; 0x3be8 <ESP_Work_Mode+0x3e>
	{
		UART_SEND_string( "AT+CWMODE=3\r\n");
    3be0:	84 ed       	ldi	r24, 0xD4	; 212
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	}

	timer_reset(wifi_module_timer_ID);
    3be8:	83 e0       	ldi	r24, 0x03	; 3
    3bea:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3bee:	83 e0       	ldi	r24, 0x03	; 3
    3bf0:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Respond("\r\nOK\r\n")));
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3bfa:	88 23       	and	r24, r24
    3bfc:	31 f4       	brne	.+12     	; 0x3c0a <ESP_Work_Mode+0x60>
    3bfe:	83 ea       	ldi	r24, 0xA3	; 163
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3c06:	88 23       	and	r24, r24
    3c08:	a9 f3       	breq	.-22     	; 0x3bf4 <ESP_Work_Mode+0x4a>

	timer_stop(wifi_module_timer_ID);
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
	EF_void_LCD_print_Number(work_mode);
	_delay_ms(2000);
#endif


}
    3c10:	0f 90       	pop	r0
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <ESP_Multiple_Connections_Enable>:


void ESP_Multiple_Connections_Enable(BOOLEAN Choose)
{
    3c18:	df 93       	push	r29
    3c1a:	cf 93       	push	r28
    3c1c:	0f 92       	push	r0
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	89 83       	std	Y+1, r24	; 0x01

Clear_REC_Buffer();
    3c24:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	if(Choose==TRUE)
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	81 30       	cpi	r24, 0x01	; 1
    3c2c:	29 f4       	brne	.+10     	; 0x3c38 <ESP_Multiple_Connections_Enable+0x20>
	{
		UART_SEND_string( "AT+CIPMUX=1\r\n");
    3c2e:	82 ee       	ldi	r24, 0xE2	; 226
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
    3c36:	07 c0       	rjmp	.+14     	; 0x3c46 <ESP_Multiple_Connections_Enable+0x2e>
	}
	else if(Choose==FALSE)
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	88 23       	and	r24, r24
    3c3c:	21 f4       	brne	.+8      	; 0x3c46 <ESP_Multiple_Connections_Enable+0x2e>
	{
		UART_SEND_string( "AT+CIPMUX=0\r\n");
    3c3e:	80 ef       	ldi	r24, 0xF0	; 240
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	}


	timer_reset(wifi_module_timer_ID);
    3c46:	83 e0       	ldi	r24, 0x03	; 3
    3c48:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3c4c:	83 e0       	ldi	r24, 0x03	; 3
    3c4e:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Respond("\r\nOK\r\n")));
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3c58:	88 23       	and	r24, r24
    3c5a:	31 f4       	brne	.+12     	; 0x3c68 <ESP_Multiple_Connections_Enable+0x50>
    3c5c:	83 ea       	ldi	r24, 0xA3	; 163
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3c64:	88 23       	and	r24, r24
    3c66:	a9 f3       	breq	.-22     	; 0x3c52 <ESP_Multiple_Connections_Enable+0x3a>

	timer_stop(wifi_module_timer_ID);
    3c68:	83 e0       	ldi	r24, 0x03	; 3
    3c6a:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
	EF_void_LCD_print_Number(Choose);
	_delay_ms(2000);
#endif


}
    3c6e:	0f 90       	pop	r0
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <ESP_transmission_Mode>:


void ESP_transmission_Mode(U8_t transmission_Mode)
{
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	0f 92       	push	r0
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    3c80:	89 83       	std	Y+1, r24	; 0x01

Clear_REC_Buffer();
    3c82:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	if(transmission_Mode==NORMAL)
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	88 23       	and	r24, r24
    3c8a:	29 f4       	brne	.+10     	; 0x3c96 <ESP_transmission_Mode+0x20>
	{
		UART_SEND_string( "AT+CIPMODE=0\r\n");
    3c8c:	8e ef       	ldi	r24, 0xFE	; 254
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
    3c94:	07 c0       	rjmp	.+14     	; 0x3ca4 <ESP_transmission_Mode+0x2e>
	}
	else if(transmission_Mode==TRANSPARENT)
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	81 30       	cpi	r24, 0x01	; 1
    3c9a:	21 f4       	brne	.+8      	; 0x3ca4 <ESP_transmission_Mode+0x2e>
	{
		UART_SEND_string( "AT+CIPMODE=1\r\n");
    3c9c:	8d e0       	ldi	r24, 0x0D	; 13
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	}

	timer_reset(wifi_module_timer_ID);
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3caa:	83 e0       	ldi	r24, 0x03	; 3
    3cac:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Respond("\r\nOK\r\n")));
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3cb6:	88 23       	and	r24, r24
    3cb8:	31 f4       	brne	.+12     	; 0x3cc6 <ESP_transmission_Mode+0x50>
    3cba:	83 ea       	ldi	r24, 0xA3	; 163
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3cc2:	88 23       	and	r24, r24
    3cc4:	a9 f3       	breq	.-22     	; 0x3cb0 <ESP_transmission_Mode+0x3a>

	timer_stop(wifi_module_timer_ID);
    3cc6:	83 e0       	ldi	r24, 0x03	; 3
    3cc8:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
	EF_void_LCD_print((unsigned char*)"transmission Mode");
	EF_void_LCD_print_Number(transmission_Mode);
	_delay_ms(2000);
#endif

}
    3ccc:	0f 90       	pop	r0
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <ESP_check_connection>:


BOOLEAN ESP_check_connection(void)
{
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	2f 97       	sbiw	r28, 0x0f	; 15
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	de bf       	out	0x3e, r29	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	cd bf       	out	0x3d, r28	; 61

    Clear_REC_Buffer();
    3ce8:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	UART_SEND_string( "AT+CIPSTATUS\r\n");
    3cec:	8c e1       	ldi	r24, 0x1C	; 28
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>


	timer_reset(wifi_module_timer_ID);
    3cf4:	83 e0       	ldi	r24, 0x03	; 3
    3cf6:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3cfa:	83 e0       	ldi	r24, 0x03	; 3
    3cfc:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Word_in_Respond("STATUS")));
    3d00:	83 e0       	ldi	r24, 0x03	; 3
    3d02:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3d06:	88 23       	and	r24, r24
    3d08:	31 f4       	brne	.+12     	; 0x3d16 <ESP_check_connection+0x42>
    3d0a:	8b e2       	ldi	r24, 0x2B	; 43
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	0e 94 5f 21 	call	0x42be	; 0x42be <Check_Word_in_Respond>
    3d12:	88 23       	and	r24, r24
    3d14:	a9 f3       	breq	.-22     	; 0x3d00 <ESP_check_connection+0x2c>

	timer_stop(wifi_module_timer_ID);
    3d16:	83 e0       	ldi	r24, 0x03	; 3
    3d18:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	a8 e4       	ldi	r26, 0x48	; 72
    3d22:	b2 e4       	ldi	r27, 0x42	; 66
    3d24:	8b 87       	std	Y+11, r24	; 0x0b
    3d26:	9c 87       	std	Y+12, r25	; 0x0c
    3d28:	ad 87       	std	Y+13, r26	; 0x0d
    3d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	4a ef       	ldi	r20, 0xFA	; 250
    3d3a:	54 e4       	ldi	r21, 0x44	; 68
    3d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	8f 83       	std	Y+7, r24	; 0x07
    3d46:	98 87       	std	Y+8, r25	; 0x08
    3d48:	a9 87       	std	Y+9, r26	; 0x09
    3d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4e:	78 85       	ldd	r23, Y+8	; 0x08
    3d50:	89 85       	ldd	r24, Y+9	; 0x09
    3d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f e3       	ldi	r21, 0x3F	; 63
    3d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d60:	88 23       	and	r24, r24
    3d62:	2c f4       	brge	.+10     	; 0x3d6e <ESP_check_connection+0x9a>
		__ticks = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9e 83       	std	Y+6, r25	; 0x06
    3d6a:	8d 83       	std	Y+5, r24	; 0x05
    3d6c:	3f c0       	rjmp	.+126    	; 0x3dec <ESP_check_connection+0x118>
	else if (__tmp > 65535)
    3d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d70:	78 85       	ldd	r23, Y+8	; 0x08
    3d72:	89 85       	ldd	r24, Y+9	; 0x09
    3d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	3f ef       	ldi	r19, 0xFF	; 255
    3d7a:	4f e7       	ldi	r20, 0x7F	; 127
    3d7c:	57 e4       	ldi	r21, 0x47	; 71
    3d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d82:	18 16       	cp	r1, r24
    3d84:	4c f5       	brge	.+82     	; 0x3dd8 <ESP_check_connection+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e2       	ldi	r20, 0x20	; 32
    3d94:	51 e4       	ldi	r21, 0x41	; 65
    3d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	bc 01       	movw	r22, r24
    3da0:	cd 01       	movw	r24, r26
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9e 83       	std	Y+6, r25	; 0x06
    3dac:	8d 83       	std	Y+5, r24	; 0x05
    3dae:	0f c0       	rjmp	.+30     	; 0x3dce <ESP_check_connection+0xfa>
    3db0:	88 ec       	ldi	r24, 0xC8	; 200
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	9c 83       	std	Y+4, r25	; 0x04
    3db6:	8b 83       	std	Y+3, r24	; 0x03
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <ESP_check_connection+0xe8>
    3dc0:	9c 83       	std	Y+4, r25	; 0x04
    3dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	9e 83       	std	Y+6, r25	; 0x06
    3dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	69 f7       	brne	.-38     	; 0x3db0 <ESP_check_connection+0xdc>
    3dd6:	14 c0       	rjmp	.+40     	; 0x3e00 <ESP_check_connection+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dda:	78 85       	ldd	r23, Y+8	; 0x08
    3ddc:	89 85       	ldd	r24, Y+9	; 0x09
    3dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	9e 83       	std	Y+6, r25	; 0x06
    3dea:	8d 83       	std	Y+5, r24	; 0x05
    3dec:	8d 81       	ldd	r24, Y+5	; 0x05
    3dee:	9e 81       	ldd	r25, Y+6	; 0x06
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	89 83       	std	Y+1, r24	; 0x01
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <ESP_check_connection+0x124>
    3dfc:	9a 83       	std	Y+2, r25	; 0x02
    3dfe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(50);

	if(Check_Respond(":2\r\n"))
    3e00:	82 e3       	ldi	r24, 0x32	; 50
    3e02:	91 e0       	ldi	r25, 0x01	; 1
    3e04:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3e08:	88 23       	and	r24, r24
    3e0a:	19 f0       	breq	.+6      	; 0x3e12 <ESP_check_connection+0x13e>
	{
		return TRUE;
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	8f 87       	std	Y+15, r24	; 0x0f
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <ESP_check_connection+0x140>
	}
	else
	{
		return FALSE;
    3e12:	1f 86       	std	Y+15, r1	; 0x0f
    3e14:	8f 85       	ldd	r24, Y+15	; 0x0f
	}

}
    3e16:	2f 96       	adiw	r28, 0x0f	; 15
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <ESP_connect_to_WIFI>:


void ESP_connect_to_WIFI(char* USER_NAME,char* PASSWORD)
{
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <ESP_connect_to_WIFI+0x6>
    3e2e:	00 d0       	rcall	.+0      	; 0x3e30 <ESP_connect_to_WIFI+0x8>
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	9a 83       	std	Y+2, r25	; 0x02
    3e36:	89 83       	std	Y+1, r24	; 0x01
    3e38:	7c 83       	std	Y+4, r23	; 0x04
    3e3a:	6b 83       	std	Y+3, r22	; 0x03

Clear_REC_Buffer();
    3e3c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	UART_SEND_string( "AT+CWJAP=\"");
    3e40:	87 e3       	ldi	r24, 0x37	; 55
    3e42:	91 e0       	ldi	r25, 0x01	; 1
    3e44:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( USER_NAME);
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( "\",\"");
    3e50:	82 e4       	ldi	r24, 0x42	; 66
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( PASSWORD);
    3e58:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( "\"\r\n");
    3e60:	86 e4       	ldi	r24, 0x46	; 70
    3e62:	91 e0       	ldi	r25, 0x01	; 1
    3e64:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>




	timer_reset(wifi_module_timer_ID);
    3e68:	83 e0       	ldi	r24, 0x03	; 3
    3e6a:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3e6e:	83 e0       	ldi	r24, 0x03	; 3
    3e70:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!((Check_Respond("WIFI DISCONNECT\r\nWIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))||(Check_Respond("WIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))||Check_Respond("\r\nOK\r\n"))));
    3e74:	83 e0       	ldi	r24, 0x03	; 3
    3e76:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3e7a:	88 23       	and	r24, r24
    3e7c:	91 f4       	brne	.+36     	; 0x3ea2 <ESP_connect_to_WIFI+0x7a>
    3e7e:	8a e4       	ldi	r24, 0x4A	; 74
    3e80:	91 e0       	ldi	r25, 0x01	; 1
    3e82:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3e86:	88 23       	and	r24, r24
    3e88:	61 f4       	brne	.+24     	; 0x3ea2 <ESP_connect_to_WIFI+0x7a>
    3e8a:	8f e7       	ldi	r24, 0x7F	; 127
    3e8c:	91 e0       	ldi	r25, 0x01	; 1
    3e8e:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3e92:	88 23       	and	r24, r24
    3e94:	31 f4       	brne	.+12     	; 0x3ea2 <ESP_connect_to_WIFI+0x7a>
    3e96:	83 ea       	ldi	r24, 0xA3	; 163
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3e9e:	88 23       	and	r24, r24
    3ea0:	49 f3       	breq	.-46     	; 0x3e74 <ESP_connect_to_WIFI+0x4c>

	timer_stop(wifi_module_timer_ID);
    3ea2:	83 e0       	ldi	r24, 0x03	; 3
    3ea4:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
	_delay_ms(2000);
#endif



}
    3ea8:	0f 90       	pop	r0
    3eaa:	0f 90       	pop	r0
    3eac:	0f 90       	pop	r0
    3eae:	0f 90       	pop	r0
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <ESP_OPEN_SOCKET>:

void  ESP_OPEN_SOCKET(char* SERVER_IP,char* SERVER_PORT)
{
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	00 d0       	rcall	.+0      	; 0x3ebc <ESP_OPEN_SOCKET+0x6>
    3ebc:	00 d0       	rcall	.+0      	; 0x3ebe <ESP_OPEN_SOCKET+0x8>
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	9a 83       	std	Y+2, r25	; 0x02
    3ec4:	89 83       	std	Y+1, r24	; 0x01
    3ec6:	7c 83       	std	Y+4, r23	; 0x04
    3ec8:	6b 83       	std	Y+3, r22	; 0x03

	Clear_REC_Buffer();
    3eca:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	UART_SEND_string( "AT+CIPSTART=\"TCP\",\"");
    3ece:	83 ea       	ldi	r24, 0xA3	; 163
    3ed0:	91 e0       	ldi	r25, 0x01	; 1
    3ed2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( SERVER_IP);
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eda:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( "\",");
    3ede:	87 eb       	ldi	r24, 0xB7	; 183
    3ee0:	91 e0       	ldi	r25, 0x01	; 1
    3ee2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( SERVER_PORT);
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eea:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
	UART_SEND_string( "\r\n");
    3eee:	8a eb       	ldi	r24, 0xBA	; 186
    3ef0:	91 e0       	ldi	r25, 0x01	; 1
    3ef2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>




	timer_reset(wifi_module_timer_ID);
    3ef6:	83 e0       	ldi	r24, 0x03	; 3
    3ef8:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Respond("CONNECT\r\n\r\nOK\r\n")));
    3f02:	83 e0       	ldi	r24, 0x03	; 3
    3f04:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    3f08:	88 23       	and	r24, r24
    3f0a:	31 f4       	brne	.+12     	; 0x3f18 <ESP_OPEN_SOCKET+0x62>
    3f0c:	8d eb       	ldi	r24, 0xBD	; 189
    3f0e:	91 e0       	ldi	r25, 0x01	; 1
    3f10:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    3f14:	88 23       	and	r24, r24
    3f16:	a9 f3       	breq	.-22     	; 0x3f02 <ESP_OPEN_SOCKET+0x4c>

	timer_stop(wifi_module_timer_ID);
    3f18:	83 e0       	ldi	r24, 0x03	; 3
    3f1a:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
#endif




}
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <ESP_uploade_data>:


void ESP_uploade_data(unsigned int field,unsigned int data)
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
    3f34:	c8 55       	subi	r28, 0x58	; 88
    3f36:	d0 40       	sbci	r29, 0x00	; 0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	cd bf       	out	0x3d, r28	; 61
    3f42:	fe 01       	movw	r30, r28
    3f44:	eb 5a       	subi	r30, 0xAB	; 171
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	91 83       	std	Z+1, r25	; 0x01
    3f4a:	80 83       	st	Z, r24
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e9 5a       	subi	r30, 0xA9	; 169
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	71 83       	std	Z+1, r23	; 0x01
    3f54:	60 83       	st	Z, r22
	char api_buffer[50]={0},send_length_buffer[20]={0};
    3f56:	82 e3       	ldi	r24, 0x32	; 50
    3f58:	fe 01       	movw	r30, r28
    3f5a:	3f 96       	adiw	r30, 0x0f	; 15
    3f5c:	df 01       	movw	r26, r30
    3f5e:	98 2f       	mov	r25, r24
    3f60:	1d 92       	st	X+, r1
    3f62:	9a 95       	dec	r25
    3f64:	e9 f7       	brne	.-6      	; 0x3f60 <ESP_uploade_data+0x34>
    3f66:	84 e1       	ldi	r24, 0x14	; 20
    3f68:	fe 01       	movw	r30, r28
    3f6a:	ef 5b       	subi	r30, 0xBF	; 191
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	df 01       	movw	r26, r30
    3f70:	98 2f       	mov	r25, r24
    3f72:	1d 92       	st	X+, r1
    3f74:	9a 95       	dec	r25
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <ESP_uploade_data+0x46>



	if(ESP_check_connection()==FALSE)
    3f78:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <ESP_check_connection>
    3f7c:	88 23       	and	r24, r24
    3f7e:	39 f4       	brne	.+14     	; 0x3f8e <ESP_uploade_data+0x62>
	{
		ESP_connect_to_WIFI(WIFI_USER_NAME,WIFI_PASSWORD);
    3f80:	82 e8       	ldi	r24, 0x82	; 130
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	2c e8       	ldi	r18, 0x8C	; 140
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	b9 01       	movw	r22, r18
    3f8a:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <ESP_connect_to_WIFI>
	}

	ESP_OPEN_SOCKET(ThingSpeak_SERVER,ThingSpeak_PORT);
    3f8e:	8d ec       	ldi	r24, 0xCD	; 205
    3f90:	91 e0       	ldi	r25, 0x01	; 1
    3f92:	20 ee       	ldi	r18, 0xE0	; 224
    3f94:	31 e0       	ldi	r19, 0x01	; 1
    3f96:	b9 01       	movw	r22, r18
    3f98:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <ESP_OPEN_SOCKET>



	sprintf(api_buffer, "GET /update?api_key=SD5OBD49N5H4O8RY&field%d=%d\r\n",field, data);
    3f9c:	ad b7       	in	r26, 0x3d	; 61
    3f9e:	be b7       	in	r27, 0x3e	; 62
    3fa0:	18 97       	sbiw	r26, 0x08	; 8
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	be bf       	out	0x3e, r27	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	ad bf       	out	0x3d, r26	; 61
    3fac:	ad b7       	in	r26, 0x3d	; 61
    3fae:	be b7       	in	r27, 0x3e	; 62
    3fb0:	11 96       	adiw	r26, 0x01	; 1
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	0f 96       	adiw	r24, 0x0f	; 15
    3fb6:	11 96       	adiw	r26, 0x01	; 1
    3fb8:	9c 93       	st	X, r25
    3fba:	8e 93       	st	-X, r24
    3fbc:	83 ee       	ldi	r24, 0xE3	; 227
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	13 96       	adiw	r26, 0x03	; 3
    3fc2:	9c 93       	st	X, r25
    3fc4:	8e 93       	st	-X, r24
    3fc6:	12 97       	sbiw	r26, 0x02	; 2
    3fc8:	fe 01       	movw	r30, r28
    3fca:	eb 5a       	subi	r30, 0xAB	; 171
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 81       	ld	r24, Z
    3fd0:	91 81       	ldd	r25, Z+1	; 0x01
    3fd2:	15 96       	adiw	r26, 0x05	; 5
    3fd4:	9c 93       	st	X, r25
    3fd6:	8e 93       	st	-X, r24
    3fd8:	14 97       	sbiw	r26, 0x04	; 4
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e9 5a       	subi	r30, 0xA9	; 169
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	80 81       	ld	r24, Z
    3fe2:	91 81       	ldd	r25, Z+1	; 0x01
    3fe4:	17 96       	adiw	r26, 0x07	; 7
    3fe6:	9c 93       	st	X, r25
    3fe8:	8e 93       	st	-X, r24
    3fea:	16 97       	sbiw	r26, 0x06	; 6
    3fec:	0e 94 75 27 	call	0x4eea	; 0x4eea <sprintf>
    3ff0:	8d b7       	in	r24, 0x3d	; 61
    3ff2:	9e b7       	in	r25, 0x3e	; 62
    3ff4:	08 96       	adiw	r24, 0x08	; 8
    3ff6:	0f b6       	in	r0, 0x3f	; 63
    3ff8:	f8 94       	cli
    3ffa:	9e bf       	out	0x3e, r25	; 62
    3ffc:	0f be       	out	0x3f, r0	; 63
    3ffe:	8d bf       	out	0x3d, r24	; 61

	memset(send_length_buffer,0,20);
    4000:	ce 01       	movw	r24, r28
    4002:	8f 5b       	subi	r24, 0xBF	; 191
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	60 e0       	ldi	r22, 0x00	; 0
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	44 e1       	ldi	r20, 0x14	; 20
    400c:	50 e0       	ldi	r21, 0x00	; 0
    400e:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <memset>
	sprintf(send_length_buffer, "AT+CIPSEND=%d\r\n", strlen(api_buffer));
    4012:	ce 01       	movw	r24, r28
    4014:	0f 96       	adiw	r24, 0x0f	; 15
    4016:	0e 94 23 27 	call	0x4e46	; 0x4e46 <strlen>
    401a:	9c 01       	movw	r18, r24
    401c:	00 d0       	rcall	.+0      	; 0x401e <ESP_uploade_data+0xf2>
    401e:	00 d0       	rcall	.+0      	; 0x4020 <ESP_uploade_data+0xf4>
    4020:	00 d0       	rcall	.+0      	; 0x4022 <ESP_uploade_data+0xf6>
    4022:	ed b7       	in	r30, 0x3d	; 61
    4024:	fe b7       	in	r31, 0x3e	; 62
    4026:	31 96       	adiw	r30, 0x01	; 1
    4028:	ce 01       	movw	r24, r28
    402a:	8f 5b       	subi	r24, 0xBF	; 191
    402c:	9f 4f       	sbci	r25, 0xFF	; 255
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
    4032:	85 e1       	ldi	r24, 0x15	; 21
    4034:	92 e0       	ldi	r25, 0x02	; 2
    4036:	93 83       	std	Z+3, r25	; 0x03
    4038:	82 83       	std	Z+2, r24	; 0x02
    403a:	35 83       	std	Z+5, r19	; 0x05
    403c:	24 83       	std	Z+4, r18	; 0x04
    403e:	0e 94 75 27 	call	0x4eea	; 0x4eea <sprintf>
    4042:	ad b7       	in	r26, 0x3d	; 61
    4044:	be b7       	in	r27, 0x3e	; 62
    4046:	16 96       	adiw	r26, 0x06	; 6
    4048:	0f b6       	in	r0, 0x3f	; 63
    404a:	f8 94       	cli
    404c:	be bf       	out	0x3e, r27	; 62
    404e:	0f be       	out	0x3f, r0	; 63
    4050:	ad bf       	out	0x3d, r26	; 61

	Clear_REC_Buffer();
    4052:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	UART_SEND_string( send_length_buffer);
    4056:	ce 01       	movw	r24, r28
    4058:	8f 5b       	subi	r24, 0xBF	; 191
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>


	timer_reset(wifi_module_timer_ID);
    4060:	83 e0       	ldi	r24, 0x03	; 3
    4062:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    4066:	83 e0       	ldi	r24, 0x03	; 3
    4068:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Respond("\r\nOK\r\n> ")));
    406c:	83 e0       	ldi	r24, 0x03	; 3
    406e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    4072:	88 23       	and	r24, r24
    4074:	31 f4       	brne	.+12     	; 0x4082 <ESP_uploade_data+0x156>
    4076:	85 e2       	ldi	r24, 0x25	; 37
    4078:	92 e0       	ldi	r25, 0x02	; 2
    407a:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    407e:	88 23       	and	r24, r24
    4080:	a9 f3       	breq	.-22     	; 0x406c <ESP_uploade_data+0x140>

	timer_stop(wifi_module_timer_ID);
    4082:	83 e0       	ldi	r24, 0x03	; 3
    4084:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>



	memset(api_buffer,0,50);
    4088:	ce 01       	movw	r24, r28
    408a:	0f 96       	adiw	r24, 0x0f	; 15
    408c:	60 e0       	ldi	r22, 0x00	; 0
    408e:	70 e0       	ldi	r23, 0x00	; 0
    4090:	42 e3       	ldi	r20, 0x32	; 50
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <memset>
	sprintf(api_buffer, "GET /update?api_key=SD5OBD49N5H4O8RY&field%d=%d\r\n",field, data);
    4098:	8d b7       	in	r24, 0x3d	; 61
    409a:	9e b7       	in	r25, 0x3e	; 62
    409c:	08 97       	sbiw	r24, 0x08	; 8
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	9e bf       	out	0x3e, r25	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	8d bf       	out	0x3d, r24	; 61
    40a8:	ad b7       	in	r26, 0x3d	; 61
    40aa:	be b7       	in	r27, 0x3e	; 62
    40ac:	11 96       	adiw	r26, 0x01	; 1
    40ae:	ce 01       	movw	r24, r28
    40b0:	0f 96       	adiw	r24, 0x0f	; 15
    40b2:	11 96       	adiw	r26, 0x01	; 1
    40b4:	9c 93       	st	X, r25
    40b6:	8e 93       	st	-X, r24
    40b8:	83 ee       	ldi	r24, 0xE3	; 227
    40ba:	91 e0       	ldi	r25, 0x01	; 1
    40bc:	13 96       	adiw	r26, 0x03	; 3
    40be:	9c 93       	st	X, r25
    40c0:	8e 93       	st	-X, r24
    40c2:	12 97       	sbiw	r26, 0x02	; 2
    40c4:	fe 01       	movw	r30, r28
    40c6:	eb 5a       	subi	r30, 0xAB	; 171
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	15 96       	adiw	r26, 0x05	; 5
    40d0:	9c 93       	st	X, r25
    40d2:	8e 93       	st	-X, r24
    40d4:	14 97       	sbiw	r26, 0x04	; 4
    40d6:	fe 01       	movw	r30, r28
    40d8:	e9 5a       	subi	r30, 0xA9	; 169
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	80 81       	ld	r24, Z
    40de:	91 81       	ldd	r25, Z+1	; 0x01
    40e0:	17 96       	adiw	r26, 0x07	; 7
    40e2:	9c 93       	st	X, r25
    40e4:	8e 93       	st	-X, r24
    40e6:	16 97       	sbiw	r26, 0x06	; 6
    40e8:	0e 94 75 27 	call	0x4eea	; 0x4eea <sprintf>
    40ec:	ad b7       	in	r26, 0x3d	; 61
    40ee:	be b7       	in	r27, 0x3e	; 62
    40f0:	18 96       	adiw	r26, 0x08	; 8
    40f2:	0f b6       	in	r0, 0x3f	; 63
    40f4:	f8 94       	cli
    40f6:	be bf       	out	0x3e, r27	; 62
    40f8:	0f be       	out	0x3f, r0	; 63
    40fa:	ad bf       	out	0x3d, r26	; 61
	Clear_REC_Buffer();
    40fc:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	UART_SEND_string(api_buffer);
    4100:	ce 01       	movw	r24, r28
    4102:	0f 96       	adiw	r24, 0x0f	; 15
    4104:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>


	timer_reset(wifi_module_timer_ID);
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    410e:	83 e0       	ldi	r24, 0x03	; 3
    4110:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Word_in_Respond("+IPD")));
    4114:	83 e0       	ldi	r24, 0x03	; 3
    4116:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    411a:	88 23       	and	r24, r24
    411c:	31 f4       	brne	.+12     	; 0x412a <ESP_uploade_data+0x1fe>
    411e:	8e e2       	ldi	r24, 0x2E	; 46
    4120:	92 e0       	ldi	r25, 0x02	; 2
    4122:	0e 94 5f 21 	call	0x42be	; 0x42be <Check_Word_in_Respond>
    4126:	88 23       	and	r24, r24
    4128:	a9 f3       	breq	.-22     	; 0x4114 <ESP_uploade_data+0x1e8>

	timer_stop(wifi_module_timer_ID);
    412a:	83 e0       	ldi	r24, 0x03	; 3
    412c:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	aa ef       	ldi	r26, 0xFA	; 250
    4136:	b3 e4       	ldi	r27, 0x43	; 67
    4138:	8b 87       	std	Y+11, r24	; 0x0b
    413a:	9c 87       	std	Y+12, r25	; 0x0c
    413c:	ad 87       	std	Y+13, r26	; 0x0d
    413e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4140:	6b 85       	ldd	r22, Y+11	; 0x0b
    4142:	7c 85       	ldd	r23, Y+12	; 0x0c
    4144:	8d 85       	ldd	r24, Y+13	; 0x0d
    4146:	9e 85       	ldd	r25, Y+14	; 0x0e
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	4a ef       	ldi	r20, 0xFA	; 250
    414e:	54 e4       	ldi	r21, 0x44	; 68
    4150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	8f 83       	std	Y+7, r24	; 0x07
    415a:	98 87       	std	Y+8, r25	; 0x08
    415c:	a9 87       	std	Y+9, r26	; 0x09
    415e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4160:	6f 81       	ldd	r22, Y+7	; 0x07
    4162:	78 85       	ldd	r23, Y+8	; 0x08
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	9a 85       	ldd	r25, Y+10	; 0x0a
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	40 e8       	ldi	r20, 0x80	; 128
    416e:	5f e3       	ldi	r21, 0x3F	; 63
    4170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4174:	88 23       	and	r24, r24
    4176:	2c f4       	brge	.+10     	; 0x4182 <ESP_uploade_data+0x256>
		__ticks = 1;
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	9e 83       	std	Y+6, r25	; 0x06
    417e:	8d 83       	std	Y+5, r24	; 0x05
    4180:	3f c0       	rjmp	.+126    	; 0x4200 <ESP_uploade_data+0x2d4>
	else if (__tmp > 65535)
    4182:	6f 81       	ldd	r22, Y+7	; 0x07
    4184:	78 85       	ldd	r23, Y+8	; 0x08
    4186:	89 85       	ldd	r24, Y+9	; 0x09
    4188:	9a 85       	ldd	r25, Y+10	; 0x0a
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	3f ef       	ldi	r19, 0xFF	; 255
    418e:	4f e7       	ldi	r20, 0x7F	; 127
    4190:	57 e4       	ldi	r21, 0x47	; 71
    4192:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4196:	18 16       	cp	r1, r24
    4198:	4c f5       	brge	.+82     	; 0x41ec <ESP_uploade_data+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    419a:	6b 85       	ldd	r22, Y+11	; 0x0b
    419c:	7c 85       	ldd	r23, Y+12	; 0x0c
    419e:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a2:	20 e0       	ldi	r18, 0x00	; 0
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	40 e2       	ldi	r20, 0x20	; 32
    41a8:	51 e4       	ldi	r21, 0x41	; 65
    41aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	9e 83       	std	Y+6, r25	; 0x06
    41c0:	8d 83       	std	Y+5, r24	; 0x05
    41c2:	0f c0       	rjmp	.+30     	; 0x41e2 <ESP_uploade_data+0x2b6>
    41c4:	88 ec       	ldi	r24, 0xC8	; 200
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	9c 83       	std	Y+4, r25	; 0x04
    41ca:	8b 83       	std	Y+3, r24	; 0x03
    41cc:	8b 81       	ldd	r24, Y+3	; 0x03
    41ce:	9c 81       	ldd	r25, Y+4	; 0x04
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <ESP_uploade_data+0x2a4>
    41d4:	9c 83       	std	Y+4, r25	; 0x04
    41d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d8:	8d 81       	ldd	r24, Y+5	; 0x05
    41da:	9e 81       	ldd	r25, Y+6	; 0x06
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	9e 83       	std	Y+6, r25	; 0x06
    41e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e2:	8d 81       	ldd	r24, Y+5	; 0x05
    41e4:	9e 81       	ldd	r25, Y+6	; 0x06
    41e6:	00 97       	sbiw	r24, 0x00	; 0
    41e8:	69 f7       	brne	.-38     	; 0x41c4 <ESP_uploade_data+0x298>
    41ea:	14 c0       	rjmp	.+40     	; 0x4214 <ESP_uploade_data+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ec:	6f 81       	ldd	r22, Y+7	; 0x07
    41ee:	78 85       	ldd	r23, Y+8	; 0x08
    41f0:	89 85       	ldd	r24, Y+9	; 0x09
    41f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	9a 83       	std	Y+2, r25	; 0x02
    4206:	89 83       	std	Y+1, r24	; 0x01
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	9a 81       	ldd	r25, Y+2	; 0x02
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	f1 f7       	brne	.-4      	; 0x420c <ESP_uploade_data+0x2e0>
    4210:	9a 83       	std	Y+2, r25	; 0x02
    4212:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);
	Clear_REC_Buffer();
    4214:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	EF_void_LCD_Clear_Screen();
	EF_void_LCD_print((unsigned char*)"Done UPloading");
	_delay_ms(2000);
#endif

}
    4218:	c8 5a       	subi	r28, 0xA8	; 168
    421a:	df 4f       	sbci	r29, 0xFF	; 255
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <ESP_CLOSE_SOCKET>:




void ESP_CLOSE_SOCKET(void)
{
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62

	Clear_REC_Buffer();
    4234:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
	UART_SEND_string( "AT+CIPCLOSE=0\r\n");
    4238:	83 e3       	ldi	r24, 0x33	; 51
    423a:	92 e0       	ldi	r25, 0x02	; 2
    423c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>

	timer_reset(wifi_module_timer_ID);
    4240:	83 e0       	ldi	r24, 0x03	; 3
    4242:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	timer_start(wifi_module_timer_ID);
    4246:	83 e0       	ldi	r24, 0x03	; 3
    4248:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	while((!(timer_check(wifi_module_timer_ID)))&&(!Check_Respond("\r\nOK\r\n")));
    424c:	83 e0       	ldi	r24, 0x03	; 3
    424e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    4252:	88 23       	and	r24, r24
    4254:	31 f4       	brne	.+12     	; 0x4262 <ESP_CLOSE_SOCKET+0x36>
    4256:	83 ea       	ldi	r24, 0xA3	; 163
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	0e 94 37 21 	call	0x426e	; 0x426e <Check_Respond>
    425e:	88 23       	and	r24, r24
    4260:	a9 f3       	breq	.-22     	; 0x424c <ESP_CLOSE_SOCKET+0x20>

	timer_stop(wifi_module_timer_ID);
    4262:	83 e0       	ldi	r24, 0x03	; 3
    4264:	0e 94 1f 0a 	call	0x143e	; 0x143e <timer_stop>
	_delay_ms(2000);
#endif



}
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <Check_Respond>:




char Check_Respond(char * Expected_Respond)
{
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	00 d0       	rcall	.+0      	; 0x4274 <Check_Respond+0x6>
    4274:	00 d0       	rcall	.+0      	; 0x4276 <Check_Respond+0x8>
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	9b 83       	std	Y+3, r25	; 0x03
    427c:	8a 83       	std	Y+2, r24	; 0x02
	char Respond_Length=0;
    427e:	19 82       	std	Y+1, r1	; 0x01

	Respond_Length=strlen(Expected_Respond);
    4280:	8a 81       	ldd	r24, Y+2	; 0x02
    4282:	9b 81       	ldd	r25, Y+3	; 0x03
    4284:	0e 94 23 27 	call	0x4e46	; 0x4e46 <strlen>
    4288:	89 83       	std	Y+1, r24	; 0x01

	if(strncmp(Rec_Data,Expected_Respond, Respond_Length)==0)
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	48 2f       	mov	r20, r24
    428e:	50 e0       	ldi	r21, 0x00	; 0
    4290:	8d e1       	ldi	r24, 0x1D	; 29
    4292:	93 e0       	ldi	r25, 0x03	; 3
    4294:	2a 81       	ldd	r18, Y+2	; 0x02
    4296:	3b 81       	ldd	r19, Y+3	; 0x03
    4298:	b9 01       	movw	r22, r18
    429a:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <strncmp>
    429e:	00 97       	sbiw	r24, 0x00	; 0
    42a0:	29 f4       	brne	.+10     	; 0x42ac <Check_Respond+0x3e>
	{
		Clear_REC_Buffer();
    42a2:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
		return TRUE;
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	8c 83       	std	Y+4, r24	; 0x04
    42aa:	01 c0       	rjmp	.+2      	; 0x42ae <Check_Respond+0x40>
	}
	return FALSE;
    42ac:	1c 82       	std	Y+4, r1	; 0x04
    42ae:	8c 81       	ldd	r24, Y+4	; 0x04


}
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <Check_Word_in_Respond>:


char Check_Word_in_Respond(char * Word)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <Check_Word_in_Respond+0x6>
    42c4:	0f 92       	push	r0
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	9a 83       	std	Y+2, r25	; 0x02
    42cc:	89 83       	std	Y+1, r24	; 0x01


	if(strstr(Rec_Data,Word) != 0)
    42ce:	8d e1       	ldi	r24, 0x1D	; 29
    42d0:	93 e0       	ldi	r25, 0x03	; 3
    42d2:	29 81       	ldd	r18, Y+1	; 0x01
    42d4:	3a 81       	ldd	r19, Y+2	; 0x02
    42d6:	b9 01       	movw	r22, r18
    42d8:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <strstr>
    42dc:	00 97       	sbiw	r24, 0x00	; 0
    42de:	29 f0       	breq	.+10     	; 0x42ea <Check_Word_in_Respond+0x2c>
	{
		Clear_REC_Buffer();
    42e0:	0e 94 7d 21 	call	0x42fa	; 0x42fa <Clear_REC_Buffer>
		return TRUE;
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	8b 83       	std	Y+3, r24	; 0x03
    42e8:	01 c0       	rjmp	.+2      	; 0x42ec <Check_Word_in_Respond+0x2e>
	}

	return FALSE;
    42ea:	1b 82       	std	Y+3, r1	; 0x03
    42ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
    42f4:	cf 91       	pop	r28
    42f6:	df 91       	pop	r29
    42f8:	08 95       	ret

000042fa <Clear_REC_Buffer>:

void Clear_REC_Buffer(void)
{
    42fa:	df 93       	push	r29
    42fc:	cf 93       	push	r28
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
	Counter=0;
    4302:	10 92 b2 02 	sts	0x02B2, r1
	memset(Rec_Data,0,DEFAULT_BUFFER_SIZE);
    4306:	8d e1       	ldi	r24, 0x1D	; 29
    4308:	93 e0       	ldi	r25, 0x03	; 3
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	4c e3       	ldi	r20, 0x3C	; 60
    4310:	50 e0       	ldi	r21, 0x00	; 0
    4312:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <memset>
}
    4316:	cf 91       	pop	r28
    4318:	df 91       	pop	r29
    431a:	08 95       	ret

0000431c <REC_from_interrupt>:

void REC_from_interrupt(void)
{
    431c:	df 93       	push	r29
    431e:	cf 93       	push	r28
    4320:	0f 92       	push	r0
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62

	uint8_t oldsrg = SREG;
    4326:	ef e5       	ldi	r30, 0x5F	; 95
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	80 81       	ld	r24, Z
    432c:	89 83       	std	Y+1, r24	; 0x01
	cli();
    432e:	f8 94       	cli
	Rec_Data[Counter] = UDR;
    4330:	80 91 b2 02 	lds	r24, 0x02B2
    4334:	88 2f       	mov	r24, r24
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	ec e2       	ldi	r30, 0x2C	; 44
    433a:	f0 e0       	ldi	r31, 0x00	; 0
    433c:	20 81       	ld	r18, Z
    433e:	fc 01       	movw	r30, r24
    4340:	e3 5e       	subi	r30, 0xE3	; 227
    4342:	fc 4f       	sbci	r31, 0xFC	; 252
    4344:	20 83       	st	Z, r18
	Counter++;
    4346:	80 91 b2 02 	lds	r24, 0x02B2
    434a:	8f 5f       	subi	r24, 0xFF	; 255
    434c:	80 93 b2 02 	sts	0x02B2, r24
	if(Counter == DEFAULT_BUFFER_SIZE){
    4350:	80 91 b2 02 	lds	r24, 0x02B2
    4354:	8c 33       	cpi	r24, 0x3C	; 60
    4356:	11 f4       	brne	.+4      	; 0x435c <REC_from_interrupt+0x40>
		Counter = 0; //pointer = 0;
    4358:	10 92 b2 02 	sts	0x02B2, r1
	}
	SREG = oldsrg;
    435c:	ef e5       	ldi	r30, 0x5F	; 95
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	80 83       	st	Z, r24



}
    4364:	0f 90       	pop	r0
    4366:	cf 91       	pop	r28
    4368:	df 91       	pop	r29
    436a:	08 95       	ret

0000436c <temp_sensor_init>:




void temp_sensor_init(void)
{
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62

	ADC_init();
    4374:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_init>

}
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <Get_Temp_reading>:


char Get_Temp_reading(char ch)
{
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	00 d0       	rcall	.+0      	; 0x4384 <Get_Temp_reading+0x6>
    4384:	00 d0       	rcall	.+0      	; 0x4386 <Get_Temp_reading+0x8>
    4386:	00 d0       	rcall	.+0      	; 0x4388 <Get_Temp_reading+0xa>
    4388:	cd b7       	in	r28, 0x3d	; 61
    438a:	de b7       	in	r29, 0x3e	; 62
    438c:	8e 83       	std	Y+6, r24	; 0x06
	char temp=0;
    438e:	1d 82       	std	Y+5, r1	; 0x05
	unsigned int ADC_Value=0,Reading_MV=0;
    4390:	1c 82       	std	Y+4, r1	; 0x04
    4392:	1b 82       	std	Y+3, r1	; 0x03
    4394:	1a 82       	std	Y+2, r1	; 0x02
    4396:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value=ADC_Get_reading_mv(ch);
    4398:	8e 81       	ldd	r24, Y+6	; 0x06
    439a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <ADC_Get_reading_mv>
    439e:	9c 83       	std	Y+4, r25	; 0x04
    43a0:	8b 83       	std	Y+3, r24	; 0x03

	Reading_MV=ADC_Value*4;
    43a2:	8b 81       	ldd	r24, Y+3	; 0x03
    43a4:	9c 81       	ldd	r25, Y+4	; 0x04
    43a6:	88 0f       	add	r24, r24
    43a8:	99 1f       	adc	r25, r25
    43aa:	88 0f       	add	r24, r24
    43ac:	99 1f       	adc	r25, r25
    43ae:	9a 83       	std	Y+2, r25	; 0x02
    43b0:	89 83       	std	Y+1, r24	; 0x01
	temp=Reading_MV/10;
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	9a 81       	ldd	r25, Y+2	; 0x02
    43b6:	2a e0       	ldi	r18, 0x0A	; 10
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	b9 01       	movw	r22, r18
    43bc:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <__udivmodhi4>
    43c0:	cb 01       	movw	r24, r22
    43c2:	8d 83       	std	Y+5, r24	; 0x05



return temp;
    43c4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    43c6:	26 96       	adiw	r28, 0x06	; 6
    43c8:	0f b6       	in	r0, 0x3f	; 63
    43ca:	f8 94       	cli
    43cc:	de bf       	out	0x3e, r29	; 62
    43ce:	0f be       	out	0x3f, r0	; 63
    43d0:	cd bf       	out	0x3d, r28	; 61
    43d2:	cf 91       	pop	r28
    43d4:	df 91       	pop	r29
    43d6:	08 95       	ret

000043d8 <init_fun>:
#include"../main.h"

unsigned int value;

ret_state init_fun(void)
{
    43d8:	df 93       	push	r29
    43da:	cf 93       	push	r28
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	e8 97       	sbiw	r28, 0x38	; 56
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	f8 94       	cli
    43e6:	de bf       	out	0x3e, r29	; 62
    43e8:	0f be       	out	0x3f, r0	; 63
    43ea:	cd bf       	out	0x3d, r28	; 61

	sei();
    43ec:	78 94       	sei

	DDRD |=(1<<PD5);
    43ee:	a1 e3       	ldi	r26, 0x31	; 49
    43f0:	b0 e0       	ldi	r27, 0x00	; 0
    43f2:	e1 e3       	ldi	r30, 0x31	; 49
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	80 81       	ld	r24, Z
    43f8:	80 62       	ori	r24, 0x20	; 32
    43fa:	8c 93       	st	X, r24
	PORTD &=~(1<<PD5);
    43fc:	a2 e3       	ldi	r26, 0x32	; 50
    43fe:	b0 e0       	ldi	r27, 0x00	; 0
    4400:	e2 e3       	ldi	r30, 0x32	; 50
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	80 81       	ld	r24, Z
    4406:	8f 7d       	andi	r24, 0xDF	; 223
    4408:	8c 93       	st	X, r24
	EF_void_LCD_init();
    440a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <EF_void_LCD_init>
	temp_sensor_init();
    440e:	0e 94 b6 21 	call	0x436c	; 0x436c <temp_sensor_init>
	EF_void_LCD_Clear_Screen();
    4412:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"done init LCD");
    4416:	83 e4       	ldi	r24, 0x43	; 67
    4418:	92 e0       	ldi	r25, 0x02	; 2
    441a:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	a8 ec       	ldi	r26, 0xC8	; 200
    4424:	b3 e4       	ldi	r27, 0x43	; 67
    4426:	8d ab       	std	Y+53, r24	; 0x35
    4428:	9e ab       	std	Y+54, r25	; 0x36
    442a:	af ab       	std	Y+55, r26	; 0x37
    442c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    442e:	6d a9       	ldd	r22, Y+53	; 0x35
    4430:	7e a9       	ldd	r23, Y+54	; 0x36
    4432:	8f a9       	ldd	r24, Y+55	; 0x37
    4434:	98 ad       	ldd	r25, Y+56	; 0x38
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	4a ef       	ldi	r20, 0xFA	; 250
    443c:	54 e4       	ldi	r21, 0x44	; 68
    443e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	89 ab       	std	Y+49, r24	; 0x31
    4448:	9a ab       	std	Y+50, r25	; 0x32
    444a:	ab ab       	std	Y+51, r26	; 0x33
    444c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    444e:	69 a9       	ldd	r22, Y+49	; 0x31
    4450:	7a a9       	ldd	r23, Y+50	; 0x32
    4452:	8b a9       	ldd	r24, Y+51	; 0x33
    4454:	9c a9       	ldd	r25, Y+52	; 0x34
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e8       	ldi	r20, 0x80	; 128
    445c:	5f e3       	ldi	r21, 0x3F	; 63
    445e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4462:	88 23       	and	r24, r24
    4464:	2c f4       	brge	.+10     	; 0x4470 <init_fun+0x98>
		__ticks = 1;
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	98 ab       	std	Y+48, r25	; 0x30
    446c:	8f a7       	std	Y+47, r24	; 0x2f
    446e:	3f c0       	rjmp	.+126    	; 0x44ee <init_fun+0x116>
	else if (__tmp > 65535)
    4470:	69 a9       	ldd	r22, Y+49	; 0x31
    4472:	7a a9       	ldd	r23, Y+50	; 0x32
    4474:	8b a9       	ldd	r24, Y+51	; 0x33
    4476:	9c a9       	ldd	r25, Y+52	; 0x34
    4478:	20 e0       	ldi	r18, 0x00	; 0
    447a:	3f ef       	ldi	r19, 0xFF	; 255
    447c:	4f e7       	ldi	r20, 0x7F	; 127
    447e:	57 e4       	ldi	r21, 0x47	; 71
    4480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4484:	18 16       	cp	r1, r24
    4486:	4c f5       	brge	.+82     	; 0x44da <init_fun+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4488:	6d a9       	ldd	r22, Y+53	; 0x35
    448a:	7e a9       	ldd	r23, Y+54	; 0x36
    448c:	8f a9       	ldd	r24, Y+55	; 0x37
    448e:	98 ad       	ldd	r25, Y+56	; 0x38
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 e2       	ldi	r20, 0x20	; 32
    4496:	51 e4       	ldi	r21, 0x41	; 65
    4498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	98 ab       	std	Y+48, r25	; 0x30
    44ae:	8f a7       	std	Y+47, r24	; 0x2f
    44b0:	0f c0       	rjmp	.+30     	; 0x44d0 <init_fun+0xf8>
    44b2:	88 ec       	ldi	r24, 0xC8	; 200
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	9e a7       	std	Y+46, r25	; 0x2e
    44b8:	8d a7       	std	Y+45, r24	; 0x2d
    44ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    44bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	f1 f7       	brne	.-4      	; 0x44be <init_fun+0xe6>
    44c2:	9e a7       	std	Y+46, r25	; 0x2e
    44c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    44c8:	98 a9       	ldd	r25, Y+48	; 0x30
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	98 ab       	std	Y+48, r25	; 0x30
    44ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    44d2:	98 a9       	ldd	r25, Y+48	; 0x30
    44d4:	00 97       	sbiw	r24, 0x00	; 0
    44d6:	69 f7       	brne	.-38     	; 0x44b2 <init_fun+0xda>
    44d8:	14 c0       	rjmp	.+40     	; 0x4502 <init_fun+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44da:	69 a9       	ldd	r22, Y+49	; 0x31
    44dc:	7a a9       	ldd	r23, Y+50	; 0x32
    44de:	8b a9       	ldd	r24, Y+51	; 0x33
    44e0:	9c a9       	ldd	r25, Y+52	; 0x34
    44e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	98 ab       	std	Y+48, r25	; 0x30
    44ec:	8f a7       	std	Y+47, r24	; 0x2f
    44ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    44f0:	98 a9       	ldd	r25, Y+48	; 0x30
    44f2:	9c a7       	std	Y+44, r25	; 0x2c
    44f4:	8b a7       	std	Y+43, r24	; 0x2b
    44f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    44f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	f1 f7       	brne	.-4      	; 0x44fa <init_fun+0x122>
    44fe:	9c a7       	std	Y+44, r25	; 0x2c
    4500:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(400);

	CS811_init();
    4502:	0e 94 4b 0b 	call	0x1696	; 0x1696 <CS811_init>
	EF_void_LCD_Clear_Screen();
    4506:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"done init CS811");
    450a:	81 e5       	ldi	r24, 0x51	; 81
    450c:	92 e0       	ldi	r25, 0x02	; 2
    450e:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	a8 ec       	ldi	r26, 0xC8	; 200
    4518:	b3 e4       	ldi	r27, 0x43	; 67
    451a:	8f a3       	std	Y+39, r24	; 0x27
    451c:	98 a7       	std	Y+40, r25	; 0x28
    451e:	a9 a7       	std	Y+41, r26	; 0x29
    4520:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4522:	6f a1       	ldd	r22, Y+39	; 0x27
    4524:	78 a5       	ldd	r23, Y+40	; 0x28
    4526:	89 a5       	ldd	r24, Y+41	; 0x29
    4528:	9a a5       	ldd	r25, Y+42	; 0x2a
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	4a ef       	ldi	r20, 0xFA	; 250
    4530:	54 e4       	ldi	r21, 0x44	; 68
    4532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	8b a3       	std	Y+35, r24	; 0x23
    453c:	9c a3       	std	Y+36, r25	; 0x24
    453e:	ad a3       	std	Y+37, r26	; 0x25
    4540:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4542:	6b a1       	ldd	r22, Y+35	; 0x23
    4544:	7c a1       	ldd	r23, Y+36	; 0x24
    4546:	8d a1       	ldd	r24, Y+37	; 0x25
    4548:	9e a1       	ldd	r25, Y+38	; 0x26
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e8       	ldi	r20, 0x80	; 128
    4550:	5f e3       	ldi	r21, 0x3F	; 63
    4552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4556:	88 23       	and	r24, r24
    4558:	2c f4       	brge	.+10     	; 0x4564 <init_fun+0x18c>
		__ticks = 1;
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	9a a3       	std	Y+34, r25	; 0x22
    4560:	89 a3       	std	Y+33, r24	; 0x21
    4562:	3f c0       	rjmp	.+126    	; 0x45e2 <init_fun+0x20a>
	else if (__tmp > 65535)
    4564:	6b a1       	ldd	r22, Y+35	; 0x23
    4566:	7c a1       	ldd	r23, Y+36	; 0x24
    4568:	8d a1       	ldd	r24, Y+37	; 0x25
    456a:	9e a1       	ldd	r25, Y+38	; 0x26
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	3f ef       	ldi	r19, 0xFF	; 255
    4570:	4f e7       	ldi	r20, 0x7F	; 127
    4572:	57 e4       	ldi	r21, 0x47	; 71
    4574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4578:	18 16       	cp	r1, r24
    457a:	4c f5       	brge	.+82     	; 0x45ce <init_fun+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457c:	6f a1       	ldd	r22, Y+39	; 0x27
    457e:	78 a5       	ldd	r23, Y+40	; 0x28
    4580:	89 a5       	ldd	r24, Y+41	; 0x29
    4582:	9a a5       	ldd	r25, Y+42	; 0x2a
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e2       	ldi	r20, 0x20	; 32
    458a:	51 e4       	ldi	r21, 0x41	; 65
    458c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	bc 01       	movw	r22, r24
    4596:	cd 01       	movw	r24, r26
    4598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	9a a3       	std	Y+34, r25	; 0x22
    45a2:	89 a3       	std	Y+33, r24	; 0x21
    45a4:	0f c0       	rjmp	.+30     	; 0x45c4 <init_fun+0x1ec>
    45a6:	88 ec       	ldi	r24, 0xC8	; 200
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	98 a3       	std	Y+32, r25	; 0x20
    45ac:	8f 8f       	std	Y+31, r24	; 0x1f
    45ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45b0:	98 a1       	ldd	r25, Y+32	; 0x20
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	f1 f7       	brne	.-4      	; 0x45b2 <init_fun+0x1da>
    45b6:	98 a3       	std	Y+32, r25	; 0x20
    45b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ba:	89 a1       	ldd	r24, Y+33	; 0x21
    45bc:	9a a1       	ldd	r25, Y+34	; 0x22
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	9a a3       	std	Y+34, r25	; 0x22
    45c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c4:	89 a1       	ldd	r24, Y+33	; 0x21
    45c6:	9a a1       	ldd	r25, Y+34	; 0x22
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	69 f7       	brne	.-38     	; 0x45a6 <init_fun+0x1ce>
    45cc:	14 c0       	rjmp	.+40     	; 0x45f6 <init_fun+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ce:	6b a1       	ldd	r22, Y+35	; 0x23
    45d0:	7c a1       	ldd	r23, Y+36	; 0x24
    45d2:	8d a1       	ldd	r24, Y+37	; 0x25
    45d4:	9e a1       	ldd	r25, Y+38	; 0x26
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9a a3       	std	Y+34, r25	; 0x22
    45e0:	89 a3       	std	Y+33, r24	; 0x21
    45e2:	89 a1       	ldd	r24, Y+33	; 0x21
    45e4:	9a a1       	ldd	r25, Y+34	; 0x22
    45e6:	9e 8f       	std	Y+30, r25	; 0x1e
    45e8:	8d 8f       	std	Y+29, r24	; 0x1d
    45ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <init_fun+0x216>
    45f2:	9e 8f       	std	Y+30, r25	; 0x1e
    45f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(400);


	spechial_timer_init();
    45f6:	0e 94 65 08 	call	0x10ca	; 0x10ca <spechial_timer_init>
	timer_create(server_update_timer_ID,server_update_timer_time_OUT);
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	40 ee       	ldi	r20, 0xE0	; 224
    45fe:	53 e9       	ldi	r21, 0x93	; 147
    4600:	64 e0       	ldi	r22, 0x04	; 4
    4602:	70 e0       	ldi	r23, 0x00	; 0
    4604:	0e 94 77 09 	call	0x12ee	; 0x12ee <timer_create>
	timer_start(server_update_timer_ID);
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>
	timer_create(update_screen_timer_ID,update_screen_timer_time_OUT);
    460e:	82 e0       	ldi	r24, 0x02	; 2
    4610:	40 e1       	ldi	r20, 0x10	; 16
    4612:	57 e2       	ldi	r21, 0x27	; 39
    4614:	60 e0       	ldi	r22, 0x00	; 0
    4616:	70 e0       	ldi	r23, 0x00	; 0
    4618:	0e 94 77 09 	call	0x12ee	; 0x12ee <timer_create>
	timer_start(update_screen_timer_ID);
    461c:	82 e0       	ldi	r24, 0x02	; 2
    461e:	0e 94 ed 09 	call	0x13da	; 0x13da <timer_start>




	ESP_init();
    4622:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <ESP_init>
	EF_void_LCD_Clear_Screen();
    4626:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"done init ESP");
    462a:	81 e6       	ldi	r24, 0x61	; 97
    462c:	92 e0       	ldi	r25, 0x02	; 2
    462e:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	a8 ec       	ldi	r26, 0xC8	; 200
    4638:	b3 e4       	ldi	r27, 0x43	; 67
    463a:	89 8f       	std	Y+25, r24	; 0x19
    463c:	9a 8f       	std	Y+26, r25	; 0x1a
    463e:	ab 8f       	std	Y+27, r26	; 0x1b
    4640:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4642:	69 8d       	ldd	r22, Y+25	; 0x19
    4644:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4646:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4648:	9c 8d       	ldd	r25, Y+28	; 0x1c
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	4a ef       	ldi	r20, 0xFA	; 250
    4650:	54 e4       	ldi	r21, 0x44	; 68
    4652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	8d 8b       	std	Y+21, r24	; 0x15
    465c:	9e 8b       	std	Y+22, r25	; 0x16
    465e:	af 8b       	std	Y+23, r26	; 0x17
    4660:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4662:	6d 89       	ldd	r22, Y+21	; 0x15
    4664:	7e 89       	ldd	r23, Y+22	; 0x16
    4666:	8f 89       	ldd	r24, Y+23	; 0x17
    4668:	98 8d       	ldd	r25, Y+24	; 0x18
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e8       	ldi	r20, 0x80	; 128
    4670:	5f e3       	ldi	r21, 0x3F	; 63
    4672:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4676:	88 23       	and	r24, r24
    4678:	2c f4       	brge	.+10     	; 0x4684 <init_fun+0x2ac>
		__ticks = 1;
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	9c 8b       	std	Y+20, r25	; 0x14
    4680:	8b 8b       	std	Y+19, r24	; 0x13
    4682:	3f c0       	rjmp	.+126    	; 0x4702 <init_fun+0x32a>
	else if (__tmp > 65535)
    4684:	6d 89       	ldd	r22, Y+21	; 0x15
    4686:	7e 89       	ldd	r23, Y+22	; 0x16
    4688:	8f 89       	ldd	r24, Y+23	; 0x17
    468a:	98 8d       	ldd	r25, Y+24	; 0x18
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	3f ef       	ldi	r19, 0xFF	; 255
    4690:	4f e7       	ldi	r20, 0x7F	; 127
    4692:	57 e4       	ldi	r21, 0x47	; 71
    4694:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4698:	18 16       	cp	r1, r24
    469a:	4c f5       	brge	.+82     	; 0x46ee <init_fun+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    469c:	69 8d       	ldd	r22, Y+25	; 0x19
    469e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	40 e2       	ldi	r20, 0x20	; 32
    46aa:	51 e4       	ldi	r21, 0x41	; 65
    46ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	bc 01       	movw	r22, r24
    46b6:	cd 01       	movw	r24, r26
    46b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	9c 8b       	std	Y+20, r25	; 0x14
    46c2:	8b 8b       	std	Y+19, r24	; 0x13
    46c4:	0f c0       	rjmp	.+30     	; 0x46e4 <init_fun+0x30c>
    46c6:	88 ec       	ldi	r24, 0xC8	; 200
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	9a 8b       	std	Y+18, r25	; 0x12
    46cc:	89 8b       	std	Y+17, r24	; 0x11
    46ce:	89 89       	ldd	r24, Y+17	; 0x11
    46d0:	9a 89       	ldd	r25, Y+18	; 0x12
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	f1 f7       	brne	.-4      	; 0x46d2 <init_fun+0x2fa>
    46d6:	9a 8b       	std	Y+18, r25	; 0x12
    46d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46da:	8b 89       	ldd	r24, Y+19	; 0x13
    46dc:	9c 89       	ldd	r25, Y+20	; 0x14
    46de:	01 97       	sbiw	r24, 0x01	; 1
    46e0:	9c 8b       	std	Y+20, r25	; 0x14
    46e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46e4:	8b 89       	ldd	r24, Y+19	; 0x13
    46e6:	9c 89       	ldd	r25, Y+20	; 0x14
    46e8:	00 97       	sbiw	r24, 0x00	; 0
    46ea:	69 f7       	brne	.-38     	; 0x46c6 <init_fun+0x2ee>
    46ec:	14 c0       	rjmp	.+40     	; 0x4716 <init_fun+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ee:	6d 89       	ldd	r22, Y+21	; 0x15
    46f0:	7e 89       	ldd	r23, Y+22	; 0x16
    46f2:	8f 89       	ldd	r24, Y+23	; 0x17
    46f4:	98 8d       	ldd	r25, Y+24	; 0x18
    46f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	9c 8b       	std	Y+20, r25	; 0x14
    4700:	8b 8b       	std	Y+19, r24	; 0x13
    4702:	8b 89       	ldd	r24, Y+19	; 0x13
    4704:	9c 89       	ldd	r25, Y+20	; 0x14
    4706:	98 8b       	std	Y+16, r25	; 0x10
    4708:	8f 87       	std	Y+15, r24	; 0x0f
    470a:	8f 85       	ldd	r24, Y+15	; 0x0f
    470c:	98 89       	ldd	r25, Y+16	; 0x10
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	f1 f7       	brne	.-4      	; 0x470e <init_fun+0x336>
    4712:	98 8b       	std	Y+16, r25	; 0x10
    4714:	8f 87       	std	Y+15, r24	; 0x0f
	//	    ESP_uploade_data(430);

	//	    ESP_CLOSE_SOCKET();


	EF_void_LCD_Clear_Screen();
    4716:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Init Done");
    471a:	8f e6       	ldi	r24, 0x6F	; 111
    471c:	92 e0       	ldi	r25, 0x02	; 2
    471e:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	aa ef       	ldi	r26, 0xFA	; 250
    4728:	b4 e4       	ldi	r27, 0x44	; 68
    472a:	8b 87       	std	Y+11, r24	; 0x0b
    472c:	9c 87       	std	Y+12, r25	; 0x0c
    472e:	ad 87       	std	Y+13, r26	; 0x0d
    4730:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4732:	6b 85       	ldd	r22, Y+11	; 0x0b
    4734:	7c 85       	ldd	r23, Y+12	; 0x0c
    4736:	8d 85       	ldd	r24, Y+13	; 0x0d
    4738:	9e 85       	ldd	r25, Y+14	; 0x0e
    473a:	20 e0       	ldi	r18, 0x00	; 0
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	4a ef       	ldi	r20, 0xFA	; 250
    4740:	54 e4       	ldi	r21, 0x44	; 68
    4742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	8f 83       	std	Y+7, r24	; 0x07
    474c:	98 87       	std	Y+8, r25	; 0x08
    474e:	a9 87       	std	Y+9, r26	; 0x09
    4750:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4752:	6f 81       	ldd	r22, Y+7	; 0x07
    4754:	78 85       	ldd	r23, Y+8	; 0x08
    4756:	89 85       	ldd	r24, Y+9	; 0x09
    4758:	9a 85       	ldd	r25, Y+10	; 0x0a
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	40 e8       	ldi	r20, 0x80	; 128
    4760:	5f e3       	ldi	r21, 0x3F	; 63
    4762:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4766:	88 23       	and	r24, r24
    4768:	2c f4       	brge	.+10     	; 0x4774 <init_fun+0x39c>
		__ticks = 1;
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	9e 83       	std	Y+6, r25	; 0x06
    4770:	8d 83       	std	Y+5, r24	; 0x05
    4772:	3f c0       	rjmp	.+126    	; 0x47f2 <init_fun+0x41a>
	else if (__tmp > 65535)
    4774:	6f 81       	ldd	r22, Y+7	; 0x07
    4776:	78 85       	ldd	r23, Y+8	; 0x08
    4778:	89 85       	ldd	r24, Y+9	; 0x09
    477a:	9a 85       	ldd	r25, Y+10	; 0x0a
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	3f ef       	ldi	r19, 0xFF	; 255
    4780:	4f e7       	ldi	r20, 0x7F	; 127
    4782:	57 e4       	ldi	r21, 0x47	; 71
    4784:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4788:	18 16       	cp	r1, r24
    478a:	4c f5       	brge	.+82     	; 0x47de <init_fun+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478c:	6b 85       	ldd	r22, Y+11	; 0x0b
    478e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4790:	8d 85       	ldd	r24, Y+13	; 0x0d
    4792:	9e 85       	ldd	r25, Y+14	; 0x0e
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e2       	ldi	r20, 0x20	; 32
    479a:	51 e4       	ldi	r21, 0x41	; 65
    479c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a0:	dc 01       	movw	r26, r24
    47a2:	cb 01       	movw	r24, r22
    47a4:	bc 01       	movw	r22, r24
    47a6:	cd 01       	movw	r24, r26
    47a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	9e 83       	std	Y+6, r25	; 0x06
    47b2:	8d 83       	std	Y+5, r24	; 0x05
    47b4:	0f c0       	rjmp	.+30     	; 0x47d4 <init_fun+0x3fc>
    47b6:	88 ec       	ldi	r24, 0xC8	; 200
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	9c 83       	std	Y+4, r25	; 0x04
    47bc:	8b 83       	std	Y+3, r24	; 0x03
    47be:	8b 81       	ldd	r24, Y+3	; 0x03
    47c0:	9c 81       	ldd	r25, Y+4	; 0x04
    47c2:	01 97       	sbiw	r24, 0x01	; 1
    47c4:	f1 f7       	brne	.-4      	; 0x47c2 <init_fun+0x3ea>
    47c6:	9c 83       	std	Y+4, r25	; 0x04
    47c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ca:	8d 81       	ldd	r24, Y+5	; 0x05
    47cc:	9e 81       	ldd	r25, Y+6	; 0x06
    47ce:	01 97       	sbiw	r24, 0x01	; 1
    47d0:	9e 83       	std	Y+6, r25	; 0x06
    47d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47d4:	8d 81       	ldd	r24, Y+5	; 0x05
    47d6:	9e 81       	ldd	r25, Y+6	; 0x06
    47d8:	00 97       	sbiw	r24, 0x00	; 0
    47da:	69 f7       	brne	.-38     	; 0x47b6 <init_fun+0x3de>
    47dc:	14 c0       	rjmp	.+40     	; 0x4806 <init_fun+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47de:	6f 81       	ldd	r22, Y+7	; 0x07
    47e0:	78 85       	ldd	r23, Y+8	; 0x08
    47e2:	89 85       	ldd	r24, Y+9	; 0x09
    47e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	9e 83       	std	Y+6, r25	; 0x06
    47f0:	8d 83       	std	Y+5, r24	; 0x05
    47f2:	8d 81       	ldd	r24, Y+5	; 0x05
    47f4:	9e 81       	ldd	r25, Y+6	; 0x06
    47f6:	9a 83       	std	Y+2, r25	; 0x02
    47f8:	89 83       	std	Y+1, r24	; 0x01
    47fa:	89 81       	ldd	r24, Y+1	; 0x01
    47fc:	9a 81       	ldd	r25, Y+2	; 0x02
    47fe:	01 97       	sbiw	r24, 0x01	; 1
    4800:	f1 f7       	brne	.-4      	; 0x47fe <init_fun+0x426>
    4802:	9a 83       	std	Y+2, r25	; 0x02
    4804:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);



	return ret_operation;
    4806:	81 e0       	ldi	r24, 0x01	; 1
}
    4808:	e8 96       	adiw	r28, 0x38	; 56
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	f8 94       	cli
    480e:	de bf       	out	0x3e, r29	; 62
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	cd bf       	out	0x3d, r28	; 61
    4814:	cf 91       	pop	r28
    4816:	df 91       	pop	r29
    4818:	08 95       	ret

0000481a <operation_fun>:
unsigned long int CO2_reading_numbers,CO2_AVG,TVOC_reading_numbers,TVOC_AVG;
current_uploade CurrentUploade =TEMP_uploade;


ret_state operation_fun(void)
{
    481a:	df 93       	push	r29
    481c:	cf 93       	push	r28
    481e:	cd b7       	in	r28, 0x3d	; 61
    4820:	de b7       	in	r29, 0x3e	; 62
    4822:	2e 97       	sbiw	r28, 0x0e	; 14
    4824:	0f b6       	in	r0, 0x3f	; 63
    4826:	f8 94       	cli
    4828:	de bf       	out	0x3e, r29	; 62
    482a:	0f be       	out	0x3f, r0	; 63
    482c:	cd bf       	out	0x3d, r28	; 61


	Status=Read_Status_Register();
    482e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Read_Status_Register>
    4832:	80 93 b3 02 	sts	0x02B3, r24


	if(Status==152)
    4836:	80 91 b3 02 	lds	r24, 0x02B3
    483a:	88 39       	cpi	r24, 0x98	; 152
    483c:	09 f0       	breq	.+2      	; 0x4840 <operation_fun+0x26>
    483e:	6c c0       	rjmp	.+216    	; 0x4918 <operation_fun+0xfe>
	{
		CS811_CO2_TVOC_Reading(&my_CS811);
    4840:	88 e6       	ldi	r24, 0x68	; 104
    4842:	93 e0       	ldi	r25, 0x03	; 3
    4844:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <CS811_CO2_TVOC_Reading>

		if(my_CS811.CO2!=0)
    4848:	80 91 68 03 	lds	r24, 0x0368
    484c:	90 91 69 03 	lds	r25, 0x0369
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	71 f1       	breq	.+92     	; 0x48b0 <operation_fun+0x96>
		{
			CO2_AVG+=my_CS811.CO2;
    4854:	80 91 68 03 	lds	r24, 0x0368
    4858:	90 91 69 03 	lds	r25, 0x0369
    485c:	9c 01       	movw	r18, r24
    485e:	40 e0       	ldi	r20, 0x00	; 0
    4860:	50 e0       	ldi	r21, 0x00	; 0
    4862:	80 91 5f 03 	lds	r24, 0x035F
    4866:	90 91 60 03 	lds	r25, 0x0360
    486a:	a0 91 61 03 	lds	r26, 0x0361
    486e:	b0 91 62 03 	lds	r27, 0x0362
    4872:	82 0f       	add	r24, r18
    4874:	93 1f       	adc	r25, r19
    4876:	a4 1f       	adc	r26, r20
    4878:	b5 1f       	adc	r27, r21
    487a:	80 93 5f 03 	sts	0x035F, r24
    487e:	90 93 60 03 	sts	0x0360, r25
    4882:	a0 93 61 03 	sts	0x0361, r26
    4886:	b0 93 62 03 	sts	0x0362, r27
			CO2_reading_numbers++;
    488a:	80 91 64 03 	lds	r24, 0x0364
    488e:	90 91 65 03 	lds	r25, 0x0365
    4892:	a0 91 66 03 	lds	r26, 0x0366
    4896:	b0 91 67 03 	lds	r27, 0x0367
    489a:	01 96       	adiw	r24, 0x01	; 1
    489c:	a1 1d       	adc	r26, r1
    489e:	b1 1d       	adc	r27, r1
    48a0:	80 93 64 03 	sts	0x0364, r24
    48a4:	90 93 65 03 	sts	0x0365, r25
    48a8:	a0 93 66 03 	sts	0x0366, r26
    48ac:	b0 93 67 03 	sts	0x0367, r27
		}
		if(my_CS811.TVOC!=0)
    48b0:	80 91 6a 03 	lds	r24, 0x036A
    48b4:	90 91 6b 03 	lds	r25, 0x036B
    48b8:	00 97       	sbiw	r24, 0x00	; 0
    48ba:	71 f1       	breq	.+92     	; 0x4918 <operation_fun+0xfe>
		{
			TVOC_AVG+=my_CS811.TVOC;
    48bc:	80 91 6a 03 	lds	r24, 0x036A
    48c0:	90 91 6b 03 	lds	r25, 0x036B
    48c4:	9c 01       	movw	r18, r24
    48c6:	40 e0       	ldi	r20, 0x00	; 0
    48c8:	50 e0       	ldi	r21, 0x00	; 0
    48ca:	80 91 5b 03 	lds	r24, 0x035B
    48ce:	90 91 5c 03 	lds	r25, 0x035C
    48d2:	a0 91 5d 03 	lds	r26, 0x035D
    48d6:	b0 91 5e 03 	lds	r27, 0x035E
    48da:	82 0f       	add	r24, r18
    48dc:	93 1f       	adc	r25, r19
    48de:	a4 1f       	adc	r26, r20
    48e0:	b5 1f       	adc	r27, r21
    48e2:	80 93 5b 03 	sts	0x035B, r24
    48e6:	90 93 5c 03 	sts	0x035C, r25
    48ea:	a0 93 5d 03 	sts	0x035D, r26
    48ee:	b0 93 5e 03 	sts	0x035E, r27
			TVOC_reading_numbers++;
    48f2:	80 91 6c 03 	lds	r24, 0x036C
    48f6:	90 91 6d 03 	lds	r25, 0x036D
    48fa:	a0 91 6e 03 	lds	r26, 0x036E
    48fe:	b0 91 6f 03 	lds	r27, 0x036F
    4902:	01 96       	adiw	r24, 0x01	; 1
    4904:	a1 1d       	adc	r26, r1
    4906:	b1 1d       	adc	r27, r1
    4908:	80 93 6c 03 	sts	0x036C, r24
    490c:	90 93 6d 03 	sts	0x036D, r25
    4910:	a0 93 6e 03 	sts	0x036E, r26
    4914:	b0 93 6f 03 	sts	0x036F, r27

	}



	if(timer_check(update_screen_timer_ID))
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    491e:	88 23       	and	r24, r24
    4920:	d1 f1       	breq	.+116    	; 0x4996 <operation_fun+0x17c>
	{

		temp_value=Get_Temp_reading(1);
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	0e 94 bf 21 	call	0x437e	; 0x437e <Get_Temp_reading>
    4928:	80 93 63 03 	sts	0x0363, r24

		EF_void_LCD_Clear_Screen();
    492c:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EF_void_LCD_Clear_Screen>
		EF_void_LCD_print((unsigned char*)"CO2");
    4930:	89 e7       	ldi	r24, 0x79	; 121
    4932:	92 e0       	ldi	r25, 0x02	; 2
    4934:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
		EF_void_LCD_goto(1,7);
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	67 e0       	ldi	r22, 0x07	; 7
    493c:	0e 94 ae 18 	call	0x315c	; 0x315c <EF_void_LCD_goto>
		EF_void_LCD_print((unsigned char*)"TVOC");
    4940:	8d e7       	ldi	r24, 0x7D	; 125
    4942:	92 e0       	ldi	r25, 0x02	; 2
    4944:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
		EF_void_LCD_goto(1,13);
    4948:	81 e0       	ldi	r24, 0x01	; 1
    494a:	6d e0       	ldi	r22, 0x0D	; 13
    494c:	0e 94 ae 18 	call	0x315c	; 0x315c <EF_void_LCD_goto>
		EF_void_LCD_print((unsigned char*)"Temp");
    4950:	82 e8       	ldi	r24, 0x82	; 130
    4952:	92 e0       	ldi	r25, 0x02	; 2
    4954:	0e 94 99 19 	call	0x3332	; 0x3332 <EF_void_LCD_print>
		EF_void_LCD_Newline();
    4958:	0e 94 a8 1c 	call	0x3950	; 0x3950 <EF_void_LCD_Newline>
		EF_void_LCD_print_Number(my_CS811.CO2);
    495c:	80 91 68 03 	lds	r24, 0x0368
    4960:	90 91 69 03 	lds	r25, 0x0369
    4964:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <EF_void_LCD_print_Number>
		EF_void_LCD_goto(2,7);
    4968:	82 e0       	ldi	r24, 0x02	; 2
    496a:	67 e0       	ldi	r22, 0x07	; 7
    496c:	0e 94 ae 18 	call	0x315c	; 0x315c <EF_void_LCD_goto>
		EF_void_LCD_print_Number(my_CS811.TVOC);
    4970:	80 91 6a 03 	lds	r24, 0x036A
    4974:	90 91 6b 03 	lds	r25, 0x036B
    4978:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <EF_void_LCD_print_Number>
		EF_void_LCD_goto(2,13);
    497c:	82 e0       	ldi	r24, 0x02	; 2
    497e:	6d e0       	ldi	r22, 0x0D	; 13
    4980:	0e 94 ae 18 	call	0x315c	; 0x315c <EF_void_LCD_goto>
		EF_void_LCD_print_Number(temp_value);
    4984:	80 91 63 03 	lds	r24, 0x0363
    4988:	88 2f       	mov	r24, r24
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <EF_void_LCD_print_Number>



		timer_reset(update_screen_timer_ID);
    4990:	82 e0       	ldi	r24, 0x02	; 2
    4992:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>





	if(timer_check(server_update_timer_ID))
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	0e 94 9b 0a 	call	0x1536	; 0x1536 <timer_check>
    499c:	88 23       	and	r24, r24
    499e:	09 f4       	brne	.+2      	; 0x49a2 <operation_fun+0x188>
    49a0:	08 c1       	rjmp	.+528    	; 0x4bb2 <operation_fun+0x398>
	{


		PORTD |=(1<<PD5);               //buzzer on
    49a2:	a2 e3       	ldi	r26, 0x32	; 50
    49a4:	b0 e0       	ldi	r27, 0x00	; 0
    49a6:	e2 e3       	ldi	r30, 0x32	; 50
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	80 62       	ori	r24, 0x20	; 32
    49ae:	8c 93       	st	X, r24
    49b0:	80 e0       	ldi	r24, 0x00	; 0
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	aa ef       	ldi	r26, 0xFA	; 250
    49b6:	b3 e4       	ldi	r27, 0x43	; 67
    49b8:	8b 87       	std	Y+11, r24	; 0x0b
    49ba:	9c 87       	std	Y+12, r25	; 0x0c
    49bc:	ad 87       	std	Y+13, r26	; 0x0d
    49be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    49c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    49c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    49c8:	20 e0       	ldi	r18, 0x00	; 0
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	4a ef       	ldi	r20, 0xFA	; 250
    49ce:	54 e4       	ldi	r21, 0x44	; 68
    49d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	8f 83       	std	Y+7, r24	; 0x07
    49da:	98 87       	std	Y+8, r25	; 0x08
    49dc:	a9 87       	std	Y+9, r26	; 0x09
    49de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49e0:	6f 81       	ldd	r22, Y+7	; 0x07
    49e2:	78 85       	ldd	r23, Y+8	; 0x08
    49e4:	89 85       	ldd	r24, Y+9	; 0x09
    49e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e8:	20 e0       	ldi	r18, 0x00	; 0
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	40 e8       	ldi	r20, 0x80	; 128
    49ee:	5f e3       	ldi	r21, 0x3F	; 63
    49f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49f4:	88 23       	and	r24, r24
    49f6:	2c f4       	brge	.+10     	; 0x4a02 <operation_fun+0x1e8>
		__ticks = 1;
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	9e 83       	std	Y+6, r25	; 0x06
    49fe:	8d 83       	std	Y+5, r24	; 0x05
    4a00:	3f c0       	rjmp	.+126    	; 0x4a80 <operation_fun+0x266>
	else if (__tmp > 65535)
    4a02:	6f 81       	ldd	r22, Y+7	; 0x07
    4a04:	78 85       	ldd	r23, Y+8	; 0x08
    4a06:	89 85       	ldd	r24, Y+9	; 0x09
    4a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a0a:	20 e0       	ldi	r18, 0x00	; 0
    4a0c:	3f ef       	ldi	r19, 0xFF	; 255
    4a0e:	4f e7       	ldi	r20, 0x7F	; 127
    4a10:	57 e4       	ldi	r21, 0x47	; 71
    4a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a16:	18 16       	cp	r1, r24
    4a18:	4c f5       	brge	.+82     	; 0x4a6c <operation_fun+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a22:	20 e0       	ldi	r18, 0x00	; 0
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	40 e2       	ldi	r20, 0x20	; 32
    4a28:	51 e4       	ldi	r21, 0x41	; 65
    4a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	bc 01       	movw	r22, r24
    4a34:	cd 01       	movw	r24, r26
    4a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	9e 83       	std	Y+6, r25	; 0x06
    4a40:	8d 83       	std	Y+5, r24	; 0x05
    4a42:	0f c0       	rjmp	.+30     	; 0x4a62 <operation_fun+0x248>
    4a44:	88 ec       	ldi	r24, 0xC8	; 200
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	9c 83       	std	Y+4, r25	; 0x04
    4a4a:	8b 83       	std	Y+3, r24	; 0x03
    4a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	f1 f7       	brne	.-4      	; 0x4a50 <operation_fun+0x236>
    4a54:	9c 83       	std	Y+4, r25	; 0x04
    4a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a58:	8d 81       	ldd	r24, Y+5	; 0x05
    4a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a5c:	01 97       	sbiw	r24, 0x01	; 1
    4a5e:	9e 83       	std	Y+6, r25	; 0x06
    4a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a62:	8d 81       	ldd	r24, Y+5	; 0x05
    4a64:	9e 81       	ldd	r25, Y+6	; 0x06
    4a66:	00 97       	sbiw	r24, 0x00	; 0
    4a68:	69 f7       	brne	.-38     	; 0x4a44 <operation_fun+0x22a>
    4a6a:	14 c0       	rjmp	.+40     	; 0x4a94 <operation_fun+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6e:	78 85       	ldd	r23, Y+8	; 0x08
    4a70:	89 85       	ldd	r24, Y+9	; 0x09
    4a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a78:	dc 01       	movw	r26, r24
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	9e 83       	std	Y+6, r25	; 0x06
    4a7e:	8d 83       	std	Y+5, r24	; 0x05
    4a80:	8d 81       	ldd	r24, Y+5	; 0x05
    4a82:	9e 81       	ldd	r25, Y+6	; 0x06
    4a84:	9a 83       	std	Y+2, r25	; 0x02
    4a86:	89 83       	std	Y+1, r24	; 0x01
    4a88:	89 81       	ldd	r24, Y+1	; 0x01
    4a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8c:	01 97       	sbiw	r24, 0x01	; 1
    4a8e:	f1 f7       	brne	.-4      	; 0x4a8c <operation_fun+0x272>
    4a90:	9a 83       	std	Y+2, r25	; 0x02
    4a92:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		PORTD &=~(1<<PD5);              //buzzer off
    4a94:	a2 e3       	ldi	r26, 0x32	; 50
    4a96:	b0 e0       	ldi	r27, 0x00	; 0
    4a98:	e2 e3       	ldi	r30, 0x32	; 50
    4a9a:	f0 e0       	ldi	r31, 0x00	; 0
    4a9c:	80 81       	ld	r24, Z
    4a9e:	8f 7d       	andi	r24, 0xDF	; 223
    4aa0:	8c 93       	st	X, r24

		my_CS811.CO2=CO2_AVG/CO2_reading_numbers;
    4aa2:	80 91 5f 03 	lds	r24, 0x035F
    4aa6:	90 91 60 03 	lds	r25, 0x0360
    4aaa:	a0 91 61 03 	lds	r26, 0x0361
    4aae:	b0 91 62 03 	lds	r27, 0x0362
    4ab2:	20 91 64 03 	lds	r18, 0x0364
    4ab6:	30 91 65 03 	lds	r19, 0x0365
    4aba:	40 91 66 03 	lds	r20, 0x0366
    4abe:	50 91 67 03 	lds	r21, 0x0367
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    4aca:	da 01       	movw	r26, r20
    4acc:	c9 01       	movw	r24, r18
    4ace:	90 93 69 03 	sts	0x0369, r25
    4ad2:	80 93 68 03 	sts	0x0368, r24
		my_CS811.TVOC=TVOC_AVG/TVOC_reading_numbers;
    4ad6:	80 91 5b 03 	lds	r24, 0x035B
    4ada:	90 91 5c 03 	lds	r25, 0x035C
    4ade:	a0 91 5d 03 	lds	r26, 0x035D
    4ae2:	b0 91 5e 03 	lds	r27, 0x035E
    4ae6:	20 91 6c 03 	lds	r18, 0x036C
    4aea:	30 91 6d 03 	lds	r19, 0x036D
    4aee:	40 91 6e 03 	lds	r20, 0x036E
    4af2:	50 91 6f 03 	lds	r21, 0x036F
    4af6:	bc 01       	movw	r22, r24
    4af8:	cd 01       	movw	r24, r26
    4afa:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    4afe:	da 01       	movw	r26, r20
    4b00:	c9 01       	movw	r24, r18
    4b02:	90 93 6b 03 	sts	0x036B, r25
    4b06:	80 93 6a 03 	sts	0x036A, r24
		CO2_reading_numbers=0;
    4b0a:	10 92 64 03 	sts	0x0364, r1
    4b0e:	10 92 65 03 	sts	0x0365, r1
    4b12:	10 92 66 03 	sts	0x0366, r1
    4b16:	10 92 67 03 	sts	0x0367, r1
		CO2_AVG=0;
    4b1a:	10 92 5f 03 	sts	0x035F, r1
    4b1e:	10 92 60 03 	sts	0x0360, r1
    4b22:	10 92 61 03 	sts	0x0361, r1
    4b26:	10 92 62 03 	sts	0x0362, r1
		TVOC_reading_numbers=0;
    4b2a:	10 92 6c 03 	sts	0x036C, r1
    4b2e:	10 92 6d 03 	sts	0x036D, r1
    4b32:	10 92 6e 03 	sts	0x036E, r1
    4b36:	10 92 6f 03 	sts	0x036F, r1
		TVOC_AVG=0;
    4b3a:	10 92 5b 03 	sts	0x035B, r1
    4b3e:	10 92 5c 03 	sts	0x035C, r1
    4b42:	10 92 5d 03 	sts	0x035D, r1
    4b46:	10 92 5e 03 	sts	0x035E, r1


		if(CurrentUploade==TEMP_uploade)
    4b4a:	80 91 b4 02 	lds	r24, 0x02B4
    4b4e:	88 23       	and	r24, r24
    4b50:	69 f4       	brne	.+26     	; 0x4b6c <operation_fun+0x352>
		{
			ESP_uploade_data(1,temp_value);
    4b52:	80 91 63 03 	lds	r24, 0x0363
    4b56:	28 2f       	mov	r18, r24
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	b9 01       	movw	r22, r18
    4b60:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <ESP_uploade_data>
			CurrentUploade =CO2_uploade;
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	80 93 b4 02 	sts	0x02B4, r24
    4b6a:	20 c0       	rjmp	.+64     	; 0x4bac <operation_fun+0x392>
		}
		else if(CurrentUploade==CO2_uploade)
    4b6c:	80 91 b4 02 	lds	r24, 0x02B4
    4b70:	81 30       	cpi	r24, 0x01	; 1
    4b72:	69 f4       	brne	.+26     	; 0x4b8e <operation_fun+0x374>
		{
			ESP_uploade_data(2,my_CS811.CO2);
    4b74:	20 91 68 03 	lds	r18, 0x0368
    4b78:	30 91 69 03 	lds	r19, 0x0369
    4b7c:	82 e0       	ldi	r24, 0x02	; 2
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	b9 01       	movw	r22, r18
    4b82:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <ESP_uploade_data>
			CurrentUploade =TVOC_uploade;
    4b86:	82 e0       	ldi	r24, 0x02	; 2
    4b88:	80 93 b4 02 	sts	0x02B4, r24
    4b8c:	0f c0       	rjmp	.+30     	; 0x4bac <operation_fun+0x392>
		}
		else if(CurrentUploade==TVOC_uploade)
    4b8e:	80 91 b4 02 	lds	r24, 0x02B4
    4b92:	82 30       	cpi	r24, 0x02	; 2
    4b94:	59 f4       	brne	.+22     	; 0x4bac <operation_fun+0x392>
		{
			ESP_uploade_data(3,my_CS811.TVOC);
    4b96:	20 91 6a 03 	lds	r18, 0x036A
    4b9a:	30 91 6b 03 	lds	r19, 0x036B
    4b9e:	83 e0       	ldi	r24, 0x03	; 3
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	b9 01       	movw	r22, r18
    4ba4:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <ESP_uploade_data>
			CurrentUploade =TEMP_uploade;
    4ba8:	10 92 b4 02 	sts	0x02B4, r1
		}

		timer_reset(server_update_timer_ID);
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	0e 94 39 0a 	call	0x1472	; 0x1472 <timer_reset>
	}


	return ret_operation;
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
}
    4bb4:	2e 96       	adiw	r28, 0x0e	; 14
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	f8 94       	cli
    4bba:	de bf       	out	0x3e, r29	; 62
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	cd bf       	out	0x3d, r28	; 61
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <lookup_table>:




ret_state lookup_table(state current_state,ret_state dir_state)
{
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	00 d0       	rcall	.+0      	; 0x4bcc <lookup_table+0x6>
    4bcc:	0f 92       	push	r0
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	8a 83       	std	Y+2, r24	; 0x02
    4bd4:	6b 83       	std	Y+3, r22	; 0x03
	ret_state next_state=0;
    4bd6:	19 82       	std	Y+1, r1	; 0x01


	next_state=lookup_table_array[current_state][dir_state];
    4bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bda:	28 2f       	mov	r18, r24
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	8b 81       	ldd	r24, Y+3	; 0x03
    4be0:	48 2f       	mov	r20, r24
    4be2:	50 e0       	ldi	r21, 0x00	; 0
    4be4:	c9 01       	movw	r24, r18
    4be6:	88 0f       	add	r24, r24
    4be8:	99 1f       	adc	r25, r25
    4bea:	82 0f       	add	r24, r18
    4bec:	93 1f       	adc	r25, r19
    4bee:	84 0f       	add	r24, r20
    4bf0:	95 1f       	adc	r25, r21
    4bf2:	fc 01       	movw	r30, r24
    4bf4:	ee 55       	subi	r30, 0x5E	; 94
    4bf6:	fd 4f       	sbci	r31, 0xFD	; 253
    4bf8:	80 81       	ld	r24, Z
    4bfa:	89 83       	std	Y+1, r24	; 0x01




	return next_state;
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bfe:	0f 90       	pop	r0
    4c00:	0f 90       	pop	r0
    4c02:	0f 90       	pop	r0
    4c04:	cf 91       	pop	r28
    4c06:	df 91       	pop	r29
    4c08:	08 95       	ret

00004c0a <terminate_fun>:
#include"../main.h"



ret_state terminate_fun(void)
{
    4c0a:	df 93       	push	r29
    4c0c:	cf 93       	push	r28
    4c0e:	cd b7       	in	r28, 0x3d	; 61
    4c10:	de b7       	in	r29, 0x3e	; 62
    4c12:	2e 97       	sbiw	r28, 0x0e	; 14
    4c14:	0f b6       	in	r0, 0x3f	; 63
    4c16:	f8 94       	cli
    4c18:	de bf       	out	0x3e, r29	; 62
    4c1a:	0f be       	out	0x3f, r0	; 63
    4c1c:	cd bf       	out	0x3d, r28	; 61

	UART_SEND_string("Terminate state\r\n");
    4c1e:	87 e8       	ldi	r24, 0x87	; 135
    4c20:	92 e0       	ldi	r25, 0x02	; 2
    4c22:	0e 94 c7 06 	call	0xd8e	; 0xd8e <UART_SEND_string>
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	aa ef       	ldi	r26, 0xFA	; 250
    4c2c:	b4 e4       	ldi	r27, 0x44	; 68
    4c2e:	8b 87       	std	Y+11, r24	; 0x0b
    4c30:	9c 87       	std	Y+12, r25	; 0x0c
    4c32:	ad 87       	std	Y+13, r26	; 0x0d
    4c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	4a ef       	ldi	r20, 0xFA	; 250
    4c44:	54 e4       	ldi	r21, 0x44	; 68
    4c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
    4c4e:	8f 83       	std	Y+7, r24	; 0x07
    4c50:	98 87       	std	Y+8, r25	; 0x08
    4c52:	a9 87       	std	Y+9, r26	; 0x09
    4c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c56:	6f 81       	ldd	r22, Y+7	; 0x07
    4c58:	78 85       	ldd	r23, Y+8	; 0x08
    4c5a:	89 85       	ldd	r24, Y+9	; 0x09
    4c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	40 e8       	ldi	r20, 0x80	; 128
    4c64:	5f e3       	ldi	r21, 0x3F	; 63
    4c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c6a:	88 23       	and	r24, r24
    4c6c:	2c f4       	brge	.+10     	; 0x4c78 <terminate_fun+0x6e>
		__ticks = 1;
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	9e 83       	std	Y+6, r25	; 0x06
    4c74:	8d 83       	std	Y+5, r24	; 0x05
    4c76:	3f c0       	rjmp	.+126    	; 0x4cf6 <terminate_fun+0xec>
	else if (__tmp > 65535)
    4c78:	6f 81       	ldd	r22, Y+7	; 0x07
    4c7a:	78 85       	ldd	r23, Y+8	; 0x08
    4c7c:	89 85       	ldd	r24, Y+9	; 0x09
    4c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	3f ef       	ldi	r19, 0xFF	; 255
    4c84:	4f e7       	ldi	r20, 0x7F	; 127
    4c86:	57 e4       	ldi	r21, 0x47	; 71
    4c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c8c:	18 16       	cp	r1, r24
    4c8e:	4c f5       	brge	.+82     	; 0x4ce2 <terminate_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	40 e2       	ldi	r20, 0x20	; 32
    4c9e:	51 e4       	ldi	r21, 0x41	; 65
    4ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	cb 01       	movw	r24, r22
    4ca8:	bc 01       	movw	r22, r24
    4caa:	cd 01       	movw	r24, r26
    4cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	9e 83       	std	Y+6, r25	; 0x06
    4cb6:	8d 83       	std	Y+5, r24	; 0x05
    4cb8:	0f c0       	rjmp	.+30     	; 0x4cd8 <terminate_fun+0xce>
    4cba:	88 ec       	ldi	r24, 0xC8	; 200
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	9c 83       	std	Y+4, r25	; 0x04
    4cc0:	8b 83       	std	Y+3, r24	; 0x03
    4cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc6:	01 97       	sbiw	r24, 0x01	; 1
    4cc8:	f1 f7       	brne	.-4      	; 0x4cc6 <terminate_fun+0xbc>
    4cca:	9c 83       	std	Y+4, r25	; 0x04
    4ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cce:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	9e 83       	std	Y+6, r25	; 0x06
    4cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cda:	9e 81       	ldd	r25, Y+6	; 0x06
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	69 f7       	brne	.-38     	; 0x4cba <terminate_fun+0xb0>
    4ce0:	14 c0       	rjmp	.+40     	; 0x4d0a <terminate_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ce4:	78 85       	ldd	r23, Y+8	; 0x08
    4ce6:	89 85       	ldd	r24, Y+9	; 0x09
    4ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cee:	dc 01       	movw	r26, r24
    4cf0:	cb 01       	movw	r24, r22
    4cf2:	9e 83       	std	Y+6, r25	; 0x06
    4cf4:	8d 83       	std	Y+5, r24	; 0x05
    4cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    4cfa:	9a 83       	std	Y+2, r25	; 0x02
    4cfc:	89 83       	std	Y+1, r24	; 0x01
    4cfe:	89 81       	ldd	r24, Y+1	; 0x01
    4d00:	9a 81       	ldd	r25, Y+2	; 0x02
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	f1 f7       	brne	.-4      	; 0x4d02 <terminate_fun+0xf8>
    4d06:	9a 83       	std	Y+2, r25	; 0x02
    4d08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

return ret_operation;
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
}
    4d0c:	2e 96       	adiw	r28, 0x0e	; 14
    4d0e:	0f b6       	in	r0, 0x3f	; 63
    4d10:	f8 94       	cli
    4d12:	de bf       	out	0x3e, r29	; 62
    4d14:	0f be       	out	0x3f, r0	; 63
    4d16:	cd bf       	out	0x3d, r28	; 61
    4d18:	cf 91       	pop	r28
    4d1a:	df 91       	pop	r29
    4d1c:	08 95       	ret

00004d1e <main>:

ret_state (* states[3])(void)={init_fun,operation_fun,terminate_fun};


int main(void)
{
    4d1e:	df 93       	push	r29
    4d20:	cf 93       	push	r28
    4d22:	00 d0       	rcall	.+0      	; 0x4d24 <main+0x6>
    4d24:	0f 92       	push	r0
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
	state	current_state=init;
    4d2a:	1b 82       	std	Y+3, r1	; 0x03
	ret_state (*state_fun)(void);

	while(1)                     /* Super LOOP */
	{
		state_fun=states[current_state];
    4d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2e:	88 2f       	mov	r24, r24
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	88 0f       	add	r24, r24
    4d34:	99 1f       	adc	r25, r25
    4d36:	fc 01       	movw	r30, r24
    4d38:	e5 55       	subi	r30, 0x55	; 85
    4d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    4d3c:	80 81       	ld	r24, Z
    4d3e:	91 81       	ldd	r25, Z+1	; 0x01
    4d40:	9a 83       	std	Y+2, r25	; 0x02
    4d42:	89 83       	std	Y+1, r24	; 0x01
		return_state=state_fun();
    4d44:	e9 81       	ldd	r30, Y+1	; 0x01
    4d46:	fa 81       	ldd	r31, Y+2	; 0x02
    4d48:	09 95       	icall
    4d4a:	80 93 70 03 	sts	0x0370, r24

		current_state=lookup_table(current_state,return_state);
    4d4e:	90 91 70 03 	lds	r25, 0x0370
    4d52:	8b 81       	ldd	r24, Y+3	; 0x03
    4d54:	69 2f       	mov	r22, r25
    4d56:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <lookup_table>
    4d5a:	8b 83       	std	Y+3, r24	; 0x03
    4d5c:	e7 cf       	rjmp	.-50     	; 0x4d2c <main+0xe>

00004d5e <__udivmodhi4>:
    4d5e:	aa 1b       	sub	r26, r26
    4d60:	bb 1b       	sub	r27, r27
    4d62:	51 e1       	ldi	r21, 0x11	; 17
    4d64:	07 c0       	rjmp	.+14     	; 0x4d74 <__udivmodhi4_ep>

00004d66 <__udivmodhi4_loop>:
    4d66:	aa 1f       	adc	r26, r26
    4d68:	bb 1f       	adc	r27, r27
    4d6a:	a6 17       	cp	r26, r22
    4d6c:	b7 07       	cpc	r27, r23
    4d6e:	10 f0       	brcs	.+4      	; 0x4d74 <__udivmodhi4_ep>
    4d70:	a6 1b       	sub	r26, r22
    4d72:	b7 0b       	sbc	r27, r23

00004d74 <__udivmodhi4_ep>:
    4d74:	88 1f       	adc	r24, r24
    4d76:	99 1f       	adc	r25, r25
    4d78:	5a 95       	dec	r21
    4d7a:	a9 f7       	brne	.-22     	; 0x4d66 <__udivmodhi4_loop>
    4d7c:	80 95       	com	r24
    4d7e:	90 95       	com	r25
    4d80:	bc 01       	movw	r22, r24
    4d82:	cd 01       	movw	r24, r26
    4d84:	08 95       	ret

00004d86 <__udivmodsi4>:
    4d86:	a1 e2       	ldi	r26, 0x21	; 33
    4d88:	1a 2e       	mov	r1, r26
    4d8a:	aa 1b       	sub	r26, r26
    4d8c:	bb 1b       	sub	r27, r27
    4d8e:	fd 01       	movw	r30, r26
    4d90:	0d c0       	rjmp	.+26     	; 0x4dac <__udivmodsi4_ep>

00004d92 <__udivmodsi4_loop>:
    4d92:	aa 1f       	adc	r26, r26
    4d94:	bb 1f       	adc	r27, r27
    4d96:	ee 1f       	adc	r30, r30
    4d98:	ff 1f       	adc	r31, r31
    4d9a:	a2 17       	cp	r26, r18
    4d9c:	b3 07       	cpc	r27, r19
    4d9e:	e4 07       	cpc	r30, r20
    4da0:	f5 07       	cpc	r31, r21
    4da2:	20 f0       	brcs	.+8      	; 0x4dac <__udivmodsi4_ep>
    4da4:	a2 1b       	sub	r26, r18
    4da6:	b3 0b       	sbc	r27, r19
    4da8:	e4 0b       	sbc	r30, r20
    4daa:	f5 0b       	sbc	r31, r21

00004dac <__udivmodsi4_ep>:
    4dac:	66 1f       	adc	r22, r22
    4dae:	77 1f       	adc	r23, r23
    4db0:	88 1f       	adc	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	1a 94       	dec	r1
    4db6:	69 f7       	brne	.-38     	; 0x4d92 <__udivmodsi4_loop>
    4db8:	60 95       	com	r22
    4dba:	70 95       	com	r23
    4dbc:	80 95       	com	r24
    4dbe:	90 95       	com	r25
    4dc0:	9b 01       	movw	r18, r22
    4dc2:	ac 01       	movw	r20, r24
    4dc4:	bd 01       	movw	r22, r26
    4dc6:	cf 01       	movw	r24, r30
    4dc8:	08 95       	ret

00004dca <__prologue_saves__>:
    4dca:	2f 92       	push	r2
    4dcc:	3f 92       	push	r3
    4dce:	4f 92       	push	r4
    4dd0:	5f 92       	push	r5
    4dd2:	6f 92       	push	r6
    4dd4:	7f 92       	push	r7
    4dd6:	8f 92       	push	r8
    4dd8:	9f 92       	push	r9
    4dda:	af 92       	push	r10
    4ddc:	bf 92       	push	r11
    4dde:	cf 92       	push	r12
    4de0:	df 92       	push	r13
    4de2:	ef 92       	push	r14
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	cf 93       	push	r28
    4dec:	df 93       	push	r29
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	ca 1b       	sub	r28, r26
    4df4:	db 0b       	sbc	r29, r27
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	f8 94       	cli
    4dfa:	de bf       	out	0x3e, r29	; 62
    4dfc:	0f be       	out	0x3f, r0	; 63
    4dfe:	cd bf       	out	0x3d, r28	; 61
    4e00:	09 94       	ijmp

00004e02 <__epilogue_restores__>:
    4e02:	2a 88       	ldd	r2, Y+18	; 0x12
    4e04:	39 88       	ldd	r3, Y+17	; 0x11
    4e06:	48 88       	ldd	r4, Y+16	; 0x10
    4e08:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e10:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e12:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e14:	b9 84       	ldd	r11, Y+9	; 0x09
    4e16:	c8 84       	ldd	r12, Y+8	; 0x08
    4e18:	df 80       	ldd	r13, Y+7	; 0x07
    4e1a:	ee 80       	ldd	r14, Y+6	; 0x06
    4e1c:	fd 80       	ldd	r15, Y+5	; 0x05
    4e1e:	0c 81       	ldd	r16, Y+4	; 0x04
    4e20:	1b 81       	ldd	r17, Y+3	; 0x03
    4e22:	aa 81       	ldd	r26, Y+2	; 0x02
    4e24:	b9 81       	ldd	r27, Y+1	; 0x01
    4e26:	ce 0f       	add	r28, r30
    4e28:	d1 1d       	adc	r29, r1
    4e2a:	0f b6       	in	r0, 0x3f	; 63
    4e2c:	f8 94       	cli
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	0f be       	out	0x3f, r0	; 63
    4e32:	cd bf       	out	0x3d, r28	; 61
    4e34:	ed 01       	movw	r28, r26
    4e36:	08 95       	ret

00004e38 <memset>:
    4e38:	dc 01       	movw	r26, r24
    4e3a:	01 c0       	rjmp	.+2      	; 0x4e3e <memset+0x6>
    4e3c:	6d 93       	st	X+, r22
    4e3e:	41 50       	subi	r20, 0x01	; 1
    4e40:	50 40       	sbci	r21, 0x00	; 0
    4e42:	e0 f7       	brcc	.-8      	; 0x4e3c <memset+0x4>
    4e44:	08 95       	ret

00004e46 <strlen>:
    4e46:	fc 01       	movw	r30, r24
    4e48:	01 90       	ld	r0, Z+
    4e4a:	00 20       	and	r0, r0
    4e4c:	e9 f7       	brne	.-6      	; 0x4e48 <strlen+0x2>
    4e4e:	80 95       	com	r24
    4e50:	90 95       	com	r25
    4e52:	8e 0f       	add	r24, r30
    4e54:	9f 1f       	adc	r25, r31
    4e56:	08 95       	ret

00004e58 <strncmp>:
    4e58:	fb 01       	movw	r30, r22
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	41 50       	subi	r20, 0x01	; 1
    4e5e:	50 40       	sbci	r21, 0x00	; 0
    4e60:	30 f0       	brcs	.+12     	; 0x4e6e <strncmp+0x16>
    4e62:	8d 91       	ld	r24, X+
    4e64:	01 90       	ld	r0, Z+
    4e66:	80 19       	sub	r24, r0
    4e68:	19 f4       	brne	.+6      	; 0x4e70 <strncmp+0x18>
    4e6a:	00 20       	and	r0, r0
    4e6c:	b9 f7       	brne	.-18     	; 0x4e5c <strncmp+0x4>
    4e6e:	88 1b       	sub	r24, r24
    4e70:	99 0b       	sbc	r25, r25
    4e72:	08 95       	ret

00004e74 <strstr>:
    4e74:	fb 01       	movw	r30, r22
    4e76:	51 91       	ld	r21, Z+
    4e78:	55 23       	and	r21, r21
    4e7a:	a9 f0       	breq	.+42     	; 0x4ea6 <strstr+0x32>
    4e7c:	bf 01       	movw	r22, r30
    4e7e:	dc 01       	movw	r26, r24
    4e80:	4d 91       	ld	r20, X+
    4e82:	45 17       	cp	r20, r21
    4e84:	41 11       	cpse	r20, r1
    4e86:	e1 f7       	brne	.-8      	; 0x4e80 <strstr+0xc>
    4e88:	59 f4       	brne	.+22     	; 0x4ea0 <strstr+0x2c>
    4e8a:	cd 01       	movw	r24, r26
    4e8c:	01 90       	ld	r0, Z+
    4e8e:	00 20       	and	r0, r0
    4e90:	49 f0       	breq	.+18     	; 0x4ea4 <strstr+0x30>
    4e92:	4d 91       	ld	r20, X+
    4e94:	40 15       	cp	r20, r0
    4e96:	41 11       	cpse	r20, r1
    4e98:	c9 f3       	breq	.-14     	; 0x4e8c <strstr+0x18>
    4e9a:	fb 01       	movw	r30, r22
    4e9c:	41 11       	cpse	r20, r1
    4e9e:	ef cf       	rjmp	.-34     	; 0x4e7e <strstr+0xa>
    4ea0:	81 e0       	ldi	r24, 0x01	; 1
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	08 95       	ret

00004ea8 <itoa>:
    4ea8:	fb 01       	movw	r30, r22
    4eaa:	9f 01       	movw	r18, r30
    4eac:	e8 94       	clt
    4eae:	42 30       	cpi	r20, 0x02	; 2
    4eb0:	c4 f0       	brlt	.+48     	; 0x4ee2 <itoa+0x3a>
    4eb2:	45 32       	cpi	r20, 0x25	; 37
    4eb4:	b4 f4       	brge	.+44     	; 0x4ee2 <itoa+0x3a>
    4eb6:	4a 30       	cpi	r20, 0x0A	; 10
    4eb8:	29 f4       	brne	.+10     	; 0x4ec4 <itoa+0x1c>
    4eba:	97 fb       	bst	r25, 7
    4ebc:	1e f4       	brtc	.+6      	; 0x4ec4 <itoa+0x1c>
    4ebe:	90 95       	com	r25
    4ec0:	81 95       	neg	r24
    4ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec4:	64 2f       	mov	r22, r20
    4ec6:	77 27       	eor	r23, r23
    4ec8:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <__udivmodhi4>
    4ecc:	80 5d       	subi	r24, 0xD0	; 208
    4ece:	8a 33       	cpi	r24, 0x3A	; 58
    4ed0:	0c f0       	brlt	.+2      	; 0x4ed4 <itoa+0x2c>
    4ed2:	89 5d       	subi	r24, 0xD9	; 217
    4ed4:	81 93       	st	Z+, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	00 97       	sbiw	r24, 0x00	; 0
    4eda:	a1 f7       	brne	.-24     	; 0x4ec4 <itoa+0x1c>
    4edc:	16 f4       	brtc	.+4      	; 0x4ee2 <itoa+0x3a>
    4ede:	5d e2       	ldi	r21, 0x2D	; 45
    4ee0:	51 93       	st	Z+, r21
    4ee2:	10 82       	st	Z, r1
    4ee4:	c9 01       	movw	r24, r18
    4ee6:	0c 94 8c 29 	jmp	0x5318	; 0x5318 <strrev>

00004eea <sprintf>:
    4eea:	ae e0       	ldi	r26, 0x0E	; 14
    4eec:	b0 e0       	ldi	r27, 0x00	; 0
    4eee:	eb e7       	ldi	r30, 0x7B	; 123
    4ef0:	f7 e2       	ldi	r31, 0x27	; 39
    4ef2:	0c 94 f3 26 	jmp	0x4de6	; 0x4de6 <__prologue_saves__+0x1c>
    4ef6:	0d 89       	ldd	r16, Y+21	; 0x15
    4ef8:	1e 89       	ldd	r17, Y+22	; 0x16
    4efa:	86 e0       	ldi	r24, 0x06	; 6
    4efc:	8c 83       	std	Y+4, r24	; 0x04
    4efe:	1a 83       	std	Y+2, r17	; 0x02
    4f00:	09 83       	std	Y+1, r16	; 0x01
    4f02:	8f ef       	ldi	r24, 0xFF	; 255
    4f04:	9f e7       	ldi	r25, 0x7F	; 127
    4f06:	9e 83       	std	Y+6, r25	; 0x06
    4f08:	8d 83       	std	Y+5, r24	; 0x05
    4f0a:	9e 01       	movw	r18, r28
    4f0c:	27 5e       	subi	r18, 0xE7	; 231
    4f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f10:	ce 01       	movw	r24, r28
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	6f 89       	ldd	r22, Y+23	; 0x17
    4f16:	78 8d       	ldd	r23, Y+24	; 0x18
    4f18:	a9 01       	movw	r20, r18
    4f1a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <vfprintf>
    4f1e:	2f 81       	ldd	r18, Y+7	; 0x07
    4f20:	38 85       	ldd	r19, Y+8	; 0x08
    4f22:	02 0f       	add	r16, r18
    4f24:	13 1f       	adc	r17, r19
    4f26:	f8 01       	movw	r30, r16
    4f28:	10 82       	st	Z, r1
    4f2a:	2e 96       	adiw	r28, 0x0e	; 14
    4f2c:	e4 e0       	ldi	r30, 0x04	; 4
    4f2e:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__epilogue_restores__+0x1c>

00004f32 <vfprintf>:
    4f32:	ab e0       	ldi	r26, 0x0B	; 11
    4f34:	b0 e0       	ldi	r27, 0x00	; 0
    4f36:	ef e9       	ldi	r30, 0x9F	; 159
    4f38:	f7 e2       	ldi	r31, 0x27	; 39
    4f3a:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__prologue_saves__>
    4f3e:	3c 01       	movw	r6, r24
    4f40:	2b 01       	movw	r4, r22
    4f42:	5a 01       	movw	r10, r20
    4f44:	fc 01       	movw	r30, r24
    4f46:	17 82       	std	Z+7, r1	; 0x07
    4f48:	16 82       	std	Z+6, r1	; 0x06
    4f4a:	83 81       	ldd	r24, Z+3	; 0x03
    4f4c:	81 fd       	sbrc	r24, 1
    4f4e:	03 c0       	rjmp	.+6      	; 0x4f56 <vfprintf+0x24>
    4f50:	6f ef       	ldi	r22, 0xFF	; 255
    4f52:	7f ef       	ldi	r23, 0xFF	; 255
    4f54:	c6 c1       	rjmp	.+908    	; 0x52e2 <vfprintf+0x3b0>
    4f56:	9a e0       	ldi	r25, 0x0A	; 10
    4f58:	89 2e       	mov	r8, r25
    4f5a:	1e 01       	movw	r2, r28
    4f5c:	08 94       	sec
    4f5e:	21 1c       	adc	r2, r1
    4f60:	31 1c       	adc	r3, r1
    4f62:	f3 01       	movw	r30, r6
    4f64:	23 81       	ldd	r18, Z+3	; 0x03
    4f66:	f2 01       	movw	r30, r4
    4f68:	23 fd       	sbrc	r18, 3
    4f6a:	85 91       	lpm	r24, Z+
    4f6c:	23 ff       	sbrs	r18, 3
    4f6e:	81 91       	ld	r24, Z+
    4f70:	2f 01       	movw	r4, r30
    4f72:	88 23       	and	r24, r24
    4f74:	09 f4       	brne	.+2      	; 0x4f78 <vfprintf+0x46>
    4f76:	b2 c1       	rjmp	.+868    	; 0x52dc <vfprintf+0x3aa>
    4f78:	85 32       	cpi	r24, 0x25	; 37
    4f7a:	39 f4       	brne	.+14     	; 0x4f8a <vfprintf+0x58>
    4f7c:	23 fd       	sbrc	r18, 3
    4f7e:	85 91       	lpm	r24, Z+
    4f80:	23 ff       	sbrs	r18, 3
    4f82:	81 91       	ld	r24, Z+
    4f84:	2f 01       	movw	r4, r30
    4f86:	85 32       	cpi	r24, 0x25	; 37
    4f88:	29 f4       	brne	.+10     	; 0x4f94 <vfprintf+0x62>
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	b3 01       	movw	r22, r6
    4f8e:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    4f92:	e7 cf       	rjmp	.-50     	; 0x4f62 <vfprintf+0x30>
    4f94:	98 2f       	mov	r25, r24
    4f96:	ff 24       	eor	r15, r15
    4f98:	ee 24       	eor	r14, r14
    4f9a:	99 24       	eor	r9, r9
    4f9c:	ff e1       	ldi	r31, 0x1F	; 31
    4f9e:	ff 15       	cp	r31, r15
    4fa0:	d0 f0       	brcs	.+52     	; 0x4fd6 <vfprintf+0xa4>
    4fa2:	9b 32       	cpi	r25, 0x2B	; 43
    4fa4:	69 f0       	breq	.+26     	; 0x4fc0 <vfprintf+0x8e>
    4fa6:	9c 32       	cpi	r25, 0x2C	; 44
    4fa8:	28 f4       	brcc	.+10     	; 0x4fb4 <vfprintf+0x82>
    4faa:	90 32       	cpi	r25, 0x20	; 32
    4fac:	59 f0       	breq	.+22     	; 0x4fc4 <vfprintf+0x92>
    4fae:	93 32       	cpi	r25, 0x23	; 35
    4fb0:	91 f4       	brne	.+36     	; 0x4fd6 <vfprintf+0xa4>
    4fb2:	0e c0       	rjmp	.+28     	; 0x4fd0 <vfprintf+0x9e>
    4fb4:	9d 32       	cpi	r25, 0x2D	; 45
    4fb6:	49 f0       	breq	.+18     	; 0x4fca <vfprintf+0x98>
    4fb8:	90 33       	cpi	r25, 0x30	; 48
    4fba:	69 f4       	brne	.+26     	; 0x4fd6 <vfprintf+0xa4>
    4fbc:	41 e0       	ldi	r20, 0x01	; 1
    4fbe:	24 c0       	rjmp	.+72     	; 0x5008 <vfprintf+0xd6>
    4fc0:	52 e0       	ldi	r21, 0x02	; 2
    4fc2:	f5 2a       	or	r15, r21
    4fc4:	84 e0       	ldi	r24, 0x04	; 4
    4fc6:	f8 2a       	or	r15, r24
    4fc8:	28 c0       	rjmp	.+80     	; 0x501a <vfprintf+0xe8>
    4fca:	98 e0       	ldi	r25, 0x08	; 8
    4fcc:	f9 2a       	or	r15, r25
    4fce:	25 c0       	rjmp	.+74     	; 0x501a <vfprintf+0xe8>
    4fd0:	e0 e1       	ldi	r30, 0x10	; 16
    4fd2:	fe 2a       	or	r15, r30
    4fd4:	22 c0       	rjmp	.+68     	; 0x501a <vfprintf+0xe8>
    4fd6:	f7 fc       	sbrc	r15, 7
    4fd8:	29 c0       	rjmp	.+82     	; 0x502c <vfprintf+0xfa>
    4fda:	89 2f       	mov	r24, r25
    4fdc:	80 53       	subi	r24, 0x30	; 48
    4fde:	8a 30       	cpi	r24, 0x0A	; 10
    4fe0:	70 f4       	brcc	.+28     	; 0x4ffe <vfprintf+0xcc>
    4fe2:	f6 fe       	sbrs	r15, 6
    4fe4:	05 c0       	rjmp	.+10     	; 0x4ff0 <vfprintf+0xbe>
    4fe6:	98 9c       	mul	r9, r8
    4fe8:	90 2c       	mov	r9, r0
    4fea:	11 24       	eor	r1, r1
    4fec:	98 0e       	add	r9, r24
    4fee:	15 c0       	rjmp	.+42     	; 0x501a <vfprintf+0xe8>
    4ff0:	e8 9c       	mul	r14, r8
    4ff2:	e0 2c       	mov	r14, r0
    4ff4:	11 24       	eor	r1, r1
    4ff6:	e8 0e       	add	r14, r24
    4ff8:	f0 e2       	ldi	r31, 0x20	; 32
    4ffa:	ff 2a       	or	r15, r31
    4ffc:	0e c0       	rjmp	.+28     	; 0x501a <vfprintf+0xe8>
    4ffe:	9e 32       	cpi	r25, 0x2E	; 46
    5000:	29 f4       	brne	.+10     	; 0x500c <vfprintf+0xda>
    5002:	f6 fc       	sbrc	r15, 6
    5004:	6b c1       	rjmp	.+726    	; 0x52dc <vfprintf+0x3aa>
    5006:	40 e4       	ldi	r20, 0x40	; 64
    5008:	f4 2a       	or	r15, r20
    500a:	07 c0       	rjmp	.+14     	; 0x501a <vfprintf+0xe8>
    500c:	9c 36       	cpi	r25, 0x6C	; 108
    500e:	19 f4       	brne	.+6      	; 0x5016 <vfprintf+0xe4>
    5010:	50 e8       	ldi	r21, 0x80	; 128
    5012:	f5 2a       	or	r15, r21
    5014:	02 c0       	rjmp	.+4      	; 0x501a <vfprintf+0xe8>
    5016:	98 36       	cpi	r25, 0x68	; 104
    5018:	49 f4       	brne	.+18     	; 0x502c <vfprintf+0xfa>
    501a:	f2 01       	movw	r30, r4
    501c:	23 fd       	sbrc	r18, 3
    501e:	95 91       	lpm	r25, Z+
    5020:	23 ff       	sbrs	r18, 3
    5022:	91 91       	ld	r25, Z+
    5024:	2f 01       	movw	r4, r30
    5026:	99 23       	and	r25, r25
    5028:	09 f0       	breq	.+2      	; 0x502c <vfprintf+0xfa>
    502a:	b8 cf       	rjmp	.-144    	; 0x4f9c <vfprintf+0x6a>
    502c:	89 2f       	mov	r24, r25
    502e:	85 54       	subi	r24, 0x45	; 69
    5030:	83 30       	cpi	r24, 0x03	; 3
    5032:	18 f0       	brcs	.+6      	; 0x503a <vfprintf+0x108>
    5034:	80 52       	subi	r24, 0x20	; 32
    5036:	83 30       	cpi	r24, 0x03	; 3
    5038:	38 f4       	brcc	.+14     	; 0x5048 <vfprintf+0x116>
    503a:	44 e0       	ldi	r20, 0x04	; 4
    503c:	50 e0       	ldi	r21, 0x00	; 0
    503e:	a4 0e       	add	r10, r20
    5040:	b5 1e       	adc	r11, r21
    5042:	5f e3       	ldi	r21, 0x3F	; 63
    5044:	59 83       	std	Y+1, r21	; 0x01
    5046:	0f c0       	rjmp	.+30     	; 0x5066 <vfprintf+0x134>
    5048:	93 36       	cpi	r25, 0x63	; 99
    504a:	31 f0       	breq	.+12     	; 0x5058 <vfprintf+0x126>
    504c:	93 37       	cpi	r25, 0x73	; 115
    504e:	79 f0       	breq	.+30     	; 0x506e <vfprintf+0x13c>
    5050:	93 35       	cpi	r25, 0x53	; 83
    5052:	09 f0       	breq	.+2      	; 0x5056 <vfprintf+0x124>
    5054:	56 c0       	rjmp	.+172    	; 0x5102 <vfprintf+0x1d0>
    5056:	20 c0       	rjmp	.+64     	; 0x5098 <vfprintf+0x166>
    5058:	f5 01       	movw	r30, r10
    505a:	80 81       	ld	r24, Z
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	42 e0       	ldi	r20, 0x02	; 2
    5060:	50 e0       	ldi	r21, 0x00	; 0
    5062:	a4 0e       	add	r10, r20
    5064:	b5 1e       	adc	r11, r21
    5066:	61 01       	movw	r12, r2
    5068:	01 e0       	ldi	r16, 0x01	; 1
    506a:	10 e0       	ldi	r17, 0x00	; 0
    506c:	12 c0       	rjmp	.+36     	; 0x5092 <vfprintf+0x160>
    506e:	f5 01       	movw	r30, r10
    5070:	c0 80       	ld	r12, Z
    5072:	d1 80       	ldd	r13, Z+1	; 0x01
    5074:	f6 fc       	sbrc	r15, 6
    5076:	03 c0       	rjmp	.+6      	; 0x507e <vfprintf+0x14c>
    5078:	6f ef       	ldi	r22, 0xFF	; 255
    507a:	7f ef       	ldi	r23, 0xFF	; 255
    507c:	02 c0       	rjmp	.+4      	; 0x5082 <vfprintf+0x150>
    507e:	69 2d       	mov	r22, r9
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	42 e0       	ldi	r20, 0x02	; 2
    5084:	50 e0       	ldi	r21, 0x00	; 0
    5086:	a4 0e       	add	r10, r20
    5088:	b5 1e       	adc	r11, r21
    508a:	c6 01       	movw	r24, r12
    508c:	0e 94 81 29 	call	0x5302	; 0x5302 <strnlen>
    5090:	8c 01       	movw	r16, r24
    5092:	5f e7       	ldi	r21, 0x7F	; 127
    5094:	f5 22       	and	r15, r21
    5096:	14 c0       	rjmp	.+40     	; 0x50c0 <vfprintf+0x18e>
    5098:	f5 01       	movw	r30, r10
    509a:	c0 80       	ld	r12, Z
    509c:	d1 80       	ldd	r13, Z+1	; 0x01
    509e:	f6 fc       	sbrc	r15, 6
    50a0:	03 c0       	rjmp	.+6      	; 0x50a8 <vfprintf+0x176>
    50a2:	6f ef       	ldi	r22, 0xFF	; 255
    50a4:	7f ef       	ldi	r23, 0xFF	; 255
    50a6:	02 c0       	rjmp	.+4      	; 0x50ac <vfprintf+0x17a>
    50a8:	69 2d       	mov	r22, r9
    50aa:	70 e0       	ldi	r23, 0x00	; 0
    50ac:	42 e0       	ldi	r20, 0x02	; 2
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	a4 0e       	add	r10, r20
    50b2:	b5 1e       	adc	r11, r21
    50b4:	c6 01       	movw	r24, r12
    50b6:	0e 94 76 29 	call	0x52ec	; 0x52ec <strnlen_P>
    50ba:	8c 01       	movw	r16, r24
    50bc:	50 e8       	ldi	r21, 0x80	; 128
    50be:	f5 2a       	or	r15, r21
    50c0:	f3 fe       	sbrs	r15, 3
    50c2:	07 c0       	rjmp	.+14     	; 0x50d2 <vfprintf+0x1a0>
    50c4:	1a c0       	rjmp	.+52     	; 0x50fa <vfprintf+0x1c8>
    50c6:	80 e2       	ldi	r24, 0x20	; 32
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	b3 01       	movw	r22, r6
    50cc:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    50d0:	ea 94       	dec	r14
    50d2:	8e 2d       	mov	r24, r14
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	08 17       	cp	r16, r24
    50d8:	19 07       	cpc	r17, r25
    50da:	a8 f3       	brcs	.-22     	; 0x50c6 <vfprintf+0x194>
    50dc:	0e c0       	rjmp	.+28     	; 0x50fa <vfprintf+0x1c8>
    50de:	f6 01       	movw	r30, r12
    50e0:	f7 fc       	sbrc	r15, 7
    50e2:	85 91       	lpm	r24, Z+
    50e4:	f7 fe       	sbrs	r15, 7
    50e6:	81 91       	ld	r24, Z+
    50e8:	6f 01       	movw	r12, r30
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	b3 01       	movw	r22, r6
    50ee:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    50f2:	e1 10       	cpse	r14, r1
    50f4:	ea 94       	dec	r14
    50f6:	01 50       	subi	r16, 0x01	; 1
    50f8:	10 40       	sbci	r17, 0x00	; 0
    50fa:	01 15       	cp	r16, r1
    50fc:	11 05       	cpc	r17, r1
    50fe:	79 f7       	brne	.-34     	; 0x50de <vfprintf+0x1ac>
    5100:	ea c0       	rjmp	.+468    	; 0x52d6 <vfprintf+0x3a4>
    5102:	94 36       	cpi	r25, 0x64	; 100
    5104:	11 f0       	breq	.+4      	; 0x510a <vfprintf+0x1d8>
    5106:	99 36       	cpi	r25, 0x69	; 105
    5108:	69 f5       	brne	.+90     	; 0x5164 <vfprintf+0x232>
    510a:	f7 fe       	sbrs	r15, 7
    510c:	08 c0       	rjmp	.+16     	; 0x511e <vfprintf+0x1ec>
    510e:	f5 01       	movw	r30, r10
    5110:	20 81       	ld	r18, Z
    5112:	31 81       	ldd	r19, Z+1	; 0x01
    5114:	42 81       	ldd	r20, Z+2	; 0x02
    5116:	53 81       	ldd	r21, Z+3	; 0x03
    5118:	84 e0       	ldi	r24, 0x04	; 4
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	0a c0       	rjmp	.+20     	; 0x5132 <vfprintf+0x200>
    511e:	f5 01       	movw	r30, r10
    5120:	80 81       	ld	r24, Z
    5122:	91 81       	ldd	r25, Z+1	; 0x01
    5124:	9c 01       	movw	r18, r24
    5126:	44 27       	eor	r20, r20
    5128:	37 fd       	sbrc	r19, 7
    512a:	40 95       	com	r20
    512c:	54 2f       	mov	r21, r20
    512e:	82 e0       	ldi	r24, 0x02	; 2
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	a8 0e       	add	r10, r24
    5134:	b9 1e       	adc	r11, r25
    5136:	9f e6       	ldi	r25, 0x6F	; 111
    5138:	f9 22       	and	r15, r25
    513a:	57 ff       	sbrs	r21, 7
    513c:	09 c0       	rjmp	.+18     	; 0x5150 <vfprintf+0x21e>
    513e:	50 95       	com	r21
    5140:	40 95       	com	r20
    5142:	30 95       	com	r19
    5144:	21 95       	neg	r18
    5146:	3f 4f       	sbci	r19, 0xFF	; 255
    5148:	4f 4f       	sbci	r20, 0xFF	; 255
    514a:	5f 4f       	sbci	r21, 0xFF	; 255
    514c:	e0 e8       	ldi	r30, 0x80	; 128
    514e:	fe 2a       	or	r15, r30
    5150:	ca 01       	movw	r24, r20
    5152:	b9 01       	movw	r22, r18
    5154:	a1 01       	movw	r20, r2
    5156:	2a e0       	ldi	r18, 0x0A	; 10
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	0e 94 c8 29 	call	0x5390	; 0x5390 <__ultoa_invert>
    515e:	d8 2e       	mov	r13, r24
    5160:	d2 18       	sub	r13, r2
    5162:	40 c0       	rjmp	.+128    	; 0x51e4 <vfprintf+0x2b2>
    5164:	95 37       	cpi	r25, 0x75	; 117
    5166:	29 f4       	brne	.+10     	; 0x5172 <vfprintf+0x240>
    5168:	1f 2d       	mov	r17, r15
    516a:	1f 7e       	andi	r17, 0xEF	; 239
    516c:	2a e0       	ldi	r18, 0x0A	; 10
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	1d c0       	rjmp	.+58     	; 0x51ac <vfprintf+0x27a>
    5172:	1f 2d       	mov	r17, r15
    5174:	19 7f       	andi	r17, 0xF9	; 249
    5176:	9f 36       	cpi	r25, 0x6F	; 111
    5178:	61 f0       	breq	.+24     	; 0x5192 <vfprintf+0x260>
    517a:	90 37       	cpi	r25, 0x70	; 112
    517c:	20 f4       	brcc	.+8      	; 0x5186 <vfprintf+0x254>
    517e:	98 35       	cpi	r25, 0x58	; 88
    5180:	09 f0       	breq	.+2      	; 0x5184 <vfprintf+0x252>
    5182:	ac c0       	rjmp	.+344    	; 0x52dc <vfprintf+0x3aa>
    5184:	0f c0       	rjmp	.+30     	; 0x51a4 <vfprintf+0x272>
    5186:	90 37       	cpi	r25, 0x70	; 112
    5188:	39 f0       	breq	.+14     	; 0x5198 <vfprintf+0x266>
    518a:	98 37       	cpi	r25, 0x78	; 120
    518c:	09 f0       	breq	.+2      	; 0x5190 <vfprintf+0x25e>
    518e:	a6 c0       	rjmp	.+332    	; 0x52dc <vfprintf+0x3aa>
    5190:	04 c0       	rjmp	.+8      	; 0x519a <vfprintf+0x268>
    5192:	28 e0       	ldi	r18, 0x08	; 8
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	0a c0       	rjmp	.+20     	; 0x51ac <vfprintf+0x27a>
    5198:	10 61       	ori	r17, 0x10	; 16
    519a:	14 fd       	sbrc	r17, 4
    519c:	14 60       	ori	r17, 0x04	; 4
    519e:	20 e1       	ldi	r18, 0x10	; 16
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	04 c0       	rjmp	.+8      	; 0x51ac <vfprintf+0x27a>
    51a4:	14 fd       	sbrc	r17, 4
    51a6:	16 60       	ori	r17, 0x06	; 6
    51a8:	20 e1       	ldi	r18, 0x10	; 16
    51aa:	32 e0       	ldi	r19, 0x02	; 2
    51ac:	17 ff       	sbrs	r17, 7
    51ae:	08 c0       	rjmp	.+16     	; 0x51c0 <vfprintf+0x28e>
    51b0:	f5 01       	movw	r30, r10
    51b2:	60 81       	ld	r22, Z
    51b4:	71 81       	ldd	r23, Z+1	; 0x01
    51b6:	82 81       	ldd	r24, Z+2	; 0x02
    51b8:	93 81       	ldd	r25, Z+3	; 0x03
    51ba:	44 e0       	ldi	r20, 0x04	; 4
    51bc:	50 e0       	ldi	r21, 0x00	; 0
    51be:	08 c0       	rjmp	.+16     	; 0x51d0 <vfprintf+0x29e>
    51c0:	f5 01       	movw	r30, r10
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	bc 01       	movw	r22, r24
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	42 e0       	ldi	r20, 0x02	; 2
    51ce:	50 e0       	ldi	r21, 0x00	; 0
    51d0:	a4 0e       	add	r10, r20
    51d2:	b5 1e       	adc	r11, r21
    51d4:	a1 01       	movw	r20, r2
    51d6:	0e 94 c8 29 	call	0x5390	; 0x5390 <__ultoa_invert>
    51da:	d8 2e       	mov	r13, r24
    51dc:	d2 18       	sub	r13, r2
    51de:	8f e7       	ldi	r24, 0x7F	; 127
    51e0:	f8 2e       	mov	r15, r24
    51e2:	f1 22       	and	r15, r17
    51e4:	f6 fe       	sbrs	r15, 6
    51e6:	0b c0       	rjmp	.+22     	; 0x51fe <vfprintf+0x2cc>
    51e8:	5e ef       	ldi	r21, 0xFE	; 254
    51ea:	f5 22       	and	r15, r21
    51ec:	d9 14       	cp	r13, r9
    51ee:	38 f4       	brcc	.+14     	; 0x51fe <vfprintf+0x2cc>
    51f0:	f4 fe       	sbrs	r15, 4
    51f2:	07 c0       	rjmp	.+14     	; 0x5202 <vfprintf+0x2d0>
    51f4:	f2 fc       	sbrc	r15, 2
    51f6:	05 c0       	rjmp	.+10     	; 0x5202 <vfprintf+0x2d0>
    51f8:	8f ee       	ldi	r24, 0xEF	; 239
    51fa:	f8 22       	and	r15, r24
    51fc:	02 c0       	rjmp	.+4      	; 0x5202 <vfprintf+0x2d0>
    51fe:	1d 2d       	mov	r17, r13
    5200:	01 c0       	rjmp	.+2      	; 0x5204 <vfprintf+0x2d2>
    5202:	19 2d       	mov	r17, r9
    5204:	f4 fe       	sbrs	r15, 4
    5206:	0d c0       	rjmp	.+26     	; 0x5222 <vfprintf+0x2f0>
    5208:	fe 01       	movw	r30, r28
    520a:	ed 0d       	add	r30, r13
    520c:	f1 1d       	adc	r31, r1
    520e:	80 81       	ld	r24, Z
    5210:	80 33       	cpi	r24, 0x30	; 48
    5212:	19 f4       	brne	.+6      	; 0x521a <vfprintf+0x2e8>
    5214:	99 ee       	ldi	r25, 0xE9	; 233
    5216:	f9 22       	and	r15, r25
    5218:	08 c0       	rjmp	.+16     	; 0x522a <vfprintf+0x2f8>
    521a:	1f 5f       	subi	r17, 0xFF	; 255
    521c:	f2 fe       	sbrs	r15, 2
    521e:	05 c0       	rjmp	.+10     	; 0x522a <vfprintf+0x2f8>
    5220:	03 c0       	rjmp	.+6      	; 0x5228 <vfprintf+0x2f6>
    5222:	8f 2d       	mov	r24, r15
    5224:	86 78       	andi	r24, 0x86	; 134
    5226:	09 f0       	breq	.+2      	; 0x522a <vfprintf+0x2f8>
    5228:	1f 5f       	subi	r17, 0xFF	; 255
    522a:	0f 2d       	mov	r16, r15
    522c:	f3 fc       	sbrc	r15, 3
    522e:	14 c0       	rjmp	.+40     	; 0x5258 <vfprintf+0x326>
    5230:	f0 fe       	sbrs	r15, 0
    5232:	0f c0       	rjmp	.+30     	; 0x5252 <vfprintf+0x320>
    5234:	1e 15       	cp	r17, r14
    5236:	10 f0       	brcs	.+4      	; 0x523c <vfprintf+0x30a>
    5238:	9d 2c       	mov	r9, r13
    523a:	0b c0       	rjmp	.+22     	; 0x5252 <vfprintf+0x320>
    523c:	9d 2c       	mov	r9, r13
    523e:	9e 0c       	add	r9, r14
    5240:	91 1a       	sub	r9, r17
    5242:	1e 2d       	mov	r17, r14
    5244:	06 c0       	rjmp	.+12     	; 0x5252 <vfprintf+0x320>
    5246:	80 e2       	ldi	r24, 0x20	; 32
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	b3 01       	movw	r22, r6
    524c:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    5250:	1f 5f       	subi	r17, 0xFF	; 255
    5252:	1e 15       	cp	r17, r14
    5254:	c0 f3       	brcs	.-16     	; 0x5246 <vfprintf+0x314>
    5256:	04 c0       	rjmp	.+8      	; 0x5260 <vfprintf+0x32e>
    5258:	1e 15       	cp	r17, r14
    525a:	10 f4       	brcc	.+4      	; 0x5260 <vfprintf+0x32e>
    525c:	e1 1a       	sub	r14, r17
    525e:	01 c0       	rjmp	.+2      	; 0x5262 <vfprintf+0x330>
    5260:	ee 24       	eor	r14, r14
    5262:	04 ff       	sbrs	r16, 4
    5264:	0f c0       	rjmp	.+30     	; 0x5284 <vfprintf+0x352>
    5266:	80 e3       	ldi	r24, 0x30	; 48
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	b3 01       	movw	r22, r6
    526c:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    5270:	02 ff       	sbrs	r16, 2
    5272:	1d c0       	rjmp	.+58     	; 0x52ae <vfprintf+0x37c>
    5274:	01 fd       	sbrc	r16, 1
    5276:	03 c0       	rjmp	.+6      	; 0x527e <vfprintf+0x34c>
    5278:	88 e7       	ldi	r24, 0x78	; 120
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	0e c0       	rjmp	.+28     	; 0x529a <vfprintf+0x368>
    527e:	88 e5       	ldi	r24, 0x58	; 88
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	0b c0       	rjmp	.+22     	; 0x529a <vfprintf+0x368>
    5284:	80 2f       	mov	r24, r16
    5286:	86 78       	andi	r24, 0x86	; 134
    5288:	91 f0       	breq	.+36     	; 0x52ae <vfprintf+0x37c>
    528a:	01 ff       	sbrs	r16, 1
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <vfprintf+0x360>
    528e:	8b e2       	ldi	r24, 0x2B	; 43
    5290:	01 c0       	rjmp	.+2      	; 0x5294 <vfprintf+0x362>
    5292:	80 e2       	ldi	r24, 0x20	; 32
    5294:	f7 fc       	sbrc	r15, 7
    5296:	8d e2       	ldi	r24, 0x2D	; 45
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	b3 01       	movw	r22, r6
    529c:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52a0:	06 c0       	rjmp	.+12     	; 0x52ae <vfprintf+0x37c>
    52a2:	80 e3       	ldi	r24, 0x30	; 48
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	b3 01       	movw	r22, r6
    52a8:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52ac:	9a 94       	dec	r9
    52ae:	d9 14       	cp	r13, r9
    52b0:	c0 f3       	brcs	.-16     	; 0x52a2 <vfprintf+0x370>
    52b2:	da 94       	dec	r13
    52b4:	f1 01       	movw	r30, r2
    52b6:	ed 0d       	add	r30, r13
    52b8:	f1 1d       	adc	r31, r1
    52ba:	80 81       	ld	r24, Z
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	b3 01       	movw	r22, r6
    52c0:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52c4:	dd 20       	and	r13, r13
    52c6:	a9 f7       	brne	.-22     	; 0x52b2 <vfprintf+0x380>
    52c8:	06 c0       	rjmp	.+12     	; 0x52d6 <vfprintf+0x3a4>
    52ca:	80 e2       	ldi	r24, 0x20	; 32
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	b3 01       	movw	r22, r6
    52d0:	0e 94 9c 29 	call	0x5338	; 0x5338 <fputc>
    52d4:	ea 94       	dec	r14
    52d6:	ee 20       	and	r14, r14
    52d8:	c1 f7       	brne	.-16     	; 0x52ca <vfprintf+0x398>
    52da:	43 ce       	rjmp	.-890    	; 0x4f62 <vfprintf+0x30>
    52dc:	f3 01       	movw	r30, r6
    52de:	66 81       	ldd	r22, Z+6	; 0x06
    52e0:	77 81       	ldd	r23, Z+7	; 0x07
    52e2:	cb 01       	movw	r24, r22
    52e4:	2b 96       	adiw	r28, 0x0b	; 11
    52e6:	e2 e1       	ldi	r30, 0x12	; 18
    52e8:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__epilogue_restores__>

000052ec <strnlen_P>:
    52ec:	fc 01       	movw	r30, r24
    52ee:	05 90       	lpm	r0, Z+
    52f0:	61 50       	subi	r22, 0x01	; 1
    52f2:	70 40       	sbci	r23, 0x00	; 0
    52f4:	01 10       	cpse	r0, r1
    52f6:	d8 f7       	brcc	.-10     	; 0x52ee <strnlen_P+0x2>
    52f8:	80 95       	com	r24
    52fa:	90 95       	com	r25
    52fc:	8e 0f       	add	r24, r30
    52fe:	9f 1f       	adc	r25, r31
    5300:	08 95       	ret

00005302 <strnlen>:
    5302:	fc 01       	movw	r30, r24
    5304:	61 50       	subi	r22, 0x01	; 1
    5306:	70 40       	sbci	r23, 0x00	; 0
    5308:	01 90       	ld	r0, Z+
    530a:	01 10       	cpse	r0, r1
    530c:	d8 f7       	brcc	.-10     	; 0x5304 <strnlen+0x2>
    530e:	80 95       	com	r24
    5310:	90 95       	com	r25
    5312:	8e 0f       	add	r24, r30
    5314:	9f 1f       	adc	r25, r31
    5316:	08 95       	ret

00005318 <strrev>:
    5318:	dc 01       	movw	r26, r24
    531a:	fc 01       	movw	r30, r24
    531c:	67 2f       	mov	r22, r23
    531e:	71 91       	ld	r23, Z+
    5320:	77 23       	and	r23, r23
    5322:	e1 f7       	brne	.-8      	; 0x531c <strrev+0x4>
    5324:	32 97       	sbiw	r30, 0x02	; 2
    5326:	04 c0       	rjmp	.+8      	; 0x5330 <strrev+0x18>
    5328:	7c 91       	ld	r23, X
    532a:	6d 93       	st	X+, r22
    532c:	70 83       	st	Z, r23
    532e:	62 91       	ld	r22, -Z
    5330:	ae 17       	cp	r26, r30
    5332:	bf 07       	cpc	r27, r31
    5334:	c8 f3       	brcs	.-14     	; 0x5328 <strrev+0x10>
    5336:	08 95       	ret

00005338 <fputc>:
    5338:	0f 93       	push	r16
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	8c 01       	movw	r16, r24
    5342:	eb 01       	movw	r28, r22
    5344:	8b 81       	ldd	r24, Y+3	; 0x03
    5346:	81 ff       	sbrs	r24, 1
    5348:	1b c0       	rjmp	.+54     	; 0x5380 <fputc+0x48>
    534a:	82 ff       	sbrs	r24, 2
    534c:	0d c0       	rjmp	.+26     	; 0x5368 <fputc+0x30>
    534e:	2e 81       	ldd	r18, Y+6	; 0x06
    5350:	3f 81       	ldd	r19, Y+7	; 0x07
    5352:	8c 81       	ldd	r24, Y+4	; 0x04
    5354:	9d 81       	ldd	r25, Y+5	; 0x05
    5356:	28 17       	cp	r18, r24
    5358:	39 07       	cpc	r19, r25
    535a:	64 f4       	brge	.+24     	; 0x5374 <fputc+0x3c>
    535c:	e8 81       	ld	r30, Y
    535e:	f9 81       	ldd	r31, Y+1	; 0x01
    5360:	01 93       	st	Z+, r16
    5362:	f9 83       	std	Y+1, r31	; 0x01
    5364:	e8 83       	st	Y, r30
    5366:	06 c0       	rjmp	.+12     	; 0x5374 <fputc+0x3c>
    5368:	e8 85       	ldd	r30, Y+8	; 0x08
    536a:	f9 85       	ldd	r31, Y+9	; 0x09
    536c:	80 2f       	mov	r24, r16
    536e:	09 95       	icall
    5370:	89 2b       	or	r24, r25
    5372:	31 f4       	brne	.+12     	; 0x5380 <fputc+0x48>
    5374:	8e 81       	ldd	r24, Y+6	; 0x06
    5376:	9f 81       	ldd	r25, Y+7	; 0x07
    5378:	01 96       	adiw	r24, 0x01	; 1
    537a:	9f 83       	std	Y+7, r25	; 0x07
    537c:	8e 83       	std	Y+6, r24	; 0x06
    537e:	02 c0       	rjmp	.+4      	; 0x5384 <fputc+0x4c>
    5380:	0f ef       	ldi	r16, 0xFF	; 255
    5382:	1f ef       	ldi	r17, 0xFF	; 255
    5384:	c8 01       	movw	r24, r16
    5386:	df 91       	pop	r29
    5388:	cf 91       	pop	r28
    538a:	1f 91       	pop	r17
    538c:	0f 91       	pop	r16
    538e:	08 95       	ret

00005390 <__ultoa_invert>:
    5390:	fa 01       	movw	r30, r20
    5392:	aa 27       	eor	r26, r26
    5394:	28 30       	cpi	r18, 0x08	; 8
    5396:	51 f1       	breq	.+84     	; 0x53ec <__ultoa_invert+0x5c>
    5398:	20 31       	cpi	r18, 0x10	; 16
    539a:	81 f1       	breq	.+96     	; 0x53fc <__ultoa_invert+0x6c>
    539c:	e8 94       	clt
    539e:	6f 93       	push	r22
    53a0:	6e 7f       	andi	r22, 0xFE	; 254
    53a2:	6e 5f       	subi	r22, 0xFE	; 254
    53a4:	7f 4f       	sbci	r23, 0xFF	; 255
    53a6:	8f 4f       	sbci	r24, 0xFF	; 255
    53a8:	9f 4f       	sbci	r25, 0xFF	; 255
    53aa:	af 4f       	sbci	r26, 0xFF	; 255
    53ac:	b1 e0       	ldi	r27, 0x01	; 1
    53ae:	3e d0       	rcall	.+124    	; 0x542c <__ultoa_invert+0x9c>
    53b0:	b4 e0       	ldi	r27, 0x04	; 4
    53b2:	3c d0       	rcall	.+120    	; 0x542c <__ultoa_invert+0x9c>
    53b4:	67 0f       	add	r22, r23
    53b6:	78 1f       	adc	r23, r24
    53b8:	89 1f       	adc	r24, r25
    53ba:	9a 1f       	adc	r25, r26
    53bc:	a1 1d       	adc	r26, r1
    53be:	68 0f       	add	r22, r24
    53c0:	79 1f       	adc	r23, r25
    53c2:	8a 1f       	adc	r24, r26
    53c4:	91 1d       	adc	r25, r1
    53c6:	a1 1d       	adc	r26, r1
    53c8:	6a 0f       	add	r22, r26
    53ca:	71 1d       	adc	r23, r1
    53cc:	81 1d       	adc	r24, r1
    53ce:	91 1d       	adc	r25, r1
    53d0:	a1 1d       	adc	r26, r1
    53d2:	20 d0       	rcall	.+64     	; 0x5414 <__ultoa_invert+0x84>
    53d4:	09 f4       	brne	.+2      	; 0x53d8 <__ultoa_invert+0x48>
    53d6:	68 94       	set
    53d8:	3f 91       	pop	r19
    53da:	2a e0       	ldi	r18, 0x0A	; 10
    53dc:	26 9f       	mul	r18, r22
    53de:	11 24       	eor	r1, r1
    53e0:	30 19       	sub	r19, r0
    53e2:	30 5d       	subi	r19, 0xD0	; 208
    53e4:	31 93       	st	Z+, r19
    53e6:	de f6       	brtc	.-74     	; 0x539e <__ultoa_invert+0xe>
    53e8:	cf 01       	movw	r24, r30
    53ea:	08 95       	ret
    53ec:	46 2f       	mov	r20, r22
    53ee:	47 70       	andi	r20, 0x07	; 7
    53f0:	40 5d       	subi	r20, 0xD0	; 208
    53f2:	41 93       	st	Z+, r20
    53f4:	b3 e0       	ldi	r27, 0x03	; 3
    53f6:	0f d0       	rcall	.+30     	; 0x5416 <__ultoa_invert+0x86>
    53f8:	c9 f7       	brne	.-14     	; 0x53ec <__ultoa_invert+0x5c>
    53fa:	f6 cf       	rjmp	.-20     	; 0x53e8 <__ultoa_invert+0x58>
    53fc:	46 2f       	mov	r20, r22
    53fe:	4f 70       	andi	r20, 0x0F	; 15
    5400:	40 5d       	subi	r20, 0xD0	; 208
    5402:	4a 33       	cpi	r20, 0x3A	; 58
    5404:	18 f0       	brcs	.+6      	; 0x540c <__ultoa_invert+0x7c>
    5406:	49 5d       	subi	r20, 0xD9	; 217
    5408:	31 fd       	sbrc	r19, 1
    540a:	40 52       	subi	r20, 0x20	; 32
    540c:	41 93       	st	Z+, r20
    540e:	02 d0       	rcall	.+4      	; 0x5414 <__ultoa_invert+0x84>
    5410:	a9 f7       	brne	.-22     	; 0x53fc <__ultoa_invert+0x6c>
    5412:	ea cf       	rjmp	.-44     	; 0x53e8 <__ultoa_invert+0x58>
    5414:	b4 e0       	ldi	r27, 0x04	; 4
    5416:	a6 95       	lsr	r26
    5418:	97 95       	ror	r25
    541a:	87 95       	ror	r24
    541c:	77 95       	ror	r23
    541e:	67 95       	ror	r22
    5420:	ba 95       	dec	r27
    5422:	c9 f7       	brne	.-14     	; 0x5416 <__ultoa_invert+0x86>
    5424:	00 97       	sbiw	r24, 0x00	; 0
    5426:	61 05       	cpc	r22, r1
    5428:	71 05       	cpc	r23, r1
    542a:	08 95       	ret
    542c:	9b 01       	movw	r18, r22
    542e:	ac 01       	movw	r20, r24
    5430:	0a 2e       	mov	r0, r26
    5432:	06 94       	lsr	r0
    5434:	57 95       	ror	r21
    5436:	47 95       	ror	r20
    5438:	37 95       	ror	r19
    543a:	27 95       	ror	r18
    543c:	ba 95       	dec	r27
    543e:	c9 f7       	brne	.-14     	; 0x5432 <__ultoa_invert+0xa2>
    5440:	62 0f       	add	r22, r18
    5442:	73 1f       	adc	r23, r19
    5444:	84 1f       	adc	r24, r20
    5446:	95 1f       	adc	r25, r21
    5448:	a0 1d       	adc	r26, r0
    544a:	08 95       	ret

0000544c <_exit>:
    544c:	f8 94       	cli

0000544e <__stop_program>:
    544e:	ff cf       	rjmp	.-2      	; 0x544e <__stop_program>
