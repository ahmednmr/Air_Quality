
Air_Quality_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000252  00800060  000054c6  0000555a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008002b2  008002b2  000057ac  2**0
                  ALLOC
  3 .stab         00004e6c  00000000  00000000  000057ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019a4  00000000  00000000  0000a618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c11c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c2ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010374  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000104f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000107b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <main>
      8a:	0c 94 61 2a 	jmp	0x54c2	; 0x54c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 27 	jmp	0x4e18	; 0x4e18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e9       	ldi	r26, 0x9B	; 155
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 27 	jmp	0x4e18	; 0x4e18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e9       	ldi	r24, 0x9B	; 155
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 27 	jmp	0x4e28	; 0x4e28 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e9       	ldi	r22, 0x9B	; 155
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 27 	jmp	0x4e38	; 0x4e38 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 38 27 	jmp	0x4e70	; 0x4e70 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <init_UART>:




void init_UART(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <init_UART+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	unsigned int Value_of_UBBR = 0;
     ca8:	1a 82       	std	Y+2, r1	; 0x02
     caa:	19 82       	std	Y+1, r1	; 0x01


//	    UCSRA= (1<<U2X);
		UCSRB = (1 << RXEN) | (1 << TXEN)|(1<<RXCIE);
     cac:	ea e2       	ldi	r30, 0x2A	; 42
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	88 e9       	ldi	r24, 0x98	; 152
     cb2:	80 83       	st	Z, r24
       UCSRC = (1 << URSEL) | (3 << UCSZ0);
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	86 e8       	ldi	r24, 0x86	; 134
     cba:	80 83       	st	Z, r24
				UBRRL = 51;
     cbc:	e9 e2       	ldi	r30, 0x29	; 41
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	83 e3       	ldi	r24, 0x33	; 51
     cc2:	80 83       	st	Z, r24
				UBRRH =0;
     cc4:	e0 e4       	ldi	r30, 0x40	; 64
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <UART_SendChar>:


void UART_SendChar(char data)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSRA & (1<<UDRE))) ;  /* Wait for empty transmit buffer */
     ce0:	eb e2       	ldi	r30, 0x2B	; 43
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	80 72       	andi	r24, 0x20	; 32
     cec:	90 70       	andi	r25, 0x00	; 0
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	b9 f3       	breq	.-18     	; 0xce0 <UART_SendChar+0xc>

	UDR = data;                     /* Put data into buffer, sends the data */
     cf2:	ec e2       	ldi	r30, 0x2C	; 44
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	80 83       	st	Z, r24
}
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <UART_getChar>:


char UART_getChar(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1<<RXC)));   /* Wait until reveived flag set */
     d0a:	eb e2       	ldi	r30, 0x2B	; 43
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	88 23       	and	r24, r24
     d12:	dc f7       	brge	.-10     	; 0xd0a <UART_getChar+0x8>

	return UDR;                   /* Return data in received buffer */
     d14:	ec e2       	ldi	r30, 0x2C	; 44
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <UART_SEND_string>:


void UART_SEND_string(char *array)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <UART_SEND_string+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <UART_SEND_string+0x8>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     d30:	1a 82       	std	Y+2, r1	; 0x02
     d32:	19 82       	std	Y+1, r1	; 0x01
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <UART_SEND_string+0x34>
    while(array[i]!='\0')
    {

    	UART_SendChar(array[i]);
     d36:	29 81       	ldd	r18, Y+1	; 0x01
     d38:	3a 81       	ldd	r19, Y+2	; 0x02
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	80 81       	ld	r24, Z
     d46:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <UART_SendChar>
    	i++;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01


void UART_SEND_string(char *array)
{
	int i=0;
    while(array[i]!='\0')
     d54:	29 81       	ldd	r18, Y+1	; 0x01
     d56:	3a 81       	ldd	r19, Y+2	; 0x02
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	80 81       	ld	r24, Z
     d64:	88 23       	and	r24, r24
     d66:	39 f7       	brne	.-50     	; 0xd36 <UART_SEND_string+0x16>

    	UART_SendChar(array[i]);
    	i++;
    }

}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <UART_SEND_number>:



void UART_SEND_number(int number)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	66 97       	sbiw	r28, 0x16	; 22
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	9e 8b       	std	Y+22, r25	; 0x16
     d8c:	8d 8b       	std	Y+21, r24	; 0x15
   char buffer[20];

   itoa(number,buffer,10);
     d8e:	8d 89       	ldd	r24, Y+21	; 0x15
     d90:	9e 89       	ldd	r25, Y+22	; 0x16
     d92:	9e 01       	movw	r18, r28
     d94:	2f 5f       	subi	r18, 0xFF	; 255
     d96:	3f 4f       	sbci	r19, 0xFF	; 255
     d98:	b9 01       	movw	r22, r18
     d9a:	4a e0       	ldi	r20, 0x0A	; 10
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <itoa>
   UART_SEND_string(buffer);
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>


}
     daa:	66 96       	adiw	r28, 0x16	; 22
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <Set_Call_Back_fun>:


void Set_Call_Back_fun(void (*PTR)(void))
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <Set_Call_Back_fun+0x6>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01

ISR_fun=PTR;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	90 93 b4 02 	sts	0x02B4, r25
     dd2:	80 93 b3 02 	sts	0x02B3, r24


}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <__vector_13>:

ISR (USART_RXC_vect)
{
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62

	ISR_fun();
     e0a:	e0 91 b3 02 	lds	r30, 0x02B3
     e0e:	f0 91 b4 02 	lds	r31, 0x02B4
     e12:	09 95       	icall


}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <TWI_Init>:
#include<avr/delay.h>
#include"i2c.h"


void TWI_Init(void)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62

//	TWCR = 0;
//	TWBR= TWBR_val;

TWSR=0;
     e42:	e1 e2       	ldi	r30, 0x21	; 33
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	10 82       	st	Z, r1
TWBR=0x47;             //50khz
     e48:	e0 e2       	ldi	r30, 0x20	; 32
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	87 e4       	ldi	r24, 0x47	; 71
     e4e:	80 83       	st	Z, r24
TWCR=0x04;
     e50:	e6 e5       	ldi	r30, 0x56	; 86
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	80 83       	st	Z, r24


}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <TWI_Start>:


void TWI_Start(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
     e66:	e6 e5       	ldi	r30, 0x56	; 86
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	84 ea       	ldi	r24, 0xA4	; 164
     e6c:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)) );   		//Wait for TWINT flag set. This indicates that the
     e6e:	e6 e5       	ldi	r30, 0x56	; 86
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 23       	and	r24, r24
     e76:	dc f7       	brge	.-10     	; 0xe6e <TWI_Start+0x10>

	}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <TWI_SendAddress>:



void TWI_SendAddress(unsigned char address)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01


	TWDR = address;
     e8a:	e3 e2       	ldi	r30, 0x23	; 35
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     e92:	e6 e5       	ldi	r30, 0x56	; 86
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	84 e8       	ldi	r24, 0x84	; 132
     e98:	80 83       	st	Z, r24
                                     	//in TWCR to start transmission of address

	while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     e9a:	e6 e5       	ldi	r30, 0x56	; 86
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	dc f7       	brge	.-10     	; 0xe9a <TWI_SendAddress+0x1c>

}
     ea4:	0f 90       	pop	r0
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <TWI_SendData>:

void TWI_SendData(unsigned char data)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
     eb8:	e3 e2       	ldi	r30, 0x23	; 35
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     ec0:	e6 e5       	ldi	r30, 0x56	; 86
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	84 e8       	ldi	r24, 0x84	; 132
     ec6:	80 83       	st	Z, r24
	                                   //in TWCR to start transmission of data

	while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     ec8:	e6 e5       	ldi	r30, 0x56	; 86
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 23       	and	r24, r24
     ed0:	dc f7       	brge	.-10     	; 0xec8 <TWI_SendData+0x1c>

	}
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <TWI_ReceiveData_ACK>:

void TWI_ReceiveData_ACK(unsigned char * pu8RxData)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <TWI_ReceiveData_ACK+0x6>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01


	*pu8RxData =0;
     ee8:	e9 81       	ldd	r30, Y+1	; 0x01
     eea:	fa 81       	ldd	r31, Y+2	; 0x02
     eec:	10 82       	st	Z, r1

	TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     eee:	e6 e5       	ldi	r30, 0x56	; 86
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	84 ec       	ldi	r24, 0xC4	; 196
     ef4:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));		//Wait for TWINT flag set. This indicates that the
     ef6:	e6 e5       	ldi	r30, 0x56	; 86
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <TWI_ReceiveData_ACK+0x1c>

	*pu8RxData = TWDR;
     f00:	e3 e2       	ldi	r30, 0x23	; 35
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	80 83       	st	Z, r24

}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <TWI_ReceiveData_NACK>:


void TWI_ReceiveData_NACK(unsigned char * pu8RxData)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <TWI_ReceiveData_NACK+0x6>
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01

	TWCR = (1<<TWINT)|(1<<TWEN);
     f24:	e6 e5       	ldi	r30, 0x56	; 86
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	84 e8       	ldi	r24, 0x84	; 132
     f2a:	80 83       	st	Z, r24


	while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     f2c:	e6 e5       	ldi	r30, 0x56	; 86
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 23       	and	r24, r24
     f34:	dc f7       	brge	.-10     	; 0xf2c <TWI_ReceiveData_NACK+0x16>
	*pu8RxData = TWDR;
     f36:	e3 e2       	ldi	r30, 0x23	; 35
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	80 83       	st	Z, r24


}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <TWI_Stop>:

void TWI_Stop(void)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
     f54:	e6 e5       	ldi	r30, 0x56	; 86
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	84 e9       	ldi	r24, 0x94	; 148
     f5a:	80 83       	st	Z, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <TWI_Read8>:




unsigned char  TWI_Read8(unsigned char DeviceAdd, unsigned char memory_location)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <TWI_Read8+0x6>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t DataByte = 0;
     f72:	19 82       	std	Y+1, r1	; 0x01

	TWI_Start();                      /* Send Start Bit 						 */
     f74:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(DeviceAdd);         /* Send Slave address with Operation Write */
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(memory_location);       /* Send Memory Location Address 			 */
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Start();                      /* Send Restart Bit 						 */
     f84:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(DeviceAdd | 1);     /* Send Slave address with Operation read  */
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	81 60       	ori	r24, 0x01	; 1
     f8c:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_ReceiveData_NACK(&DataByte);
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>
	TWI_Stop();
     f98:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

	return DataByte;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01

}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <TWI_Read16>:

unsigned char TWI_Read16(unsigned char DeviceAdd,unsigned char memory_location)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <TWI_Read16+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <TWI_Read16+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8c 83       	std	Y+4, r24	; 0x04
     fba:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t u16Data = 0;
     fbc:	1a 82       	std	Y+2, r1	; 0x02
     fbe:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Data = 0;
     fc0:	1b 82       	std	Y+3, r1	; 0x03

	TWI_Start();                      /* Send Start Bit 						 */
     fc2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(DeviceAdd);         /* Send Slave address with Operation Write */
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(memory_location);       /* Send Memory Location Address 			 */
     fcc:	8d 81       	ldd	r24, Y+5	; 0x05
     fce:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Start();                      /* Send Restart Bit 						 */
     fd2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(DeviceAdd | 1);     /* Send Slave address with Operation read  */
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_ReceiveData_ACK(&u8Data);  //read 2 or 3 bytes ?
     fde:	ce 01       	movw	r24, r28
     fe0:	03 96       	adiw	r24, 0x03	; 3
     fe2:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
	u16Data = u8Data<<8;
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	98 2f       	mov	r25, r24
     fee:	88 27       	eor	r24, r24
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	TWI_ReceiveData_NACK(&u8Data);
     ff4:	ce 01       	movw	r24, r28
     ff6:	03 96       	adiw	r24, 0x03	; 3
     ff8:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>
	TWI_Stop();
     ffc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

	u16Data |= u8Data;
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	82 2b       	or	r24, r18
    100c:	93 2b       	or	r25, r19
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
	return u16Data;
    1012:	89 81       	ldd	r24, Y+1	; 0x01

}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <TWI_Write8>:

void  TWI_Write8(unsigned char DeviceAdd, unsigned char memory_location, unsigned char DataByte)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <TWI_Write8+0x6>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6a 83       	std	Y+2, r22	; 0x02
    1034:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();                      /* Send Start Bit 						 */
    1036:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(DeviceAdd);         /* Send Slave address with Operation Write */
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(memory_location);       /* Send Memory Location Address 			 */
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(DataByte);
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Stop();
    104c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

}
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <EF_void_LCD_init>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_init()
{
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	c4 55       	subi	r28, 0x54	; 84
    106a:	d0 40       	sbci	r29, 0x00	; 0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
	/* Init Control PIN as Output */
	LCD_EN_DDR |=  (1 << LCD_ENABLE_PIN);
    1076:	a4 e3       	ldi	r26, 0x34	; 52
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e4 e3       	ldi	r30, 0x34	; 52
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	8c 93       	st	X, r24
	LCD_RS_DDR |=	(1 << LCD_RS_PIN) ;
    1084:	a4 e3       	ldi	r26, 0x34	; 52
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e4 e3       	ldi	r30, 0x34	; 52
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24

	/* Init Data PIN as Output 0,1,2,3 */
//	LCD_DATA_DDR  |= 0x0F;

//	LCD_DATA_DDR  |= 0xF0;
	LCD_DATA_DDR  |= ((1 << LCD_DATA0_PIN) | (1 << LCD_DATA1_PIN) | (1 << LCD_DATA2_PIN) | (1 << LCD_DATA3_PIN));
    1092:	a7 e3       	ldi	r26, 0x37	; 55
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e7 e3       	ldi	r30, 0x37	; 55
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 6f       	ori	r24, 0xF0	; 240
    109e:	8c 93       	st	X, r24

	LCD_DATA_PORT |= 0x00;
    10a0:	a8 e3       	ldi	r26, 0x38	; 56
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e8 e3       	ldi	r30, 0x38	; 56
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8c 93       	st	X, r24
	/* after power up , delay 10ms should be existed */
	LCD_4BIT_Write_Init(0x30);
    10ac:	80 e3       	ldi	r24, 0x30	; 48
    10ae:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_4BIT_Write_Init>
    10b2:	fe 01       	movw	r30, r28
    10b4:	ef 5a       	subi	r30, 0xAF	; 175
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e2       	ldi	r26, 0x20	; 32
    10be:	b1 e4       	ldi	r27, 0x41	; 65
    10c0:	80 83       	st	Z, r24
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	a2 83       	std	Z+2, r26	; 0x02
    10c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	8e 01       	movw	r16, r28
    10ca:	03 5b       	subi	r16, 0xB3	; 179
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
    10ce:	fe 01       	movw	r30, r28
    10d0:	ef 5a       	subi	r30, 0xAF	; 175
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a ef       	ldi	r20, 0xFA	; 250
    10e2:	54 e4       	ldi	r21, 0x44	; 68
    10e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	f8 01       	movw	r30, r16
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f6:	fe 01       	movw	r30, r28
    10f8:	e3 5b       	subi	r30, 0xB3	; 179
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	44 f4       	brge	.+16     	; 0x1124 <EF_void_LCD_init+0xc8>
		__ticks = 1;
    1114:	fe 01       	movw	r30, r28
    1116:	e5 5b       	subi	r30, 0xB5	; 181
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
    1122:	64 c0       	rjmp	.+200    	; 0x11ec <EF_void_LCD_init+0x190>
	else if (__tmp > 65535)
    1124:	fe 01       	movw	r30, r28
    1126:	e3 5b       	subi	r30, 0xB3	; 179
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	4f e7       	ldi	r20, 0x7F	; 127
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    113e:	18 16       	cp	r1, r24
    1140:	0c f0       	brlt	.+2      	; 0x1144 <EF_void_LCD_init+0xe8>
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <EF_void_LCD_init+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	fe 01       	movw	r30, r28
    1146:	ef 5a       	subi	r30, 0xAF	; 175
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	8e 01       	movw	r16, r28
    1164:	05 5b       	subi	r16, 0xB5	; 181
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	f8 01       	movw	r30, r16
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	1f c0       	rjmp	.+62     	; 0x11ba <EF_void_LCD_init+0x15e>
    117c:	fe 01       	movw	r30, r28
    117e:	e7 5b       	subi	r30, 0xB7	; 183
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	88 ec       	ldi	r24, 0xC8	; 200
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    118a:	fe 01       	movw	r30, r28
    118c:	e7 5b       	subi	r30, 0xB7	; 183
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <EF_void_LCD_init+0x138>
    1198:	fe 01       	movw	r30, r28
    119a:	e7 5b       	subi	r30, 0xB7	; 183
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	de 01       	movw	r26, r28
    11a4:	a5 5b       	subi	r26, 0xB5	; 181
    11a6:	bf 4f       	sbci	r27, 0xFF	; 255
    11a8:	fe 01       	movw	r30, r28
    11aa:	e5 5b       	subi	r30, 0xB5	; 181
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e5 5b       	subi	r30, 0xB5	; 181
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	d1 f6       	brne	.-76     	; 0x117c <EF_void_LCD_init+0x120>
    11c8:	27 c0       	rjmp	.+78     	; 0x1218 <EF_void_LCD_init+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ca:	8e 01       	movw	r16, r28
    11cc:	05 5b       	subi	r16, 0xB5	; 181
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	fe 01       	movw	r30, r28
    11d2:	e3 5b       	subi	r30, 0xB3	; 179
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	f8 01       	movw	r30, r16
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	de 01       	movw	r26, r28
    11ee:	a9 5b       	subi	r26, 0xB9	; 185
    11f0:	bf 4f       	sbci	r27, 0xFF	; 255
    11f2:	fe 01       	movw	r30, r28
    11f4:	e5 5b       	subi	r30, 0xB5	; 181
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	8d 93       	st	X+, r24
    11fe:	9c 93       	st	X, r25
    1200:	fe 01       	movw	r30, r28
    1202:	e9 5b       	subi	r30, 0xB9	; 185
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <EF_void_LCD_init+0x1ae>
    120e:	fe 01       	movw	r30, r28
    1210:	e9 5b       	subi	r30, 0xB9	; 185
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    1218:	80 e3       	ldi	r24, 0x30	; 48
    121a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_4BIT_Write_Init>
    121e:	fe 01       	movw	r30, r28
    1220:	ed 5b       	subi	r30, 0xBD	; 189
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a0 e2       	ldi	r26, 0x20	; 32
    122a:	b1 e4       	ldi	r27, 0x41	; 65
    122c:	80 83       	st	Z, r24
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	a2 83       	std	Z+2, r26	; 0x02
    1232:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	8e 01       	movw	r16, r28
    1236:	01 5c       	subi	r16, 0xC1	; 193
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	fe 01       	movw	r30, r28
    123c:	ed 5b       	subi	r30, 0xBD	; 189
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a ef       	ldi	r20, 0xFA	; 250
    124e:	54 e4       	ldi	r21, 0x44	; 68
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	f8 01       	movw	r30, r16
    125a:	80 83       	st	Z, r24
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	a2 83       	std	Z+2, r26	; 0x02
    1260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1262:	fe 01       	movw	r30, r28
    1264:	ff 96       	adiw	r30, 0x3f	; 63
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <EF_void_LCD_init+0x22c>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e af       	std	Y+62, r25	; 0x3e
    1284:	8d af       	std	Y+61, r24	; 0x3d
    1286:	46 c0       	rjmp	.+140    	; 0x1314 <EF_void_LCD_init+0x2b8>
	else if (__tmp > 65535)
    1288:	fe 01       	movw	r30, r28
    128a:	ff 96       	adiw	r30, 0x3f	; 63
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	3f ef       	ldi	r19, 0xFF	; 255
    1298:	4f e7       	ldi	r20, 0x7F	; 127
    129a:	57 e4       	ldi	r21, 0x47	; 71
    129c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12a0:	18 16       	cp	r1, r24
    12a2:	64 f5       	brge	.+88     	; 0x12fc <EF_void_LCD_init+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a4:	fe 01       	movw	r30, r28
    12a6:	ed 5b       	subi	r30, 0xBD	; 189
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	51 e4       	ldi	r21, 0x41	; 65
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9e af       	std	Y+62, r25	; 0x3e
    12d0:	8d af       	std	Y+61, r24	; 0x3d
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <EF_void_LCD_init+0x296>
    12d4:	88 ec       	ldi	r24, 0xC8	; 200
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c af       	std	Y+60, r25	; 0x3c
    12da:	8b af       	std	Y+59, r24	; 0x3b
    12dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    12de:	9c ad       	ldd	r25, Y+60	; 0x3c
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <EF_void_LCD_init+0x284>
    12e4:	9c af       	std	Y+60, r25	; 0x3c
    12e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	9e af       	std	Y+62, r25	; 0x3e
    12f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	69 f7       	brne	.-38     	; 0x12d4 <EF_void_LCD_init+0x278>
    12fa:	16 c0       	rjmp	.+44     	; 0x1328 <EF_void_LCD_init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fc:	fe 01       	movw	r30, r28
    12fe:	ff 96       	adiw	r30, 0x3f	; 63
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9e af       	std	Y+62, r25	; 0x3e
    1312:	8d af       	std	Y+61, r24	; 0x3d
    1314:	8d ad       	ldd	r24, Y+61	; 0x3d
    1316:	9e ad       	ldd	r25, Y+62	; 0x3e
    1318:	9a af       	std	Y+58, r25	; 0x3a
    131a:	89 af       	std	Y+57, r24	; 0x39
    131c:	89 ad       	ldd	r24, Y+57	; 0x39
    131e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <EF_void_LCD_init+0x2c4>
    1324:	9a af       	std	Y+58, r25	; 0x3a
    1326:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    1328:	80 e3       	ldi	r24, 0x30	; 48
    132a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_4BIT_Write_Init>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a0 e2       	ldi	r26, 0x20	; 32
    1334:	b1 e4       	ldi	r27, 0x41	; 65
    1336:	8d ab       	std	Y+53, r24	; 0x35
    1338:	9e ab       	std	Y+54, r25	; 0x36
    133a:	af ab       	std	Y+55, r26	; 0x37
    133c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133e:	6d a9       	ldd	r22, Y+53	; 0x35
    1340:	7e a9       	ldd	r23, Y+54	; 0x36
    1342:	8f a9       	ldd	r24, Y+55	; 0x37
    1344:	98 ad       	ldd	r25, Y+56	; 0x38
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4a ef       	ldi	r20, 0xFA	; 250
    134c:	54 e4       	ldi	r21, 0x44	; 68
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	89 ab       	std	Y+49, r24	; 0x31
    1358:	9a ab       	std	Y+50, r25	; 0x32
    135a:	ab ab       	std	Y+51, r26	; 0x33
    135c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    135e:	69 a9       	ldd	r22, Y+49	; 0x31
    1360:	7a a9       	ldd	r23, Y+50	; 0x32
    1362:	8b a9       	ldd	r24, Y+51	; 0x33
    1364:	9c a9       	ldd	r25, Y+52	; 0x34
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	2c f4       	brge	.+10     	; 0x1380 <EF_void_LCD_init+0x324>
		__ticks = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	98 ab       	std	Y+48, r25	; 0x30
    137c:	8f a7       	std	Y+47, r24	; 0x2f
    137e:	3f c0       	rjmp	.+126    	; 0x13fe <EF_void_LCD_init+0x3a2>
	else if (__tmp > 65535)
    1380:	69 a9       	ldd	r22, Y+49	; 0x31
    1382:	7a a9       	ldd	r23, Y+50	; 0x32
    1384:	8b a9       	ldd	r24, Y+51	; 0x33
    1386:	9c a9       	ldd	r25, Y+52	; 0x34
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	57 e4       	ldi	r21, 0x47	; 71
    1390:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1394:	18 16       	cp	r1, r24
    1396:	4c f5       	brge	.+82     	; 0x13ea <EF_void_LCD_init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1398:	6d a9       	ldd	r22, Y+53	; 0x35
    139a:	7e a9       	ldd	r23, Y+54	; 0x36
    139c:	8f a9       	ldd	r24, Y+55	; 0x37
    139e:	98 ad       	ldd	r25, Y+56	; 0x38
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e2       	ldi	r20, 0x20	; 32
    13a6:	51 e4       	ldi	r21, 0x41	; 65
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <EF_void_LCD_init+0x384>
    13c2:	88 ec       	ldi	r24, 0xC8	; 200
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9e a7       	std	Y+46, r25	; 0x2e
    13c8:	8d a7       	std	Y+45, r24	; 0x2d
    13ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    13cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <EF_void_LCD_init+0x372>
    13d2:	9e a7       	std	Y+46, r25	; 0x2e
    13d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d8:	98 a9       	ldd	r25, Y+48	; 0x30
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	98 ab       	std	Y+48, r25	; 0x30
    13de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e2:	98 a9       	ldd	r25, Y+48	; 0x30
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	69 f7       	brne	.-38     	; 0x13c2 <EF_void_LCD_init+0x366>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <EF_void_LCD_init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ea:	69 a9       	ldd	r22, Y+49	; 0x31
    13ec:	7a a9       	ldd	r23, Y+50	; 0x32
    13ee:	8b a9       	ldd	r24, Y+51	; 0x33
    13f0:	9c a9       	ldd	r25, Y+52	; 0x34
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	98 ab       	std	Y+48, r25	; 0x30
    13fc:	8f a7       	std	Y+47, r24	; 0x2f
    13fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1400:	98 a9       	ldd	r25, Y+48	; 0x30
    1402:	9c a7       	std	Y+44, r25	; 0x2c
    1404:	8b a7       	std	Y+43, r24	; 0x2b
    1406:	8b a5       	ldd	r24, Y+43	; 0x2b
    1408:	9c a5       	ldd	r25, Y+44	; 0x2c
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <EF_void_LCD_init+0x3ae>
    140e:	9c a7       	std	Y+44, r25	; 0x2c
    1410:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x20);
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <LCD_4BIT_Write_Init>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a0 e2       	ldi	r26, 0x20	; 32
    141e:	b1 e4       	ldi	r27, 0x41	; 65
    1420:	8f a3       	std	Y+39, r24	; 0x27
    1422:	98 a7       	std	Y+40, r25	; 0x28
    1424:	a9 a7       	std	Y+41, r26	; 0x29
    1426:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1428:	6f a1       	ldd	r22, Y+39	; 0x27
    142a:	78 a5       	ldd	r23, Y+40	; 0x28
    142c:	89 a5       	ldd	r24, Y+41	; 0x29
    142e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a ef       	ldi	r20, 0xFA	; 250
    1436:	54 e4       	ldi	r21, 0x44	; 68
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	8b a3       	std	Y+35, r24	; 0x23
    1442:	9c a3       	std	Y+36, r25	; 0x24
    1444:	ad a3       	std	Y+37, r26	; 0x25
    1446:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1448:	6b a1       	ldd	r22, Y+35	; 0x23
    144a:	7c a1       	ldd	r23, Y+36	; 0x24
    144c:	8d a1       	ldd	r24, Y+37	; 0x25
    144e:	9e a1       	ldd	r25, Y+38	; 0x26
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <EF_void_LCD_init+0x40e>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9a a3       	std	Y+34, r25	; 0x22
    1466:	89 a3       	std	Y+33, r24	; 0x21
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <EF_void_LCD_init+0x48c>
	else if (__tmp > 65535)
    146a:	6b a1       	ldd	r22, Y+35	; 0x23
    146c:	7c a1       	ldd	r23, Y+36	; 0x24
    146e:	8d a1       	ldd	r24, Y+37	; 0x25
    1470:	9e a1       	ldd	r25, Y+38	; 0x26
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	57 e4       	ldi	r21, 0x47	; 71
    147a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    147e:	18 16       	cp	r1, r24
    1480:	4c f5       	brge	.+82     	; 0x14d4 <EF_void_LCD_init+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	6f a1       	ldd	r22, Y+39	; 0x27
    1484:	78 a5       	ldd	r23, Y+40	; 0x28
    1486:	89 a5       	ldd	r24, Y+41	; 0x29
    1488:	9a a5       	ldd	r25, Y+42	; 0x2a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9a a3       	std	Y+34, r25	; 0x22
    14a8:	89 a3       	std	Y+33, r24	; 0x21
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <EF_void_LCD_init+0x46e>
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	98 a3       	std	Y+32, r25	; 0x20
    14b2:	8f 8f       	std	Y+31, r24	; 0x1f
    14b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b6:	98 a1       	ldd	r25, Y+32	; 0x20
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <EF_void_LCD_init+0x45c>
    14bc:	98 a3       	std	Y+32, r25	; 0x20
    14be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	89 a1       	ldd	r24, Y+33	; 0x21
    14c2:	9a a1       	ldd	r25, Y+34	; 0x22
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9a a3       	std	Y+34, r25	; 0x22
    14c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	89 a1       	ldd	r24, Y+33	; 0x21
    14cc:	9a a1       	ldd	r25, Y+34	; 0x22
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <EF_void_LCD_init+0x450>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <EF_void_LCD_init+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	6b a1       	ldd	r22, Y+35	; 0x23
    14d6:	7c a1       	ldd	r23, Y+36	; 0x24
    14d8:	8d a1       	ldd	r24, Y+37	; 0x25
    14da:	9e a1       	ldd	r25, Y+38	; 0x26
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9a a3       	std	Y+34, r25	; 0x22
    14e6:	89 a3       	std	Y+33, r24	; 0x21
    14e8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ea:	9a a1       	ldd	r25, Y+34	; 0x22
    14ec:	9e 8f       	std	Y+30, r25	; 0x1e
    14ee:	8d 8f       	std	Y+29, r24	; 0x1d
    14f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <EF_void_LCD_init+0x498>
    14f8:	9e 8f       	std	Y+30, r25	; 0x1e
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e2       	ldi	r26, 0x20	; 32
    1502:	b1 e4       	ldi	r27, 0x41	; 65
    1504:	89 8f       	std	Y+25, r24	; 0x19
    1506:	9a 8f       	std	Y+26, r25	; 0x1a
    1508:	ab 8f       	std	Y+27, r26	; 0x1b
    150a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	69 8d       	ldd	r22, Y+25	; 0x19
    150e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a ef       	ldi	r20, 0xFA	; 250
    151a:	54 e4       	ldi	r21, 0x44	; 68
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8d 8b       	std	Y+21, r24	; 0x15
    1526:	9e 8b       	std	Y+22, r25	; 0x16
    1528:	af 8b       	std	Y+23, r26	; 0x17
    152a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <EF_void_LCD_init+0x4f2>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	8b 8b       	std	Y+19, r24	; 0x13
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <EF_void_LCD_init+0x570>
	else if (__tmp > 65535)
    154e:	6d 89       	ldd	r22, Y+21	; 0x15
    1550:	7e 89       	ldd	r23, Y+22	; 0x16
    1552:	8f 89       	ldd	r24, Y+23	; 0x17
    1554:	98 8d       	ldd	r25, Y+24	; 0x18
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <EF_void_LCD_init+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	69 8d       	ldd	r22, Y+25	; 0x19
    1568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    156a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9c 8b       	std	Y+20, r25	; 0x14
    158c:	8b 8b       	std	Y+19, r24	; 0x13
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <EF_void_LCD_init+0x552>
    1590:	88 ec       	ldi	r24, 0xC8	; 200
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9a 8b       	std	Y+18, r25	; 0x12
    1596:	89 8b       	std	Y+17, r24	; 0x11
    1598:	89 89       	ldd	r24, Y+17	; 0x11
    159a:	9a 89       	ldd	r25, Y+18	; 0x12
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <EF_void_LCD_init+0x540>
    15a0:	9a 8b       	std	Y+18, r25	; 0x12
    15a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	8b 89       	ldd	r24, Y+19	; 0x13
    15a6:	9c 89       	ldd	r25, Y+20	; 0x14
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9c 8b       	std	Y+20, r25	; 0x14
    15ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <EF_void_LCD_init+0x534>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <EF_void_LCD_init+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	98 8b       	std	Y+16, r25	; 0x10
    15d2:	8f 87       	std	Y+15, r24	; 0x0f
    15d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d6:	98 89       	ldd	r25, Y+16	; 0x10
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <EF_void_LCD_init+0x57c>
    15dc:	98 8b       	std	Y+16, r25	; 0x10
    15de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	_delay_ms(10);
	EF_void_LCD_send_command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    15e0:	88 e2       	ldi	r24, 0x28	; 40
    15e2:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    15e6:	8c e0       	ldi	r24, 0x0C	; 12
    15e8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    15ec:	86 e0       	ldi	r24, 0x06	; 6
    15ee:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    15f2:	80 e8       	ldi	r24, 0x80	; 128
    15f4:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 ea       	ldi	r26, 0xA0	; 160
    15fe:	b1 e4       	ldi	r27, 0x41	; 65
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	9c 87       	std	Y+12, r25	; 0x0c
    1604:	ad 87       	std	Y+13, r26	; 0x0d
    1606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a ef       	ldi	r20, 0xFA	; 250
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8f 83       	std	Y+7, r24	; 0x07
    1622:	98 87       	std	Y+8, r25	; 0x08
    1624:	a9 87       	std	Y+9, r26	; 0x09
    1626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <EF_void_LCD_init+0x5ee>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <EF_void_LCD_init+0x66c>
	else if (__tmp > 65535)
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	4c f5       	brge	.+82     	; 0x16b4 <EF_void_LCD_init+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <EF_void_LCD_init+0x64e>
    168c:	88 ec       	ldi	r24, 0xC8	; 200
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <EF_void_LCD_init+0x63c>
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	69 f7       	brne	.-38     	; 0x168c <EF_void_LCD_init+0x630>
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <EF_void_LCD_init+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	9a 83       	std	Y+2, r25	; 0x02
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <EF_void_LCD_init+0x678>
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    16dc:	cc 5a       	subi	r28, 0xAC	; 172
    16de:	df 4f       	sbci	r29, 0xFF	; 255
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <EF_void_LCD_send_command>:
 * PARAMETERS  : U8_t cmnd:  Command User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_command(U8_t cmnd)
{
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	c9 54       	subi	r28, 0x49	; 73
    1702:	d0 40       	sbci	r29, 0x00	; 0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5b       	subi	r30, 0xB7	; 183
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 83       	st	Z, r24
	/*RS and RW will be LOW */

	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    1716:	a5 e3       	ldi	r26, 0x35	; 53
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e3       	ldi	r30, 0x35	; 53
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7b       	andi	r24, 0xBF	; 191
    1722:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    1724:	a8 e3       	ldi	r26, 0x38	; 56
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 e3       	ldi	r30, 0x38	; 56
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8f 77       	andi	r24, 0x7F	; 127
    1730:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    1732:	a8 e3       	ldi	r26, 0x38	; 56
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e8 e3       	ldi	r30, 0x38	; 56
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8f 7b       	andi	r24, 0xBF	; 191
    173e:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8f 7d       	andi	r24, 0xDF	; 223
    174c:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    174e:	a8 e3       	ldi	r26, 0x38	; 56
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e8 e3       	ldi	r30, 0x38	; 56
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 7e       	andi	r24, 0xEF	; 239
    175a:	8c 93       	st	X, r24

	if(cmnd & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    175c:	fe 01       	movw	r30, r28
    175e:	e7 5b       	subi	r30, 0xB7	; 183
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	88 23       	and	r24, r24
    1766:	3c f4       	brge	.+14     	; 0x1776 <EF_void_LCD_send_command+0x82>
    1768:	a8 e3       	ldi	r26, 0x38	; 56
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e8 e3       	ldi	r30, 0x38	; 56
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 68       	ori	r24, 0x80	; 128
    1774:	8c 93       	st	X, r24
	if(cmnd & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    1776:	fe 01       	movw	r30, r28
    1778:	e7 5b       	subi	r30, 0xB7	; 183
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	80 74       	andi	r24, 0x40	; 64
    1784:	90 70       	andi	r25, 0x00	; 0
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	39 f0       	breq	.+14     	; 0x1798 <EF_void_LCD_send_command+0xa4>
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 64       	ori	r24, 0x40	; 64
    1796:	8c 93       	st	X, r24
	if(cmnd & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5b       	subi	r30, 0xB7	; 183
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	80 72       	andi	r24, 0x20	; 32
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	39 f0       	breq	.+14     	; 0x17ba <EF_void_LCD_send_command+0xc6>
    17ac:	a8 e3       	ldi	r26, 0x38	; 56
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e8 e3       	ldi	r30, 0x38	; 56
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 62       	ori	r24, 0x20	; 32
    17b8:	8c 93       	st	X, r24
	if(cmnd & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    17ba:	fe 01       	movw	r30, r28
    17bc:	e7 5b       	subi	r30, 0xB7	; 183
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 81       	ld	r24, Z
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	80 71       	andi	r24, 0x10	; 16
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	39 f0       	breq	.+14     	; 0x17dc <EF_void_LCD_send_command+0xe8>
    17ce:	a8 e3       	ldi	r26, 0x38	; 56
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 e3       	ldi	r30, 0x38	; 56
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 61       	ori	r24, 0x10	; 16
    17da:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    17dc:	a5 e3       	ldi	r26, 0x35	; 53
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e3       	ldi	r30, 0x35	; 53
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	8c 93       	st	X, r24
    17ea:	fe 01       	movw	r30, r28
    17ec:	eb 5b       	subi	r30, 0xBB	; 187
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e4       	ldi	r27, 0x40	; 64
    17f8:	80 83       	st	Z, r24
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	a2 83       	std	Z+2, r26	; 0x02
    17fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1800:	8e 01       	movw	r16, r28
    1802:	0f 5b       	subi	r16, 0xBF	; 191
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	fe 01       	movw	r30, r28
    1808:	eb 5b       	subi	r30, 0xBB	; 187
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	2b ea       	ldi	r18, 0xAB	; 171
    1816:	3a ea       	ldi	r19, 0xAA	; 170
    1818:	4a e2       	ldi	r20, 0x2A	; 42
    181a:	50 e4       	ldi	r21, 0x40	; 64
    181c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	80 83       	st	Z, r24
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182e:	fe 01       	movw	r30, r28
    1830:	ef 5b       	subi	r30, 0xBF	; 191
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	34 f4       	brge	.+12     	; 0x1858 <EF_void_LCD_send_command+0x164>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	fe 01       	movw	r30, r28
    1850:	e0 5c       	subi	r30, 0xC0	; 192
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 83       	st	Z, r24
    1856:	9d c0       	rjmp	.+314    	; 0x1992 <EF_void_LCD_send_command+0x29e>
	else if (__tmp > 255)
    1858:	fe 01       	movw	r30, r28
    185a:	ef 5b       	subi	r30, 0xBF	; 191
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	53 e4       	ldi	r21, 0x43	; 67
    186e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	0c f0       	brlt	.+2      	; 0x1878 <EF_void_LCD_send_command+0x184>
    1876:	7e c0       	rjmp	.+252    	; 0x1974 <EF_void_LCD_send_command+0x280>
	{
		_delay_ms(__us / 1000.0);
    1878:	fe 01       	movw	r30, r28
    187a:	eb 5b       	subi	r30, 0xBB	; 187
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a e7       	ldi	r20, 0x7A	; 122
    188c:	54 e4       	ldi	r21, 0x44	; 68
    188e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8c af       	std	Y+60, r24	; 0x3c
    1898:	9d af       	std	Y+61, r25	; 0x3d
    189a:	ae af       	std	Y+62, r26	; 0x3e
    189c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6c ad       	ldd	r22, Y+60	; 0x3c
    18a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    18a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    18a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a ef       	ldi	r20, 0xFA	; 250
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	88 af       	std	Y+56, r24	; 0x38
    18b8:	99 af       	std	Y+57, r25	; 0x39
    18ba:	aa af       	std	Y+58, r26	; 0x3a
    18bc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    18be:	68 ad       	ldd	r22, Y+56	; 0x38
    18c0:	79 ad       	ldd	r23, Y+57	; 0x39
    18c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    18c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <EF_void_LCD_send_command+0x1ec>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9f ab       	std	Y+55, r25	; 0x37
    18dc:	8e ab       	std	Y+54, r24	; 0x36
    18de:	3f c0       	rjmp	.+126    	; 0x195e <EF_void_LCD_send_command+0x26a>
	else if (__tmp > 65535)
    18e0:	68 ad       	ldd	r22, Y+56	; 0x38
    18e2:	79 ad       	ldd	r23, Y+57	; 0x39
    18e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    18e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <EF_void_LCD_send_command+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    18fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    18fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    18fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9f ab       	std	Y+55, r25	; 0x37
    191e:	8e ab       	std	Y+54, r24	; 0x36
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <EF_void_LCD_send_command+0x24c>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9d ab       	std	Y+53, r25	; 0x35
    1928:	8c ab       	std	Y+52, r24	; 0x34
    192a:	8c a9       	ldd	r24, Y+52	; 0x34
    192c:	9d a9       	ldd	r25, Y+53	; 0x35
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <EF_void_LCD_send_command+0x23a>
    1932:	9d ab       	std	Y+53, r25	; 0x35
    1934:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8e a9       	ldd	r24, Y+54	; 0x36
    1938:	9f a9       	ldd	r25, Y+55	; 0x37
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9f ab       	std	Y+55, r25	; 0x37
    193e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8e a9       	ldd	r24, Y+54	; 0x36
    1942:	9f a9       	ldd	r25, Y+55	; 0x37
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <EF_void_LCD_send_command+0x22e>
    1948:	2d c0       	rjmp	.+90     	; 0x19a4 <EF_void_LCD_send_command+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	68 ad       	ldd	r22, Y+56	; 0x38
    194c:	79 ad       	ldd	r23, Y+57	; 0x39
    194e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1950:	9b ad       	ldd	r25, Y+59	; 0x3b
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9f ab       	std	Y+55, r25	; 0x37
    195c:	8e ab       	std	Y+54, r24	; 0x36
    195e:	8e a9       	ldd	r24, Y+54	; 0x36
    1960:	9f a9       	ldd	r25, Y+55	; 0x37
    1962:	9b ab       	std	Y+51, r25	; 0x33
    1964:	8a ab       	std	Y+50, r24	; 0x32
    1966:	8a a9       	ldd	r24, Y+50	; 0x32
    1968:	9b a9       	ldd	r25, Y+51	; 0x33
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <EF_void_LCD_send_command+0x276>
    196e:	9b ab       	std	Y+51, r25	; 0x33
    1970:	8a ab       	std	Y+50, r24	; 0x32
    1972:	18 c0       	rjmp	.+48     	; 0x19a4 <EF_void_LCD_send_command+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1974:	fe 01       	movw	r30, r28
    1976:	ef 5b       	subi	r30, 0xBF	; 191
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	fe 01       	movw	r30, r28
    198c:	e0 5c       	subi	r30, 0xC0	; 192
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 83       	st	Z, r24
    1992:	fe 01       	movw	r30, r28
    1994:	e0 5c       	subi	r30, 0xC0	; 192
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    199c:	89 a9       	ldd	r24, Y+49	; 0x31
    199e:	8a 95       	dec	r24
    19a0:	f1 f7       	brne	.-4      	; 0x199e <EF_void_LCD_send_command+0x2aa>
    19a2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    19a4:	a5 e3       	ldi	r26, 0x35	; 53
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e5 e3       	ldi	r30, 0x35	; 53
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 77       	andi	r24, 0x7F	; 127
    19b0:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    19b2:	a8 e3       	ldi	r26, 0x38	; 56
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e8 e3       	ldi	r30, 0x38	; 56
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 77       	andi	r24, 0x7F	; 127
    19be:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    19c0:	a8 e3       	ldi	r26, 0x38	; 56
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e8 e3       	ldi	r30, 0x38	; 56
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7b       	andi	r24, 0xBF	; 191
    19cc:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    19ce:	a8 e3       	ldi	r26, 0x38	; 56
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e3       	ldi	r30, 0x38	; 56
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 7d       	andi	r24, 0xDF	; 223
    19da:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    19dc:	a8 e3       	ldi	r26, 0x38	; 56
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e8 e3       	ldi	r30, 0x38	; 56
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7e       	andi	r24, 0xEF	; 239
    19e8:	8c 93       	st	X, r24
	if(cmnd & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5b       	subi	r30, 0xB7	; 183
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 70       	andi	r24, 0x08	; 8
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	39 f0       	breq	.+14     	; 0x1a0c <EF_void_LCD_send_command+0x318>
    19fe:	a8 e3       	ldi	r26, 0x38	; 56
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e8 e3       	ldi	r30, 0x38	; 56
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 68       	ori	r24, 0x80	; 128
    1a0a:	8c 93       	st	X, r24
	if(cmnd & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e7 5b       	subi	r30, 0xB7	; 183
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	84 70       	andi	r24, 0x04	; 4
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <EF_void_LCD_send_command+0x33a>
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 64       	ori	r24, 0x40	; 64
    1a2c:	8c 93       	st	X, r24
	if(cmnd & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e7 5b       	subi	r30, 0xB7	; 183
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	82 70       	andi	r24, 0x02	; 2
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	39 f0       	breq	.+14     	; 0x1a50 <EF_void_LCD_send_command+0x35c>
    1a42:	a8 e3       	ldi	r26, 0x38	; 56
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 62       	ori	r24, 0x20	; 32
    1a4e:	8c 93       	st	X, r24
	if(cmnd & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    1a50:	fe 01       	movw	r30, r28
    1a52:	e7 5b       	subi	r30, 0xB7	; 183
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 81       	ld	r24, Z
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	88 23       	and	r24, r24
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <EF_void_LCD_send_command+0x37e>
    1a64:	a8 e3       	ldi	r26, 0x38	; 56
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    1a72:	a5 e3       	ldi	r26, 0x35	; 53
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 68       	ori	r24, 0x80	; 128
    1a7e:	8c 93       	st	X, r24
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a0 e0       	ldi	r26, 0x00	; 0
    1a86:	b0 e4       	ldi	r27, 0x40	; 64
    1a88:	8d a7       	std	Y+45, r24	; 0x2d
    1a8a:	9e a7       	std	Y+46, r25	; 0x2e
    1a8c:	af a7       	std	Y+47, r26	; 0x2f
    1a8e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a90:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a92:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a96:	98 a9       	ldd	r25, Y+48	; 0x30
    1a98:	2b ea       	ldi	r18, 0xAB	; 171
    1a9a:	3a ea       	ldi	r19, 0xAA	; 170
    1a9c:	4a e2       	ldi	r20, 0x2A	; 42
    1a9e:	50 e4       	ldi	r21, 0x40	; 64
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	89 a7       	std	Y+41, r24	; 0x29
    1aaa:	9a a7       	std	Y+42, r25	; 0x2a
    1aac:	ab a7       	std	Y+43, r26	; 0x2b
    1aae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ab0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ab2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ab4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	1c f4       	brge	.+6      	; 0x1ace <EF_void_LCD_send_command+0x3da>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	88 a7       	std	Y+40, r24	; 0x28
    1acc:	91 c0       	rjmp	.+290    	; 0x1bf0 <EF_void_LCD_send_command+0x4fc>
	else if (__tmp > 255)
    1ace:	69 a5       	ldd	r22, Y+41	; 0x29
    1ad0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ad2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	53 e4       	ldi	r21, 0x43	; 67
    1ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	0c f0       	brlt	.+2      	; 0x1ae8 <EF_void_LCD_send_command+0x3f4>
    1ae6:	7b c0       	rjmp	.+246    	; 0x1bde <EF_void_LCD_send_command+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    1ae8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1aea:	7e a5       	ldd	r23, Y+46	; 0x2e
    1aec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aee:	98 a9       	ldd	r25, Y+48	; 0x30
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8c a3       	std	Y+36, r24	; 0x24
    1b02:	9d a3       	std	Y+37, r25	; 0x25
    1b04:	ae a3       	std	Y+38, r26	; 0x26
    1b06:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	6c a1       	ldd	r22, Y+36	; 0x24
    1b0a:	7d a1       	ldd	r23, Y+37	; 0x25
    1b0c:	8e a1       	ldd	r24, Y+38	; 0x26
    1b0e:	9f a1       	ldd	r25, Y+39	; 0x27
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ef       	ldi	r20, 0xFA	; 250
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	88 a3       	std	Y+32, r24	; 0x20
    1b22:	99 a3       	std	Y+33, r25	; 0x21
    1b24:	aa a3       	std	Y+34, r26	; 0x22
    1b26:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b28:	68 a1       	ldd	r22, Y+32	; 0x20
    1b2a:	79 a1       	ldd	r23, Y+33	; 0x21
    1b2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1b2e:	9b a1       	ldd	r25, Y+35	; 0x23
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <EF_void_LCD_send_command+0x456>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9f 8f       	std	Y+31, r25	; 0x1f
    1b46:	8e 8f       	std	Y+30, r24	; 0x1e
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <EF_void_LCD_send_command+0x4d4>
	else if (__tmp > 65535)
    1b4a:	68 a1       	ldd	r22, Y+32	; 0x20
    1b4c:	79 a1       	ldd	r23, Y+33	; 0x21
    1b4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1b50:	9b a1       	ldd	r25, Y+35	; 0x23
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <EF_void_LCD_send_command+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6c a1       	ldd	r22, Y+36	; 0x24
    1b64:	7d a1       	ldd	r23, Y+37	; 0x25
    1b66:	8e a1       	ldd	r24, Y+38	; 0x26
    1b68:	9f a1       	ldd	r25, Y+39	; 0x27
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9f 8f       	std	Y+31, r25	; 0x1f
    1b88:	8e 8f       	std	Y+30, r24	; 0x1e
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <EF_void_LCD_send_command+0x4b6>
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9d 8f       	std	Y+29, r25	; 0x1d
    1b92:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <EF_void_LCD_send_command+0x4a4>
    1b9c:	9d 8f       	std	Y+29, r25	; 0x1d
    1b9e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ba8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <EF_void_LCD_send_command+0x498>
    1bb2:	24 c0       	rjmp	.+72     	; 0x1bfc <EF_void_LCD_send_command+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	68 a1       	ldd	r22, Y+32	; 0x20
    1bb6:	79 a1       	ldd	r23, Y+33	; 0x21
    1bb8:	8a a1       	ldd	r24, Y+34	; 0x22
    1bba:	9b a1       	ldd	r25, Y+35	; 0x23
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9f 8f       	std	Y+31, r25	; 0x1f
    1bc6:	8e 8f       	std	Y+30, r24	; 0x1e
    1bc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bcc:	9b 8f       	std	Y+27, r25	; 0x1b
    1bce:	8a 8f       	std	Y+26, r24	; 0x1a
    1bd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <EF_void_LCD_send_command+0x4e0>
    1bd8:	9b 8f       	std	Y+27, r25	; 0x1b
    1bda:	8a 8f       	std	Y+26, r24	; 0x1a
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <EF_void_LCD_send_command+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bde:	69 a5       	ldd	r22, Y+41	; 0x29
    1be0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1be2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	88 a7       	std	Y+40, r24	; 0x28
    1bf0:	88 a5       	ldd	r24, Y+40	; 0x28
    1bf2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bf4:	89 8d       	ldd	r24, Y+25	; 0x19
    1bf6:	8a 95       	dec	r24
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <EF_void_LCD_send_command+0x502>
    1bfa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    1bfc:	a5 e3       	ldi	r26, 0x35	; 53
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e3       	ldi	r30, 0x35	; 53
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 77       	andi	r24, 0x7F	; 127
    1c08:	8c 93       	st	X, r24
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a6 e9       	ldi	r26, 0x96	; 150
    1c10:	b3 e4       	ldi	r27, 0x43	; 67
    1c12:	8d 8b       	std	Y+21, r24	; 0x15
    1c14:	9e 8b       	std	Y+22, r25	; 0x16
    1c16:	af 8b       	std	Y+23, r26	; 0x17
    1c18:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c20:	98 8d       	ldd	r25, Y+24	; 0x18
    1c22:	2b ea       	ldi	r18, 0xAB	; 171
    1c24:	3a ea       	ldi	r19, 0xAA	; 170
    1c26:	4a e2       	ldi	r20, 0x2A	; 42
    1c28:	50 e4       	ldi	r21, 0x40	; 64
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	89 8b       	std	Y+17, r24	; 0x11
    1c34:	9a 8b       	std	Y+18, r25	; 0x12
    1c36:	ab 8b       	std	Y+19, r26	; 0x13
    1c38:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c3a:	69 89       	ldd	r22, Y+17	; 0x11
    1c3c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c40:	9c 89       	ldd	r25, Y+20	; 0x14
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	1c f4       	brge	.+6      	; 0x1c58 <EF_void_LCD_send_command+0x564>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	88 8b       	std	Y+16, r24	; 0x10
    1c56:	91 c0       	rjmp	.+290    	; 0x1d7a <EF_void_LCD_send_command+0x686>
	else if (__tmp > 255)
    1c58:	69 89       	ldd	r22, Y+17	; 0x11
    1c5a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4f e7       	ldi	r20, 0x7F	; 127
    1c66:	53 e4       	ldi	r21, 0x43	; 67
    1c68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6c:	18 16       	cp	r1, r24
    1c6e:	0c f0       	brlt	.+2      	; 0x1c72 <EF_void_LCD_send_command+0x57e>
    1c70:	7b c0       	rjmp	.+246    	; 0x1d68 <EF_void_LCD_send_command+0x674>
	{
		_delay_ms(__us / 1000.0);
    1c72:	6d 89       	ldd	r22, Y+21	; 0x15
    1c74:	7e 89       	ldd	r23, Y+22	; 0x16
    1c76:	8f 89       	ldd	r24, Y+23	; 0x17
    1c78:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a e7       	ldi	r20, 0x7A	; 122
    1c80:	54 e4       	ldi	r21, 0x44	; 68
    1c82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8c 87       	std	Y+12, r24	; 0x0c
    1c8c:	9d 87       	std	Y+13, r25	; 0x0d
    1c8e:	ae 87       	std	Y+14, r26	; 0x0e
    1c90:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c94:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c96:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c98:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	88 87       	std	Y+8, r24	; 0x08
    1cac:	99 87       	std	Y+9, r25	; 0x09
    1cae:	aa 87       	std	Y+10, r26	; 0x0a
    1cb0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cb2:	68 85       	ldd	r22, Y+8	; 0x08
    1cb4:	79 85       	ldd	r23, Y+9	; 0x09
    1cb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <EF_void_LCD_send_command+0x5e0>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9f 83       	std	Y+7, r25	; 0x07
    1cd0:	8e 83       	std	Y+6, r24	; 0x06
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <EF_void_LCD_send_command+0x65e>
	else if (__tmp > 65535)
    1cd4:	68 85       	ldd	r22, Y+8	; 0x08
    1cd6:	79 85       	ldd	r23, Y+9	; 0x09
    1cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <EF_void_LCD_send_command+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cee:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cf0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9f 83       	std	Y+7, r25	; 0x07
    1d12:	8e 83       	std	Y+6, r24	; 0x06
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <EF_void_LCD_send_command+0x640>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9d 83       	std	Y+5, r25	; 0x05
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <EF_void_LCD_send_command+0x62e>
    1d26:	9d 83       	std	Y+5, r25	; 0x05
    1d28:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9f 83       	std	Y+7, r25	; 0x07
    1d32:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	9f 81       	ldd	r25, Y+7	; 0x07
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <EF_void_LCD_send_command+0x622>
    1d3c:	24 c0       	rjmp	.+72     	; 0x1d86 <EF_void_LCD_send_command+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	68 85       	ldd	r22, Y+8	; 0x08
    1d40:	79 85       	ldd	r23, Y+9	; 0x09
    1d42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9f 83       	std	Y+7, r25	; 0x07
    1d50:	8e 83       	std	Y+6, r24	; 0x06
    1d52:	8e 81       	ldd	r24, Y+6	; 0x06
    1d54:	9f 81       	ldd	r25, Y+7	; 0x07
    1d56:	9b 83       	std	Y+3, r25	; 0x03
    1d58:	8a 83       	std	Y+2, r24	; 0x02
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <EF_void_LCD_send_command+0x66a>
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <EF_void_LCD_send_command+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d68:	69 89       	ldd	r22, Y+17	; 0x11
    1d6a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	88 8b       	std	Y+16, r24	; 0x10
    1d7a:	88 89       	ldd	r24, Y+16	; 0x10
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	8a 95       	dec	r24
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <EF_void_LCD_send_command+0x68c>
    1d84:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    1d86:	c7 5b       	subi	r28, 0xB7	; 183
    1d88:	df 4f       	sbci	r29, 0xFF	; 255
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <EF_void_LCD_send_data>:
 * PARAMETERS  : U8_t Data:  Data User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_data(char data)
{
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	c9 54       	subi	r28, 0x49	; 73
    1dac:	d0 40       	sbci	r29, 0x00	; 0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	fe 01       	movw	r30, r28
    1dba:	e7 5b       	subi	r30, 0xB7	; 183
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 83       	st	Z, r24
	/*RS will be high and RW will be LOW */
	//LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
    1dc0:	a5 e3       	ldi	r26, 0x35	; 53
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e5 e3       	ldi	r30, 0x35	; 53
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 64       	ori	r24, 0x40	; 64
    1dcc:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    1dce:	a8 e3       	ldi	r26, 0x38	; 56
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e8 e3       	ldi	r30, 0x38	; 56
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 77       	andi	r24, 0x7F	; 127
    1dda:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    1ddc:	a8 e3       	ldi	r26, 0x38	; 56
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e8 e3       	ldi	r30, 0x38	; 56
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8f 7b       	andi	r24, 0xBF	; 191
    1de8:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    1dea:	a8 e3       	ldi	r26, 0x38	; 56
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e8 e3       	ldi	r30, 0x38	; 56
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 7d       	andi	r24, 0xDF	; 223
    1df6:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    1df8:	a8 e3       	ldi	r26, 0x38	; 56
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e8 e3       	ldi	r30, 0x38	; 56
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 7e       	andi	r24, 0xEF	; 239
    1e04:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5b       	subi	r30, 0xB7	; 183
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 23       	and	r24, r24
    1e10:	3c f4       	brge	.+14     	; 0x1e20 <EF_void_LCD_send_data+0x82>
    1e12:	a8 e3       	ldi	r26, 0x38	; 56
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 68       	ori	r24, 0x80	; 128
    1e1e:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    1e20:	fe 01       	movw	r30, r28
    1e22:	e7 5b       	subi	r30, 0xB7	; 183
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	80 74       	andi	r24, 0x40	; 64
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	39 f0       	breq	.+14     	; 0x1e42 <EF_void_LCD_send_data+0xa4>
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 64       	ori	r24, 0x40	; 64
    1e40:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    1e42:	fe 01       	movw	r30, r28
    1e44:	e7 5b       	subi	r30, 0xB7	; 183
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	80 72       	andi	r24, 0x20	; 32
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	39 f0       	breq	.+14     	; 0x1e64 <EF_void_LCD_send_data+0xc6>
    1e56:	a8 e3       	ldi	r26, 0x38	; 56
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e8 e3       	ldi	r30, 0x38	; 56
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	80 62       	ori	r24, 0x20	; 32
    1e62:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    1e64:	fe 01       	movw	r30, r28
    1e66:	e7 5b       	subi	r30, 0xB7	; 183
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	80 71       	andi	r24, 0x10	; 16
    1e72:	90 70       	andi	r25, 0x00	; 0
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	39 f0       	breq	.+14     	; 0x1e86 <EF_void_LCD_send_data+0xe8>
    1e78:	a8 e3       	ldi	r26, 0x38	; 56
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e8 e3       	ldi	r30, 0x38	; 56
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	80 61       	ori	r24, 0x10	; 16
    1e84:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    1e86:	a5 e3       	ldi	r26, 0x35	; 53
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e5 e3       	ldi	r30, 0x35	; 53
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	80 68       	ori	r24, 0x80	; 128
    1e92:	8c 93       	st	X, r24
    1e94:	fe 01       	movw	r30, r28
    1e96:	eb 5b       	subi	r30, 0xBB	; 187
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ea0:	b0 e4       	ldi	r27, 0x40	; 64
    1ea2:	80 83       	st	Z, r24
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	a2 83       	std	Z+2, r26	; 0x02
    1ea8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eaa:	8e 01       	movw	r16, r28
    1eac:	0f 5b       	subi	r16, 0xBF	; 191
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	eb 5b       	subi	r30, 0xBB	; 187
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	2b ea       	ldi	r18, 0xAB	; 171
    1ec0:	3a ea       	ldi	r19, 0xAA	; 170
    1ec2:	4a e2       	ldi	r20, 0x2A	; 42
    1ec4:	50 e4       	ldi	r21, 0x40	; 64
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	f8 01       	movw	r30, r16
    1ed0:	80 83       	st	Z, r24
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	a2 83       	std	Z+2, r26	; 0x02
    1ed6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed8:	fe 01       	movw	r30, r28
    1eda:	ef 5b       	subi	r30, 0xBF	; 191
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	34 f4       	brge	.+12     	; 0x1f02 <EF_void_LCD_send_data+0x164>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e0 5c       	subi	r30, 0xC0	; 192
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 83       	st	Z, r24
    1f00:	9d c0       	rjmp	.+314    	; 0x203c <EF_void_LCD_send_data+0x29e>
	else if (__tmp > 255)
    1f02:	fe 01       	movw	r30, r28
    1f04:	ef 5b       	subi	r30, 0xBF	; 191
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	60 81       	ld	r22, Z
    1f0a:	71 81       	ldd	r23, Z+1	; 0x01
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	53 e4       	ldi	r21, 0x43	; 67
    1f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	0c f0       	brlt	.+2      	; 0x1f22 <EF_void_LCD_send_data+0x184>
    1f20:	7e c0       	rjmp	.+252    	; 0x201e <EF_void_LCD_send_data+0x280>
	{
		_delay_ms(__us / 1000.0);
    1f22:	fe 01       	movw	r30, r28
    1f24:	eb 5b       	subi	r30, 0xBB	; 187
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a e7       	ldi	r20, 0x7A	; 122
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8c af       	std	Y+60, r24	; 0x3c
    1f42:	9d af       	std	Y+61, r25	; 0x3d
    1f44:	ae af       	std	Y+62, r26	; 0x3e
    1f46:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f4a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a ef       	ldi	r20, 0xFA	; 250
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	88 af       	std	Y+56, r24	; 0x38
    1f62:	99 af       	std	Y+57, r25	; 0x39
    1f64:	aa af       	std	Y+58, r26	; 0x3a
    1f66:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f68:	68 ad       	ldd	r22, Y+56	; 0x38
    1f6a:	79 ad       	ldd	r23, Y+57	; 0x39
    1f6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f6e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <EF_void_LCD_send_data+0x1ec>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9f ab       	std	Y+55, r25	; 0x37
    1f86:	8e ab       	std	Y+54, r24	; 0x36
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <EF_void_LCD_send_data+0x26a>
	else if (__tmp > 65535)
    1f8a:	68 ad       	ldd	r22, Y+56	; 0x38
    1f8c:	79 ad       	ldd	r23, Y+57	; 0x39
    1f8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f90:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <EF_void_LCD_send_data+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1fa4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1fa6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fa8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9f ab       	std	Y+55, r25	; 0x37
    1fc8:	8e ab       	std	Y+54, r24	; 0x36
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <EF_void_LCD_send_data+0x24c>
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9d ab       	std	Y+53, r25	; 0x35
    1fd2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fd4:	8c a9       	ldd	r24, Y+52	; 0x34
    1fd6:	9d a9       	ldd	r25, Y+53	; 0x35
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <EF_void_LCD_send_data+0x23a>
    1fdc:	9d ab       	std	Y+53, r25	; 0x35
    1fde:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8e a9       	ldd	r24, Y+54	; 0x36
    1fe2:	9f a9       	ldd	r25, Y+55	; 0x37
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9f ab       	std	Y+55, r25	; 0x37
    1fe8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8e a9       	ldd	r24, Y+54	; 0x36
    1fec:	9f a9       	ldd	r25, Y+55	; 0x37
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <EF_void_LCD_send_data+0x22e>
    1ff2:	2d c0       	rjmp	.+90     	; 0x204e <EF_void_LCD_send_data+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	68 ad       	ldd	r22, Y+56	; 0x38
    1ff6:	79 ad       	ldd	r23, Y+57	; 0x39
    1ff8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ffa:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9f ab       	std	Y+55, r25	; 0x37
    2006:	8e ab       	std	Y+54, r24	; 0x36
    2008:	8e a9       	ldd	r24, Y+54	; 0x36
    200a:	9f a9       	ldd	r25, Y+55	; 0x37
    200c:	9b ab       	std	Y+51, r25	; 0x33
    200e:	8a ab       	std	Y+50, r24	; 0x32
    2010:	8a a9       	ldd	r24, Y+50	; 0x32
    2012:	9b a9       	ldd	r25, Y+51	; 0x33
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <EF_void_LCD_send_data+0x276>
    2018:	9b ab       	std	Y+51, r25	; 0x33
    201a:	8a ab       	std	Y+50, r24	; 0x32
    201c:	18 c0       	rjmp	.+48     	; 0x204e <EF_void_LCD_send_data+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    201e:	fe 01       	movw	r30, r28
    2020:	ef 5b       	subi	r30, 0xBF	; 191
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	fe 01       	movw	r30, r28
    2036:	e0 5c       	subi	r30, 0xC0	; 192
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 83       	st	Z, r24
    203c:	fe 01       	movw	r30, r28
    203e:	e0 5c       	subi	r30, 0xC0	; 192
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2046:	89 a9       	ldd	r24, Y+49	; 0x31
    2048:	8a 95       	dec	r24
    204a:	f1 f7       	brne	.-4      	; 0x2048 <EF_void_LCD_send_data+0x2aa>
    204c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    204e:	a5 e3       	ldi	r26, 0x35	; 53
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e5 e3       	ldi	r30, 0x35	; 53
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8f 77       	andi	r24, 0x7F	; 127
    205a:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    205c:	a8 e3       	ldi	r26, 0x38	; 56
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e8 e3       	ldi	r30, 0x38	; 56
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8f 77       	andi	r24, 0x7F	; 127
    2068:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8f 7b       	andi	r24, 0xBF	; 191
    2076:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2078:	a8 e3       	ldi	r26, 0x38	; 56
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e8 e3       	ldi	r30, 0x38	; 56
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	8f 7d       	andi	r24, 0xDF	; 223
    2084:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2086:	a8 e3       	ldi	r26, 0x38	; 56
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8f 7e       	andi	r24, 0xEF	; 239
    2092:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2094:	fe 01       	movw	r30, r28
    2096:	e7 5b       	subi	r30, 0xB7	; 183
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 70       	andi	r24, 0x08	; 8
    20a2:	90 70       	andi	r25, 0x00	; 0
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	39 f0       	breq	.+14     	; 0x20b6 <EF_void_LCD_send_data+0x318>
    20a8:	a8 e3       	ldi	r26, 0x38	; 56
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e8 e3       	ldi	r30, 0x38	; 56
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 68       	ori	r24, 0x80	; 128
    20b4:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    20b6:	fe 01       	movw	r30, r28
    20b8:	e7 5b       	subi	r30, 0xB7	; 183
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	84 70       	andi	r24, 0x04	; 4
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	39 f0       	breq	.+14     	; 0x20d8 <EF_void_LCD_send_data+0x33a>
    20ca:	a8 e3       	ldi	r26, 0x38	; 56
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e8 e3       	ldi	r30, 0x38	; 56
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	80 64       	ori	r24, 0x40	; 64
    20d6:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    20d8:	fe 01       	movw	r30, r28
    20da:	e7 5b       	subi	r30, 0xB7	; 183
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 81       	ld	r24, Z
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	82 70       	andi	r24, 0x02	; 2
    20e6:	90 70       	andi	r25, 0x00	; 0
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	39 f0       	breq	.+14     	; 0x20fa <EF_void_LCD_send_data+0x35c>
    20ec:	a8 e3       	ldi	r26, 0x38	; 56
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e8 e3       	ldi	r30, 0x38	; 56
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	80 62       	ori	r24, 0x20	; 32
    20f8:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    20fa:	fe 01       	movw	r30, r28
    20fc:	e7 5b       	subi	r30, 0xB7	; 183
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	90 70       	andi	r25, 0x00	; 0
    210a:	88 23       	and	r24, r24
    210c:	39 f0       	breq	.+14     	; 0x211c <EF_void_LCD_send_data+0x37e>
    210e:	a8 e3       	ldi	r26, 0x38	; 56
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e8 e3       	ldi	r30, 0x38	; 56
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 61       	ori	r24, 0x10	; 16
    211a:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    211c:	a5 e3       	ldi	r26, 0x35	; 53
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e5 e3       	ldi	r30, 0x35	; 53
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	8c 93       	st	X, r24
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e0       	ldi	r26, 0x00	; 0
    2130:	b0 e4       	ldi	r27, 0x40	; 64
    2132:	8d a7       	std	Y+45, r24	; 0x2d
    2134:	9e a7       	std	Y+46, r25	; 0x2e
    2136:	af a7       	std	Y+47, r26	; 0x2f
    2138:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    213a:	6d a5       	ldd	r22, Y+45	; 0x2d
    213c:	7e a5       	ldd	r23, Y+46	; 0x2e
    213e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2140:	98 a9       	ldd	r25, Y+48	; 0x30
    2142:	2b ea       	ldi	r18, 0xAB	; 171
    2144:	3a ea       	ldi	r19, 0xAA	; 170
    2146:	4a e2       	ldi	r20, 0x2A	; 42
    2148:	50 e4       	ldi	r21, 0x40	; 64
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	89 a7       	std	Y+41, r24	; 0x29
    2154:	9a a7       	std	Y+42, r25	; 0x2a
    2156:	ab a7       	std	Y+43, r26	; 0x2b
    2158:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    215a:	69 a5       	ldd	r22, Y+41	; 0x29
    215c:	7a a5       	ldd	r23, Y+42	; 0x2a
    215e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2160:	9c a5       	ldd	r25, Y+44	; 0x2c
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	1c f4       	brge	.+6      	; 0x2178 <EF_void_LCD_send_data+0x3da>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	88 a7       	std	Y+40, r24	; 0x28
    2176:	91 c0       	rjmp	.+290    	; 0x229a <EF_void_LCD_send_data+0x4fc>
	else if (__tmp > 255)
    2178:	69 a5       	ldd	r22, Y+41	; 0x29
    217a:	7a a5       	ldd	r23, Y+42	; 0x2a
    217c:	8b a5       	ldd	r24, Y+43	; 0x2b
    217e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	53 e4       	ldi	r21, 0x43	; 67
    2188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	0c f0       	brlt	.+2      	; 0x2192 <EF_void_LCD_send_data+0x3f4>
    2190:	7b c0       	rjmp	.+246    	; 0x2288 <EF_void_LCD_send_data+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    2192:	6d a5       	ldd	r22, Y+45	; 0x2d
    2194:	7e a5       	ldd	r23, Y+46	; 0x2e
    2196:	8f a5       	ldd	r24, Y+47	; 0x2f
    2198:	98 a9       	ldd	r25, Y+48	; 0x30
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8c a3       	std	Y+36, r24	; 0x24
    21ac:	9d a3       	std	Y+37, r25	; 0x25
    21ae:	ae a3       	std	Y+38, r26	; 0x26
    21b0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6c a1       	ldd	r22, Y+36	; 0x24
    21b4:	7d a1       	ldd	r23, Y+37	; 0x25
    21b6:	8e a1       	ldd	r24, Y+38	; 0x26
    21b8:	9f a1       	ldd	r25, Y+39	; 0x27
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	88 a3       	std	Y+32, r24	; 0x20
    21cc:	99 a3       	std	Y+33, r25	; 0x21
    21ce:	aa a3       	std	Y+34, r26	; 0x22
    21d0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21d2:	68 a1       	ldd	r22, Y+32	; 0x20
    21d4:	79 a1       	ldd	r23, Y+33	; 0x21
    21d6:	8a a1       	ldd	r24, Y+34	; 0x22
    21d8:	9b a1       	ldd	r25, Y+35	; 0x23
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <EF_void_LCD_send_data+0x456>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9f 8f       	std	Y+31, r25	; 0x1f
    21f0:	8e 8f       	std	Y+30, r24	; 0x1e
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <EF_void_LCD_send_data+0x4d4>
	else if (__tmp > 65535)
    21f4:	68 a1       	ldd	r22, Y+32	; 0x20
    21f6:	79 a1       	ldd	r23, Y+33	; 0x21
    21f8:	8a a1       	ldd	r24, Y+34	; 0x22
    21fa:	9b a1       	ldd	r25, Y+35	; 0x23
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <EF_void_LCD_send_data+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6c a1       	ldd	r22, Y+36	; 0x24
    220e:	7d a1       	ldd	r23, Y+37	; 0x25
    2210:	8e a1       	ldd	r24, Y+38	; 0x26
    2212:	9f a1       	ldd	r25, Y+39	; 0x27
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9f 8f       	std	Y+31, r25	; 0x1f
    2232:	8e 8f       	std	Y+30, r24	; 0x1e
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <EF_void_LCD_send_data+0x4b6>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9d 8f       	std	Y+29, r25	; 0x1d
    223c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    223e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2240:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <EF_void_LCD_send_data+0x4a4>
    2246:	9d 8f       	std	Y+29, r25	; 0x1d
    2248:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    224c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9f 8f       	std	Y+31, r25	; 0x1f
    2252:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2256:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <EF_void_LCD_send_data+0x498>
    225c:	24 c0       	rjmp	.+72     	; 0x22a6 <EF_void_LCD_send_data+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	68 a1       	ldd	r22, Y+32	; 0x20
    2260:	79 a1       	ldd	r23, Y+33	; 0x21
    2262:	8a a1       	ldd	r24, Y+34	; 0x22
    2264:	9b a1       	ldd	r25, Y+35	; 0x23
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9f 8f       	std	Y+31, r25	; 0x1f
    2270:	8e 8f       	std	Y+30, r24	; 0x1e
    2272:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2274:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2276:	9b 8f       	std	Y+27, r25	; 0x1b
    2278:	8a 8f       	std	Y+26, r24	; 0x1a
    227a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    227c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <EF_void_LCD_send_data+0x4e0>
    2282:	9b 8f       	std	Y+27, r25	; 0x1b
    2284:	8a 8f       	std	Y+26, r24	; 0x1a
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <EF_void_LCD_send_data+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2288:	69 a5       	ldd	r22, Y+41	; 0x29
    228a:	7a a5       	ldd	r23, Y+42	; 0x2a
    228c:	8b a5       	ldd	r24, Y+43	; 0x2b
    228e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	88 a7       	std	Y+40, r24	; 0x28
    229a:	88 a5       	ldd	r24, Y+40	; 0x28
    229c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    229e:	89 8d       	ldd	r24, Y+25	; 0x19
    22a0:	8a 95       	dec	r24
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <EF_void_LCD_send_data+0x502>
    22a4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    22a6:	a5 e3       	ldi	r26, 0x35	; 53
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e5 e3       	ldi	r30, 0x35	; 53
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8f 77       	andi	r24, 0x7F	; 127
    22b2:	8c 93       	st	X, r24
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a6 e9       	ldi	r26, 0x96	; 150
    22ba:	b3 e4       	ldi	r27, 0x43	; 67
    22bc:	8d 8b       	std	Y+21, r24	; 0x15
    22be:	9e 8b       	std	Y+22, r25	; 0x16
    22c0:	af 8b       	std	Y+23, r26	; 0x17
    22c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22c4:	6d 89       	ldd	r22, Y+21	; 0x15
    22c6:	7e 89       	ldd	r23, Y+22	; 0x16
    22c8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ca:	98 8d       	ldd	r25, Y+24	; 0x18
    22cc:	2b ea       	ldi	r18, 0xAB	; 171
    22ce:	3a ea       	ldi	r19, 0xAA	; 170
    22d0:	4a e2       	ldi	r20, 0x2A	; 42
    22d2:	50 e4       	ldi	r21, 0x40	; 64
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	89 8b       	std	Y+17, r24	; 0x11
    22de:	9a 8b       	std	Y+18, r25	; 0x12
    22e0:	ab 8b       	std	Y+19, r26	; 0x13
    22e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22e4:	69 89       	ldd	r22, Y+17	; 0x11
    22e6:	7a 89       	ldd	r23, Y+18	; 0x12
    22e8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ea:	9c 89       	ldd	r25, Y+20	; 0x14
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	1c f4       	brge	.+6      	; 0x2302 <EF_void_LCD_send_data+0x564>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	88 8b       	std	Y+16, r24	; 0x10
    2300:	91 c0       	rjmp	.+290    	; 0x2424 <EF_void_LCD_send_data+0x686>
	else if (__tmp > 255)
    2302:	69 89       	ldd	r22, Y+17	; 0x11
    2304:	7a 89       	ldd	r23, Y+18	; 0x12
    2306:	8b 89       	ldd	r24, Y+19	; 0x13
    2308:	9c 89       	ldd	r25, Y+20	; 0x14
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	53 e4       	ldi	r21, 0x43	; 67
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	0c f0       	brlt	.+2      	; 0x231c <EF_void_LCD_send_data+0x57e>
    231a:	7b c0       	rjmp	.+246    	; 0x2412 <EF_void_LCD_send_data+0x674>
	{
		_delay_ms(__us / 1000.0);
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a e7       	ldi	r20, 0x7A	; 122
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8c 87       	std	Y+12, r24	; 0x0c
    2336:	9d 87       	std	Y+13, r25	; 0x0d
    2338:	ae 87       	std	Y+14, r26	; 0x0e
    233a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	6c 85       	ldd	r22, Y+12	; 0x0c
    233e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2340:	8e 85       	ldd	r24, Y+14	; 0x0e
    2342:	9f 85       	ldd	r25, Y+15	; 0x0f
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	88 87       	std	Y+8, r24	; 0x08
    2356:	99 87       	std	Y+9, r25	; 0x09
    2358:	aa 87       	std	Y+10, r26	; 0x0a
    235a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    235c:	68 85       	ldd	r22, Y+8	; 0x08
    235e:	79 85       	ldd	r23, Y+9	; 0x09
    2360:	8a 85       	ldd	r24, Y+10	; 0x0a
    2362:	9b 85       	ldd	r25, Y+11	; 0x0b
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <EF_void_LCD_send_data+0x5e0>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9f 83       	std	Y+7, r25	; 0x07
    237a:	8e 83       	std	Y+6, r24	; 0x06
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <EF_void_LCD_send_data+0x65e>
	else if (__tmp > 65535)
    237e:	68 85       	ldd	r22, Y+8	; 0x08
    2380:	79 85       	ldd	r23, Y+9	; 0x09
    2382:	8a 85       	ldd	r24, Y+10	; 0x0a
    2384:	9b 85       	ldd	r25, Y+11	; 0x0b
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <EF_void_LCD_send_data+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	6c 85       	ldd	r22, Y+12	; 0x0c
    2398:	7d 85       	ldd	r23, Y+13	; 0x0d
    239a:	8e 85       	ldd	r24, Y+14	; 0x0e
    239c:	9f 85       	ldd	r25, Y+15	; 0x0f
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9f 83       	std	Y+7, r25	; 0x07
    23bc:	8e 83       	std	Y+6, r24	; 0x06
    23be:	0f c0       	rjmp	.+30     	; 0x23de <EF_void_LCD_send_data+0x640>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9d 83       	std	Y+5, r25	; 0x05
    23c6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	9d 81       	ldd	r25, Y+5	; 0x05
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <EF_void_LCD_send_data+0x62e>
    23d0:	9d 83       	std	Y+5, r25	; 0x05
    23d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	9f 81       	ldd	r25, Y+7	; 0x07
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9f 83       	std	Y+7, r25	; 0x07
    23dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8e 81       	ldd	r24, Y+6	; 0x06
    23e0:	9f 81       	ldd	r25, Y+7	; 0x07
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <EF_void_LCD_send_data+0x622>
    23e6:	24 c0       	rjmp	.+72     	; 0x2430 <EF_void_LCD_send_data+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	68 85       	ldd	r22, Y+8	; 0x08
    23ea:	79 85       	ldd	r23, Y+9	; 0x09
    23ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9f 83       	std	Y+7, r25	; 0x07
    23fa:	8e 83       	std	Y+6, r24	; 0x06
    23fc:	8e 81       	ldd	r24, Y+6	; 0x06
    23fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2400:	9b 83       	std	Y+3, r25	; 0x03
    2402:	8a 83       	std	Y+2, r24	; 0x02
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <EF_void_LCD_send_data+0x66a>
    240c:	9b 83       	std	Y+3, r25	; 0x03
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <EF_void_LCD_send_data+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2412:	69 89       	ldd	r22, Y+17	; 0x11
    2414:	7a 89       	ldd	r23, Y+18	; 0x12
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	88 8b       	std	Y+16, r24	; 0x10
    2424:	88 89       	ldd	r24, Y+16	; 0x10
    2426:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	8a 95       	dec	r24
    242c:	f1 f7       	brne	.-4      	; 0x242a <EF_void_LCD_send_data+0x68c>
    242e:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    2430:	c7 5b       	subi	r28, 0xB7	; 183
    2432:	df 4f       	sbci	r29, 0xFF	; 255
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	08 95       	ret

00002448 <EF_void_LCD_goto>:
 * PARAMETERS  : U8_t y, U8_t x.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_goto(U8_t y, U8_t x)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	64 97       	sbiw	r28, 0x14	; 20
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	6c 8b       	std	Y+20, r22	; 0x14
	U8_t firstAddress[] = {0x80,0xC0,0x94,0xD4};
    2460:	80 e8       	ldi	r24, 0x80	; 128
    2462:	8f 87       	std	Y+15, r24	; 0x0f
    2464:	80 ec       	ldi	r24, 0xC0	; 192
    2466:	88 8b       	std	Y+16, r24	; 0x10
    2468:	84 e9       	ldi	r24, 0x94	; 148
    246a:	89 8b       	std	Y+17, r24	; 0x11
    246c:	84 ed       	ldi	r24, 0xD4	; 212
    246e:	8a 8b       	std	Y+18, r24	; 0x12

	EF_void_LCD_send_command(firstAddress[y-1] + x-1);
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9c 01       	movw	r18, r24
    2478:	21 50       	subi	r18, 0x01	; 1
    247a:	30 40       	sbci	r19, 0x00	; 0
    247c:	ce 01       	movw	r24, r28
    247e:	0f 96       	adiw	r24, 0x0f	; 15
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	90 81       	ld	r25, Z
    2488:	8c 89       	ldd	r24, Y+20	; 0x14
    248a:	89 0f       	add	r24, r25
    248c:	81 50       	subi	r24, 0x01	; 1
    248e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 ea       	ldi	r26, 0xA0	; 160
    2498:	b1 e4       	ldi	r27, 0x41	; 65
    249a:	8b 87       	std	Y+11, r24	; 0x0b
    249c:	9c 87       	std	Y+12, r25	; 0x0c
    249e:	ad 87       	std	Y+13, r26	; 0x0d
    24a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a ef       	ldi	r20, 0xFA	; 250
    24b0:	54 e4       	ldi	r21, 0x44	; 68
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8f 83       	std	Y+7, r24	; 0x07
    24bc:	98 87       	std	Y+8, r25	; 0x08
    24be:	a9 87       	std	Y+9, r26	; 0x09
    24c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <EF_void_LCD_goto+0x9c>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <EF_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    24e4:	6f 81       	ldd	r22, Y+7	; 0x07
    24e6:	78 85       	ldd	r23, Y+8	; 0x08
    24e8:	89 85       	ldd	r24, Y+9	; 0x09
    24ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <EF_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2500:	8d 85       	ldd	r24, Y+13	; 0x0d
    2502:	9e 85       	ldd	r25, Y+14	; 0x0e
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <EF_void_LCD_goto+0xfc>
    2526:	88 ec       	ldi	r24, 0xC8	; 200
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 83       	std	Y+4, r25	; 0x04
    252c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <EF_void_LCD_goto+0xea>
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <EF_void_LCD_goto+0xde>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <EF_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6f 81       	ldd	r22, Y+7	; 0x07
    2550:	78 85       	ldd	r23, Y+8	; 0x08
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <EF_void_LCD_goto+0x126>
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2576:	64 96       	adiw	r28, 0x14	; 20
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <EF_void_LCD_print_NUM>:
 *				take 1 for first row, 2: for the second row
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_NUM(S16_t s16Numberstring,U8_t u8RowNumber)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	2a 97       	sbiw	r28, 0x0a	; 10
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	99 87       	std	Y+9, r25	; 0x09
    259e:	88 87       	std	Y+8, r24	; 0x08
    25a0:	6a 87       	std	Y+10, r22	; 0x0a
	U8_t ArrayIndex = 0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    25a4:	86 e0       	ldi	r24, 0x06	; 6
    25a6:	fe 01       	movw	r30, r28
    25a8:	32 96       	adiw	r30, 0x02	; 2
    25aa:	df 01       	movw	r26, r30
    25ac:	98 2f       	mov	r25, r24
    25ae:	1d 92       	st	X+, r1
    25b0:	9a 95       	dec	r25
    25b2:	e9 f7       	brne	.-6      	; 0x25ae <EF_void_LCD_print_NUM+0x26>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    25b4:	88 85       	ldd	r24, Y+8	; 0x08
    25b6:	99 85       	ldd	r25, Y+9	; 0x09
    25b8:	9e 01       	movw	r18, r28
    25ba:	2e 5f       	subi	r18, 0xFE	; 254
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	b9 01       	movw	r22, r18
    25c0:	4a e0       	ldi	r20, 0x0A	; 10
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    25c8:	19 82       	std	Y+1, r1	; 0x01
    25ca:	15 c0       	rjmp	.+42     	; 0x25f6 <EF_void_LCD_print_NUM+0x6e>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	98 2f       	mov	r25, r24
    25d0:	9f 5f       	subi	r25, 0xFF	; 255
    25d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d4:	69 2f       	mov	r22, r25
    25d6:	0e 94 24 12 	call	0x2448	; 0x2448 <EF_void_LCD_goto>
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	ce 01       	movw	r24, r28
    25e2:	02 96       	adiw	r24, 0x02	; 2
    25e4:	fc 01       	movw	r30, r24
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	80 81       	ld	r24, Z
    25ec:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	ce 01       	movw	r24, r28
    25fe:	02 96       	adiw	r24, 0x02	; 2
    2600:	fc 01       	movw	r30, r24
    2602:	e2 0f       	add	r30, r18
    2604:	f3 1f       	adc	r31, r19
    2606:	80 81       	ld	r24, Z
    2608:	88 23       	and	r24, r24
    260a:	01 f7       	brne	.-64     	; 0x25cc <EF_void_LCD_print_NUM+0x44>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    260c:	2a 96       	adiw	r28, 0x0a	; 10
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <EF_void_LCD_print>:
 * PARAMETERS  : U8_t *string:  String User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print(U8_t *string)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <EF_void_LCD_print+0x6>
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	9b 83       	std	Y+3, r25	; 0x03
    262c:	8a 83       	std	Y+2, r24	; 0x02
	U8_t i = 0;
    262e:	19 82       	std	Y+1, r1	; 0x01
    2630:	0e c0       	rjmp	.+28     	; 0x264e <EF_void_LCD_print+0x30>

	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	fc 01       	movw	r30, r24
    263e:	e2 0f       	add	r30, r18
    2640:	f3 1f       	adc	r31, r19
    2642:	80 81       	ld	r24, Z
    2644:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>
		i++;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print(U8_t *string)
{
	U8_t i = 0;

	while(string[i]!=0)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	fc 01       	movw	r30, r24
    265a:	e2 0f       	add	r30, r18
    265c:	f3 1f       	adc	r31, r19
    265e:	80 81       	ld	r24, Z
    2660:	88 23       	and	r24, r24
    2662:	39 f7       	brne	.-50     	; 0x2632 <EF_void_LCD_print+0x14>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <EF_void_LCD_print_ByLength>:
 * 				U8_t  length:  number of characters to be displayed
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <EF_void_LCD_print_ByLength+0x6>
    2676:	00 d0       	rcall	.+0      	; 0x2678 <EF_void_LCD_print_ByLength+0x8>
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	9b 83       	std	Y+3, r25	; 0x03
    267e:	8a 83       	std	Y+2, r24	; 0x02
    2680:	6c 83       	std	Y+4, r22	; 0x04
	U8_t i = 0;
    2682:	19 82       	std	Y+1, r1	; 0x01
    2684:	0e c0       	rjmp	.+28     	; 0x26a2 <EF_void_LCD_print_ByLength+0x32>

	while( i < length)
	{
		EF_void_LCD_send_data(string[i]);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	fc 01       	movw	r30, r24
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	80 81       	ld	r24, Z
    2698:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>
		i++;
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
	U8_t i = 0;

	while( i < length)
    26a2:	99 81       	ldd	r25, Y+1	; 0x01
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	98 17       	cp	r25, r24
    26a8:	70 f3       	brcs	.-36     	; 0x2686 <EF_void_LCD_print_ByLength+0x16>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <EF_void_LCD_Clear_Screen>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_Clear_Screen(void)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	a6 97       	sbiw	r28, 0x26	; 38
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
	EF_void_LCD_send_command(1<<0);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e4       	ldi	r27, 0x40	; 64
    26da:	8b a3       	std	Y+35, r24	; 0x23
    26dc:	9c a3       	std	Y+36, r25	; 0x24
    26de:	ad a3       	std	Y+37, r26	; 0x25
    26e0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	2b ea       	ldi	r18, 0xAB	; 171
    26ec:	3a ea       	ldi	r19, 0xAA	; 170
    26ee:	4a e2       	ldi	r20, 0x2A	; 42
    26f0:	50 e4       	ldi	r21, 0x40	; 64
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8f 8f       	std	Y+31, r24	; 0x1f
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	a9 a3       	std	Y+33, r26	; 0x21
    2700:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2702:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2704:	78 a1       	ldd	r23, Y+32	; 0x20
    2706:	89 a1       	ldd	r24, Y+33	; 0x21
    2708:	9a a1       	ldd	r25, Y+34	; 0x22
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	1c f4       	brge	.+6      	; 0x2720 <EF_void_LCD_Clear_Screen+0x68>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	8e 8f       	std	Y+30, r24	; 0x1e
    271e:	91 c0       	rjmp	.+290    	; 0x2842 <EF_void_LCD_Clear_Screen+0x18a>
	else if (__tmp > 255)
    2720:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2722:	78 a1       	ldd	r23, Y+32	; 0x20
    2724:	89 a1       	ldd	r24, Y+33	; 0x21
    2726:	9a a1       	ldd	r25, Y+34	; 0x22
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	53 e4       	ldi	r21, 0x43	; 67
    2730:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	0c f0       	brlt	.+2      	; 0x273a <EF_void_LCD_Clear_Screen+0x82>
    2738:	7b c0       	rjmp	.+246    	; 0x2830 <EF_void_LCD_Clear_Screen+0x178>
	{
		_delay_ms(__us / 1000.0);
    273a:	6b a1       	ldd	r22, Y+35	; 0x23
    273c:	7c a1       	ldd	r23, Y+36	; 0x24
    273e:	8d a1       	ldd	r24, Y+37	; 0x25
    2740:	9e a1       	ldd	r25, Y+38	; 0x26
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a e7       	ldi	r20, 0x7A	; 122
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8a 8f       	std	Y+26, r24	; 0x1a
    2754:	9b 8f       	std	Y+27, r25	; 0x1b
    2756:	ac 8f       	std	Y+28, r26	; 0x1c
    2758:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    275c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    275e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2760:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8e 8b       	std	Y+22, r24	; 0x16
    2774:	9f 8b       	std	Y+23, r25	; 0x17
    2776:	a8 8f       	std	Y+24, r26	; 0x18
    2778:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    277a:	6e 89       	ldd	r22, Y+22	; 0x16
    277c:	7f 89       	ldd	r23, Y+23	; 0x17
    277e:	88 8d       	ldd	r24, Y+24	; 0x18
    2780:	99 8d       	ldd	r25, Y+25	; 0x19
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <EF_void_LCD_Clear_Screen+0xe4>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9d 8b       	std	Y+21, r25	; 0x15
    2798:	8c 8b       	std	Y+20, r24	; 0x14
    279a:	3f c0       	rjmp	.+126    	; 0x281a <EF_void_LCD_Clear_Screen+0x162>
	else if (__tmp > 65535)
    279c:	6e 89       	ldd	r22, Y+22	; 0x16
    279e:	7f 89       	ldd	r23, Y+23	; 0x17
    27a0:	88 8d       	ldd	r24, Y+24	; 0x18
    27a2:	99 8d       	ldd	r25, Y+25	; 0x19
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <EF_void_LCD_Clear_Screen+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27b6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9d 8b       	std	Y+21, r25	; 0x15
    27da:	8c 8b       	std	Y+20, r24	; 0x14
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <EF_void_LCD_Clear_Screen+0x144>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9b 8b       	std	Y+19, r25	; 0x13
    27e4:	8a 8b       	std	Y+18, r24	; 0x12
    27e6:	8a 89       	ldd	r24, Y+18	; 0x12
    27e8:	9b 89       	ldd	r25, Y+19	; 0x13
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <EF_void_LCD_Clear_Screen+0x132>
    27ee:	9b 8b       	std	Y+19, r25	; 0x13
    27f0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	8c 89       	ldd	r24, Y+20	; 0x14
    27f4:	9d 89       	ldd	r25, Y+21	; 0x15
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9d 8b       	std	Y+21, r25	; 0x15
    27fa:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	8c 89       	ldd	r24, Y+20	; 0x14
    27fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <EF_void_LCD_Clear_Screen+0x126>
    2804:	24 c0       	rjmp	.+72     	; 0x284e <EF_void_LCD_Clear_Screen+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	6e 89       	ldd	r22, Y+22	; 0x16
    2808:	7f 89       	ldd	r23, Y+23	; 0x17
    280a:	88 8d       	ldd	r24, Y+24	; 0x18
    280c:	99 8d       	ldd	r25, Y+25	; 0x19
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9d 8b       	std	Y+21, r25	; 0x15
    2818:	8c 8b       	std	Y+20, r24	; 0x14
    281a:	8c 89       	ldd	r24, Y+20	; 0x14
    281c:	9d 89       	ldd	r25, Y+21	; 0x15
    281e:	99 8b       	std	Y+17, r25	; 0x11
    2820:	88 8b       	std	Y+16, r24	; 0x10
    2822:	88 89       	ldd	r24, Y+16	; 0x10
    2824:	99 89       	ldd	r25, Y+17	; 0x11
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <EF_void_LCD_Clear_Screen+0x16e>
    282a:	99 8b       	std	Y+17, r25	; 0x11
    282c:	88 8b       	std	Y+16, r24	; 0x10
    282e:	0f c0       	rjmp	.+30     	; 0x284e <EF_void_LCD_Clear_Screen+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2830:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2832:	78 a1       	ldd	r23, Y+32	; 0x20
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8e 8f       	std	Y+30, r24	; 0x1e
    2842:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2844:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2846:	8f 85       	ldd	r24, Y+15	; 0x0f
    2848:	8a 95       	dec	r24
    284a:	f1 f7       	brne	.-4      	; 0x2848 <EF_void_LCD_Clear_Screen+0x190>
    284c:	8f 87       	std	Y+15, r24	; 0x0f
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a0 e2       	ldi	r26, 0x20	; 32
    2854:	b1 e4       	ldi	r27, 0x41	; 65
    2856:	8b 87       	std	Y+11, r24	; 0x0b
    2858:	9c 87       	std	Y+12, r25	; 0x0c
    285a:	ad 87       	std	Y+13, r26	; 0x0d
    285c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2860:	7c 85       	ldd	r23, Y+12	; 0x0c
    2862:	8d 85       	ldd	r24, Y+13	; 0x0d
    2864:	9e 85       	ldd	r25, Y+14	; 0x0e
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a ef       	ldi	r20, 0xFA	; 250
    286c:	54 e4       	ldi	r21, 0x44	; 68
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8f 83       	std	Y+7, r24	; 0x07
    2878:	98 87       	std	Y+8, r25	; 0x08
    287a:	a9 87       	std	Y+9, r26	; 0x09
    287c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287e:	6f 81       	ldd	r22, Y+7	; 0x07
    2880:	78 85       	ldd	r23, Y+8	; 0x08
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	2c f4       	brge	.+10     	; 0x28a0 <EF_void_LCD_Clear_Screen+0x1e8>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
    289e:	3f c0       	rjmp	.+126    	; 0x291e <EF_void_LCD_Clear_Screen+0x266>
	else if (__tmp > 65535)
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	3f ef       	ldi	r19, 0xFF	; 255
    28ac:	4f e7       	ldi	r20, 0x7F	; 127
    28ae:	57 e4       	ldi	r21, 0x47	; 71
    28b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	4c f5       	brge	.+82     	; 0x290a <EF_void_LCD_Clear_Screen+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    28bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28be:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e2       	ldi	r20, 0x20	; 32
    28c6:	51 e4       	ldi	r21, 0x41	; 65
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	0f c0       	rjmp	.+30     	; 0x2900 <EF_void_LCD_Clear_Screen+0x248>
    28e2:	88 ec       	ldi	r24, 0xC8	; 200
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <EF_void_LCD_Clear_Screen+0x236>
    28f2:	9c 83       	std	Y+4, r25	; 0x04
    28f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	9e 81       	ldd	r25, Y+6	; 0x06
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	69 f7       	brne	.-38     	; 0x28e2 <EF_void_LCD_Clear_Screen+0x22a>
    2908:	14 c0       	rjmp	.+40     	; 0x2932 <EF_void_LCD_Clear_Screen+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <EF_void_LCD_Clear_Screen+0x272>
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	_delay_ms(10);
}
    2932:	a6 96       	adiw	r28, 0x26	; 38
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <EF_void_uploadCustomChar>:
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_uploadCustomChar(U8_t location, unsigned char *character)

{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <EF_void_uploadCustomChar+0x6>
    294a:	00 d0       	rcall	.+0      	; 0x294c <EF_void_uploadCustomChar+0x8>
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	8a 83       	std	Y+2, r24	; 0x02
    2952:	7c 83       	std	Y+4, r23	; 0x04
    2954:	6b 83       	std	Y+3, r22	; 0x03
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	88 30       	cpi	r24, 0x08	; 8
    295a:	f8 f4       	brcc	.+62     	; 0x299a <EF_void_uploadCustomChar+0x56>
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	88 2f       	mov	r24, r24
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	08 96       	adiw	r24, 0x08	; 8
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    2974:	19 82       	std	Y+1, r1	; 0x01
    2976:	0e c0       	rjmp	.+28     	; 0x2994 <EF_void_uploadCustomChar+0x50>
		{
			EF_void_LCD_send_data(character[ArrayIndex]);
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	fc 01       	movw	r30, r24
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
    2988:	80 81       	ld	r24, Z
    298a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	88 30       	cpi	r24, 0x08	; 8
    2998:	78 f3       	brcs	.-34     	; 0x2978 <EF_void_uploadCustomChar+0x34>
	else
	{
		/* TODO: return Error */
	}

}
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <EF_void_LCD_HextoASCII>:
 * PARAMETERS  : hex: pointer to hex (one byte)
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_HextoASCII(U8_t *hex)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <EF_void_LCD_HextoASCII+0x6>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <EF_void_LCD_HextoASCII+0x8>
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	9c 83       	std	Y+4, r25	; 0x04
    29b6:	8b 83       	std	Y+3, r24	; 0x03

	U8_t temp_L = 0;                    // dummy variable that will hold LSBs of Hex number
    29b8:	1a 82       	std	Y+2, r1	; 0x02
	U8_t temp_H = 0;                    // dummy variable that will hold MSBs of Hex number
    29ba:	19 82       	std	Y+1, r1	; 0x01

	temp_H = *hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
    29bc:	eb 81       	ldd	r30, Y+3	; 0x03
    29be:	fc 81       	ldd	r31, Y+4	; 0x04
    29c0:	80 81       	ld	r24, Z
    29c2:	80 7f       	andi	r24, 0xF0	; 240
    29c4:	89 83       	std	Y+1, r24	; 0x01
	temp_H = temp_H >> 4;           //
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	82 95       	swap	r24
    29ca:	8f 70       	andi	r24, 0x0F	; 15
    29cc:	89 83       	std	Y+1, r24	; 0x01

	if(temp_H >9)                   // Check if the number is a letter
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	8a 30       	cpi	r24, 0x0A	; 10
    29d2:	20 f0       	brcs	.+8      	; 0x29dc <EF_void_LCD_HextoASCII+0x34>
	{
		temp_H += 0x37;             // Convert the number to a letter in ASCII
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	89 5c       	subi	r24, 0xC9	; 201
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	03 c0       	rjmp	.+6      	; 0x29e2 <EF_void_LCD_HextoASCII+0x3a>
	}
	else
	{
		temp_H += 0x30;             // Convert the number to ASCII number
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	80 5d       	subi	r24, 0xD0	; 208
    29e0:	89 83       	std	Y+1, r24	; 0x01
	}

	EF_void_LCD_send_data(temp_H);           // Display the number
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>

	temp_L = *hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
    29e8:	eb 81       	ldd	r30, Y+3	; 0x03
    29ea:	fc 81       	ldd	r31, Y+4	; 0x04
    29ec:	80 81       	ld	r24, Z
    29ee:	8f 70       	andi	r24, 0x0F	; 15
    29f0:	8a 83       	std	Y+2, r24	; 0x02

	if(temp_L >9)                   // Check if the the number is a letter
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	8a 30       	cpi	r24, 0x0A	; 10
    29f6:	20 f0       	brcs	.+8      	; 0x2a00 <EF_void_LCD_HextoASCII+0x58>
	{
		temp_L += 0x37;             // Convert the number to a letter in ASCII
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	89 5c       	subi	r24, 0xC9	; 201
    29fc:	8a 83       	std	Y+2, r24	; 0x02
    29fe:	03 c0       	rjmp	.+6      	; 0x2a06 <EF_void_LCD_HextoASCII+0x5e>
	}
	else
	{
		temp_L += 0x30;             // Convert the number to ASCII number
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	80 5d       	subi	r24, 0xD0	; 208
    2a04:	8a 83       	std	Y+2, r24	; 0x02
	}

	EF_void_LCD_send_data(temp_L);           // Display the number
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>
}
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <LCD_4BIT_Write_Init>:




void LCD_4BIT_Write_Init ( U8_t temp)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	6d 97       	sbiw	r28, 0x1d	; 29
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = temp;
    2a30:	e8 e3       	ldi	r30, 0x38	; 56
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a36:	80 83       	st	Z, r24
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    2a38:	a5 e3       	ldi	r26, 0x35	; 53
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e5 e3       	ldi	r30, 0x35	; 53
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	8f 7b       	andi	r24, 0xBF	; 191
    2a44:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    2a46:	a5 e3       	ldi	r26, 0x35	; 53
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e5 e3       	ldi	r30, 0x35	; 53
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	80 68       	ori	r24, 0x80	; 128
    2a52:	8c 93       	st	X, r24
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a0 e8       	ldi	r26, 0x80	; 128
    2a5a:	bf e3       	ldi	r27, 0x3F	; 63
    2a5c:	89 8f       	std	Y+25, r24	; 0x19
    2a5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a60:	ab 8f       	std	Y+27, r26	; 0x1b
    2a62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a64:	69 8d       	ldd	r22, Y+25	; 0x19
    2a66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a ef       	ldi	r20, 0xFA	; 250
    2a72:	54 e4       	ldi	r21, 0x44	; 68
    2a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	8d 8b       	std	Y+21, r24	; 0x15
    2a7e:	9e 8b       	std	Y+22, r25	; 0x16
    2a80:	af 8b       	std	Y+23, r26	; 0x17
    2a82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a84:	6d 89       	ldd	r22, Y+21	; 0x15
    2a86:	7e 89       	ldd	r23, Y+22	; 0x16
    2a88:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	2c f4       	brge	.+10     	; 0x2aa6 <LCD_4BIT_Write_Init+0x8c>
		__ticks = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9c 8b       	std	Y+20, r25	; 0x14
    2aa2:	8b 8b       	std	Y+19, r24	; 0x13
    2aa4:	3f c0       	rjmp	.+126    	; 0x2b24 <LCD_4BIT_Write_Init+0x10a>
	else if (__tmp > 65535)
    2aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2aac:	98 8d       	ldd	r25, Y+24	; 0x18
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	3f ef       	ldi	r19, 0xFF	; 255
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	57 e4       	ldi	r21, 0x47	; 71
    2ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	4c f5       	brge	.+82     	; 0x2b10 <LCD_4BIT_Write_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abe:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e2       	ldi	r20, 0x20	; 32
    2acc:	51 e4       	ldi	r21, 0x41	; 65
    2ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	9c 8b       	std	Y+20, r25	; 0x14
    2ae4:	8b 8b       	std	Y+19, r24	; 0x13
    2ae6:	0f c0       	rjmp	.+30     	; 0x2b06 <LCD_4BIT_Write_Init+0xec>
    2ae8:	88 ec       	ldi	r24, 0xC8	; 200
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9a 8b       	std	Y+18, r25	; 0x12
    2aee:	89 8b       	std	Y+17, r24	; 0x11
    2af0:	89 89       	ldd	r24, Y+17	; 0x11
    2af2:	9a 89       	ldd	r25, Y+18	; 0x12
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_4BIT_Write_Init+0xda>
    2af8:	9a 8b       	std	Y+18, r25	; 0x12
    2afa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afc:	8b 89       	ldd	r24, Y+19	; 0x13
    2afe:	9c 89       	ldd	r25, Y+20	; 0x14
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	9c 8b       	std	Y+20, r25	; 0x14
    2b04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b06:	8b 89       	ldd	r24, Y+19	; 0x13
    2b08:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	69 f7       	brne	.-38     	; 0x2ae8 <LCD_4BIT_Write_Init+0xce>
    2b0e:	14 c0       	rjmp	.+40     	; 0x2b38 <LCD_4BIT_Write_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b10:	6d 89       	ldd	r22, Y+21	; 0x15
    2b12:	7e 89       	ldd	r23, Y+22	; 0x16
    2b14:	8f 89       	ldd	r24, Y+23	; 0x17
    2b16:	98 8d       	ldd	r25, Y+24	; 0x18
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	98 8b       	std	Y+16, r25	; 0x10
    2b2a:	8f 87       	std	Y+15, r24	; 0x0f
    2b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b2e:	98 89       	ldd	r25, Y+16	; 0x10
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <LCD_4BIT_Write_Init+0x116>
    2b34:	98 8b       	std	Y+16, r25	; 0x10
    2b36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    2b38:	a5 e3       	ldi	r26, 0x35	; 53
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e5 e3       	ldi	r30, 0x35	; 53
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	8f 77       	andi	r24, 0x7F	; 127
    2b44:	8c 93       	st	X, r24
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e8       	ldi	r26, 0x80	; 128
    2b4c:	bf e3       	ldi	r27, 0x3F	; 63
    2b4e:	8b 87       	std	Y+11, r24	; 0x0b
    2b50:	9c 87       	std	Y+12, r25	; 0x0c
    2b52:	ad 87       	std	Y+13, r26	; 0x0d
    2b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8f 83       	std	Y+7, r24	; 0x07
    2b70:	98 87       	std	Y+8, r25	; 0x08
    2b72:	a9 87       	std	Y+9, r26	; 0x09
    2b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <LCD_4BIT_Write_Init+0x17e>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <LCD_4BIT_Write_Init+0x1fc>
	else if (__tmp > 65535)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <LCD_4BIT_Write_Init+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <LCD_4BIT_Write_Init+0x1de>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <LCD_4BIT_Write_Init+0x1cc>
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <LCD_4BIT_Write_Init+0x1c0>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <LCD_4BIT_Write_Init+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LCD_4BIT_Write_Init+0x208>
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c2a:	6d 96       	adiw	r28, 0x1d	; 29
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <EF_void_LCD_Newline>:


void EF_void_LCD_Newline()
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	2e 97       	sbiw	r28, 0x0e	; 14
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61

	EF_void_LCD_send_command(0xC0);
    2c50:	80 ec       	ldi	r24, 0xC0	; 192
    2c52:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EF_void_LCD_send_command>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c5c:	b1 e4       	ldi	r27, 0x41	; 65
    2c5e:	8b 87       	std	Y+11, r24	; 0x0b
    2c60:	9c 87       	std	Y+12, r25	; 0x0c
    2c62:	ad 87       	std	Y+13, r26	; 0x0d
    2c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a ef       	ldi	r20, 0xFA	; 250
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	8f 83       	std	Y+7, r24	; 0x07
    2c80:	98 87       	std	Y+8, r25	; 0x08
    2c82:	a9 87       	std	Y+9, r26	; 0x09
    2c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e8       	ldi	r20, 0x80	; 128
    2c94:	5f e3       	ldi	r21, 0x3F	; 63
    2c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c9a:	88 23       	and	r24, r24
    2c9c:	2c f4       	brge	.+10     	; 0x2ca8 <EF_void_LCD_Newline+0x6c>
		__ticks = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	3f c0       	rjmp	.+126    	; 0x2d26 <EF_void_LCD_Newline+0xea>
	else if (__tmp > 65535)
    2ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    2caa:	78 85       	ldd	r23, Y+8	; 0x08
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	3f ef       	ldi	r19, 0xFF	; 255
    2cb4:	4f e7       	ldi	r20, 0x7F	; 127
    2cb6:	57 e4       	ldi	r21, 0x47	; 71
    2cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	4c f5       	brge	.+82     	; 0x2d12 <EF_void_LCD_Newline+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e2       	ldi	r20, 0x20	; 32
    2cce:	51 e4       	ldi	r21, 0x41	; 65
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <EF_void_LCD_Newline+0xcc>
    2cea:	88 ec       	ldi	r24, 0xC8	; 200
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <EF_void_LCD_Newline+0xba>
    2cfa:	9c 83       	std	Y+4, r25	; 0x04
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	9e 83       	std	Y+6, r25	; 0x06
    2d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <EF_void_LCD_Newline+0xae>
    2d10:	14 c0       	rjmp	.+40     	; 0x2d3a <EF_void_LCD_Newline+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d12:	6f 81       	ldd	r22, Y+7	; 0x07
    2d14:	78 85       	ldd	r23, Y+8	; 0x08
    2d16:	89 85       	ldd	r24, Y+9	; 0x09
    2d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
    2d26:	8d 81       	ldd	r24, Y+5	; 0x05
    2d28:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <EF_void_LCD_Newline+0xf6>
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2d3a:	2e 96       	adiw	r28, 0x0e	; 14
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <EF_void_LCD_print_Number>:


void EF_void_LCD_print_Number(S16_t s16Numberstring)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	29 97       	sbiw	r28, 0x09	; 9
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	99 87       	std	Y+9, r25	; 0x09
    2d62:	88 87       	std	Y+8, r24	; 0x08
	U8_t ArrayIndex = 0;
    2d64:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    2d66:	86 e0       	ldi	r24, 0x06	; 6
    2d68:	fe 01       	movw	r30, r28
    2d6a:	32 96       	adiw	r30, 0x02	; 2
    2d6c:	df 01       	movw	r26, r30
    2d6e:	98 2f       	mov	r25, r24
    2d70:	1d 92       	st	X+, r1
    2d72:	9a 95       	dec	r25
    2d74:	e9 f7       	brne	.-6      	; 0x2d70 <EF_void_LCD_print_Number+0x24>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    2d76:	88 85       	ldd	r24, Y+8	; 0x08
    2d78:	99 85       	ldd	r25, Y+9	; 0x09
    2d7a:	9e 01       	movw	r18, r28
    2d7c:	2e 5f       	subi	r18, 0xFE	; 254
    2d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d80:	b9 01       	movw	r22, r18
    2d82:	4a e0       	ldi	r20, 0x0A	; 10
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2d8a:	19 82       	std	Y+1, r1	; 0x01
    2d8c:	0e c0       	rjmp	.+28     	; 0x2daa <EF_void_LCD_print_Number+0x5e>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	28 2f       	mov	r18, r24
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	ce 01       	movw	r24, r28
    2d96:	02 96       	adiw	r24, 0x02	; 2
    2d98:	fc 01       	movw	r30, r24
    2d9a:	e2 0f       	add	r30, r18
    2d9c:	f3 1f       	adc	r31, r19
    2d9e:	80 81       	ld	r24, Z
    2da0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	8f 5f       	subi	r24, 0xFF	; 255
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	ce 01       	movw	r24, r28
    2db2:	02 96       	adiw	r24, 0x02	; 2
    2db4:	fc 01       	movw	r30, r24
    2db6:	e2 0f       	add	r30, r18
    2db8:	f3 1f       	adc	r31, r19
    2dba:	80 81       	ld	r24, Z
    2dbc:	88 23       	and	r24, r24
    2dbe:	39 f7       	brne	.-50     	; 0x2d8e <EF_void_LCD_print_Number+0x42>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    2dc0:	29 96       	adiw	r28, 0x09	; 9
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <ESP_init>:
char  Rec_Data[DEFAULT_BUFFER_SIZE];
char  Counter=0;


void ESP_init(void)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	init_UART();
    2dda:	0e 94 4f 06 	call	0xc9e	; 0xc9e <init_UART>
	Set_Call_Back_fun(REC_from_interrupt);
    2dde:	83 eb       	ldi	r24, 0xB3	; 179
    2de0:	9e e1       	ldi	r25, 0x1E	; 30
    2de2:	0e 94 de 06 	call	0xdbc	; 0xdbc <Set_Call_Back_fun>
	Clear_REC_Buffer();
    2de6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Clear_REC_Buffer>

}
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <ESP_Echo_Enable>:

void ESP_Echo_Enable(BOOLEAN Choose)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	2f 97       	sbiw	r28, 0x0f	; 15
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	8f 87       	std	Y+15, r24	; 0x0f
	if(Choose==TRUE)
    2e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	29 f4       	brne	.+10     	; 0x2e16 <ESP_Echo_Enable+0x26>
	{
		UART_SEND_string("ATE1\r\n");
    2e0c:	80 e6       	ldi	r24, 0x60	; 96
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    2e14:	7b c0       	rjmp	.+246    	; 0x2f0c <ESP_Echo_Enable+0x11c>
	}

	else if(Choose==FALSE)
    2e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <ESP_Echo_Enable+0x2e>
    2e1c:	77 c0       	rjmp	.+238    	; 0x2f0c <ESP_Echo_Enable+0x11c>
	{
		UART_SEND_string( "ATE0\r\n");
    2e1e:	87 e6       	ldi	r24, 0x67	; 103
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    2e26:	72 c0       	rjmp	.+228    	; 0x2f0c <ESP_Echo_Enable+0x11c>
	}

	while(!((Check_Respond("\r\nOK\r\n"))||(Check_Respond("ATE0\r\r\n\r\nOK\r\n"))))
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 e8       	ldi	r26, 0x80	; 128
    2e2e:	bf e3       	ldi	r27, 0x3F	; 63
    2e30:	8b 87       	std	Y+11, r24	; 0x0b
    2e32:	9c 87       	std	Y+12, r25	; 0x0c
    2e34:	ad 87       	std	Y+13, r26	; 0x0d
    2e36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	4a ef       	ldi	r20, 0xFA	; 250
    2e46:	54 e4       	ldi	r21, 0x44	; 68
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8f 83       	std	Y+7, r24	; 0x07
    2e52:	98 87       	std	Y+8, r25	; 0x08
    2e54:	a9 87       	std	Y+9, r26	; 0x09
    2e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e58:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5a:	78 85       	ldd	r23, Y+8	; 0x08
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	5f e3       	ldi	r21, 0x3F	; 63
    2e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e6c:	88 23       	and	r24, r24
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <ESP_Echo_Enable+0x8a>
		__ticks = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9e 83       	std	Y+6, r25	; 0x06
    2e76:	8d 83       	std	Y+5, r24	; 0x05
    2e78:	3f c0       	rjmp	.+126    	; 0x2ef8 <ESP_Echo_Enable+0x108>
	else if (__tmp > 65535)
    2e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7c:	78 85       	ldd	r23, Y+8	; 0x08
    2e7e:	89 85       	ldd	r24, Y+9	; 0x09
    2e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	4c f5       	brge	.+82     	; 0x2ee4 <ESP_Echo_Enable+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <ESP_Echo_Enable+0xea>
    2ebc:	88 ec       	ldi	r24, 0xC8	; 200
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9c 83       	std	Y+4, r25	; 0x04
    2ec2:	8b 83       	std	Y+3, r24	; 0x03
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <ESP_Echo_Enable+0xd8>
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <ESP_Echo_Enable+0xcc>
    2ee2:	14 c0       	rjmp	.+40     	; 0x2f0c <ESP_Echo_Enable+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee6:	78 85       	ldd	r23, Y+8	; 0x08
    2ee8:	89 85       	ldd	r24, Y+9	; 0x09
    2eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    2efa:	9e 81       	ldd	r25, Y+6	; 0x06
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <ESP_Echo_Enable+0x114>
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	8e e6       	ldi	r24, 0x6E	; 110
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    2f14:	88 23       	and	r24, r24
    2f16:	39 f4       	brne	.+14     	; 0x2f26 <ESP_Echo_Enable+0x136>
    2f18:	85 e7       	ldi	r24, 0x75	; 117
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    2f20:	88 23       	and	r24, r24
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <ESP_Echo_Enable+0x136>
    2f24:	81 cf       	rjmp	.-254    	; 0x2e28 <ESP_Echo_Enable+0x38>
	EF_void_LCD_Clear_Screen();
	EF_void_LCD_print((unsigned char*)"ESP EChO ");
	EF_void_LCD_print_Number(Choose);
	_delay_ms(2000);
#endif
}
    2f26:	2f 96       	adiw	r28, 0x0f	; 15
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <ESP_Work_Mode>:


void ESP_Work_Mode(U8_t work_mode)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	2f 97       	sbiw	r28, 0x0f	; 15
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	8f 87       	std	Y+15, r24	; 0x0f
	if(work_mode==CLIENT)
    2f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	29 f4       	brne	.+10     	; 0x2f5e <ESP_Work_Mode+0x26>
	{
		UART_SEND_string( "AT+CWMODE=1\r\n");
    2f54:	83 e8       	ldi	r24, 0x83	; 131
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    2f5c:	83 c0       	rjmp	.+262    	; 0x3064 <ESP_Work_Mode+0x12c>
	}
	else if(work_mode==SERVER)
    2f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f60:	82 30       	cpi	r24, 0x02	; 2
    2f62:	29 f4       	brne	.+10     	; 0x2f6e <ESP_Work_Mode+0x36>
	{
		UART_SEND_string( "AT+CWMODE=2\r\n");
    2f64:	81 e9       	ldi	r24, 0x91	; 145
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    2f6c:	7b c0       	rjmp	.+246    	; 0x3064 <ESP_Work_Mode+0x12c>
	}
	else if(work_mode==BOTH)
    2f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <ESP_Work_Mode+0x3e>
    2f74:	77 c0       	rjmp	.+238    	; 0x3064 <ESP_Work_Mode+0x12c>
	{
		UART_SEND_string( "AT+CWMODE=3\r\n");
    2f76:	8f e9       	ldi	r24, 0x9F	; 159
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    2f7e:	72 c0       	rjmp	.+228    	; 0x3064 <ESP_Work_Mode+0x12c>
	}

	while(!Check_Respond("\r\nOK\r\n"))
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a0 e8       	ldi	r26, 0x80	; 128
    2f86:	bf e3       	ldi	r27, 0x3F	; 63
    2f88:	8b 87       	std	Y+11, r24	; 0x0b
    2f8a:	9c 87       	std	Y+12, r25	; 0x0c
    2f8c:	ad 87       	std	Y+13, r26	; 0x0d
    2f8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4a ef       	ldi	r20, 0xFA	; 250
    2f9e:	54 e4       	ldi	r21, 0x44	; 68
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	8f 83       	std	Y+7, r24	; 0x07
    2faa:	98 87       	std	Y+8, r25	; 0x08
    2fac:	a9 87       	std	Y+9, r26	; 0x09
    2fae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb2:	78 85       	ldd	r23, Y+8	; 0x08
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e8       	ldi	r20, 0x80	; 128
    2fbe:	5f e3       	ldi	r21, 0x3F	; 63
    2fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc4:	88 23       	and	r24, r24
    2fc6:	2c f4       	brge	.+10     	; 0x2fd2 <ESP_Work_Mode+0x9a>
		__ticks = 1;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	3f c0       	rjmp	.+126    	; 0x3050 <ESP_Work_Mode+0x118>
	else if (__tmp > 65535)
    2fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd4:	78 85       	ldd	r23, Y+8	; 0x08
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
    2fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	4c f5       	brge	.+82     	; 0x303c <ESP_Work_Mode+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <ESP_Work_Mode+0xfa>
    3014:	88 ec       	ldi	r24, 0xC8	; 200
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	8b 83       	std	Y+3, r24	; 0x03
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <ESP_Work_Mode+0xe8>
    3024:	9c 83       	std	Y+4, r25	; 0x04
    3026:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	9e 83       	std	Y+6, r25	; 0x06
    3030:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	69 f7       	brne	.-38     	; 0x3014 <ESP_Work_Mode+0xdc>
    303a:	14 c0       	rjmp	.+40     	; 0x3064 <ESP_Work_Mode+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	9a 83       	std	Y+2, r25	; 0x02
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	9a 81       	ldd	r25, Y+2	; 0x02
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <ESP_Work_Mode+0x124>
    3060:	9a 83       	std	Y+2, r25	; 0x02
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	8e e6       	ldi	r24, 0x6E	; 110
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    306c:	88 23       	and	r24, r24
    306e:	09 f4       	brne	.+2      	; 0x3072 <ESP_Work_Mode+0x13a>
    3070:	87 cf       	rjmp	.-242    	; 0x2f80 <ESP_Work_Mode+0x48>
	EF_void_LCD_print_Number(work_mode);
	_delay_ms(2000);
#endif


}
    3072:	2f 96       	adiw	r28, 0x0f	; 15
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <ESP_Multiple_Connections_Enable>:


void ESP_Multiple_Connections_Enable(BOOLEAN Choose)
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	2f 97       	sbiw	r28, 0x0f	; 15
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	8f 87       	std	Y+15, r24	; 0x0f

	if(Choose==TRUE)
    309a:	8f 85       	ldd	r24, Y+15	; 0x0f
    309c:	81 30       	cpi	r24, 0x01	; 1
    309e:	29 f4       	brne	.+10     	; 0x30aa <ESP_Multiple_Connections_Enable+0x26>
	{
		UART_SEND_string( "AT+CIPMUX=1\r\n");
    30a0:	8d ea       	ldi	r24, 0xAD	; 173
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    30a8:	7b c0       	rjmp	.+246    	; 0x31a0 <ESP_Multiple_Connections_Enable+0x11c>
	}
	else if(Choose==FALSE)
    30aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ac:	88 23       	and	r24, r24
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <ESP_Multiple_Connections_Enable+0x2e>
    30b0:	77 c0       	rjmp	.+238    	; 0x31a0 <ESP_Multiple_Connections_Enable+0x11c>
	{
		UART_SEND_string( "AT+CIPMUX=0\r\n");
    30b2:	8b eb       	ldi	r24, 0xBB	; 187
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    30ba:	72 c0       	rjmp	.+228    	; 0x31a0 <ESP_Multiple_Connections_Enable+0x11c>
	}

	while(!Check_Respond("\r\nOK\r\n"))
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	a0 e8       	ldi	r26, 0x80	; 128
    30c2:	bf e3       	ldi	r27, 0x3F	; 63
    30c4:	8b 87       	std	Y+11, r24	; 0x0b
    30c6:	9c 87       	std	Y+12, r25	; 0x0c
    30c8:	ad 87       	std	Y+13, r26	; 0x0d
    30ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	4a ef       	ldi	r20, 0xFA	; 250
    30da:	54 e4       	ldi	r21, 0x44	; 68
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	8f 83       	std	Y+7, r24	; 0x07
    30e6:	98 87       	std	Y+8, r25	; 0x08
    30e8:	a9 87       	std	Y+9, r26	; 0x09
    30ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ec:	6f 81       	ldd	r22, Y+7	; 0x07
    30ee:	78 85       	ldd	r23, Y+8	; 0x08
    30f0:	89 85       	ldd	r24, Y+9	; 0x09
    30f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e8       	ldi	r20, 0x80	; 128
    30fa:	5f e3       	ldi	r21, 0x3F	; 63
    30fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3100:	88 23       	and	r24, r24
    3102:	2c f4       	brge	.+10     	; 0x310e <ESP_Multiple_Connections_Enable+0x8a>
		__ticks = 1;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	9e 83       	std	Y+6, r25	; 0x06
    310a:	8d 83       	std	Y+5, r24	; 0x05
    310c:	3f c0       	rjmp	.+126    	; 0x318c <ESP_Multiple_Connections_Enable+0x108>
	else if (__tmp > 65535)
    310e:	6f 81       	ldd	r22, Y+7	; 0x07
    3110:	78 85       	ldd	r23, Y+8	; 0x08
    3112:	89 85       	ldd	r24, Y+9	; 0x09
    3114:	9a 85       	ldd	r25, Y+10	; 0x0a
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	3f ef       	ldi	r19, 0xFF	; 255
    311a:	4f e7       	ldi	r20, 0x7F	; 127
    311c:	57 e4       	ldi	r21, 0x47	; 71
    311e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3122:	18 16       	cp	r1, r24
    3124:	4c f5       	brge	.+82     	; 0x3178 <ESP_Multiple_Connections_Enable+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3126:	6b 85       	ldd	r22, Y+11	; 0x0b
    3128:	7c 85       	ldd	r23, Y+12	; 0x0c
    312a:	8d 85       	ldd	r24, Y+13	; 0x0d
    312c:	9e 85       	ldd	r25, Y+14	; 0x0e
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e2       	ldi	r20, 0x20	; 32
    3134:	51 e4       	ldi	r21, 0x41	; 65
    3136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
    314e:	0f c0       	rjmp	.+30     	; 0x316e <ESP_Multiple_Connections_Enable+0xea>
    3150:	88 ec       	ldi	r24, 0xC8	; 200
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	9c 83       	std	Y+4, r25	; 0x04
    3156:	8b 83       	std	Y+3, r24	; 0x03
    3158:	8b 81       	ldd	r24, Y+3	; 0x03
    315a:	9c 81       	ldd	r25, Y+4	; 0x04
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <ESP_Multiple_Connections_Enable+0xd8>
    3160:	9c 83       	std	Y+4, r25	; 0x04
    3162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3164:	8d 81       	ldd	r24, Y+5	; 0x05
    3166:	9e 81       	ldd	r25, Y+6	; 0x06
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	9e 83       	std	Y+6, r25	; 0x06
    316c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	9e 81       	ldd	r25, Y+6	; 0x06
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	69 f7       	brne	.-38     	; 0x3150 <ESP_Multiple_Connections_Enable+0xcc>
    3176:	14 c0       	rjmp	.+40     	; 0x31a0 <ESP_Multiple_Connections_Enable+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3178:	6f 81       	ldd	r22, Y+7	; 0x07
    317a:	78 85       	ldd	r23, Y+8	; 0x08
    317c:	89 85       	ldd	r24, Y+9	; 0x09
    317e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	9a 83       	std	Y+2, r25	; 0x02
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	9a 81       	ldd	r25, Y+2	; 0x02
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <ESP_Multiple_Connections_Enable+0x114>
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	8e e6       	ldi	r24, 0x6E	; 110
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    31a8:	88 23       	and	r24, r24
    31aa:	09 f4       	brne	.+2      	; 0x31ae <ESP_Multiple_Connections_Enable+0x12a>
    31ac:	87 cf       	rjmp	.-242    	; 0x30bc <ESP_Multiple_Connections_Enable+0x38>
	EF_void_LCD_print_Number(Choose);
	_delay_ms(2000);
#endif


}
    31ae:	2f 96       	adiw	r28, 0x0f	; 15
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <ESP_transmission_Mode>:


void ESP_transmission_Mode(U8_t transmission_Mode)
{
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	2f 97       	sbiw	r28, 0x0f	; 15
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	8f 87       	std	Y+15, r24	; 0x0f

	if(transmission_Mode==NORMAL)
    31d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d8:	88 23       	and	r24, r24
    31da:	29 f4       	brne	.+10     	; 0x31e6 <ESP_transmission_Mode+0x26>
	{
		UART_SEND_string( "AT+CIPMODE=0\r\n");
    31dc:	89 ec       	ldi	r24, 0xC9	; 201
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    31e4:	7b c0       	rjmp	.+246    	; 0x32dc <ESP_transmission_Mode+0x11c>
	}
	else if(transmission_Mode==TRANSPARENT)
    31e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31e8:	81 30       	cpi	r24, 0x01	; 1
    31ea:	09 f0       	breq	.+2      	; 0x31ee <ESP_transmission_Mode+0x2e>
    31ec:	77 c0       	rjmp	.+238    	; 0x32dc <ESP_transmission_Mode+0x11c>
	{
		UART_SEND_string( "AT+CIPMODE=1\r\n");
    31ee:	88 ed       	ldi	r24, 0xD8	; 216
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    31f6:	72 c0       	rjmp	.+228    	; 0x32dc <ESP_transmission_Mode+0x11c>
	}

	while(!Check_Respond("\r\nOK\r\n"))
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	a0 e8       	ldi	r26, 0x80	; 128
    31fe:	bf e3       	ldi	r27, 0x3F	; 63
    3200:	8b 87       	std	Y+11, r24	; 0x0b
    3202:	9c 87       	std	Y+12, r25	; 0x0c
    3204:	ad 87       	std	Y+13, r26	; 0x0d
    3206:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3208:	6b 85       	ldd	r22, Y+11	; 0x0b
    320a:	7c 85       	ldd	r23, Y+12	; 0x0c
    320c:	8d 85       	ldd	r24, Y+13	; 0x0d
    320e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	4a ef       	ldi	r20, 0xFA	; 250
    3216:	54 e4       	ldi	r21, 0x44	; 68
    3218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	8f 83       	std	Y+7, r24	; 0x07
    3222:	98 87       	std	Y+8, r25	; 0x08
    3224:	a9 87       	std	Y+9, r26	; 0x09
    3226:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e8       	ldi	r20, 0x80	; 128
    3236:	5f e3       	ldi	r21, 0x3F	; 63
    3238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    323c:	88 23       	and	r24, r24
    323e:	2c f4       	brge	.+10     	; 0x324a <ESP_transmission_Mode+0x8a>
		__ticks = 1;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	9e 83       	std	Y+6, r25	; 0x06
    3246:	8d 83       	std	Y+5, r24	; 0x05
    3248:	3f c0       	rjmp	.+126    	; 0x32c8 <ESP_transmission_Mode+0x108>
	else if (__tmp > 65535)
    324a:	6f 81       	ldd	r22, Y+7	; 0x07
    324c:	78 85       	ldd	r23, Y+8	; 0x08
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	3f ef       	ldi	r19, 0xFF	; 255
    3256:	4f e7       	ldi	r20, 0x7F	; 127
    3258:	57 e4       	ldi	r21, 0x47	; 71
    325a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    325e:	18 16       	cp	r1, r24
    3260:	4c f5       	brge	.+82     	; 0x32b4 <ESP_transmission_Mode+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3262:	6b 85       	ldd	r22, Y+11	; 0x0b
    3264:	7c 85       	ldd	r23, Y+12	; 0x0c
    3266:	8d 85       	ldd	r24, Y+13	; 0x0d
    3268:	9e 85       	ldd	r25, Y+14	; 0x0e
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e2       	ldi	r20, 0x20	; 32
    3270:	51 e4       	ldi	r21, 0x41	; 65
    3272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	bc 01       	movw	r22, r24
    327c:	cd 01       	movw	r24, r26
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e 83       	std	Y+6, r25	; 0x06
    3288:	8d 83       	std	Y+5, r24	; 0x05
    328a:	0f c0       	rjmp	.+30     	; 0x32aa <ESP_transmission_Mode+0xea>
    328c:	88 ec       	ldi	r24, 0xC8	; 200
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9c 83       	std	Y+4, r25	; 0x04
    3292:	8b 83       	std	Y+3, r24	; 0x03
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	9c 81       	ldd	r25, Y+4	; 0x04
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <ESP_transmission_Mode+0xd8>
    329c:	9c 83       	std	Y+4, r25	; 0x04
    329e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	9e 81       	ldd	r25, Y+6	; 0x06
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	9e 83       	std	Y+6, r25	; 0x06
    32a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	69 f7       	brne	.-38     	; 0x328c <ESP_transmission_Mode+0xcc>
    32b2:	14 c0       	rjmp	.+40     	; 0x32dc <ESP_transmission_Mode+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b4:	6f 81       	ldd	r22, Y+7	; 0x07
    32b6:	78 85       	ldd	r23, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	9e 81       	ldd	r25, Y+6	; 0x06
    32cc:	9a 83       	std	Y+2, r25	; 0x02
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <ESP_transmission_Mode+0x114>
    32d8:	9a 83       	std	Y+2, r25	; 0x02
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	8e e6       	ldi	r24, 0x6E	; 110
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    32e4:	88 23       	and	r24, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <ESP_transmission_Mode+0x12a>
    32e8:	87 cf       	rjmp	.-242    	; 0x31f8 <ESP_transmission_Mode+0x38>
	EF_void_LCD_print((unsigned char*)"transmission Mode");
	EF_void_LCD_print_Number(transmission_Mode);
	_delay_ms(2000);
#endif

}
    32ea:	2f 96       	adiw	r28, 0x0f	; 15
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <ESP_check_connection>:


BOOLEAN ESP_check_connection(void)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	6d 97       	sbiw	r28, 0x1d	; 29
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61

	UART_SEND_string( "AT+CIPSTATUS\r\n");
    3310:	87 ee       	ldi	r24, 0xE7	; 231
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    3318:	72 c0       	rjmp	.+228    	; 0x33fe <ESP_check_connection+0x102>

	while(!Check_Word_in_Respond("STATUS"))
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a0 e8       	ldi	r26, 0x80	; 128
    3320:	bf e3       	ldi	r27, 0x3F	; 63
    3322:	89 8f       	std	Y+25, r24	; 0x19
    3324:	9a 8f       	std	Y+26, r25	; 0x1a
    3326:	ab 8f       	std	Y+27, r26	; 0x1b
    3328:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332a:	69 8d       	ldd	r22, Y+25	; 0x19
    332c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    332e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a ef       	ldi	r20, 0xFA	; 250
    3338:	54 e4       	ldi	r21, 0x44	; 68
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8d 8b       	std	Y+21, r24	; 0x15
    3344:	9e 8b       	std	Y+22, r25	; 0x16
    3346:	af 8b       	std	Y+23, r26	; 0x17
    3348:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    334a:	6d 89       	ldd	r22, Y+21	; 0x15
    334c:	7e 89       	ldd	r23, Y+22	; 0x16
    334e:	8f 89       	ldd	r24, Y+23	; 0x17
    3350:	98 8d       	ldd	r25, Y+24	; 0x18
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e8       	ldi	r20, 0x80	; 128
    3358:	5f e3       	ldi	r21, 0x3F	; 63
    335a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    335e:	88 23       	and	r24, r24
    3360:	2c f4       	brge	.+10     	; 0x336c <ESP_check_connection+0x70>
		__ticks = 1;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
    336a:	3f c0       	rjmp	.+126    	; 0x33ea <ESP_check_connection+0xee>
	else if (__tmp > 65535)
    336c:	6d 89       	ldd	r22, Y+21	; 0x15
    336e:	7e 89       	ldd	r23, Y+22	; 0x16
    3370:	8f 89       	ldd	r24, Y+23	; 0x17
    3372:	98 8d       	ldd	r25, Y+24	; 0x18
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	3f ef       	ldi	r19, 0xFF	; 255
    3378:	4f e7       	ldi	r20, 0x7F	; 127
    337a:	57 e4       	ldi	r21, 0x47	; 71
    337c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3380:	18 16       	cp	r1, r24
    3382:	4c f5       	brge	.+82     	; 0x33d6 <ESP_check_connection+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3384:	69 8d       	ldd	r22, Y+25	; 0x19
    3386:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    338a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e2       	ldi	r20, 0x20	; 32
    3392:	51 e4       	ldi	r21, 0x41	; 65
    3394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9c 8b       	std	Y+20, r25	; 0x14
    33aa:	8b 8b       	std	Y+19, r24	; 0x13
    33ac:	0f c0       	rjmp	.+30     	; 0x33cc <ESP_check_connection+0xd0>
    33ae:	88 ec       	ldi	r24, 0xC8	; 200
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9a 8b       	std	Y+18, r25	; 0x12
    33b4:	89 8b       	std	Y+17, r24	; 0x11
    33b6:	89 89       	ldd	r24, Y+17	; 0x11
    33b8:	9a 89       	ldd	r25, Y+18	; 0x12
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <ESP_check_connection+0xbe>
    33be:	9a 8b       	std	Y+18, r25	; 0x12
    33c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c2:	8b 89       	ldd	r24, Y+19	; 0x13
    33c4:	9c 89       	ldd	r25, Y+20	; 0x14
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	9c 8b       	std	Y+20, r25	; 0x14
    33ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33cc:	8b 89       	ldd	r24, Y+19	; 0x13
    33ce:	9c 89       	ldd	r25, Y+20	; 0x14
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	69 f7       	brne	.-38     	; 0x33ae <ESP_check_connection+0xb2>
    33d4:	14 c0       	rjmp	.+40     	; 0x33fe <ESP_check_connection+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d6:	6d 89       	ldd	r22, Y+21	; 0x15
    33d8:	7e 89       	ldd	r23, Y+22	; 0x16
    33da:	8f 89       	ldd	r24, Y+23	; 0x17
    33dc:	98 8d       	ldd	r25, Y+24	; 0x18
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	9c 8b       	std	Y+20, r25	; 0x14
    33e8:	8b 8b       	std	Y+19, r24	; 0x13
    33ea:	8b 89       	ldd	r24, Y+19	; 0x13
    33ec:	9c 89       	ldd	r25, Y+20	; 0x14
    33ee:	98 8b       	std	Y+16, r25	; 0x10
    33f0:	8f 87       	std	Y+15, r24	; 0x0f
    33f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f4:	98 89       	ldd	r25, Y+16	; 0x10
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <ESP_check_connection+0xfa>
    33fa:	98 8b       	std	Y+16, r25	; 0x10
    33fc:	8f 87       	std	Y+15, r24	; 0x0f
    33fe:	86 ef       	ldi	r24, 0xF6	; 246
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <Check_Word_in_Respond>
    3406:	88 23       	and	r24, r24
    3408:	09 f4       	brne	.+2      	; 0x340c <ESP_check_connection+0x110>
    340a:	87 cf       	rjmp	.-242    	; 0x331a <ESP_check_connection+0x1e>
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	a8 e4       	ldi	r26, 0x48	; 72
    3412:	b2 e4       	ldi	r27, 0x42	; 66
    3414:	8b 87       	std	Y+11, r24	; 0x0b
    3416:	9c 87       	std	Y+12, r25	; 0x0c
    3418:	ad 87       	std	Y+13, r26	; 0x0d
    341a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341c:	6b 85       	ldd	r22, Y+11	; 0x0b
    341e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3420:	8d 85       	ldd	r24, Y+13	; 0x0d
    3422:	9e 85       	ldd	r25, Y+14	; 0x0e
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4a ef       	ldi	r20, 0xFA	; 250
    342a:	54 e4       	ldi	r21, 0x44	; 68
    342c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	8f 83       	std	Y+7, r24	; 0x07
    3436:	98 87       	std	Y+8, r25	; 0x08
    3438:	a9 87       	std	Y+9, r26	; 0x09
    343a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	2c f4       	brge	.+10     	; 0x345e <ESP_check_connection+0x162>
		__ticks = 1;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
    345c:	3f c0       	rjmp	.+126    	; 0x34dc <ESP_check_connection+0x1e0>
	else if (__tmp > 65535)
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	3f ef       	ldi	r19, 0xFF	; 255
    346a:	4f e7       	ldi	r20, 0x7F	; 127
    346c:	57 e4       	ldi	r21, 0x47	; 71
    346e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3472:	18 16       	cp	r1, r24
    3474:	4c f5       	brge	.+82     	; 0x34c8 <ESP_check_connection+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3476:	6b 85       	ldd	r22, Y+11	; 0x0b
    3478:	7c 85       	ldd	r23, Y+12	; 0x0c
    347a:	8d 85       	ldd	r24, Y+13	; 0x0d
    347c:	9e 85       	ldd	r25, Y+14	; 0x0e
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e2       	ldi	r20, 0x20	; 32
    3484:	51 e4       	ldi	r21, 0x41	; 65
    3486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	0f c0       	rjmp	.+30     	; 0x34be <ESP_check_connection+0x1c2>
    34a0:	88 ec       	ldi	r24, 0xC8	; 200
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <ESP_check_connection+0x1b0>
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b4:	8d 81       	ldd	r24, Y+5	; 0x05
    34b6:	9e 81       	ldd	r25, Y+6	; 0x06
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	69 f7       	brne	.-38     	; 0x34a0 <ESP_check_connection+0x1a4>
    34c6:	14 c0       	rjmp	.+40     	; 0x34f0 <ESP_check_connection+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ca:	78 85       	ldd	r23, Y+8	; 0x08
    34cc:	89 85       	ldd	r24, Y+9	; 0x09
    34ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	9e 83       	std	Y+6, r25	; 0x06
    34da:	8d 83       	std	Y+5, r24	; 0x05
    34dc:	8d 81       	ldd	r24, Y+5	; 0x05
    34de:	9e 81       	ldd	r25, Y+6	; 0x06
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	9a 81       	ldd	r25, Y+2	; 0x02
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <ESP_check_connection+0x1ec>
    34ec:	9a 83       	std	Y+2, r25	; 0x02
    34ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}

	_delay_ms(50);

	if(Check_Respond(":2\r\n"))
    34f0:	8d ef       	ldi	r24, 0xFD	; 253
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    34f8:	88 23       	and	r24, r24
    34fa:	29 f0       	breq	.+10     	; 0x3506 <ESP_check_connection+0x20a>
	{
		Clear_REC_Buffer();
    34fc:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Clear_REC_Buffer>
		return TRUE;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	8d 8f       	std	Y+29, r24	; 0x1d
    3504:	03 c0       	rjmp	.+6      	; 0x350c <ESP_check_connection+0x210>
	}
	else
	{
		Clear_REC_Buffer();
    3506:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Clear_REC_Buffer>
		return FALSE;
    350a:	1d 8e       	std	Y+29, r1	; 0x1d
    350c:	8d 8d       	ldd	r24, Y+29	; 0x1d
	}


}
    350e:	6d 96       	adiw	r28, 0x1d	; 29
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	cf 91       	pop	r28
    351c:	df 91       	pop	r29
    351e:	08 95       	ret

00003520 <ESP_connect_to_WIFI>:


void ESP_connect_to_WIFI(char* USER_NAME,char* PASSWORD)
{
    3520:	df 93       	push	r29
    3522:	cf 93       	push	r28
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
    3528:	62 97       	sbiw	r28, 0x12	; 18
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	f8 94       	cli
    352e:	de bf       	out	0x3e, r29	; 62
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	98 8b       	std	Y+16, r25	; 0x10
    3536:	8f 87       	std	Y+15, r24	; 0x0f
    3538:	7a 8b       	std	Y+18, r23	; 0x12
    353a:	69 8b       	std	Y+17, r22	; 0x11

	UART_SEND_string( "AT+CWJAP=\"");
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	91 e0       	ldi	r25, 0x01	; 1
    3540:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( USER_NAME);
    3544:	8f 85       	ldd	r24, Y+15	; 0x0f
    3546:	98 89       	ldd	r25, Y+16	; 0x10
    3548:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( "\",\"");
    354c:	8d e0       	ldi	r24, 0x0D	; 13
    354e:	91 e0       	ldi	r25, 0x01	; 1
    3550:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( PASSWORD);
    3554:	89 89       	ldd	r24, Y+17	; 0x11
    3556:	9a 89       	ldd	r25, Y+18	; 0x12
    3558:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( "\"\r\n");
    355c:	81 e1       	ldi	r24, 0x11	; 17
    355e:	91 e0       	ldi	r25, 0x01	; 1
    3560:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    3564:	72 c0       	rjmp	.+228    	; 0x364a <ESP_connect_to_WIFI+0x12a>



	while(!((Check_Respond("WIFI DISCONNECT\r\nWIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))||(Check_Respond("WIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))||Check_Respond("\r\nOK\r\n")))
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	a0 e8       	ldi	r26, 0x80	; 128
    356c:	bf e3       	ldi	r27, 0x3F	; 63
    356e:	8b 87       	std	Y+11, r24	; 0x0b
    3570:	9c 87       	std	Y+12, r25	; 0x0c
    3572:	ad 87       	std	Y+13, r26	; 0x0d
    3574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3576:	6b 85       	ldd	r22, Y+11	; 0x0b
    3578:	7c 85       	ldd	r23, Y+12	; 0x0c
    357a:	8d 85       	ldd	r24, Y+13	; 0x0d
    357c:	9e 85       	ldd	r25, Y+14	; 0x0e
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	4a ef       	ldi	r20, 0xFA	; 250
    3584:	54 e4       	ldi	r21, 0x44	; 68
    3586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	8f 83       	std	Y+7, r24	; 0x07
    3590:	98 87       	std	Y+8, r25	; 0x08
    3592:	a9 87       	std	Y+9, r26	; 0x09
    3594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3596:	6f 81       	ldd	r22, Y+7	; 0x07
    3598:	78 85       	ldd	r23, Y+8	; 0x08
    359a:	89 85       	ldd	r24, Y+9	; 0x09
    359c:	9a 85       	ldd	r25, Y+10	; 0x0a
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	2c f4       	brge	.+10     	; 0x35b8 <ESP_connect_to_WIFI+0x98>
		__ticks = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9e 83       	std	Y+6, r25	; 0x06
    35b4:	8d 83       	std	Y+5, r24	; 0x05
    35b6:	3f c0       	rjmp	.+126    	; 0x3636 <ESP_connect_to_WIFI+0x116>
	else if (__tmp > 65535)
    35b8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ba:	78 85       	ldd	r23, Y+8	; 0x08
    35bc:	89 85       	ldd	r24, Y+9	; 0x09
    35be:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	3f ef       	ldi	r19, 0xFF	; 255
    35c4:	4f e7       	ldi	r20, 0x7F	; 127
    35c6:	57 e4       	ldi	r21, 0x47	; 71
    35c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35cc:	18 16       	cp	r1, r24
    35ce:	4c f5       	brge	.+82     	; 0x3622 <ESP_connect_to_WIFI+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	51 e4       	ldi	r21, 0x41	; 65
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	9e 83       	std	Y+6, r25	; 0x06
    35f6:	8d 83       	std	Y+5, r24	; 0x05
    35f8:	0f c0       	rjmp	.+30     	; 0x3618 <ESP_connect_to_WIFI+0xf8>
    35fa:	88 ec       	ldi	r24, 0xC8	; 200
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9c 83       	std	Y+4, r25	; 0x04
    3600:	8b 83       	std	Y+3, r24	; 0x03
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <ESP_connect_to_WIFI+0xe6>
    360a:	9c 83       	std	Y+4, r25	; 0x04
    360c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360e:	8d 81       	ldd	r24, Y+5	; 0x05
    3610:	9e 81       	ldd	r25, Y+6	; 0x06
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	9e 81       	ldd	r25, Y+6	; 0x06
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	69 f7       	brne	.-38     	; 0x35fa <ESP_connect_to_WIFI+0xda>
    3620:	14 c0       	rjmp	.+40     	; 0x364a <ESP_connect_to_WIFI+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3622:	6f 81       	ldd	r22, Y+7	; 0x07
    3624:	78 85       	ldd	r23, Y+8	; 0x08
    3626:	89 85       	ldd	r24, Y+9	; 0x09
    3628:	9a 85       	ldd	r25, Y+10	; 0x0a
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	8d 81       	ldd	r24, Y+5	; 0x05
    3638:	9e 81       	ldd	r25, Y+6	; 0x06
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <ESP_connect_to_WIFI+0x122>
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01
    364a:	85 e1       	ldi	r24, 0x15	; 21
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    3652:	88 23       	and	r24, r24
    3654:	69 f4       	brne	.+26     	; 0x3670 <ESP_connect_to_WIFI+0x150>
    3656:	8a e4       	ldi	r24, 0x4A	; 74
    3658:	91 e0       	ldi	r25, 0x01	; 1
    365a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    365e:	88 23       	and	r24, r24
    3660:	39 f4       	brne	.+14     	; 0x3670 <ESP_connect_to_WIFI+0x150>
    3662:	8e e6       	ldi	r24, 0x6E	; 110
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    366a:	88 23       	and	r24, r24
    366c:	09 f4       	brne	.+2      	; 0x3670 <ESP_connect_to_WIFI+0x150>
    366e:	7b cf       	rjmp	.-266    	; 0x3566 <ESP_connect_to_WIFI+0x46>
	_delay_ms(2000);
#endif



}
    3670:	62 96       	adiw	r28, 0x12	; 18
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <ESP_OPEN_SOCKET>:

void  ESP_OPEN_SOCKET(char* SERVER_IP,char* SERVER_PORT)
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	62 97       	sbiw	r28, 0x12	; 18
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61
    3696:	98 8b       	std	Y+16, r25	; 0x10
    3698:	8f 87       	std	Y+15, r24	; 0x0f
    369a:	7a 8b       	std	Y+18, r23	; 0x12
    369c:	69 8b       	std	Y+17, r22	; 0x11

	UART_SEND_string( "AT+CIPSTART=\"TCP\",\"");
    369e:	8e e6       	ldi	r24, 0x6E	; 110
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( SERVER_IP);
    36a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a8:	98 89       	ldd	r25, Y+16	; 0x10
    36aa:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( "\",");
    36ae:	82 e8       	ldi	r24, 0x82	; 130
    36b0:	91 e0       	ldi	r25, 0x01	; 1
    36b2:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( SERVER_PORT);
    36b6:	89 89       	ldd	r24, Y+17	; 0x11
    36b8:	9a 89       	ldd	r25, Y+18	; 0x12
    36ba:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
	UART_SEND_string( "\r\n");
    36be:	85 e8       	ldi	r24, 0x85	; 133
    36c0:	91 e0       	ldi	r25, 0x01	; 1
    36c2:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    36c6:	72 c0       	rjmp	.+228    	; 0x37ac <ESP_OPEN_SOCKET+0x12a>

	while(!Check_Respond("CONNECT\r\n\r\nOK\r\n"))
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a0 e8       	ldi	r26, 0x80	; 128
    36ce:	bf e3       	ldi	r27, 0x3F	; 63
    36d0:	8b 87       	std	Y+11, r24	; 0x0b
    36d2:	9c 87       	std	Y+12, r25	; 0x0c
    36d4:	ad 87       	std	Y+13, r26	; 0x0d
    36d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36de:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	4a ef       	ldi	r20, 0xFA	; 250
    36e6:	54 e4       	ldi	r21, 0x44	; 68
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	8f 83       	std	Y+7, r24	; 0x07
    36f2:	98 87       	std	Y+8, r25	; 0x08
    36f4:	a9 87       	std	Y+9, r26	; 0x09
    36f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f8:	6f 81       	ldd	r22, Y+7	; 0x07
    36fa:	78 85       	ldd	r23, Y+8	; 0x08
    36fc:	89 85       	ldd	r24, Y+9	; 0x09
    36fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	2c f4       	brge	.+10     	; 0x371a <ESP_OPEN_SOCKET+0x98>
		__ticks = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	3f c0       	rjmp	.+126    	; 0x3798 <ESP_OPEN_SOCKET+0x116>
	else if (__tmp > 65535)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	3f ef       	ldi	r19, 0xFF	; 255
    3726:	4f e7       	ldi	r20, 0x7F	; 127
    3728:	57 e4       	ldi	r21, 0x47	; 71
    372a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372e:	18 16       	cp	r1, r24
    3730:	4c f5       	brge	.+82     	; 0x3784 <ESP_OPEN_SOCKET+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
    375a:	0f c0       	rjmp	.+30     	; 0x377a <ESP_OPEN_SOCKET+0xf8>
    375c:	88 ec       	ldi	r24, 0xC8	; 200
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	9c 81       	ldd	r25, Y+4	; 0x04
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <ESP_OPEN_SOCKET+0xe6>
    376c:	9c 83       	std	Y+4, r25	; 0x04
    376e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	9e 81       	ldd	r25, Y+6	; 0x06
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	69 f7       	brne	.-38     	; 0x375c <ESP_OPEN_SOCKET+0xda>
    3782:	14 c0       	rjmp	.+40     	; 0x37ac <ESP_OPEN_SOCKET+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	8d 81       	ldd	r24, Y+5	; 0x05
    379a:	9e 81       	ldd	r25, Y+6	; 0x06
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <ESP_OPEN_SOCKET+0x122>
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
    37ac:	88 e8       	ldi	r24, 0x88	; 136
    37ae:	91 e0       	ldi	r25, 0x01	; 1
    37b0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    37b4:	88 23       	and	r24, r24
    37b6:	09 f4       	brne	.+2      	; 0x37ba <ESP_OPEN_SOCKET+0x138>
    37b8:	87 cf       	rjmp	.-242    	; 0x36c8 <ESP_OPEN_SOCKET+0x46>
#endif




}
    37ba:	62 96       	adiw	r28, 0x12	; 18
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <ESP_uploade_data>:


void ESP_uploade_data(unsigned int data)
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	c3 57       	subi	r28, 0x73	; 115
    37d6:	d0 40       	sbci	r29, 0x00	; 0
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	fe 01       	movw	r30, r28
    37e4:	ee 58       	subi	r30, 0x8E	; 142
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
	char api_buffer[50]={0},send_length_buffer[20]={0},api_length=0;
    37ec:	82 e3       	ldi	r24, 0x32	; 50
    37ee:	fe 01       	movw	r30, r28
    37f0:	bc 96       	adiw	r30, 0x2c	; 44
    37f2:	df 01       	movw	r26, r30
    37f4:	98 2f       	mov	r25, r24
    37f6:	1d 92       	st	X+, r1
    37f8:	9a 95       	dec	r25
    37fa:	e9 f7       	brne	.-6      	; 0x37f6 <ESP_uploade_data+0x2a>
    37fc:	ce 01       	movw	r24, r28
    37fe:	82 5a       	subi	r24, 0xA2	; 162
    3800:	9f 4f       	sbci	r25, 0xFF	; 255
    3802:	24 e1       	ldi	r18, 0x14	; 20
    3804:	fc 01       	movw	r30, r24
    3806:	df 01       	movw	r26, r30
    3808:	82 2f       	mov	r24, r18
    380a:	1d 92       	st	X+, r1
    380c:	8a 95       	dec	r24
    380e:	e9 f7       	brne	.-6      	; 0x380a <ESP_uploade_data+0x3e>
    3810:	1b a6       	std	Y+43, r1	; 0x2b


	sprintf(api_buffer, "GET /update?api_key=SD5OBD49N5H4O8RY&field2=%d\r\n", data);
    3812:	00 d0       	rcall	.+0      	; 0x3814 <ESP_uploade_data+0x48>
    3814:	00 d0       	rcall	.+0      	; 0x3816 <ESP_uploade_data+0x4a>
    3816:	00 d0       	rcall	.+0      	; 0x3818 <ESP_uploade_data+0x4c>
    3818:	ad b7       	in	r26, 0x3d	; 61
    381a:	be b7       	in	r27, 0x3e	; 62
    381c:	11 96       	adiw	r26, 0x01	; 1
    381e:	ce 01       	movw	r24, r28
    3820:	8c 96       	adiw	r24, 0x2c	; 44
    3822:	11 96       	adiw	r26, 0x01	; 1
    3824:	9c 93       	st	X, r25
    3826:	8e 93       	st	-X, r24
    3828:	88 e9       	ldi	r24, 0x98	; 152
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	13 96       	adiw	r26, 0x03	; 3
    382e:	9c 93       	st	X, r25
    3830:	8e 93       	st	-X, r24
    3832:	12 97       	sbiw	r26, 0x02	; 2
    3834:	fe 01       	movw	r30, r28
    3836:	ee 58       	subi	r30, 0x8E	; 142
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	80 81       	ld	r24, Z
    383c:	91 81       	ldd	r25, Z+1	; 0x01
    383e:	15 96       	adiw	r26, 0x05	; 5
    3840:	9c 93       	st	X, r25
    3842:	8e 93       	st	-X, r24
    3844:	14 97       	sbiw	r26, 0x04	; 4
    3846:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <sprintf>
    384a:	ad b7       	in	r26, 0x3d	; 61
    384c:	be b7       	in	r27, 0x3e	; 62
    384e:	16 96       	adiw	r26, 0x06	; 6
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	be bf       	out	0x3e, r27	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	ad bf       	out	0x3d, r26	; 61

	api_length=strlen(api_buffer);
    385a:	ce 01       	movw	r24, r28
    385c:	8c 96       	adiw	r24, 0x2c	; 44
    385e:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <strlen>
    3862:	8b a7       	std	Y+43, r24	; 0x2b

	sprintf(send_length_buffer, "AT+CIPSEND=%d\r\n", api_length);
    3864:	8b a5       	ldd	r24, Y+43	; 0x2b
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	00 d0       	rcall	.+0      	; 0x386c <ESP_uploade_data+0xa0>
    386c:	00 d0       	rcall	.+0      	; 0x386e <ESP_uploade_data+0xa2>
    386e:	00 d0       	rcall	.+0      	; 0x3870 <ESP_uploade_data+0xa4>
    3870:	ed b7       	in	r30, 0x3d	; 61
    3872:	fe b7       	in	r31, 0x3e	; 62
    3874:	31 96       	adiw	r30, 0x01	; 1
    3876:	ce 01       	movw	r24, r28
    3878:	82 5a       	subi	r24, 0xA2	; 162
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	80 83       	st	Z, r24
    3880:	89 ec       	ldi	r24, 0xC9	; 201
    3882:	91 e0       	ldi	r25, 0x01	; 1
    3884:	93 83       	std	Z+3, r25	; 0x03
    3886:	82 83       	std	Z+2, r24	; 0x02
    3888:	35 83       	std	Z+5, r19	; 0x05
    388a:	24 83       	std	Z+4, r18	; 0x04
    388c:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <sprintf>
    3890:	8d b7       	in	r24, 0x3d	; 61
    3892:	9e b7       	in	r25, 0x3e	; 62
    3894:	06 96       	adiw	r24, 0x06	; 6
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	9e bf       	out	0x3e, r25	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	8d bf       	out	0x3d, r24	; 61


	UART_SEND_string( send_length_buffer);
    38a0:	ce 01       	movw	r24, r28
    38a2:	82 5a       	subi	r24, 0xA2	; 162
    38a4:	9f 4f       	sbci	r25, 0xFF	; 255
    38a6:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    38aa:	72 c0       	rjmp	.+228    	; 0x3990 <ESP_uploade_data+0x1c4>

	while(!Check_Respond("\r\nOK\r\n> "))
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a0 e8       	ldi	r26, 0x80	; 128
    38b2:	bf e3       	ldi	r27, 0x3F	; 63
    38b4:	8f a3       	std	Y+39, r24	; 0x27
    38b6:	98 a7       	std	Y+40, r25	; 0x28
    38b8:	a9 a7       	std	Y+41, r26	; 0x29
    38ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38bc:	6f a1       	ldd	r22, Y+39	; 0x27
    38be:	78 a5       	ldd	r23, Y+40	; 0x28
    38c0:	89 a5       	ldd	r24, Y+41	; 0x29
    38c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	4a ef       	ldi	r20, 0xFA	; 250
    38ca:	54 e4       	ldi	r21, 0x44	; 68
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	8b a3       	std	Y+35, r24	; 0x23
    38d6:	9c a3       	std	Y+36, r25	; 0x24
    38d8:	ad a3       	std	Y+37, r26	; 0x25
    38da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38dc:	6b a1       	ldd	r22, Y+35	; 0x23
    38de:	7c a1       	ldd	r23, Y+36	; 0x24
    38e0:	8d a1       	ldd	r24, Y+37	; 0x25
    38e2:	9e a1       	ldd	r25, Y+38	; 0x26
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	2c f4       	brge	.+10     	; 0x38fe <ESP_uploade_data+0x132>
		__ticks = 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9a a3       	std	Y+34, r25	; 0x22
    38fa:	89 a3       	std	Y+33, r24	; 0x21
    38fc:	3f c0       	rjmp	.+126    	; 0x397c <ESP_uploade_data+0x1b0>
	else if (__tmp > 65535)
    38fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3900:	7c a1       	ldd	r23, Y+36	; 0x24
    3902:	8d a1       	ldd	r24, Y+37	; 0x25
    3904:	9e a1       	ldd	r25, Y+38	; 0x26
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	3f ef       	ldi	r19, 0xFF	; 255
    390a:	4f e7       	ldi	r20, 0x7F	; 127
    390c:	57 e4       	ldi	r21, 0x47	; 71
    390e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3912:	18 16       	cp	r1, r24
    3914:	4c f5       	brge	.+82     	; 0x3968 <ESP_uploade_data+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3916:	6f a1       	ldd	r22, Y+39	; 0x27
    3918:	78 a5       	ldd	r23, Y+40	; 0x28
    391a:	89 a5       	ldd	r24, Y+41	; 0x29
    391c:	9a a5       	ldd	r25, Y+42	; 0x2a
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9a a3       	std	Y+34, r25	; 0x22
    393c:	89 a3       	std	Y+33, r24	; 0x21
    393e:	0f c0       	rjmp	.+30     	; 0x395e <ESP_uploade_data+0x192>
    3940:	88 ec       	ldi	r24, 0xC8	; 200
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	98 a3       	std	Y+32, r25	; 0x20
    3946:	8f 8f       	std	Y+31, r24	; 0x1f
    3948:	8f 8d       	ldd	r24, Y+31	; 0x1f
    394a:	98 a1       	ldd	r25, Y+32	; 0x20
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <ESP_uploade_data+0x180>
    3950:	98 a3       	std	Y+32, r25	; 0x20
    3952:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3954:	89 a1       	ldd	r24, Y+33	; 0x21
    3956:	9a a1       	ldd	r25, Y+34	; 0x22
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	9a a3       	std	Y+34, r25	; 0x22
    395c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395e:	89 a1       	ldd	r24, Y+33	; 0x21
    3960:	9a a1       	ldd	r25, Y+34	; 0x22
    3962:	00 97       	sbiw	r24, 0x00	; 0
    3964:	69 f7       	brne	.-38     	; 0x3940 <ESP_uploade_data+0x174>
    3966:	14 c0       	rjmp	.+40     	; 0x3990 <ESP_uploade_data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3968:	6b a1       	ldd	r22, Y+35	; 0x23
    396a:	7c a1       	ldd	r23, Y+36	; 0x24
    396c:	8d a1       	ldd	r24, Y+37	; 0x25
    396e:	9e a1       	ldd	r25, Y+38	; 0x26
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9a a3       	std	Y+34, r25	; 0x22
    397a:	89 a3       	std	Y+33, r24	; 0x21
    397c:	89 a1       	ldd	r24, Y+33	; 0x21
    397e:	9a a1       	ldd	r25, Y+34	; 0x22
    3980:	9e 8f       	std	Y+30, r25	; 0x1e
    3982:	8d 8f       	std	Y+29, r24	; 0x1d
    3984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3986:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <ESP_uploade_data+0x1bc>
    398c:	9e 8f       	std	Y+30, r25	; 0x1e
    398e:	8d 8f       	std	Y+29, r24	; 0x1d
    3990:	89 ed       	ldi	r24, 0xD9	; 217
    3992:	91 e0       	ldi	r25, 0x01	; 1
    3994:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    3998:	88 23       	and	r24, r24
    399a:	09 f4       	brne	.+2      	; 0x399e <ESP_uploade_data+0x1d2>
    399c:	87 cf       	rjmp	.-242    	; 0x38ac <ESP_uploade_data+0xe0>
	{
		_delay_ms(1);
	}

	UART_SEND_string( api_buffer);
    399e:	ce 01       	movw	r24, r28
    39a0:	8c 96       	adiw	r24, 0x2c	; 44
    39a2:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    39a6:	72 c0       	rjmp	.+228    	; 0x3a8c <ESP_uploade_data+0x2c0>

	while(!Check_Word_in_Respond("+IPD"))
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	a0 e8       	ldi	r26, 0x80	; 128
    39ae:	bf e3       	ldi	r27, 0x3F	; 63
    39b0:	89 8f       	std	Y+25, r24	; 0x19
    39b2:	9a 8f       	std	Y+26, r25	; 0x1a
    39b4:	ab 8f       	std	Y+27, r26	; 0x1b
    39b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b8:	69 8d       	ldd	r22, Y+25	; 0x19
    39ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4a ef       	ldi	r20, 0xFA	; 250
    39c6:	54 e4       	ldi	r21, 0x44	; 68
    39c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	8d 8b       	std	Y+21, r24	; 0x15
    39d2:	9e 8b       	std	Y+22, r25	; 0x16
    39d4:	af 8b       	std	Y+23, r26	; 0x17
    39d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39d8:	6d 89       	ldd	r22, Y+21	; 0x15
    39da:	7e 89       	ldd	r23, Y+22	; 0x16
    39dc:	8f 89       	ldd	r24, Y+23	; 0x17
    39de:	98 8d       	ldd	r25, Y+24	; 0x18
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e8       	ldi	r20, 0x80	; 128
    39e6:	5f e3       	ldi	r21, 0x3F	; 63
    39e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ec:	88 23       	and	r24, r24
    39ee:	2c f4       	brge	.+10     	; 0x39fa <ESP_uploade_data+0x22e>
		__ticks = 1;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	9c 8b       	std	Y+20, r25	; 0x14
    39f6:	8b 8b       	std	Y+19, r24	; 0x13
    39f8:	3f c0       	rjmp	.+126    	; 0x3a78 <ESP_uploade_data+0x2ac>
	else if (__tmp > 65535)
    39fa:	6d 89       	ldd	r22, Y+21	; 0x15
    39fc:	7e 89       	ldd	r23, Y+22	; 0x16
    39fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3a00:	98 8d       	ldd	r25, Y+24	; 0x18
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	3f ef       	ldi	r19, 0xFF	; 255
    3a06:	4f e7       	ldi	r20, 0x7F	; 127
    3a08:	57 e4       	ldi	r21, 0x47	; 71
    3a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a0e:	18 16       	cp	r1, r24
    3a10:	4c f5       	brge	.+82     	; 0x3a64 <ESP_uploade_data+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a12:	69 8d       	ldd	r22, Y+25	; 0x19
    3a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e2       	ldi	r20, 0x20	; 32
    3a20:	51 e4       	ldi	r21, 0x41	; 65
    3a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	bc 01       	movw	r22, r24
    3a2c:	cd 01       	movw	r24, r26
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9c 8b       	std	Y+20, r25	; 0x14
    3a38:	8b 8b       	std	Y+19, r24	; 0x13
    3a3a:	0f c0       	rjmp	.+30     	; 0x3a5a <ESP_uploade_data+0x28e>
    3a3c:	88 ec       	ldi	r24, 0xC8	; 200
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9a 8b       	std	Y+18, r25	; 0x12
    3a42:	89 8b       	std	Y+17, r24	; 0x11
    3a44:	89 89       	ldd	r24, Y+17	; 0x11
    3a46:	9a 89       	ldd	r25, Y+18	; 0x12
    3a48:	01 97       	sbiw	r24, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <ESP_uploade_data+0x27c>
    3a4c:	9a 8b       	std	Y+18, r25	; 0x12
    3a4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a50:	8b 89       	ldd	r24, Y+19	; 0x13
    3a52:	9c 89       	ldd	r25, Y+20	; 0x14
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	9c 8b       	std	Y+20, r25	; 0x14
    3a58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a5e:	00 97       	sbiw	r24, 0x00	; 0
    3a60:	69 f7       	brne	.-38     	; 0x3a3c <ESP_uploade_data+0x270>
    3a62:	14 c0       	rjmp	.+40     	; 0x3a8c <ESP_uploade_data+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a64:	6d 89       	ldd	r22, Y+21	; 0x15
    3a66:	7e 89       	ldd	r23, Y+22	; 0x16
    3a68:	8f 89       	ldd	r24, Y+23	; 0x17
    3a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	9c 8b       	std	Y+20, r25	; 0x14
    3a76:	8b 8b       	std	Y+19, r24	; 0x13
    3a78:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7c:	98 8b       	std	Y+16, r25	; 0x10
    3a7e:	8f 87       	std	Y+15, r24	; 0x0f
    3a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a82:	98 89       	ldd	r25, Y+16	; 0x10
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <ESP_uploade_data+0x2b8>
    3a88:	98 8b       	std	Y+16, r25	; 0x10
    3a8a:	8f 87       	std	Y+15, r24	; 0x0f
    3a8c:	82 ee       	ldi	r24, 0xE2	; 226
    3a8e:	91 e0       	ldi	r25, 0x01	; 1
    3a90:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <Check_Word_in_Respond>
    3a94:	88 23       	and	r24, r24
    3a96:	09 f4       	brne	.+2      	; 0x3a9a <ESP_uploade_data+0x2ce>
    3a98:	87 cf       	rjmp	.-242    	; 0x39a8 <ESP_uploade_data+0x1dc>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	aa ef       	ldi	r26, 0xFA	; 250
    3aa0:	b3 e4       	ldi	r27, 0x43	; 67
    3aa2:	8b 87       	std	Y+11, r24	; 0x0b
    3aa4:	9c 87       	std	Y+12, r25	; 0x0c
    3aa6:	ad 87       	std	Y+13, r26	; 0x0d
    3aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	4a ef       	ldi	r20, 0xFA	; 250
    3ab8:	54 e4       	ldi	r21, 0x44	; 68
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	8f 83       	std	Y+7, r24	; 0x07
    3ac4:	98 87       	std	Y+8, r25	; 0x08
    3ac6:	a9 87       	std	Y+9, r26	; 0x09
    3ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aca:	6f 81       	ldd	r22, Y+7	; 0x07
    3acc:	78 85       	ldd	r23, Y+8	; 0x08
    3ace:	89 85       	ldd	r24, Y+9	; 0x09
    3ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e8       	ldi	r20, 0x80	; 128
    3ad8:	5f e3       	ldi	r21, 0x3F	; 63
    3ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ade:	88 23       	and	r24, r24
    3ae0:	2c f4       	brge	.+10     	; 0x3aec <ESP_uploade_data+0x320>
		__ticks = 1;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	3f c0       	rjmp	.+126    	; 0x3b6a <ESP_uploade_data+0x39e>
	else if (__tmp > 65535)
    3aec:	6f 81       	ldd	r22, Y+7	; 0x07
    3aee:	78 85       	ldd	r23, Y+8	; 0x08
    3af0:	89 85       	ldd	r24, Y+9	; 0x09
    3af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	4c f5       	brge	.+82     	; 0x3b56 <ESP_uploade_data+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e2       	ldi	r20, 0x20	; 32
    3b12:	51 e4       	ldi	r21, 0x41	; 65
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	9e 83       	std	Y+6, r25	; 0x06
    3b2a:	8d 83       	std	Y+5, r24	; 0x05
    3b2c:	0f c0       	rjmp	.+30     	; 0x3b4c <ESP_uploade_data+0x380>
    3b2e:	88 ec       	ldi	r24, 0xC8	; 200
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	9c 83       	std	Y+4, r25	; 0x04
    3b34:	8b 83       	std	Y+3, r24	; 0x03
    3b36:	8b 81       	ldd	r24, Y+3	; 0x03
    3b38:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <ESP_uploade_data+0x36e>
    3b3e:	9c 83       	std	Y+4, r25	; 0x04
    3b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b42:	8d 81       	ldd	r24, Y+5	; 0x05
    3b44:	9e 81       	ldd	r25, Y+6	; 0x06
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	69 f7       	brne	.-38     	; 0x3b2e <ESP_uploade_data+0x362>
    3b54:	14 c0       	rjmp	.+40     	; 0x3b7e <ESP_uploade_data+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b56:	6f 81       	ldd	r22, Y+7	; 0x07
    3b58:	78 85       	ldd	r23, Y+8	; 0x08
    3b5a:	89 85       	ldd	r24, Y+9	; 0x09
    3b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	9e 83       	std	Y+6, r25	; 0x06
    3b68:	8d 83       	std	Y+5, r24	; 0x05
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <ESP_uploade_data+0x3aa>
    3b7a:	9a 83       	std	Y+2, r25	; 0x02
    3b7c:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
	}

	_delay_ms(500);
	Clear_REC_Buffer();
    3b7e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Clear_REC_Buffer>
	EF_void_LCD_print((unsigned char*)"Done UPloading");
	_delay_ms(2000);
#endif


}
    3b82:	cd 58       	subi	r28, 0x8D	; 141
    3b84:	df 4f       	sbci	r29, 0xFF	; 255
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <ESP_CLOSE_SOCKET>:


void ESP_CLOSE_SOCKET(void)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
    3b9e:	2e 97       	sbiw	r28, 0x0e	; 14
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
	UART_SEND_string( "AT+CIPCLOSE=0\r\n");
    3baa:	87 ee       	ldi	r24, 0xE7	; 231
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    3bb2:	72 c0       	rjmp	.+228    	; 0x3c98 <ESP_CLOSE_SOCKET+0x102>
	while(!Check_Respond("\r\nOK\r\n"))
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	a0 e8       	ldi	r26, 0x80	; 128
    3bba:	bf e3       	ldi	r27, 0x3F	; 63
    3bbc:	8b 87       	std	Y+11, r24	; 0x0b
    3bbe:	9c 87       	std	Y+12, r25	; 0x0c
    3bc0:	ad 87       	std	Y+13, r26	; 0x0d
    3bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	4a ef       	ldi	r20, 0xFA	; 250
    3bd2:	54 e4       	ldi	r21, 0x44	; 68
    3bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	8f 83       	std	Y+7, r24	; 0x07
    3bde:	98 87       	std	Y+8, r25	; 0x08
    3be0:	a9 87       	std	Y+9, r26	; 0x09
    3be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3be4:	6f 81       	ldd	r22, Y+7	; 0x07
    3be6:	78 85       	ldd	r23, Y+8	; 0x08
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	2c f4       	brge	.+10     	; 0x3c06 <ESP_CLOSE_SOCKET+0x70>
		__ticks = 1;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	3f c0       	rjmp	.+126    	; 0x3c84 <ESP_CLOSE_SOCKET+0xee>
	else if (__tmp > 65535)
    3c06:	6f 81       	ldd	r22, Y+7	; 0x07
    3c08:	78 85       	ldd	r23, Y+8	; 0x08
    3c0a:	89 85       	ldd	r24, Y+9	; 0x09
    3c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	3f ef       	ldi	r19, 0xFF	; 255
    3c12:	4f e7       	ldi	r20, 0x7F	; 127
    3c14:	57 e4       	ldi	r21, 0x47	; 71
    3c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c1a:	18 16       	cp	r1, r24
    3c1c:	4c f5       	brge	.+82     	; 0x3c70 <ESP_CLOSE_SOCKET+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	40 e2       	ldi	r20, 0x20	; 32
    3c2c:	51 e4       	ldi	r21, 0x41	; 65
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	9e 83       	std	Y+6, r25	; 0x06
    3c44:	8d 83       	std	Y+5, r24	; 0x05
    3c46:	0f c0       	rjmp	.+30     	; 0x3c66 <ESP_CLOSE_SOCKET+0xd0>
    3c48:	88 ec       	ldi	r24, 0xC8	; 200
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	9c 83       	std	Y+4, r25	; 0x04
    3c4e:	8b 83       	std	Y+3, r24	; 0x03
    3c50:	8b 81       	ldd	r24, Y+3	; 0x03
    3c52:	9c 81       	ldd	r25, Y+4	; 0x04
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <ESP_CLOSE_SOCKET+0xbe>
    3c58:	9c 83       	std	Y+4, r25	; 0x04
    3c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	9e 83       	std	Y+6, r25	; 0x06
    3c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c66:	8d 81       	ldd	r24, Y+5	; 0x05
    3c68:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	69 f7       	brne	.-38     	; 0x3c48 <ESP_CLOSE_SOCKET+0xb2>
    3c6e:	14 c0       	rjmp	.+40     	; 0x3c98 <ESP_CLOSE_SOCKET+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c70:	6f 81       	ldd	r22, Y+7	; 0x07
    3c72:	78 85       	ldd	r23, Y+8	; 0x08
    3c74:	89 85       	ldd	r24, Y+9	; 0x09
    3c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	9e 83       	std	Y+6, r25	; 0x06
    3c82:	8d 83       	std	Y+5, r24	; 0x05
    3c84:	8d 81       	ldd	r24, Y+5	; 0x05
    3c86:	9e 81       	ldd	r25, Y+6	; 0x06
    3c88:	9a 83       	std	Y+2, r25	; 0x02
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <ESP_CLOSE_SOCKET+0xfa>
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	8e e6       	ldi	r24, 0x6E	; 110
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <Check_Respond>
    3ca0:	88 23       	and	r24, r24
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <ESP_CLOSE_SOCKET+0x110>
    3ca4:	87 cf       	rjmp	.-242    	; 0x3bb4 <ESP_CLOSE_SOCKET+0x1e>
	_delay_ms(2000);
#endif



}
    3ca6:	2e 96       	adiw	r28, 0x0e	; 14
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <Check_Respond>:




char Check_Respond(char * Expected_Respond)
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <Check_Respond+0x6>
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <Check_Respond+0x8>
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	9b 83       	std	Y+3, r25	; 0x03
    3cc6:	8a 83       	std	Y+2, r24	; 0x02
	char Respond_Length=0;
    3cc8:	19 82       	std	Y+1, r1	; 0x01

	Respond_Length=strlen(Expected_Respond);
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cce:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <strlen>
    3cd2:	89 83       	std	Y+1, r24	; 0x01

	if(strncmp(Rec_Data,Expected_Respond, Respond_Length)==0)
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	48 2f       	mov	r20, r24
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	85 eb       	ldi	r24, 0xB5	; 181
    3cdc:	92 e0       	ldi	r25, 0x02	; 2
    3cde:	2a 81       	ldd	r18, Y+2	; 0x02
    3ce0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ce2:	b9 01       	movw	r22, r18
    3ce4:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <strncmp>
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	29 f4       	brne	.+10     	; 0x3cf6 <Check_Respond+0x3e>
	{
		Clear_REC_Buffer();
    3cec:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Clear_REC_Buffer>
		return TRUE;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	8c 83       	std	Y+4, r24	; 0x04
    3cf4:	01 c0       	rjmp	.+2      	; 0x3cf8 <Check_Respond+0x40>
	}
	return FALSE;
    3cf6:	1c 82       	std	Y+4, r1	; 0x04
    3cf8:	8c 81       	ldd	r24, Y+4	; 0x04


}
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <Check_Word_in_Respond>:


char Check_Word_in_Respond(char * Word)
{
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <Check_Word_in_Respond+0x6>
    3d0e:	0f 92       	push	r0
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01


	if(strstr(Rec_Data,Word) != 0)
    3d18:	85 eb       	ldi	r24, 0xB5	; 181
    3d1a:	92 e0       	ldi	r25, 0x02	; 2
    3d1c:	29 81       	ldd	r18, Y+1	; 0x01
    3d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    3d20:	b9 01       	movw	r22, r18
    3d22:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <strstr>
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	29 f0       	breq	.+10     	; 0x3d34 <Check_Word_in_Respond+0x2c>
	{
		Clear_REC_Buffer();
    3d2a:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <Clear_REC_Buffer>
		return TRUE;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	8b 83       	std	Y+3, r24	; 0x03
    3d32:	01 c0       	rjmp	.+2      	; 0x3d36 <Check_Word_in_Respond+0x2e>
	}

	return FALSE;
    3d34:	1b 82       	std	Y+3, r1	; 0x03
    3d36:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <Clear_REC_Buffer>:

void Clear_REC_Buffer(void)
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
	Counter=0;
    3d4c:	10 92 b2 02 	sts	0x02B2, r1
	memset(Rec_Data,0,DEFAULT_BUFFER_SIZE);
    3d50:	85 eb       	ldi	r24, 0xB5	; 181
    3d52:	92 e0       	ldi	r25, 0x02	; 2
    3d54:	60 e0       	ldi	r22, 0x00	; 0
    3d56:	70 e0       	ldi	r23, 0x00	; 0
    3d58:	4c e3       	ldi	r20, 0x3C	; 60
    3d5a:	50 e0       	ldi	r21, 0x00	; 0
    3d5c:	0e 94 43 27 	call	0x4e86	; 0x4e86 <memset>
}
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	08 95       	ret

00003d66 <REC_from_interrupt>:

void REC_from_interrupt(void)
{
    3d66:	df 93       	push	r29
    3d68:	cf 93       	push	r28
    3d6a:	0f 92       	push	r0
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62

	uint8_t oldsrg = SREG;
    3d70:	ef e5       	ldi	r30, 0x5F	; 95
    3d72:	f0 e0       	ldi	r31, 0x00	; 0
    3d74:	80 81       	ld	r24, Z
    3d76:	89 83       	std	Y+1, r24	; 0x01
	cli();
    3d78:	f8 94       	cli
	Rec_Data[Counter] = UDR;
    3d7a:	80 91 b2 02 	lds	r24, 0x02B2
    3d7e:	88 2f       	mov	r24, r24
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	ec e2       	ldi	r30, 0x2C	; 44
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	20 81       	ld	r18, Z
    3d88:	fc 01       	movw	r30, r24
    3d8a:	eb 54       	subi	r30, 0x4B	; 75
    3d8c:	fd 4f       	sbci	r31, 0xFD	; 253
    3d8e:	20 83       	st	Z, r18
	Counter++;
    3d90:	80 91 b2 02 	lds	r24, 0x02B2
    3d94:	8f 5f       	subi	r24, 0xFF	; 255
    3d96:	80 93 b2 02 	sts	0x02B2, r24
	if(Counter == DEFAULT_BUFFER_SIZE){
    3d9a:	80 91 b2 02 	lds	r24, 0x02B2
    3d9e:	8c 33       	cpi	r24, 0x3C	; 60
    3da0:	11 f4       	brne	.+4      	; 0x3da6 <REC_from_interrupt+0x40>
		Counter = 0; //pointer = 0;
    3da2:	10 92 b2 02 	sts	0x02B2, r1
	}
	SREG = oldsrg;
    3da6:	ef e5       	ldi	r30, 0x5F	; 95
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	80 83       	st	Z, r24



}
    3dae:	0f 90       	pop	r0
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	08 95       	ret

00003db6 <init_fun>:
 */
#include"../main.h"


ret_state init_fun(void)
{
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	df 93       	push	r29
    3dbc:	cf 93       	push	r28
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
    3dc2:	c5 58       	subi	r28, 0x85	; 133
    3dc4:	d0 40       	sbci	r29, 0x00	; 0
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61

	unsigned char data1=0,data2=0,data3=0,data4=0,ERROR_ID,RAW_DATA1,RAW_DATA2,First_Reading=TRUE,Status=0;
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e2 58       	subi	r30, 0x82	; 130
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	10 82       	st	Z, r1
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e1 58       	subi	r30, 0x81	; 129
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	10 82       	st	Z, r1
    3de0:	fe 01       	movw	r30, r28
    3de2:	e0 58       	subi	r30, 0x80	; 128
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	10 82       	st	Z, r1
    3de8:	fe 01       	movw	r30, r28
    3dea:	ef 57       	subi	r30, 0x7F	; 127
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	10 82       	st	Z, r1
    3df0:	fe 01       	movw	r30, r28
    3df2:	e3 58       	subi	r30, 0x83	; 131
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	80 83       	st	Z, r24
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	eb 57       	subi	r30, 0x7B	; 123
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	10 82       	st	Z, r1

	unsigned int CO2=0,TVOC=0;
    3e02:	fe 01       	movw	r30, r28
    3e04:	e5 58       	subi	r30, 0x85	; 133
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	11 82       	std	Z+1, r1	; 0x01
    3e0a:	10 82       	st	Z, r1
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e7 58       	subi	r30, 0x87	; 135
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	11 82       	std	Z+1, r1	; 0x01
    3e14:	10 82       	st	Z, r1
	unsigned long int i=0,CO2_AVG;
    3e16:	fe 01       	movw	r30, r28
    3e18:	eb 58       	subi	r30, 0x8B	; 139
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	10 82       	st	Z, r1
    3e1e:	11 82       	std	Z+1, r1	; 0x01
    3e20:	12 82       	std	Z+2, r1	; 0x02
    3e22:	13 82       	std	Z+3, r1	; 0x03

	sei();
    3e24:	78 94       	sei

	DDRD |=(1<<PD5);
    3e26:	a1 e3       	ldi	r26, 0x31	; 49
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	e1 e3       	ldi	r30, 0x31	; 49
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	80 62       	ori	r24, 0x20	; 32
    3e32:	8c 93       	st	X, r24

	EF_void_LCD_init();
    3e34:	0e 94 2e 08 	call	0x105c	; 0x105c <EF_void_LCD_init>
	ESP_init();
    3e38:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <ESP_init>

	TWI_Init();
    3e3c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <TWI_Init>

	EF_void_LCD_Clear_Screen();
    3e40:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Init state");
    3e44:	87 ef       	ldi	r24, 0xF7	; 247
    3e46:	91 e0       	ldi	r25, 0x01	; 1
    3e48:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e3 59       	subi	r30, 0x93	; 147
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	aa ef       	ldi	r26, 0xFA	; 250
    3e58:	b4 e4       	ldi	r27, 0x44	; 68
    3e5a:	80 83       	st	Z, r24
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	a2 83       	std	Z+2, r26	; 0x02
    3e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e62:	8e 01       	movw	r16, r28
    3e64:	07 59       	subi	r16, 0x97	; 151
    3e66:	1f 4f       	sbci	r17, 0xFF	; 255
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e3 59       	subi	r30, 0x93	; 147
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	60 81       	ld	r22, Z
    3e70:	71 81       	ldd	r23, Z+1	; 0x01
    3e72:	82 81       	ldd	r24, Z+2	; 0x02
    3e74:	93 81       	ldd	r25, Z+3	; 0x03
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	4a ef       	ldi	r20, 0xFA	; 250
    3e7c:	54 e4       	ldi	r21, 0x44	; 68
    3e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	f8 01       	movw	r30, r16
    3e88:	80 83       	st	Z, r24
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	a2 83       	std	Z+2, r26	; 0x02
    3e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e90:	fe 01       	movw	r30, r28
    3e92:	e7 59       	subi	r30, 0x97	; 151
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e8       	ldi	r20, 0x80	; 128
    3ea4:	5f e3       	ldi	r21, 0x3F	; 63
    3ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eaa:	88 23       	and	r24, r24
    3eac:	44 f4       	brge	.+16     	; 0x3ebe <init_fun+0x108>
		__ticks = 1;
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e9 59       	subi	r30, 0x99	; 153
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	64 c0       	rjmp	.+200    	; 0x3f86 <init_fun+0x1d0>
	else if (__tmp > 65535)
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e7 59       	subi	r30, 0x97	; 151
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	60 81       	ld	r22, Z
    3ec6:	71 81       	ldd	r23, Z+1	; 0x01
    3ec8:	82 81       	ldd	r24, Z+2	; 0x02
    3eca:	93 81       	ldd	r25, Z+3	; 0x03
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	3f ef       	ldi	r19, 0xFF	; 255
    3ed0:	4f e7       	ldi	r20, 0x7F	; 127
    3ed2:	57 e4       	ldi	r21, 0x47	; 71
    3ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ed8:	18 16       	cp	r1, r24
    3eda:	0c f0       	brlt	.+2      	; 0x3ede <init_fun+0x128>
    3edc:	43 c0       	rjmp	.+134    	; 0x3f64 <init_fun+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ede:	fe 01       	movw	r30, r28
    3ee0:	e3 59       	subi	r30, 0x93	; 147
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	60 81       	ld	r22, Z
    3ee6:	71 81       	ldd	r23, Z+1	; 0x01
    3ee8:	82 81       	ldd	r24, Z+2	; 0x02
    3eea:	93 81       	ldd	r25, Z+3	; 0x03
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e2       	ldi	r20, 0x20	; 32
    3ef2:	51 e4       	ldi	r21, 0x41	; 65
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8e 01       	movw	r16, r28
    3efe:	09 59       	subi	r16, 0x99	; 153
    3f00:	1f 4f       	sbci	r17, 0xFF	; 255
    3f02:	bc 01       	movw	r22, r24
    3f04:	cd 01       	movw	r24, r26
    3f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	f8 01       	movw	r30, r16
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	80 83       	st	Z, r24
    3f14:	1f c0       	rjmp	.+62     	; 0x3f54 <init_fun+0x19e>
    3f16:	fe 01       	movw	r30, r28
    3f18:	eb 59       	subi	r30, 0x9B	; 155
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	88 ec       	ldi	r24, 0xC8	; 200
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	91 83       	std	Z+1, r25	; 0x01
    3f22:	80 83       	st	Z, r24
    3f24:	fe 01       	movw	r30, r28
    3f26:	eb 59       	subi	r30, 0x9B	; 155
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <init_fun+0x178>
    3f32:	fe 01       	movw	r30, r28
    3f34:	eb 59       	subi	r30, 0x9B	; 155
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f3c:	de 01       	movw	r26, r28
    3f3e:	a9 59       	subi	r26, 0x99	; 153
    3f40:	bf 4f       	sbci	r27, 0xFF	; 255
    3f42:	fe 01       	movw	r30, r28
    3f44:	e9 59       	subi	r30, 0x99	; 153
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	11 96       	adiw	r26, 0x01	; 1
    3f50:	9c 93       	st	X, r25
    3f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f54:	fe 01       	movw	r30, r28
    3f56:	e9 59       	subi	r30, 0x99	; 153
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	80 81       	ld	r24, Z
    3f5c:	91 81       	ldd	r25, Z+1	; 0x01
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	d1 f6       	brne	.-76     	; 0x3f16 <init_fun+0x160>
    3f62:	27 c0       	rjmp	.+78     	; 0x3fb2 <init_fun+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	8e 01       	movw	r16, r28
    3f66:	09 59       	subi	r16, 0x99	; 153
    3f68:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e7 59       	subi	r30, 0x97	; 151
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	f8 01       	movw	r30, r16
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	80 83       	st	Z, r24
    3f86:	de 01       	movw	r26, r28
    3f88:	ad 59       	subi	r26, 0x9D	; 157
    3f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f8c:	fe 01       	movw	r30, r28
    3f8e:	e9 59       	subi	r30, 0x99	; 153
    3f90:	ff 4f       	sbci	r31, 0xFF	; 255
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	8d 93       	st	X+, r24
    3f98:	9c 93       	st	X, r25
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	ed 59       	subi	r30, 0x9D	; 157
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <init_fun+0x1ee>
    3fa8:	fe 01       	movw	r30, r28
    3faa:	ed 59       	subi	r30, 0x9D	; 157
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	91 83       	std	Z+1, r25	; 0x01
    3fb0:	80 83       	st	Z, r24
	_delay_ms(2000);




	ESP_Echo_Enable(FALSE);
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <ESP_Echo_Enable>

	ESP_Work_Mode(BOTH);
    3fb8:	83 e0       	ldi	r24, 0x03	; 3
    3fba:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <ESP_Work_Mode>


	ESP_Multiple_Connections_Enable(FALSE);
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	0e 94 42 18 	call	0x3084	; 0x3084 <ESP_Multiple_Connections_Enable>

	ESP_transmission_Mode(NORMAL);
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ESP_transmission_Mode>



	// read HW ID

	TWI_Start();
    3fca:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110110);
    3fce:	86 eb       	ldi	r24, 0xB6	; 182
    3fd0:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(0x20);
    3fd4:	80 e2       	ldi	r24, 0x20	; 32
    3fd6:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Stop();
    3fda:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

	TWI_Start();
    3fde:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110111);
    3fe2:	87 eb       	ldi	r24, 0xB7	; 183
    3fe4:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_ReceiveData_NACK(&Status);
    3fe8:	ce 01       	movw	r24, r28
    3fea:	8b 57       	subi	r24, 0x7B	; 123
    3fec:	9f 4f       	sbci	r25, 0xFF	; 255
    3fee:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>
	TWI_Stop();
    3ff2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e1 5a       	subi	r30, 0xA1	; 161
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	a8 ec       	ldi	r26, 0xC8	; 200
    4002:	b2 e4       	ldi	r27, 0x42	; 66
    4004:	80 83       	st	Z, r24
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	a2 83       	std	Z+2, r26	; 0x02
    400a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400c:	8e 01       	movw	r16, r28
    400e:	05 5a       	subi	r16, 0xA5	; 165
    4010:	1f 4f       	sbci	r17, 0xFF	; 255
    4012:	fe 01       	movw	r30, r28
    4014:	e1 5a       	subi	r30, 0xA1	; 161
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	82 81       	ldd	r24, Z+2	; 0x02
    401e:	93 81       	ldd	r25, Z+3	; 0x03
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	4a ef       	ldi	r20, 0xFA	; 250
    4026:	54 e4       	ldi	r21, 0x44	; 68
    4028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402c:	dc 01       	movw	r26, r24
    402e:	cb 01       	movw	r24, r22
    4030:	f8 01       	movw	r30, r16
    4032:	80 83       	st	Z, r24
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	a2 83       	std	Z+2, r26	; 0x02
    4038:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    403a:	fe 01       	movw	r30, r28
    403c:	e5 5a       	subi	r30, 0xA5	; 165
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	60 81       	ld	r22, Z
    4042:	71 81       	ldd	r23, Z+1	; 0x01
    4044:	82 81       	ldd	r24, Z+2	; 0x02
    4046:	93 81       	ldd	r25, Z+3	; 0x03
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e8       	ldi	r20, 0x80	; 128
    404e:	5f e3       	ldi	r21, 0x3F	; 63
    4050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4054:	88 23       	and	r24, r24
    4056:	44 f4       	brge	.+16     	; 0x4068 <init_fun+0x2b2>
		__ticks = 1;
    4058:	fe 01       	movw	r30, r28
    405a:	e7 5a       	subi	r30, 0xA7	; 167
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
    4066:	64 c0       	rjmp	.+200    	; 0x4130 <init_fun+0x37a>
	else if (__tmp > 65535)
    4068:	fe 01       	movw	r30, r28
    406a:	e5 5a       	subi	r30, 0xA5	; 165
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	3f ef       	ldi	r19, 0xFF	; 255
    407a:	4f e7       	ldi	r20, 0x7F	; 127
    407c:	57 e4       	ldi	r21, 0x47	; 71
    407e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4082:	18 16       	cp	r1, r24
    4084:	0c f0       	brlt	.+2      	; 0x4088 <init_fun+0x2d2>
    4086:	43 c0       	rjmp	.+134    	; 0x410e <init_fun+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4088:	fe 01       	movw	r30, r28
    408a:	e1 5a       	subi	r30, 0xA1	; 161
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e2       	ldi	r20, 0x20	; 32
    409c:	51 e4       	ldi	r21, 0x41	; 65
    409e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	8e 01       	movw	r16, r28
    40a8:	07 5a       	subi	r16, 0xA7	; 167
    40aa:	1f 4f       	sbci	r17, 0xFF	; 255
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	f8 01       	movw	r30, r16
    40ba:	91 83       	std	Z+1, r25	; 0x01
    40bc:	80 83       	st	Z, r24
    40be:	1f c0       	rjmp	.+62     	; 0x40fe <init_fun+0x348>
    40c0:	fe 01       	movw	r30, r28
    40c2:	e9 5a       	subi	r30, 0xA9	; 169
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	88 ec       	ldi	r24, 0xC8	; 200
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	91 83       	std	Z+1, r25	; 0x01
    40cc:	80 83       	st	Z, r24
    40ce:	fe 01       	movw	r30, r28
    40d0:	e9 5a       	subi	r30, 0xA9	; 169
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	80 81       	ld	r24, Z
    40d6:	91 81       	ldd	r25, Z+1	; 0x01
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <init_fun+0x322>
    40dc:	fe 01       	movw	r30, r28
    40de:	e9 5a       	subi	r30, 0xA9	; 169
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	91 83       	std	Z+1, r25	; 0x01
    40e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e6:	de 01       	movw	r26, r28
    40e8:	a7 5a       	subi	r26, 0xA7	; 167
    40ea:	bf 4f       	sbci	r27, 0xFF	; 255
    40ec:	fe 01       	movw	r30, r28
    40ee:	e7 5a       	subi	r30, 0xA7	; 167
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	80 81       	ld	r24, Z
    40f4:	91 81       	ldd	r25, Z+1	; 0x01
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	11 96       	adiw	r26, 0x01	; 1
    40fa:	9c 93       	st	X, r25
    40fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fe:	fe 01       	movw	r30, r28
    4100:	e7 5a       	subi	r30, 0xA7	; 167
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	80 81       	ld	r24, Z
    4106:	91 81       	ldd	r25, Z+1	; 0x01
    4108:	00 97       	sbiw	r24, 0x00	; 0
    410a:	d1 f6       	brne	.-76     	; 0x40c0 <init_fun+0x30a>
    410c:	27 c0       	rjmp	.+78     	; 0x415c <init_fun+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    410e:	8e 01       	movw	r16, r28
    4110:	07 5a       	subi	r16, 0xA7	; 167
    4112:	1f 4f       	sbci	r17, 0xFF	; 255
    4114:	fe 01       	movw	r30, r28
    4116:	e5 5a       	subi	r30, 0xA5	; 165
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	60 81       	ld	r22, Z
    411c:	71 81       	ldd	r23, Z+1	; 0x01
    411e:	82 81       	ldd	r24, Z+2	; 0x02
    4120:	93 81       	ldd	r25, Z+3	; 0x03
    4122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	f8 01       	movw	r30, r16
    412c:	91 83       	std	Z+1, r25	; 0x01
    412e:	80 83       	st	Z, r24
    4130:	de 01       	movw	r26, r28
    4132:	ab 5a       	subi	r26, 0xAB	; 171
    4134:	bf 4f       	sbci	r27, 0xFF	; 255
    4136:	fe 01       	movw	r30, r28
    4138:	e7 5a       	subi	r30, 0xA7	; 167
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	91 81       	ldd	r25, Z+1	; 0x01
    4140:	8d 93       	st	X+, r24
    4142:	9c 93       	st	X, r25
    4144:	fe 01       	movw	r30, r28
    4146:	eb 5a       	subi	r30, 0xAB	; 171
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	80 81       	ld	r24, Z
    414c:	91 81       	ldd	r25, Z+1	; 0x01
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <init_fun+0x398>
    4152:	fe 01       	movw	r30, r28
    4154:	eb 5a       	subi	r30, 0xAB	; 171
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	80 83       	st	Z, r24
    415c:	fe 01       	movw	r30, r28
    415e:	ef 5a       	subi	r30, 0xAF	; 175
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	aa e7       	ldi	r26, 0x7A	; 122
    4168:	b4 e4       	ldi	r27, 0x44	; 68
    416a:	80 83       	st	Z, r24
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	a2 83       	std	Z+2, r26	; 0x02
    4170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4172:	8e 01       	movw	r16, r28
    4174:	03 5b       	subi	r16, 0xB3	; 179
    4176:	1f 4f       	sbci	r17, 0xFF	; 255
    4178:	fe 01       	movw	r30, r28
    417a:	ef 5a       	subi	r30, 0xAF	; 175
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	4a ef       	ldi	r20, 0xFA	; 250
    418c:	54 e4       	ldi	r21, 0x44	; 68
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	f8 01       	movw	r30, r16
    4198:	80 83       	st	Z, r24
    419a:	91 83       	std	Z+1, r25	; 0x01
    419c:	a2 83       	std	Z+2, r26	; 0x02
    419e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41a0:	fe 01       	movw	r30, r28
    41a2:	e3 5b       	subi	r30, 0xB3	; 179
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	60 81       	ld	r22, Z
    41a8:	71 81       	ldd	r23, Z+1	; 0x01
    41aa:	82 81       	ldd	r24, Z+2	; 0x02
    41ac:	93 81       	ldd	r25, Z+3	; 0x03
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	40 e8       	ldi	r20, 0x80	; 128
    41b4:	5f e3       	ldi	r21, 0x3F	; 63
    41b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41ba:	88 23       	and	r24, r24
    41bc:	44 f4       	brge	.+16     	; 0x41ce <init_fun+0x418>
		__ticks = 1;
    41be:	fe 01       	movw	r30, r28
    41c0:	e5 5b       	subi	r30, 0xB5	; 181
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
    41cc:	64 c0       	rjmp	.+200    	; 0x4296 <init_fun+0x4e0>
	else if (__tmp > 65535)
    41ce:	fe 01       	movw	r30, r28
    41d0:	e3 5b       	subi	r30, 0xB3	; 179
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	3f ef       	ldi	r19, 0xFF	; 255
    41e0:	4f e7       	ldi	r20, 0x7F	; 127
    41e2:	57 e4       	ldi	r21, 0x47	; 71
    41e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e8:	18 16       	cp	r1, r24
    41ea:	0c f0       	brlt	.+2      	; 0x41ee <init_fun+0x438>
    41ec:	43 c0       	rjmp	.+134    	; 0x4274 <init_fun+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ee:	fe 01       	movw	r30, r28
    41f0:	ef 5a       	subi	r30, 0xAF	; 175
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	60 81       	ld	r22, Z
    41f6:	71 81       	ldd	r23, Z+1	; 0x01
    41f8:	82 81       	ldd	r24, Z+2	; 0x02
    41fa:	93 81       	ldd	r25, Z+3	; 0x03
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	40 e2       	ldi	r20, 0x20	; 32
    4202:	51 e4       	ldi	r21, 0x41	; 65
    4204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	8e 01       	movw	r16, r28
    420e:	05 5b       	subi	r16, 0xB5	; 181
    4210:	1f 4f       	sbci	r17, 0xFF	; 255
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	f8 01       	movw	r30, r16
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
    4224:	1f c0       	rjmp	.+62     	; 0x4264 <init_fun+0x4ae>
    4226:	fe 01       	movw	r30, r28
    4228:	e7 5b       	subi	r30, 0xB7	; 183
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	88 ec       	ldi	r24, 0xC8	; 200
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	91 83       	std	Z+1, r25	; 0x01
    4232:	80 83       	st	Z, r24
    4234:	fe 01       	movw	r30, r28
    4236:	e7 5b       	subi	r30, 0xB7	; 183
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 81       	ld	r24, Z
    423c:	91 81       	ldd	r25, Z+1	; 0x01
    423e:	01 97       	sbiw	r24, 0x01	; 1
    4240:	f1 f7       	brne	.-4      	; 0x423e <init_fun+0x488>
    4242:	fe 01       	movw	r30, r28
    4244:	e7 5b       	subi	r30, 0xB7	; 183
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424c:	de 01       	movw	r26, r28
    424e:	a5 5b       	subi	r26, 0xB5	; 181
    4250:	bf 4f       	sbci	r27, 0xFF	; 255
    4252:	fe 01       	movw	r30, r28
    4254:	e5 5b       	subi	r30, 0xB5	; 181
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	80 81       	ld	r24, Z
    425a:	91 81       	ldd	r25, Z+1	; 0x01
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	11 96       	adiw	r26, 0x01	; 1
    4260:	9c 93       	st	X, r25
    4262:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4264:	fe 01       	movw	r30, r28
    4266:	e5 5b       	subi	r30, 0xB5	; 181
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	80 81       	ld	r24, Z
    426c:	91 81       	ldd	r25, Z+1	; 0x01
    426e:	00 97       	sbiw	r24, 0x00	; 0
    4270:	d1 f6       	brne	.-76     	; 0x4226 <init_fun+0x470>
    4272:	27 c0       	rjmp	.+78     	; 0x42c2 <init_fun+0x50c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4274:	8e 01       	movw	r16, r28
    4276:	05 5b       	subi	r16, 0xB5	; 181
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	fe 01       	movw	r30, r28
    427c:	e3 5b       	subi	r30, 0xB3	; 179
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	f8 01       	movw	r30, r16
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
    4296:	de 01       	movw	r26, r28
    4298:	a9 5b       	subi	r26, 0xB9	; 185
    429a:	bf 4f       	sbci	r27, 0xFF	; 255
    429c:	fe 01       	movw	r30, r28
    429e:	e5 5b       	subi	r30, 0xB5	; 181
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	80 81       	ld	r24, Z
    42a4:	91 81       	ldd	r25, Z+1	; 0x01
    42a6:	8d 93       	st	X+, r24
    42a8:	9c 93       	st	X, r25
    42aa:	fe 01       	movw	r30, r28
    42ac:	e9 5b       	subi	r30, 0xB9	; 185
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <init_fun+0x4fe>
    42b8:	fe 01       	movw	r30, r28
    42ba:	e9 5b       	subi	r30, 0xB9	; 185
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
	_delay_ms(100);

	// read HW ID

	_delay_ms(1000);
	TWI_Start();
    42c2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110110);
    42c6:	86 eb       	ldi	r24, 0xB6	; 182
    42c8:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(0x00);
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Stop();
    42d2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

	TWI_Start();
    42d6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110111);
    42da:	87 eb       	ldi	r24, 0xB7	; 183
    42dc:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_ReceiveData_NACK(&Status);
    42e0:	ce 01       	movw	r24, r28
    42e2:	8b 57       	subi	r24, 0x7B	; 123
    42e4:	9f 4f       	sbci	r25, 0xFF	; 255
    42e6:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>
	TWI_Stop();
    42ea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>
    42ee:	fe 01       	movw	r30, r28
    42f0:	ed 5b       	subi	r30, 0xBD	; 189
    42f2:	ff 4f       	sbci	r31, 0xFF	; 255
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	aa e7       	ldi	r26, 0x7A	; 122
    42fa:	b4 e4       	ldi	r27, 0x44	; 68
    42fc:	80 83       	st	Z, r24
    42fe:	91 83       	std	Z+1, r25	; 0x01
    4300:	a2 83       	std	Z+2, r26	; 0x02
    4302:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4304:	8e 01       	movw	r16, r28
    4306:	01 5c       	subi	r16, 0xC1	; 193
    4308:	1f 4f       	sbci	r17, 0xFF	; 255
    430a:	fe 01       	movw	r30, r28
    430c:	ed 5b       	subi	r30, 0xBD	; 189
    430e:	ff 4f       	sbci	r31, 0xFF	; 255
    4310:	60 81       	ld	r22, Z
    4312:	71 81       	ldd	r23, Z+1	; 0x01
    4314:	82 81       	ldd	r24, Z+2	; 0x02
    4316:	93 81       	ldd	r25, Z+3	; 0x03
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	4a ef       	ldi	r20, 0xFA	; 250
    431e:	54 e4       	ldi	r21, 0x44	; 68
    4320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	f8 01       	movw	r30, r16
    432a:	80 83       	st	Z, r24
    432c:	91 83       	std	Z+1, r25	; 0x01
    432e:	a2 83       	std	Z+2, r26	; 0x02
    4330:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4332:	fe 01       	movw	r30, r28
    4334:	ff 96       	adiw	r30, 0x3f	; 63
    4336:	60 81       	ld	r22, Z
    4338:	71 81       	ldd	r23, Z+1	; 0x01
    433a:	82 81       	ldd	r24, Z+2	; 0x02
    433c:	93 81       	ldd	r25, Z+3	; 0x03
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e8       	ldi	r20, 0x80	; 128
    4344:	5f e3       	ldi	r21, 0x3F	; 63
    4346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    434a:	88 23       	and	r24, r24
    434c:	2c f4       	brge	.+10     	; 0x4358 <init_fun+0x5a2>
		__ticks = 1;
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	9e af       	std	Y+62, r25	; 0x3e
    4354:	8d af       	std	Y+61, r24	; 0x3d
    4356:	46 c0       	rjmp	.+140    	; 0x43e4 <init_fun+0x62e>
	else if (__tmp > 65535)
    4358:	fe 01       	movw	r30, r28
    435a:	ff 96       	adiw	r30, 0x3f	; 63
    435c:	60 81       	ld	r22, Z
    435e:	71 81       	ldd	r23, Z+1	; 0x01
    4360:	82 81       	ldd	r24, Z+2	; 0x02
    4362:	93 81       	ldd	r25, Z+3	; 0x03
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	64 f5       	brge	.+88     	; 0x43cc <init_fun+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	fe 01       	movw	r30, r28
    4376:	ed 5b       	subi	r30, 0xBD	; 189
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	60 81       	ld	r22, Z
    437c:	71 81       	ldd	r23, Z+1	; 0x01
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	40 e2       	ldi	r20, 0x20	; 32
    4388:	51 e4       	ldi	r21, 0x41	; 65
    438a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	bc 01       	movw	r22, r24
    4394:	cd 01       	movw	r24, r26
    4396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	9e af       	std	Y+62, r25	; 0x3e
    43a0:	8d af       	std	Y+61, r24	; 0x3d
    43a2:	0f c0       	rjmp	.+30     	; 0x43c2 <init_fun+0x60c>
    43a4:	88 ec       	ldi	r24, 0xC8	; 200
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	9c af       	std	Y+60, r25	; 0x3c
    43aa:	8b af       	std	Y+59, r24	; 0x3b
    43ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    43ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	f1 f7       	brne	.-4      	; 0x43b0 <init_fun+0x5fa>
    43b4:	9c af       	std	Y+60, r25	; 0x3c
    43b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    43ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	9e af       	std	Y+62, r25	; 0x3e
    43c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    43c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    43c6:	00 97       	sbiw	r24, 0x00	; 0
    43c8:	69 f7       	brne	.-38     	; 0x43a4 <init_fun+0x5ee>
    43ca:	16 c0       	rjmp	.+44     	; 0x43f8 <init_fun+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43cc:	fe 01       	movw	r30, r28
    43ce:	ff 96       	adiw	r30, 0x3f	; 63
    43d0:	60 81       	ld	r22, Z
    43d2:	71 81       	ldd	r23, Z+1	; 0x01
    43d4:	82 81       	ldd	r24, Z+2	; 0x02
    43d6:	93 81       	ldd	r25, Z+3	; 0x03
    43d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	9e af       	std	Y+62, r25	; 0x3e
    43e2:	8d af       	std	Y+61, r24	; 0x3d
    43e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    43e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    43e8:	9a af       	std	Y+58, r25	; 0x3a
    43ea:	89 af       	std	Y+57, r24	; 0x39
    43ec:	89 ad       	ldd	r24, Y+57	; 0x39
    43ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	f1 f7       	brne	.-4      	; 0x43f0 <init_fun+0x63a>
    43f4:	9a af       	std	Y+58, r25	; 0x3a
    43f6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);




	TWI_Start();
    43f8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110110);
    43fc:	86 eb       	ldi	r24, 0xB6	; 182
    43fe:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(0xF4);
    4402:	84 ef       	ldi	r24, 0xF4	; 244
    4404:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Stop();
    4408:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	aa e7       	ldi	r26, 0x7A	; 122
    4412:	b4 e4       	ldi	r27, 0x44	; 68
    4414:	8d ab       	std	Y+53, r24	; 0x35
    4416:	9e ab       	std	Y+54, r25	; 0x36
    4418:	af ab       	std	Y+55, r26	; 0x37
    441a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441c:	6d a9       	ldd	r22, Y+53	; 0x35
    441e:	7e a9       	ldd	r23, Y+54	; 0x36
    4420:	8f a9       	ldd	r24, Y+55	; 0x37
    4422:	98 ad       	ldd	r25, Y+56	; 0x38
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	4a ef       	ldi	r20, 0xFA	; 250
    442a:	54 e4       	ldi	r21, 0x44	; 68
    442c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	89 ab       	std	Y+49, r24	; 0x31
    4436:	9a ab       	std	Y+50, r25	; 0x32
    4438:	ab ab       	std	Y+51, r26	; 0x33
    443a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    443c:	69 a9       	ldd	r22, Y+49	; 0x31
    443e:	7a a9       	ldd	r23, Y+50	; 0x32
    4440:	8b a9       	ldd	r24, Y+51	; 0x33
    4442:	9c a9       	ldd	r25, Y+52	; 0x34
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	40 e8       	ldi	r20, 0x80	; 128
    444a:	5f e3       	ldi	r21, 0x3F	; 63
    444c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4450:	88 23       	and	r24, r24
    4452:	2c f4       	brge	.+10     	; 0x445e <init_fun+0x6a8>
		__ticks = 1;
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	98 ab       	std	Y+48, r25	; 0x30
    445a:	8f a7       	std	Y+47, r24	; 0x2f
    445c:	3f c0       	rjmp	.+126    	; 0x44dc <init_fun+0x726>
	else if (__tmp > 65535)
    445e:	69 a9       	ldd	r22, Y+49	; 0x31
    4460:	7a a9       	ldd	r23, Y+50	; 0x32
    4462:	8b a9       	ldd	r24, Y+51	; 0x33
    4464:	9c a9       	ldd	r25, Y+52	; 0x34
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	3f ef       	ldi	r19, 0xFF	; 255
    446a:	4f e7       	ldi	r20, 0x7F	; 127
    446c:	57 e4       	ldi	r21, 0x47	; 71
    446e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4472:	18 16       	cp	r1, r24
    4474:	4c f5       	brge	.+82     	; 0x44c8 <init_fun+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4476:	6d a9       	ldd	r22, Y+53	; 0x35
    4478:	7e a9       	ldd	r23, Y+54	; 0x36
    447a:	8f a9       	ldd	r24, Y+55	; 0x37
    447c:	98 ad       	ldd	r25, Y+56	; 0x38
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	40 e2       	ldi	r20, 0x20	; 32
    4484:	51 e4       	ldi	r21, 0x41	; 65
    4486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	bc 01       	movw	r22, r24
    4490:	cd 01       	movw	r24, r26
    4492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	98 ab       	std	Y+48, r25	; 0x30
    449c:	8f a7       	std	Y+47, r24	; 0x2f
    449e:	0f c0       	rjmp	.+30     	; 0x44be <init_fun+0x708>
    44a0:	88 ec       	ldi	r24, 0xC8	; 200
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	9e a7       	std	Y+46, r25	; 0x2e
    44a6:	8d a7       	std	Y+45, r24	; 0x2d
    44a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    44aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    44ac:	01 97       	sbiw	r24, 0x01	; 1
    44ae:	f1 f7       	brne	.-4      	; 0x44ac <init_fun+0x6f6>
    44b0:	9e a7       	std	Y+46, r25	; 0x2e
    44b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    44b6:	98 a9       	ldd	r25, Y+48	; 0x30
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	98 ab       	std	Y+48, r25	; 0x30
    44bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44be:	8f a5       	ldd	r24, Y+47	; 0x2f
    44c0:	98 a9       	ldd	r25, Y+48	; 0x30
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	69 f7       	brne	.-38     	; 0x44a0 <init_fun+0x6ea>
    44c6:	14 c0       	rjmp	.+40     	; 0x44f0 <init_fun+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c8:	69 a9       	ldd	r22, Y+49	; 0x31
    44ca:	7a a9       	ldd	r23, Y+50	; 0x32
    44cc:	8b a9       	ldd	r24, Y+51	; 0x33
    44ce:	9c a9       	ldd	r25, Y+52	; 0x34
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	98 ab       	std	Y+48, r25	; 0x30
    44da:	8f a7       	std	Y+47, r24	; 0x2f
    44dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    44de:	98 a9       	ldd	r25, Y+48	; 0x30
    44e0:	9c a7       	std	Y+44, r25	; 0x2c
    44e2:	8b a7       	std	Y+43, r24	; 0x2b
    44e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    44e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	f1 f7       	brne	.-4      	; 0x44e8 <init_fun+0x732>
    44ec:	9c a7       	std	Y+44, r25	; 0x2c
    44ee:	8b a7       	std	Y+43, r24	; 0x2b



	_delay_ms(1000);

	TWI_Start();
    44f0:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110110);
    44f4:	86 eb       	ldi	r24, 0xB6	; 182
    44f6:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(0x00);
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Stop();
    4500:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

	TWI_Start();
    4504:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110111);
    4508:	87 eb       	ldi	r24, 0xB7	; 183
    450a:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_ReceiveData_NACK(&Status);
    450e:	ce 01       	movw	r24, r28
    4510:	8b 57       	subi	r24, 0x7B	; 123
    4512:	9f 4f       	sbci	r25, 0xFF	; 255
    4514:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>
	TWI_Stop();
    4518:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	aa e7       	ldi	r26, 0x7A	; 122
    4522:	b4 e4       	ldi	r27, 0x44	; 68
    4524:	8f a3       	std	Y+39, r24	; 0x27
    4526:	98 a7       	std	Y+40, r25	; 0x28
    4528:	a9 a7       	std	Y+41, r26	; 0x29
    452a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    452c:	6f a1       	ldd	r22, Y+39	; 0x27
    452e:	78 a5       	ldd	r23, Y+40	; 0x28
    4530:	89 a5       	ldd	r24, Y+41	; 0x29
    4532:	9a a5       	ldd	r25, Y+42	; 0x2a
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	4a ef       	ldi	r20, 0xFA	; 250
    453a:	54 e4       	ldi	r21, 0x44	; 68
    453c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	8b a3       	std	Y+35, r24	; 0x23
    4546:	9c a3       	std	Y+36, r25	; 0x24
    4548:	ad a3       	std	Y+37, r26	; 0x25
    454a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    454c:	6b a1       	ldd	r22, Y+35	; 0x23
    454e:	7c a1       	ldd	r23, Y+36	; 0x24
    4550:	8d a1       	ldd	r24, Y+37	; 0x25
    4552:	9e a1       	ldd	r25, Y+38	; 0x26
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	40 e8       	ldi	r20, 0x80	; 128
    455a:	5f e3       	ldi	r21, 0x3F	; 63
    455c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4560:	88 23       	and	r24, r24
    4562:	2c f4       	brge	.+10     	; 0x456e <init_fun+0x7b8>
		__ticks = 1;
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	9a a3       	std	Y+34, r25	; 0x22
    456a:	89 a3       	std	Y+33, r24	; 0x21
    456c:	3f c0       	rjmp	.+126    	; 0x45ec <init_fun+0x836>
	else if (__tmp > 65535)
    456e:	6b a1       	ldd	r22, Y+35	; 0x23
    4570:	7c a1       	ldd	r23, Y+36	; 0x24
    4572:	8d a1       	ldd	r24, Y+37	; 0x25
    4574:	9e a1       	ldd	r25, Y+38	; 0x26
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	3f ef       	ldi	r19, 0xFF	; 255
    457a:	4f e7       	ldi	r20, 0x7F	; 127
    457c:	57 e4       	ldi	r21, 0x47	; 71
    457e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4582:	18 16       	cp	r1, r24
    4584:	4c f5       	brge	.+82     	; 0x45d8 <init_fun+0x822>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4586:	6f a1       	ldd	r22, Y+39	; 0x27
    4588:	78 a5       	ldd	r23, Y+40	; 0x28
    458a:	89 a5       	ldd	r24, Y+41	; 0x29
    458c:	9a a5       	ldd	r25, Y+42	; 0x2a
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e2       	ldi	r20, 0x20	; 32
    4594:	51 e4       	ldi	r21, 0x41	; 65
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	bc 01       	movw	r22, r24
    45a0:	cd 01       	movw	r24, r26
    45a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	9a a3       	std	Y+34, r25	; 0x22
    45ac:	89 a3       	std	Y+33, r24	; 0x21
    45ae:	0f c0       	rjmp	.+30     	; 0x45ce <init_fun+0x818>
    45b0:	88 ec       	ldi	r24, 0xC8	; 200
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	98 a3       	std	Y+32, r25	; 0x20
    45b6:	8f 8f       	std	Y+31, r24	; 0x1f
    45b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45ba:	98 a1       	ldd	r25, Y+32	; 0x20
    45bc:	01 97       	sbiw	r24, 0x01	; 1
    45be:	f1 f7       	brne	.-4      	; 0x45bc <init_fun+0x806>
    45c0:	98 a3       	std	Y+32, r25	; 0x20
    45c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c4:	89 a1       	ldd	r24, Y+33	; 0x21
    45c6:	9a a1       	ldd	r25, Y+34	; 0x22
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	9a a3       	std	Y+34, r25	; 0x22
    45cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ce:	89 a1       	ldd	r24, Y+33	; 0x21
    45d0:	9a a1       	ldd	r25, Y+34	; 0x22
    45d2:	00 97       	sbiw	r24, 0x00	; 0
    45d4:	69 f7       	brne	.-38     	; 0x45b0 <init_fun+0x7fa>
    45d6:	14 c0       	rjmp	.+40     	; 0x4600 <init_fun+0x84a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d8:	6b a1       	ldd	r22, Y+35	; 0x23
    45da:	7c a1       	ldd	r23, Y+36	; 0x24
    45dc:	8d a1       	ldd	r24, Y+37	; 0x25
    45de:	9e a1       	ldd	r25, Y+38	; 0x26
    45e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	9a a3       	std	Y+34, r25	; 0x22
    45ea:	89 a3       	std	Y+33, r24	; 0x21
    45ec:	89 a1       	ldd	r24, Y+33	; 0x21
    45ee:	9a a1       	ldd	r25, Y+34	; 0x22
    45f0:	9e 8f       	std	Y+30, r25	; 0x1e
    45f2:	8d 8f       	std	Y+29, r24	; 0x1d
    45f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	f1 f7       	brne	.-4      	; 0x45f8 <init_fun+0x842>
    45fc:	9e 8f       	std	Y+30, r25	; 0x1e
    45fe:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(1000);

	TWI_Start();
    4600:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
	TWI_SendData(0b10110110);
    4604:	86 eb       	ldi	r24, 0xB6	; 182
    4606:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(0x01);
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_SendData(0b00100000);
    4610:	80 e2       	ldi	r24, 0x20	; 32
    4612:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
	TWI_Stop();
    4616:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>


	EF_void_LCD_Clear_Screen();
    461a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <EF_void_LCD_Clear_Screen>
	EF_void_LCD_print((unsigned char*)"Start");
    461e:	82 e0       	ldi	r24, 0x02	; 2
    4620:	92 e0       	ldi	r25, 0x02	; 2
    4622:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
	while(1)
	{



		TWI_Start();
    4626:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
		TWI_SendData(0b10110110);
    462a:	86 eb       	ldi	r24, 0xB6	; 182
    462c:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
		TWI_SendData(0x00);
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
		TWI_Stop();
    4636:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

		TWI_Start();
    463a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
		TWI_SendData(0b10110111);
    463e:	87 eb       	ldi	r24, 0xB7	; 183
    4640:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
		TWI_ReceiveData_NACK(&Status);
    4644:	ce 01       	movw	r24, r28
    4646:	8b 57       	subi	r24, 0x7B	; 123
    4648:	9f 4f       	sbci	r25, 0xFF	; 255
    464a:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>
		TWI_Stop();
    464e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>



		if(Status==152)
    4652:	fe 01       	movw	r30, r28
    4654:	eb 57       	subi	r30, 0x7B	; 123
    4656:	ff 4f       	sbci	r31, 0xFF	; 255
    4658:	80 81       	ld	r24, Z
    465a:	88 39       	cpi	r24, 0x98	; 152
    465c:	09 f0       	breq	.+2      	; 0x4660 <init_fun+0x8aa>
    465e:	f1 c1       	rjmp	.+994    	; 0x4a42 <init_fun+0xc8c>
		{
			CO2=0;
    4660:	fe 01       	movw	r30, r28
    4662:	e5 58       	subi	r30, 0x85	; 133
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	11 82       	std	Z+1, r1	; 0x01
    4668:	10 82       	st	Z, r1
			data1=0;data2=0;data3=0;data4=0;
    466a:	fe 01       	movw	r30, r28
    466c:	e2 58       	subi	r30, 0x82	; 130
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	10 82       	st	Z, r1
    4672:	fe 01       	movw	r30, r28
    4674:	e1 58       	subi	r30, 0x81	; 129
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	10 82       	st	Z, r1
    467a:	fe 01       	movw	r30, r28
    467c:	e0 58       	subi	r30, 0x80	; 128
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	10 82       	st	Z, r1
    4682:	fe 01       	movw	r30, r28
    4684:	ef 57       	subi	r30, 0x7F	; 127
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	10 82       	st	Z, r1

			//			_delay_ms(100);
			TWI_Start();
    468a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
			TWI_SendData(0b10110110);
    468e:	86 eb       	ldi	r24, 0xB6	; 182
    4690:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
			TWI_SendData(0x02);
    4694:	82 e0       	ldi	r24, 0x02	; 2
    4696:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
			TWI_Stop();
    469a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

			TWI_Start();
    469e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <TWI_Start>
			TWI_SendData(0b10110111);
    46a2:	87 eb       	ldi	r24, 0xB7	; 183
    46a4:	0e 94 56 07 	call	0xeac	; 0xeac <TWI_SendData>
			TWI_ReceiveData_ACK(&data1);
    46a8:	ce 01       	movw	r24, r28
    46aa:	82 58       	subi	r24, 0x82	; 130
    46ac:	9f 4f       	sbci	r25, 0xFF	; 255
    46ae:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_ACK(&data2);
    46b2:	ce 01       	movw	r24, r28
    46b4:	81 58       	subi	r24, 0x81	; 129
    46b6:	9f 4f       	sbci	r25, 0xFF	; 255
    46b8:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_ACK(&data3);
    46bc:	ce 01       	movw	r24, r28
    46be:	80 58       	subi	r24, 0x80	; 128
    46c0:	9f 4f       	sbci	r25, 0xFF	; 255
    46c2:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_ACK(&data4);
    46c6:	ce 01       	movw	r24, r28
    46c8:	8f 57       	subi	r24, 0x7F	; 127
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_ACK(&Status);
    46d0:	ce 01       	movw	r24, r28
    46d2:	8b 57       	subi	r24, 0x7B	; 123
    46d4:	9f 4f       	sbci	r25, 0xFF	; 255
    46d6:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_ACK(&ERROR_ID);
    46da:	ce 01       	movw	r24, r28
    46dc:	8e 57       	subi	r24, 0x7E	; 126
    46de:	9f 4f       	sbci	r25, 0xFF	; 255
    46e0:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_ACK(&RAW_DATA1);
    46e4:	ce 01       	movw	r24, r28
    46e6:	8d 57       	subi	r24, 0x7D	; 125
    46e8:	9f 4f       	sbci	r25, 0xFF	; 255
    46ea:	0e 94 6d 07 	call	0xeda	; 0xeda <TWI_ReceiveData_ACK>
			TWI_ReceiveData_NACK(&RAW_DATA2);
    46ee:	ce 01       	movw	r24, r28
    46f0:	8c 57       	subi	r24, 0x7C	; 124
    46f2:	9f 4f       	sbci	r25, 0xFF	; 255
    46f4:	0e 94 8b 07 	call	0xf16	; 0xf16 <TWI_ReceiveData_NACK>

			TWI_Stop();
    46f8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <TWI_Stop>

			CO2=data1*256;
    46fc:	fe 01       	movw	r30, r28
    46fe:	e2 58       	subi	r30, 0x82	; 130
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	80 81       	ld	r24, Z
    4704:	88 2f       	mov	r24, r24
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	98 2f       	mov	r25, r24
    470a:	88 27       	eor	r24, r24
    470c:	fe 01       	movw	r30, r28
    470e:	e5 58       	subi	r30, 0x85	; 133
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	91 83       	std	Z+1, r25	; 0x01
    4714:	80 83       	st	Z, r24
			CO2+=data2;
    4716:	fe 01       	movw	r30, r28
    4718:	e1 58       	subi	r30, 0x81	; 129
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	80 81       	ld	r24, Z
    471e:	28 2f       	mov	r18, r24
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	de 01       	movw	r26, r28
    4724:	a5 58       	subi	r26, 0x85	; 133
    4726:	bf 4f       	sbci	r27, 0xFF	; 255
    4728:	fe 01       	movw	r30, r28
    472a:	e5 58       	subi	r30, 0x85	; 133
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	82 0f       	add	r24, r18
    4734:	93 1f       	adc	r25, r19
    4736:	8d 93       	st	X+, r24
    4738:	9c 93       	st	X, r25


			TVOC=data3*256;
    473a:	fe 01       	movw	r30, r28
    473c:	e0 58       	subi	r30, 0x80	; 128
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	88 2f       	mov	r24, r24
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	98 2f       	mov	r25, r24
    4748:	88 27       	eor	r24, r24
    474a:	fe 01       	movw	r30, r28
    474c:	e7 58       	subi	r30, 0x87	; 135
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	91 83       	std	Z+1, r25	; 0x01
    4752:	80 83       	st	Z, r24
			TVOC+=data4;
    4754:	fe 01       	movw	r30, r28
    4756:	ef 57       	subi	r30, 0x7F	; 127
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	80 81       	ld	r24, Z
    475c:	28 2f       	mov	r18, r24
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	de 01       	movw	r26, r28
    4762:	a7 58       	subi	r26, 0x87	; 135
    4764:	bf 4f       	sbci	r27, 0xFF	; 255
    4766:	fe 01       	movw	r30, r28
    4768:	e7 58       	subi	r30, 0x87	; 135
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	80 81       	ld	r24, Z
    476e:	91 81       	ldd	r25, Z+1	; 0x01
    4770:	82 0f       	add	r24, r18
    4772:	93 1f       	adc	r25, r19
    4774:	8d 93       	st	X+, r24
    4776:	9c 93       	st	X, r25

			EF_void_LCD_Clear_Screen();
    4778:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <EF_void_LCD_Clear_Screen>
			EF_void_LCD_print((unsigned char*)"CO2 = ");
    477c:	88 e0       	ldi	r24, 0x08	; 8
    477e:	92 e0       	ldi	r25, 0x02	; 2
    4780:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
			EF_void_LCD_print_Number(CO2);
    4784:	fe 01       	movw	r30, r28
    4786:	e5 58       	subi	r30, 0x85	; 133
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	80 81       	ld	r24, Z
    478c:	91 81       	ldd	r25, Z+1	; 0x01
    478e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <EF_void_LCD_print_Number>

			EF_void_LCD_Newline();
    4792:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <EF_void_LCD_Newline>
			EF_void_LCD_print((unsigned char*)"TVOC = ");
    4796:	8f e0       	ldi	r24, 0x0F	; 15
    4798:	92 e0       	ldi	r25, 0x02	; 2
    479a:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
			EF_void_LCD_print_Number(TVOC);
    479e:	fe 01       	movw	r30, r28
    47a0:	e7 58       	subi	r30, 0x87	; 135
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	80 81       	ld	r24, Z
    47a6:	91 81       	ldd	r25, Z+1	; 0x01
    47a8:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <EF_void_LCD_print_Number>
			EF_void_LCD_print((unsigned char*)"   i:");
    47ac:	87 e1       	ldi	r24, 0x17	; 23
    47ae:	92 e0       	ldi	r25, 0x02	; 2
    47b0:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
			EF_void_LCD_print_Number(i);
    47b4:	fe 01       	movw	r30, r28
    47b6:	eb 58       	subi	r30, 0x8B	; 139
    47b8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ba:	80 81       	ld	r24, Z
    47bc:	91 81       	ldd	r25, Z+1	; 0x01
    47be:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <EF_void_LCD_print_Number>

			CO2_AVG+=CO2;
    47c2:	fe 01       	movw	r30, r28
    47c4:	e5 58       	subi	r30, 0x85	; 133
    47c6:	ff 4f       	sbci	r31, 0xFF	; 255
    47c8:	80 81       	ld	r24, Z
    47ca:	91 81       	ldd	r25, Z+1	; 0x01
    47cc:	9c 01       	movw	r18, r24
    47ce:	40 e0       	ldi	r20, 0x00	; 0
    47d0:	50 e0       	ldi	r21, 0x00	; 0
    47d2:	be 01       	movw	r22, r28
    47d4:	6f 58       	subi	r22, 0x8F	; 143
    47d6:	7f 4f       	sbci	r23, 0xFF	; 255
    47d8:	fe 01       	movw	r30, r28
    47da:	ef 58       	subi	r30, 0x8F	; 143
    47dc:	ff 4f       	sbci	r31, 0xFF	; 255
    47de:	80 81       	ld	r24, Z
    47e0:	91 81       	ldd	r25, Z+1	; 0x01
    47e2:	a2 81       	ldd	r26, Z+2	; 0x02
    47e4:	b3 81       	ldd	r27, Z+3	; 0x03
    47e6:	82 0f       	add	r24, r18
    47e8:	93 1f       	adc	r25, r19
    47ea:	a4 1f       	adc	r26, r20
    47ec:	b5 1f       	adc	r27, r21
    47ee:	fb 01       	movw	r30, r22
    47f0:	80 83       	st	Z, r24
    47f2:	91 83       	std	Z+1, r25	; 0x01
    47f4:	a2 83       	std	Z+2, r26	; 0x02
    47f6:	b3 83       	std	Z+3, r27	; 0x03
			i++;
    47f8:	9e 01       	movw	r18, r28
    47fa:	2b 58       	subi	r18, 0x8B	; 139
    47fc:	3f 4f       	sbci	r19, 0xFF	; 255
    47fe:	fe 01       	movw	r30, r28
    4800:	eb 58       	subi	r30, 0x8B	; 139
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	80 81       	ld	r24, Z
    4806:	91 81       	ldd	r25, Z+1	; 0x01
    4808:	a2 81       	ldd	r26, Z+2	; 0x02
    480a:	b3 81       	ldd	r27, Z+3	; 0x03
    480c:	01 96       	adiw	r24, 0x01	; 1
    480e:	a1 1d       	adc	r26, r1
    4810:	b1 1d       	adc	r27, r1
    4812:	f9 01       	movw	r30, r18
    4814:	80 83       	st	Z, r24
    4816:	91 83       	std	Z+1, r25	; 0x01
    4818:	a2 83       	std	Z+2, r26	; 0x02
    481a:	b3 83       	std	Z+3, r27	; 0x03

			if((i%90==0)&&(First_Reading==FALSE))
    481c:	fe 01       	movw	r30, r28
    481e:	eb 58       	subi	r30, 0x8B	; 139
    4820:	ff 4f       	sbci	r31, 0xFF	; 255
    4822:	80 81       	ld	r24, Z
    4824:	91 81       	ldd	r25, Z+1	; 0x01
    4826:	a2 81       	ldd	r26, Z+2	; 0x02
    4828:	b3 81       	ldd	r27, Z+3	; 0x03
    482a:	2a e5       	ldi	r18, 0x5A	; 90
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	40 e0       	ldi	r20, 0x00	; 0
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	bc 01       	movw	r22, r24
    4834:	cd 01       	movw	r24, r26
    4836:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__udivmodsi4>
    483a:	dc 01       	movw	r26, r24
    483c:	cb 01       	movw	r24, r22
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	a1 05       	cpc	r26, r1
    4842:	b1 05       	cpc	r27, r1
    4844:	09 f0       	breq	.+2      	; 0x4848 <init_fun+0xa92>
    4846:	bc c0       	rjmp	.+376    	; 0x49c0 <init_fun+0xc0a>
    4848:	fe 01       	movw	r30, r28
    484a:	e3 58       	subi	r30, 0x83	; 131
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	80 81       	ld	r24, Z
    4850:	88 23       	and	r24, r24
    4852:	09 f0       	breq	.+2      	; 0x4856 <init_fun+0xaa0>
    4854:	b5 c0       	rjmp	.+362    	; 0x49c0 <init_fun+0xc0a>
			{


				CO2=CO2_AVG/90;
    4856:	fe 01       	movw	r30, r28
    4858:	ef 58       	subi	r30, 0x8F	; 143
    485a:	ff 4f       	sbci	r31, 0xFF	; 255
    485c:	80 81       	ld	r24, Z
    485e:	91 81       	ldd	r25, Z+1	; 0x01
    4860:	a2 81       	ldd	r26, Z+2	; 0x02
    4862:	b3 81       	ldd	r27, Z+3	; 0x03
    4864:	2a e5       	ldi	r18, 0x5A	; 90
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	50 e0       	ldi	r21, 0x00	; 0
    486c:	bc 01       	movw	r22, r24
    486e:	cd 01       	movw	r24, r26
    4870:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__udivmodsi4>
    4874:	da 01       	movw	r26, r20
    4876:	c9 01       	movw	r24, r18
    4878:	fe 01       	movw	r30, r28
    487a:	e5 58       	subi	r30, 0x85	; 133
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	91 83       	std	Z+1, r25	; 0x01
    4880:	80 83       	st	Z, r24


				if(ESP_check_connection()==FALSE)
    4882:	0e 94 7e 19 	call	0x32fc	; 0x32fc <ESP_check_connection>
    4886:	88 23       	and	r24, r24
    4888:	39 f4       	brne	.+14     	; 0x4898 <init_fun+0xae2>
				{
					ESP_connect_to_WIFI(WIFI_USER_NAME,WIFI_PASSWORD);
    488a:	8d e1       	ldi	r24, 0x1D	; 29
    488c:	92 e0       	ldi	r25, 0x02	; 2
    488e:	27 e2       	ldi	r18, 0x27	; 39
    4890:	32 e0       	ldi	r19, 0x02	; 2
    4892:	b9 01       	movw	r22, r18
    4894:	0e 94 90 1a 	call	0x3520	; 0x3520 <ESP_connect_to_WIFI>
				}

				ESP_OPEN_SOCKET(ThingSpeak_SERVER,ThingSpeak_PORT);
    4898:	80 e3       	ldi	r24, 0x30	; 48
    489a:	92 e0       	ldi	r25, 0x02	; 2
    489c:	23 e4       	ldi	r18, 0x43	; 67
    489e:	32 e0       	ldi	r19, 0x02	; 2
    48a0:	b9 01       	movw	r22, r18
    48a2:	0e 94 41 1b 	call	0x3682	; 0x3682 <ESP_OPEN_SOCKET>

				ESP_uploade_data(CO2);
    48a6:	fe 01       	movw	r30, r28
    48a8:	e5 58       	subi	r30, 0x85	; 133
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	80 81       	ld	r24, Z
    48ae:	91 81       	ldd	r25, Z+1	; 0x01
    48b0:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <ESP_uploade_data>



				EF_void_LCD_Clear_Screen();
    48b4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <EF_void_LCD_Clear_Screen>
				EF_void_LCD_print((unsigned char*)"Done UPloading");
    48b8:	86 e4       	ldi	r24, 0x46	; 70
    48ba:	92 e0       	ldi	r25, 0x02	; 2
    48bc:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	90 e8       	ldi	r25, 0x80	; 128
    48c4:	ab e3       	ldi	r26, 0x3B	; 59
    48c6:	b5 e4       	ldi	r27, 0x45	; 69
    48c8:	89 8f       	std	Y+25, r24	; 0x19
    48ca:	9a 8f       	std	Y+26, r25	; 0x1a
    48cc:	ab 8f       	std	Y+27, r26	; 0x1b
    48ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d0:	69 8d       	ldd	r22, Y+25	; 0x19
    48d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	4a ef       	ldi	r20, 0xFA	; 250
    48de:	54 e4       	ldi	r21, 0x44	; 68
    48e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	8d 8b       	std	Y+21, r24	; 0x15
    48ea:	9e 8b       	std	Y+22, r25	; 0x16
    48ec:	af 8b       	std	Y+23, r26	; 0x17
    48ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48f0:	6d 89       	ldd	r22, Y+21	; 0x15
    48f2:	7e 89       	ldd	r23, Y+22	; 0x16
    48f4:	8f 89       	ldd	r24, Y+23	; 0x17
    48f6:	98 8d       	ldd	r25, Y+24	; 0x18
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e8       	ldi	r20, 0x80	; 128
    48fe:	5f e3       	ldi	r21, 0x3F	; 63
    4900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4904:	88 23       	and	r24, r24
    4906:	2c f4       	brge	.+10     	; 0x4912 <init_fun+0xb5c>
		__ticks = 1;
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	9c 8b       	std	Y+20, r25	; 0x14
    490e:	8b 8b       	std	Y+19, r24	; 0x13
    4910:	3f c0       	rjmp	.+126    	; 0x4990 <init_fun+0xbda>
	else if (__tmp > 65535)
    4912:	6d 89       	ldd	r22, Y+21	; 0x15
    4914:	7e 89       	ldd	r23, Y+22	; 0x16
    4916:	8f 89       	ldd	r24, Y+23	; 0x17
    4918:	98 8d       	ldd	r25, Y+24	; 0x18
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	3f ef       	ldi	r19, 0xFF	; 255
    491e:	4f e7       	ldi	r20, 0x7F	; 127
    4920:	57 e4       	ldi	r21, 0x47	; 71
    4922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4926:	18 16       	cp	r1, r24
    4928:	4c f5       	brge	.+82     	; 0x497c <init_fun+0xbc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    492a:	69 8d       	ldd	r22, Y+25	; 0x19
    492c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    492e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	40 e2       	ldi	r20, 0x20	; 32
    4938:	51 e4       	ldi	r21, 0x41	; 65
    493a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	bc 01       	movw	r22, r24
    4944:	cd 01       	movw	r24, r26
    4946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	9c 8b       	std	Y+20, r25	; 0x14
    4950:	8b 8b       	std	Y+19, r24	; 0x13
    4952:	0f c0       	rjmp	.+30     	; 0x4972 <init_fun+0xbbc>
    4954:	88 ec       	ldi	r24, 0xC8	; 200
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	9a 8b       	std	Y+18, r25	; 0x12
    495a:	89 8b       	std	Y+17, r24	; 0x11
    495c:	89 89       	ldd	r24, Y+17	; 0x11
    495e:	9a 89       	ldd	r25, Y+18	; 0x12
    4960:	01 97       	sbiw	r24, 0x01	; 1
    4962:	f1 f7       	brne	.-4      	; 0x4960 <init_fun+0xbaa>
    4964:	9a 8b       	std	Y+18, r25	; 0x12
    4966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4968:	8b 89       	ldd	r24, Y+19	; 0x13
    496a:	9c 89       	ldd	r25, Y+20	; 0x14
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	9c 8b       	std	Y+20, r25	; 0x14
    4970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4972:	8b 89       	ldd	r24, Y+19	; 0x13
    4974:	9c 89       	ldd	r25, Y+20	; 0x14
    4976:	00 97       	sbiw	r24, 0x00	; 0
    4978:	69 f7       	brne	.-38     	; 0x4954 <init_fun+0xb9e>
    497a:	14 c0       	rjmp	.+40     	; 0x49a4 <init_fun+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    497c:	6d 89       	ldd	r22, Y+21	; 0x15
    497e:	7e 89       	ldd	r23, Y+22	; 0x16
    4980:	8f 89       	ldd	r24, Y+23	; 0x17
    4982:	98 8d       	ldd	r25, Y+24	; 0x18
    4984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	9c 8b       	std	Y+20, r25	; 0x14
    498e:	8b 8b       	std	Y+19, r24	; 0x13
    4990:	8b 89       	ldd	r24, Y+19	; 0x13
    4992:	9c 89       	ldd	r25, Y+20	; 0x14
    4994:	98 8b       	std	Y+16, r25	; 0x10
    4996:	8f 87       	std	Y+15, r24	; 0x0f
    4998:	8f 85       	ldd	r24, Y+15	; 0x0f
    499a:	98 89       	ldd	r25, Y+16	; 0x10
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	f1 f7       	brne	.-4      	; 0x499c <init_fun+0xbe6>
    49a0:	98 8b       	std	Y+16, r25	; 0x10
    49a2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);

				i=0;
    49a4:	fe 01       	movw	r30, r28
    49a6:	eb 58       	subi	r30, 0x8B	; 139
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	10 82       	st	Z, r1
    49ac:	11 82       	std	Z+1, r1	; 0x01
    49ae:	12 82       	std	Z+2, r1	; 0x02
    49b0:	13 82       	std	Z+3, r1	; 0x03
				CO2_AVG=0;
    49b2:	fe 01       	movw	r30, r28
    49b4:	ef 58       	subi	r30, 0x8F	; 143
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	10 82       	st	Z, r1
    49ba:	11 82       	std	Z+1, r1	; 0x01
    49bc:	12 82       	std	Z+2, r1	; 0x02
    49be:	13 82       	std	Z+3, r1	; 0x03
			}

			if(First_Reading==TRUE)
    49c0:	fe 01       	movw	r30, r28
    49c2:	e3 58       	subi	r30, 0x83	; 131
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	80 81       	ld	r24, Z
    49c8:	81 30       	cpi	r24, 0x01	; 1
    49ca:	d9 f5       	brne	.+118    	; 0x4a42 <init_fun+0xc8c>
			{
				EF_void_LCD_Clear_Screen();
    49cc:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <EF_void_LCD_Clear_Screen>
				EF_void_LCD_print((unsigned char*)"Not Ready Yet");
    49d0:	85 e5       	ldi	r24, 0x55	; 85
    49d2:	92 e0       	ldi	r25, 0x02	; 2
    49d4:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
				EF_void_LCD_Newline();
    49d8:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <EF_void_LCD_Newline>
				EF_void_LCD_print((unsigned char*)"Please Wait  ");
    49dc:	83 e6       	ldi	r24, 0x63	; 99
    49de:	92 e0       	ldi	r25, 0x02	; 2
    49e0:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
				EF_void_LCD_print_Number(4-i);
    49e4:	fe 01       	movw	r30, r28
    49e6:	eb 58       	subi	r30, 0x8B	; 139
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	20 81       	ld	r18, Z
    49ec:	31 81       	ldd	r19, Z+1	; 0x01
    49ee:	84 e0       	ldi	r24, 0x04	; 4
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	82 1b       	sub	r24, r18
    49f4:	93 0b       	sbc	r25, r19
    49f6:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <EF_void_LCD_print_Number>
				if(i>=4)
    49fa:	fe 01       	movw	r30, r28
    49fc:	eb 58       	subi	r30, 0x8B	; 139
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	80 81       	ld	r24, Z
    4a02:	91 81       	ldd	r25, Z+1	; 0x01
    4a04:	a2 81       	ldd	r26, Z+2	; 0x02
    4a06:	b3 81       	ldd	r27, Z+3	; 0x03
    4a08:	84 30       	cpi	r24, 0x04	; 4
    4a0a:	91 05       	cpc	r25, r1
    4a0c:	a1 05       	cpc	r26, r1
    4a0e:	b1 05       	cpc	r27, r1
    4a10:	c0 f0       	brcs	.+48     	; 0x4a42 <init_fun+0xc8c>
				{
					i=0;
    4a12:	fe 01       	movw	r30, r28
    4a14:	eb 58       	subi	r30, 0x8B	; 139
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	10 82       	st	Z, r1
    4a1a:	11 82       	std	Z+1, r1	; 0x01
    4a1c:	12 82       	std	Z+2, r1	; 0x02
    4a1e:	13 82       	std	Z+3, r1	; 0x03
					CO2_AVG=0;
    4a20:	fe 01       	movw	r30, r28
    4a22:	ef 58       	subi	r30, 0x8F	; 143
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	10 82       	st	Z, r1
    4a28:	11 82       	std	Z+1, r1	; 0x01
    4a2a:	12 82       	std	Z+2, r1	; 0x02
    4a2c:	13 82       	std	Z+3, r1	; 0x03
					First_Reading=FALSE;
    4a2e:	fe 01       	movw	r30, r28
    4a30:	e3 58       	subi	r30, 0x83	; 131
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	10 82       	st	Z, r1
					EF_void_LCD_Clear_Screen();
    4a36:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <EF_void_LCD_Clear_Screen>
					EF_void_LCD_print((unsigned char*)"Ready");
    4a3a:	81 e7       	ldi	r24, 0x71	; 113
    4a3c:	92 e0       	ldi	r25, 0x02	; 2
    4a3e:	0e 94 0f 13 	call	0x261e	; 0x261e <EF_void_LCD_print>
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	aa ef       	ldi	r26, 0xFA	; 250
    4a48:	b4 e4       	ldi	r27, 0x44	; 68
    4a4a:	8b 87       	std	Y+11, r24	; 0x0b
    4a4c:	9c 87       	std	Y+12, r25	; 0x0c
    4a4e:	ad 87       	std	Y+13, r26	; 0x0d
    4a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	4a ef       	ldi	r20, 0xFA	; 250
    4a60:	54 e4       	ldi	r21, 0x44	; 68
    4a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a66:	dc 01       	movw	r26, r24
    4a68:	cb 01       	movw	r24, r22
    4a6a:	8f 83       	std	Y+7, r24	; 0x07
    4a6c:	98 87       	std	Y+8, r25	; 0x08
    4a6e:	a9 87       	std	Y+9, r26	; 0x09
    4a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a72:	6f 81       	ldd	r22, Y+7	; 0x07
    4a74:	78 85       	ldd	r23, Y+8	; 0x08
    4a76:	89 85       	ldd	r24, Y+9	; 0x09
    4a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e8       	ldi	r20, 0x80	; 128
    4a80:	5f e3       	ldi	r21, 0x3F	; 63
    4a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a86:	88 23       	and	r24, r24
    4a88:	2c f4       	brge	.+10     	; 0x4a94 <init_fun+0xcde>
		__ticks = 1;
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9e 83       	std	Y+6, r25	; 0x06
    4a90:	8d 83       	std	Y+5, r24	; 0x05
    4a92:	3f c0       	rjmp	.+126    	; 0x4b12 <init_fun+0xd5c>
	else if (__tmp > 65535)
    4a94:	6f 81       	ldd	r22, Y+7	; 0x07
    4a96:	78 85       	ldd	r23, Y+8	; 0x08
    4a98:	89 85       	ldd	r24, Y+9	; 0x09
    4a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	3f ef       	ldi	r19, 0xFF	; 255
    4aa0:	4f e7       	ldi	r20, 0x7F	; 127
    4aa2:	57 e4       	ldi	r21, 0x47	; 71
    4aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa8:	18 16       	cp	r1, r24
    4aaa:	4c f5       	brge	.+82     	; 0x4afe <init_fun+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	40 e2       	ldi	r20, 0x20	; 32
    4aba:	51 e4       	ldi	r21, 0x41	; 65
    4abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	cb 01       	movw	r24, r22
    4ac4:	bc 01       	movw	r22, r24
    4ac6:	cd 01       	movw	r24, r26
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9e 83       	std	Y+6, r25	; 0x06
    4ad2:	8d 83       	std	Y+5, r24	; 0x05
    4ad4:	0f c0       	rjmp	.+30     	; 0x4af4 <init_fun+0xd3e>
    4ad6:	88 ec       	ldi	r24, 0xC8	; 200
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	9c 83       	std	Y+4, r25	; 0x04
    4adc:	8b 83       	std	Y+3, r24	; 0x03
    4ade:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae2:	01 97       	sbiw	r24, 0x01	; 1
    4ae4:	f1 f7       	brne	.-4      	; 0x4ae2 <init_fun+0xd2c>
    4ae6:	9c 83       	std	Y+4, r25	; 0x04
    4ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aea:	8d 81       	ldd	r24, Y+5	; 0x05
    4aec:	9e 81       	ldd	r25, Y+6	; 0x06
    4aee:	01 97       	sbiw	r24, 0x01	; 1
    4af0:	9e 83       	std	Y+6, r25	; 0x06
    4af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af4:	8d 81       	ldd	r24, Y+5	; 0x05
    4af6:	9e 81       	ldd	r25, Y+6	; 0x06
    4af8:	00 97       	sbiw	r24, 0x00	; 0
    4afa:	69 f7       	brne	.-38     	; 0x4ad6 <init_fun+0xd20>
    4afc:	94 cd       	rjmp	.-1240   	; 0x4626 <init_fun+0x870>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afe:	6f 81       	ldd	r22, Y+7	; 0x07
    4b00:	78 85       	ldd	r23, Y+8	; 0x08
    4b02:	89 85       	ldd	r24, Y+9	; 0x09
    4b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	9e 83       	std	Y+6, r25	; 0x06
    4b10:	8d 83       	std	Y+5, r24	; 0x05
    4b12:	8d 81       	ldd	r24, Y+5	; 0x05
    4b14:	9e 81       	ldd	r25, Y+6	; 0x06
    4b16:	9a 83       	std	Y+2, r25	; 0x02
    4b18:	89 83       	std	Y+1, r24	; 0x01
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
    4b20:	f1 f7       	brne	.-4      	; 0x4b1e <init_fun+0xd68>
    4b22:	9a 83       	std	Y+2, r25	; 0x02
    4b24:	89 83       	std	Y+1, r24	; 0x01
    4b26:	7f cd       	rjmp	.-1282   	; 0x4626 <init_fun+0x870>

00004b28 <operation_fun>:
 */

#include"../main.h"

ret_state operation_fun(void)
{
    4b28:	df 93       	push	r29
    4b2a:	cf 93       	push	r28
    4b2c:	cd b7       	in	r28, 0x3d	; 61
    4b2e:	de b7       	in	r29, 0x3e	; 62
    4b30:	2e 97       	sbiw	r28, 0x0e	; 14
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	f8 94       	cli
    4b36:	de bf       	out	0x3e, r29	; 62
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	cd bf       	out	0x3d, r28	; 61

	UART_SEND_string("Operation state\r\n");
    4b3c:	87 e7       	ldi	r24, 0x77	; 119
    4b3e:	92 e0       	ldi	r25, 0x02	; 2
    4b40:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	aa ef       	ldi	r26, 0xFA	; 250
    4b4a:	b4 e4       	ldi	r27, 0x44	; 68
    4b4c:	8b 87       	std	Y+11, r24	; 0x0b
    4b4e:	9c 87       	std	Y+12, r25	; 0x0c
    4b50:	ad 87       	std	Y+13, r26	; 0x0d
    4b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 e0       	ldi	r19, 0x00	; 0
    4b60:	4a ef       	ldi	r20, 0xFA	; 250
    4b62:	54 e4       	ldi	r21, 0x44	; 68
    4b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	8f 83       	std	Y+7, r24	; 0x07
    4b6e:	98 87       	std	Y+8, r25	; 0x08
    4b70:	a9 87       	std	Y+9, r26	; 0x09
    4b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b74:	6f 81       	ldd	r22, Y+7	; 0x07
    4b76:	78 85       	ldd	r23, Y+8	; 0x08
    4b78:	89 85       	ldd	r24, Y+9	; 0x09
    4b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e8       	ldi	r20, 0x80	; 128
    4b82:	5f e3       	ldi	r21, 0x3F	; 63
    4b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b88:	88 23       	and	r24, r24
    4b8a:	2c f4       	brge	.+10     	; 0x4b96 <operation_fun+0x6e>
		__ticks = 1;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	9e 83       	std	Y+6, r25	; 0x06
    4b92:	8d 83       	std	Y+5, r24	; 0x05
    4b94:	3f c0       	rjmp	.+126    	; 0x4c14 <operation_fun+0xec>
	else if (__tmp > 65535)
    4b96:	6f 81       	ldd	r22, Y+7	; 0x07
    4b98:	78 85       	ldd	r23, Y+8	; 0x08
    4b9a:	89 85       	ldd	r24, Y+9	; 0x09
    4b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	3f ef       	ldi	r19, 0xFF	; 255
    4ba2:	4f e7       	ldi	r20, 0x7F	; 127
    4ba4:	57 e4       	ldi	r21, 0x47	; 71
    4ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4baa:	18 16       	cp	r1, r24
    4bac:	4c f5       	brge	.+82     	; 0x4c00 <operation_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	40 e2       	ldi	r20, 0x20	; 32
    4bbc:	51 e4       	ldi	r21, 0x41	; 65
    4bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	bc 01       	movw	r22, r24
    4bc8:	cd 01       	movw	r24, r26
    4bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	9e 83       	std	Y+6, r25	; 0x06
    4bd4:	8d 83       	std	Y+5, r24	; 0x05
    4bd6:	0f c0       	rjmp	.+30     	; 0x4bf6 <operation_fun+0xce>
    4bd8:	88 ec       	ldi	r24, 0xC8	; 200
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	9c 83       	std	Y+4, r25	; 0x04
    4bde:	8b 83       	std	Y+3, r24	; 0x03
    4be0:	8b 81       	ldd	r24, Y+3	; 0x03
    4be2:	9c 81       	ldd	r25, Y+4	; 0x04
    4be4:	01 97       	sbiw	r24, 0x01	; 1
    4be6:	f1 f7       	brne	.-4      	; 0x4be4 <operation_fun+0xbc>
    4be8:	9c 83       	std	Y+4, r25	; 0x04
    4bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	9e 83       	std	Y+6, r25	; 0x06
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfa:	00 97       	sbiw	r24, 0x00	; 0
    4bfc:	69 f7       	brne	.-38     	; 0x4bd8 <operation_fun+0xb0>
    4bfe:	14 c0       	rjmp	.+40     	; 0x4c28 <operation_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c00:	6f 81       	ldd	r22, Y+7	; 0x07
    4c02:	78 85       	ldd	r23, Y+8	; 0x08
    4c04:	89 85       	ldd	r24, Y+9	; 0x09
    4c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	9e 83       	std	Y+6, r25	; 0x06
    4c12:	8d 83       	std	Y+5, r24	; 0x05
    4c14:	8d 81       	ldd	r24, Y+5	; 0x05
    4c16:	9e 81       	ldd	r25, Y+6	; 0x06
    4c18:	9a 83       	std	Y+2, r25	; 0x02
    4c1a:	89 83       	std	Y+1, r24	; 0x01
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	01 97       	sbiw	r24, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <operation_fun+0xf8>
    4c24:	9a 83       	std	Y+2, r25	; 0x02
    4c26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);


return ret_terminate;
    4c28:	82 e0       	ldi	r24, 0x02	; 2
}
    4c2a:	2e 96       	adiw	r28, 0x0e	; 14
    4c2c:	0f b6       	in	r0, 0x3f	; 63
    4c2e:	f8 94       	cli
    4c30:	de bf       	out	0x3e, r29	; 62
    4c32:	0f be       	out	0x3f, r0	; 63
    4c34:	cd bf       	out	0x3d, r28	; 61
    4c36:	cf 91       	pop	r28
    4c38:	df 91       	pop	r29
    4c3a:	08 95       	ret

00004c3c <lookup_table>:




ret_state lookup_table(state current_state,ret_state dir_state)
{
    4c3c:	df 93       	push	r29
    4c3e:	cf 93       	push	r28
    4c40:	00 d0       	rcall	.+0      	; 0x4c42 <lookup_table+0x6>
    4c42:	0f 92       	push	r0
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	8a 83       	std	Y+2, r24	; 0x02
    4c4a:	6b 83       	std	Y+3, r22	; 0x03
	ret_state next_state=0;
    4c4c:	19 82       	std	Y+1, r1	; 0x01


	next_state=lookup_table_array[current_state][dir_state];
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	28 2f       	mov	r18, r24
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	8b 81       	ldd	r24, Y+3	; 0x03
    4c56:	48 2f       	mov	r20, r24
    4c58:	50 e0       	ldi	r21, 0x00	; 0
    4c5a:	c9 01       	movw	r24, r18
    4c5c:	88 0f       	add	r24, r24
    4c5e:	99 1f       	adc	r25, r25
    4c60:	82 0f       	add	r24, r18
    4c62:	93 1f       	adc	r25, r19
    4c64:	84 0f       	add	r24, r20
    4c66:	95 1f       	adc	r25, r21
    4c68:	fc 01       	movw	r30, r24
    4c6a:	ed 55       	subi	r30, 0x5D	; 93
    4c6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4c6e:	80 81       	ld	r24, Z
    4c70:	89 83       	std	Y+1, r24	; 0x01




	return next_state;
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	0f 90       	pop	r0
    4c7a:	cf 91       	pop	r28
    4c7c:	df 91       	pop	r29
    4c7e:	08 95       	ret

00004c80 <terminate_fun>:
#include"../main.h"



ret_state terminate_fun(void)
{
    4c80:	df 93       	push	r29
    4c82:	cf 93       	push	r28
    4c84:	cd b7       	in	r28, 0x3d	; 61
    4c86:	de b7       	in	r29, 0x3e	; 62
    4c88:	2e 97       	sbiw	r28, 0x0e	; 14
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	f8 94       	cli
    4c8e:	de bf       	out	0x3e, r29	; 62
    4c90:	0f be       	out	0x3f, r0	; 63
    4c92:	cd bf       	out	0x3d, r28	; 61

	UART_SEND_string("Terminate state\r\n");
    4c94:	89 e8       	ldi	r24, 0x89	; 137
    4c96:	92 e0       	ldi	r25, 0x02	; 2
    4c98:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_SEND_string>
    4c9c:	80 e0       	ldi	r24, 0x00	; 0
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	aa ef       	ldi	r26, 0xFA	; 250
    4ca2:	b4 e4       	ldi	r27, 0x44	; 68
    4ca4:	8b 87       	std	Y+11, r24	; 0x0b
    4ca6:	9c 87       	std	Y+12, r25	; 0x0c
    4ca8:	ad 87       	std	Y+13, r26	; 0x0d
    4caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	30 e0       	ldi	r19, 0x00	; 0
    4cb8:	4a ef       	ldi	r20, 0xFA	; 250
    4cba:	54 e4       	ldi	r21, 0x44	; 68
    4cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc0:	dc 01       	movw	r26, r24
    4cc2:	cb 01       	movw	r24, r22
    4cc4:	8f 83       	std	Y+7, r24	; 0x07
    4cc6:	98 87       	std	Y+8, r25	; 0x08
    4cc8:	a9 87       	std	Y+9, r26	; 0x09
    4cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    4cce:	78 85       	ldd	r23, Y+8	; 0x08
    4cd0:	89 85       	ldd	r24, Y+9	; 0x09
    4cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e8       	ldi	r20, 0x80	; 128
    4cda:	5f e3       	ldi	r21, 0x3F	; 63
    4cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ce0:	88 23       	and	r24, r24
    4ce2:	2c f4       	brge	.+10     	; 0x4cee <terminate_fun+0x6e>
		__ticks = 1;
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	9e 83       	std	Y+6, r25	; 0x06
    4cea:	8d 83       	std	Y+5, r24	; 0x05
    4cec:	3f c0       	rjmp	.+126    	; 0x4d6c <terminate_fun+0xec>
	else if (__tmp > 65535)
    4cee:	6f 81       	ldd	r22, Y+7	; 0x07
    4cf0:	78 85       	ldd	r23, Y+8	; 0x08
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	3f ef       	ldi	r19, 0xFF	; 255
    4cfa:	4f e7       	ldi	r20, 0x7F	; 127
    4cfc:	57 e4       	ldi	r21, 0x47	; 71
    4cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d02:	18 16       	cp	r1, r24
    4d04:	4c f5       	brge	.+82     	; 0x4d58 <terminate_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	40 e2       	ldi	r20, 0x20	; 32
    4d14:	51 e4       	ldi	r21, 0x41	; 65
    4d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1a:	dc 01       	movw	r26, r24
    4d1c:	cb 01       	movw	r24, r22
    4d1e:	bc 01       	movw	r22, r24
    4d20:	cd 01       	movw	r24, r26
    4d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d26:	dc 01       	movw	r26, r24
    4d28:	cb 01       	movw	r24, r22
    4d2a:	9e 83       	std	Y+6, r25	; 0x06
    4d2c:	8d 83       	std	Y+5, r24	; 0x05
    4d2e:	0f c0       	rjmp	.+30     	; 0x4d4e <terminate_fun+0xce>
    4d30:	88 ec       	ldi	r24, 0xC8	; 200
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	9c 83       	std	Y+4, r25	; 0x04
    4d36:	8b 83       	std	Y+3, r24	; 0x03
    4d38:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d3c:	01 97       	sbiw	r24, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <terminate_fun+0xbc>
    4d40:	9c 83       	std	Y+4, r25	; 0x04
    4d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d44:	8d 81       	ldd	r24, Y+5	; 0x05
    4d46:	9e 81       	ldd	r25, Y+6	; 0x06
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	9e 83       	std	Y+6, r25	; 0x06
    4d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d50:	9e 81       	ldd	r25, Y+6	; 0x06
    4d52:	00 97       	sbiw	r24, 0x00	; 0
    4d54:	69 f7       	brne	.-38     	; 0x4d30 <terminate_fun+0xb0>
    4d56:	14 c0       	rjmp	.+40     	; 0x4d80 <terminate_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d58:	6f 81       	ldd	r22, Y+7	; 0x07
    4d5a:	78 85       	ldd	r23, Y+8	; 0x08
    4d5c:	89 85       	ldd	r24, Y+9	; 0x09
    4d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9e 83       	std	Y+6, r25	; 0x06
    4d6a:	8d 83       	std	Y+5, r24	; 0x05
    4d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d70:	9a 83       	std	Y+2, r25	; 0x02
    4d72:	89 83       	std	Y+1, r24	; 0x01
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	9a 81       	ldd	r25, Y+2	; 0x02
    4d78:	01 97       	sbiw	r24, 0x01	; 1
    4d7a:	f1 f7       	brne	.-4      	; 0x4d78 <terminate_fun+0xf8>
    4d7c:	9a 83       	std	Y+2, r25	; 0x02
    4d7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

return ret_operation;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
}
    4d82:	2e 96       	adiw	r28, 0x0e	; 14
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	f8 94       	cli
    4d88:	de bf       	out	0x3e, r29	; 62
    4d8a:	0f be       	out	0x3f, r0	; 63
    4d8c:	cd bf       	out	0x3d, r28	; 61
    4d8e:	cf 91       	pop	r28
    4d90:	df 91       	pop	r29
    4d92:	08 95       	ret

00004d94 <main>:

ret_state (* states[3])(void)={init_fun,operation_fun,terminate_fun};


int main(void)
{
    4d94:	df 93       	push	r29
    4d96:	cf 93       	push	r28
    4d98:	00 d0       	rcall	.+0      	; 0x4d9a <main+0x6>
    4d9a:	0f 92       	push	r0
    4d9c:	cd b7       	in	r28, 0x3d	; 61
    4d9e:	de b7       	in	r29, 0x3e	; 62
	state	current_state=init;
    4da0:	1b 82       	std	Y+3, r1	; 0x03
	ret_state (*state_fun)(void);

	while(1)                     /* Super LOOP */
	{
		state_fun=states[current_state];
    4da2:	8b 81       	ldd	r24, Y+3	; 0x03
    4da4:	88 2f       	mov	r24, r24
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	88 0f       	add	r24, r24
    4daa:	99 1f       	adc	r25, r25
    4dac:	fc 01       	movw	r30, r24
    4dae:	e4 55       	subi	r30, 0x54	; 84
    4db0:	fd 4f       	sbci	r31, 0xFD	; 253
    4db2:	80 81       	ld	r24, Z
    4db4:	91 81       	ldd	r25, Z+1	; 0x01
    4db6:	9a 83       	std	Y+2, r25	; 0x02
    4db8:	89 83       	std	Y+1, r24	; 0x01
		return_state=state_fun();
    4dba:	e9 81       	ldd	r30, Y+1	; 0x01
    4dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    4dbe:	09 95       	icall
    4dc0:	80 93 f1 02 	sts	0x02F1, r24

		current_state=lookup_table(current_state,return_state);
    4dc4:	90 91 f1 02 	lds	r25, 0x02F1
    4dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dca:	69 2f       	mov	r22, r25
    4dcc:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <lookup_table>
    4dd0:	8b 83       	std	Y+3, r24	; 0x03
    4dd2:	e7 cf       	rjmp	.-50     	; 0x4da2 <main+0xe>

00004dd4 <__udivmodsi4>:
    4dd4:	a1 e2       	ldi	r26, 0x21	; 33
    4dd6:	1a 2e       	mov	r1, r26
    4dd8:	aa 1b       	sub	r26, r26
    4dda:	bb 1b       	sub	r27, r27
    4ddc:	fd 01       	movw	r30, r26
    4dde:	0d c0       	rjmp	.+26     	; 0x4dfa <__udivmodsi4_ep>

00004de0 <__udivmodsi4_loop>:
    4de0:	aa 1f       	adc	r26, r26
    4de2:	bb 1f       	adc	r27, r27
    4de4:	ee 1f       	adc	r30, r30
    4de6:	ff 1f       	adc	r31, r31
    4de8:	a2 17       	cp	r26, r18
    4dea:	b3 07       	cpc	r27, r19
    4dec:	e4 07       	cpc	r30, r20
    4dee:	f5 07       	cpc	r31, r21
    4df0:	20 f0       	brcs	.+8      	; 0x4dfa <__udivmodsi4_ep>
    4df2:	a2 1b       	sub	r26, r18
    4df4:	b3 0b       	sbc	r27, r19
    4df6:	e4 0b       	sbc	r30, r20
    4df8:	f5 0b       	sbc	r31, r21

00004dfa <__udivmodsi4_ep>:
    4dfa:	66 1f       	adc	r22, r22
    4dfc:	77 1f       	adc	r23, r23
    4dfe:	88 1f       	adc	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	1a 94       	dec	r1
    4e04:	69 f7       	brne	.-38     	; 0x4de0 <__udivmodsi4_loop>
    4e06:	60 95       	com	r22
    4e08:	70 95       	com	r23
    4e0a:	80 95       	com	r24
    4e0c:	90 95       	com	r25
    4e0e:	9b 01       	movw	r18, r22
    4e10:	ac 01       	movw	r20, r24
    4e12:	bd 01       	movw	r22, r26
    4e14:	cf 01       	movw	r24, r30
    4e16:	08 95       	ret

00004e18 <__prologue_saves__>:
    4e18:	2f 92       	push	r2
    4e1a:	3f 92       	push	r3
    4e1c:	4f 92       	push	r4
    4e1e:	5f 92       	push	r5
    4e20:	6f 92       	push	r6
    4e22:	7f 92       	push	r7
    4e24:	8f 92       	push	r8
    4e26:	9f 92       	push	r9
    4e28:	af 92       	push	r10
    4e2a:	bf 92       	push	r11
    4e2c:	cf 92       	push	r12
    4e2e:	df 92       	push	r13
    4e30:	ef 92       	push	r14
    4e32:	ff 92       	push	r15
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
    4e40:	ca 1b       	sub	r28, r26
    4e42:	db 0b       	sbc	r29, r27
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	f8 94       	cli
    4e48:	de bf       	out	0x3e, r29	; 62
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	cd bf       	out	0x3d, r28	; 61
    4e4e:	09 94       	ijmp

00004e50 <__epilogue_restores__>:
    4e50:	2a 88       	ldd	r2, Y+18	; 0x12
    4e52:	39 88       	ldd	r3, Y+17	; 0x11
    4e54:	48 88       	ldd	r4, Y+16	; 0x10
    4e56:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e58:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e60:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e62:	b9 84       	ldd	r11, Y+9	; 0x09
    4e64:	c8 84       	ldd	r12, Y+8	; 0x08
    4e66:	df 80       	ldd	r13, Y+7	; 0x07
    4e68:	ee 80       	ldd	r14, Y+6	; 0x06
    4e6a:	fd 80       	ldd	r15, Y+5	; 0x05
    4e6c:	0c 81       	ldd	r16, Y+4	; 0x04
    4e6e:	1b 81       	ldd	r17, Y+3	; 0x03
    4e70:	aa 81       	ldd	r26, Y+2	; 0x02
    4e72:	b9 81       	ldd	r27, Y+1	; 0x01
    4e74:	ce 0f       	add	r28, r30
    4e76:	d1 1d       	adc	r29, r1
    4e78:	0f b6       	in	r0, 0x3f	; 63
    4e7a:	f8 94       	cli
    4e7c:	de bf       	out	0x3e, r29	; 62
    4e7e:	0f be       	out	0x3f, r0	; 63
    4e80:	cd bf       	out	0x3d, r28	; 61
    4e82:	ed 01       	movw	r28, r26
    4e84:	08 95       	ret

00004e86 <memset>:
    4e86:	dc 01       	movw	r26, r24
    4e88:	01 c0       	rjmp	.+2      	; 0x4e8c <memset+0x6>
    4e8a:	6d 93       	st	X+, r22
    4e8c:	41 50       	subi	r20, 0x01	; 1
    4e8e:	50 40       	sbci	r21, 0x00	; 0
    4e90:	e0 f7       	brcc	.-8      	; 0x4e8a <memset+0x4>
    4e92:	08 95       	ret

00004e94 <strlen>:
    4e94:	fc 01       	movw	r30, r24
    4e96:	01 90       	ld	r0, Z+
    4e98:	00 20       	and	r0, r0
    4e9a:	e9 f7       	brne	.-6      	; 0x4e96 <strlen+0x2>
    4e9c:	80 95       	com	r24
    4e9e:	90 95       	com	r25
    4ea0:	8e 0f       	add	r24, r30
    4ea2:	9f 1f       	adc	r25, r31
    4ea4:	08 95       	ret

00004ea6 <strncmp>:
    4ea6:	fb 01       	movw	r30, r22
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	41 50       	subi	r20, 0x01	; 1
    4eac:	50 40       	sbci	r21, 0x00	; 0
    4eae:	30 f0       	brcs	.+12     	; 0x4ebc <strncmp+0x16>
    4eb0:	8d 91       	ld	r24, X+
    4eb2:	01 90       	ld	r0, Z+
    4eb4:	80 19       	sub	r24, r0
    4eb6:	19 f4       	brne	.+6      	; 0x4ebe <strncmp+0x18>
    4eb8:	00 20       	and	r0, r0
    4eba:	b9 f7       	brne	.-18     	; 0x4eaa <strncmp+0x4>
    4ebc:	88 1b       	sub	r24, r24
    4ebe:	99 0b       	sbc	r25, r25
    4ec0:	08 95       	ret

00004ec2 <strstr>:
    4ec2:	fb 01       	movw	r30, r22
    4ec4:	51 91       	ld	r21, Z+
    4ec6:	55 23       	and	r21, r21
    4ec8:	a9 f0       	breq	.+42     	; 0x4ef4 <strstr+0x32>
    4eca:	bf 01       	movw	r22, r30
    4ecc:	dc 01       	movw	r26, r24
    4ece:	4d 91       	ld	r20, X+
    4ed0:	45 17       	cp	r20, r21
    4ed2:	41 11       	cpse	r20, r1
    4ed4:	e1 f7       	brne	.-8      	; 0x4ece <strstr+0xc>
    4ed6:	59 f4       	brne	.+22     	; 0x4eee <strstr+0x2c>
    4ed8:	cd 01       	movw	r24, r26
    4eda:	01 90       	ld	r0, Z+
    4edc:	00 20       	and	r0, r0
    4ede:	49 f0       	breq	.+18     	; 0x4ef2 <strstr+0x30>
    4ee0:	4d 91       	ld	r20, X+
    4ee2:	40 15       	cp	r20, r0
    4ee4:	41 11       	cpse	r20, r1
    4ee6:	c9 f3       	breq	.-14     	; 0x4eda <strstr+0x18>
    4ee8:	fb 01       	movw	r30, r22
    4eea:	41 11       	cpse	r20, r1
    4eec:	ef cf       	rjmp	.-34     	; 0x4ecc <strstr+0xa>
    4eee:	81 e0       	ldi	r24, 0x01	; 1
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	01 97       	sbiw	r24, 0x01	; 1
    4ef4:	08 95       	ret

00004ef6 <itoa>:
    4ef6:	fb 01       	movw	r30, r22
    4ef8:	9f 01       	movw	r18, r30
    4efa:	e8 94       	clt
    4efc:	42 30       	cpi	r20, 0x02	; 2
    4efe:	c4 f0       	brlt	.+48     	; 0x4f30 <itoa+0x3a>
    4f00:	45 32       	cpi	r20, 0x25	; 37
    4f02:	b4 f4       	brge	.+44     	; 0x4f30 <itoa+0x3a>
    4f04:	4a 30       	cpi	r20, 0x0A	; 10
    4f06:	29 f4       	brne	.+10     	; 0x4f12 <itoa+0x1c>
    4f08:	97 fb       	bst	r25, 7
    4f0a:	1e f4       	brtc	.+6      	; 0x4f12 <itoa+0x1c>
    4f0c:	90 95       	com	r25
    4f0e:	81 95       	neg	r24
    4f10:	9f 4f       	sbci	r25, 0xFF	; 255
    4f12:	64 2f       	mov	r22, r20
    4f14:	77 27       	eor	r23, r23
    4f16:	0e 94 4d 2a 	call	0x549a	; 0x549a <__udivmodhi4>
    4f1a:	80 5d       	subi	r24, 0xD0	; 208
    4f1c:	8a 33       	cpi	r24, 0x3A	; 58
    4f1e:	0c f0       	brlt	.+2      	; 0x4f22 <itoa+0x2c>
    4f20:	89 5d       	subi	r24, 0xD9	; 217
    4f22:	81 93       	st	Z+, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	a1 f7       	brne	.-24     	; 0x4f12 <itoa+0x1c>
    4f2a:	16 f4       	brtc	.+4      	; 0x4f30 <itoa+0x3a>
    4f2c:	5d e2       	ldi	r21, 0x2D	; 45
    4f2e:	51 93       	st	Z+, r21
    4f30:	10 82       	st	Z, r1
    4f32:	c9 01       	movw	r24, r18
    4f34:	0c 94 b3 29 	jmp	0x5366	; 0x5366 <strrev>

00004f38 <sprintf>:
    4f38:	ae e0       	ldi	r26, 0x0E	; 14
    4f3a:	b0 e0       	ldi	r27, 0x00	; 0
    4f3c:	e2 ea       	ldi	r30, 0xA2	; 162
    4f3e:	f7 e2       	ldi	r31, 0x27	; 39
    4f40:	0c 94 1a 27 	jmp	0x4e34	; 0x4e34 <__prologue_saves__+0x1c>
    4f44:	0d 89       	ldd	r16, Y+21	; 0x15
    4f46:	1e 89       	ldd	r17, Y+22	; 0x16
    4f48:	86 e0       	ldi	r24, 0x06	; 6
    4f4a:	8c 83       	std	Y+4, r24	; 0x04
    4f4c:	1a 83       	std	Y+2, r17	; 0x02
    4f4e:	09 83       	std	Y+1, r16	; 0x01
    4f50:	8f ef       	ldi	r24, 0xFF	; 255
    4f52:	9f e7       	ldi	r25, 0x7F	; 127
    4f54:	9e 83       	std	Y+6, r25	; 0x06
    4f56:	8d 83       	std	Y+5, r24	; 0x05
    4f58:	9e 01       	movw	r18, r28
    4f5a:	27 5e       	subi	r18, 0xE7	; 231
    4f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5e:	ce 01       	movw	r24, r28
    4f60:	01 96       	adiw	r24, 0x01	; 1
    4f62:	6f 89       	ldd	r22, Y+23	; 0x17
    4f64:	78 8d       	ldd	r23, Y+24	; 0x18
    4f66:	a9 01       	movw	r20, r18
    4f68:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <vfprintf>
    4f6c:	2f 81       	ldd	r18, Y+7	; 0x07
    4f6e:	38 85       	ldd	r19, Y+8	; 0x08
    4f70:	02 0f       	add	r16, r18
    4f72:	13 1f       	adc	r17, r19
    4f74:	f8 01       	movw	r30, r16
    4f76:	10 82       	st	Z, r1
    4f78:	2e 96       	adiw	r28, 0x0e	; 14
    4f7a:	e4 e0       	ldi	r30, 0x04	; 4
    4f7c:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__epilogue_restores__+0x1c>

00004f80 <vfprintf>:
    4f80:	ab e0       	ldi	r26, 0x0B	; 11
    4f82:	b0 e0       	ldi	r27, 0x00	; 0
    4f84:	e6 ec       	ldi	r30, 0xC6	; 198
    4f86:	f7 e2       	ldi	r31, 0x27	; 39
    4f88:	0c 94 0c 27 	jmp	0x4e18	; 0x4e18 <__prologue_saves__>
    4f8c:	3c 01       	movw	r6, r24
    4f8e:	2b 01       	movw	r4, r22
    4f90:	5a 01       	movw	r10, r20
    4f92:	fc 01       	movw	r30, r24
    4f94:	17 82       	std	Z+7, r1	; 0x07
    4f96:	16 82       	std	Z+6, r1	; 0x06
    4f98:	83 81       	ldd	r24, Z+3	; 0x03
    4f9a:	81 fd       	sbrc	r24, 1
    4f9c:	03 c0       	rjmp	.+6      	; 0x4fa4 <vfprintf+0x24>
    4f9e:	6f ef       	ldi	r22, 0xFF	; 255
    4fa0:	7f ef       	ldi	r23, 0xFF	; 255
    4fa2:	c6 c1       	rjmp	.+908    	; 0x5330 <vfprintf+0x3b0>
    4fa4:	9a e0       	ldi	r25, 0x0A	; 10
    4fa6:	89 2e       	mov	r8, r25
    4fa8:	1e 01       	movw	r2, r28
    4faa:	08 94       	sec
    4fac:	21 1c       	adc	r2, r1
    4fae:	31 1c       	adc	r3, r1
    4fb0:	f3 01       	movw	r30, r6
    4fb2:	23 81       	ldd	r18, Z+3	; 0x03
    4fb4:	f2 01       	movw	r30, r4
    4fb6:	23 fd       	sbrc	r18, 3
    4fb8:	85 91       	lpm	r24, Z+
    4fba:	23 ff       	sbrs	r18, 3
    4fbc:	81 91       	ld	r24, Z+
    4fbe:	2f 01       	movw	r4, r30
    4fc0:	88 23       	and	r24, r24
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <vfprintf+0x46>
    4fc4:	b2 c1       	rjmp	.+868    	; 0x532a <vfprintf+0x3aa>
    4fc6:	85 32       	cpi	r24, 0x25	; 37
    4fc8:	39 f4       	brne	.+14     	; 0x4fd8 <vfprintf+0x58>
    4fca:	23 fd       	sbrc	r18, 3
    4fcc:	85 91       	lpm	r24, Z+
    4fce:	23 ff       	sbrs	r18, 3
    4fd0:	81 91       	ld	r24, Z+
    4fd2:	2f 01       	movw	r4, r30
    4fd4:	85 32       	cpi	r24, 0x25	; 37
    4fd6:	29 f4       	brne	.+10     	; 0x4fe2 <vfprintf+0x62>
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	b3 01       	movw	r22, r6
    4fdc:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    4fe0:	e7 cf       	rjmp	.-50     	; 0x4fb0 <vfprintf+0x30>
    4fe2:	98 2f       	mov	r25, r24
    4fe4:	ff 24       	eor	r15, r15
    4fe6:	ee 24       	eor	r14, r14
    4fe8:	99 24       	eor	r9, r9
    4fea:	ff e1       	ldi	r31, 0x1F	; 31
    4fec:	ff 15       	cp	r31, r15
    4fee:	d0 f0       	brcs	.+52     	; 0x5024 <vfprintf+0xa4>
    4ff0:	9b 32       	cpi	r25, 0x2B	; 43
    4ff2:	69 f0       	breq	.+26     	; 0x500e <vfprintf+0x8e>
    4ff4:	9c 32       	cpi	r25, 0x2C	; 44
    4ff6:	28 f4       	brcc	.+10     	; 0x5002 <vfprintf+0x82>
    4ff8:	90 32       	cpi	r25, 0x20	; 32
    4ffa:	59 f0       	breq	.+22     	; 0x5012 <vfprintf+0x92>
    4ffc:	93 32       	cpi	r25, 0x23	; 35
    4ffe:	91 f4       	brne	.+36     	; 0x5024 <vfprintf+0xa4>
    5000:	0e c0       	rjmp	.+28     	; 0x501e <vfprintf+0x9e>
    5002:	9d 32       	cpi	r25, 0x2D	; 45
    5004:	49 f0       	breq	.+18     	; 0x5018 <vfprintf+0x98>
    5006:	90 33       	cpi	r25, 0x30	; 48
    5008:	69 f4       	brne	.+26     	; 0x5024 <vfprintf+0xa4>
    500a:	41 e0       	ldi	r20, 0x01	; 1
    500c:	24 c0       	rjmp	.+72     	; 0x5056 <vfprintf+0xd6>
    500e:	52 e0       	ldi	r21, 0x02	; 2
    5010:	f5 2a       	or	r15, r21
    5012:	84 e0       	ldi	r24, 0x04	; 4
    5014:	f8 2a       	or	r15, r24
    5016:	28 c0       	rjmp	.+80     	; 0x5068 <vfprintf+0xe8>
    5018:	98 e0       	ldi	r25, 0x08	; 8
    501a:	f9 2a       	or	r15, r25
    501c:	25 c0       	rjmp	.+74     	; 0x5068 <vfprintf+0xe8>
    501e:	e0 e1       	ldi	r30, 0x10	; 16
    5020:	fe 2a       	or	r15, r30
    5022:	22 c0       	rjmp	.+68     	; 0x5068 <vfprintf+0xe8>
    5024:	f7 fc       	sbrc	r15, 7
    5026:	29 c0       	rjmp	.+82     	; 0x507a <vfprintf+0xfa>
    5028:	89 2f       	mov	r24, r25
    502a:	80 53       	subi	r24, 0x30	; 48
    502c:	8a 30       	cpi	r24, 0x0A	; 10
    502e:	70 f4       	brcc	.+28     	; 0x504c <vfprintf+0xcc>
    5030:	f6 fe       	sbrs	r15, 6
    5032:	05 c0       	rjmp	.+10     	; 0x503e <vfprintf+0xbe>
    5034:	98 9c       	mul	r9, r8
    5036:	90 2c       	mov	r9, r0
    5038:	11 24       	eor	r1, r1
    503a:	98 0e       	add	r9, r24
    503c:	15 c0       	rjmp	.+42     	; 0x5068 <vfprintf+0xe8>
    503e:	e8 9c       	mul	r14, r8
    5040:	e0 2c       	mov	r14, r0
    5042:	11 24       	eor	r1, r1
    5044:	e8 0e       	add	r14, r24
    5046:	f0 e2       	ldi	r31, 0x20	; 32
    5048:	ff 2a       	or	r15, r31
    504a:	0e c0       	rjmp	.+28     	; 0x5068 <vfprintf+0xe8>
    504c:	9e 32       	cpi	r25, 0x2E	; 46
    504e:	29 f4       	brne	.+10     	; 0x505a <vfprintf+0xda>
    5050:	f6 fc       	sbrc	r15, 6
    5052:	6b c1       	rjmp	.+726    	; 0x532a <vfprintf+0x3aa>
    5054:	40 e4       	ldi	r20, 0x40	; 64
    5056:	f4 2a       	or	r15, r20
    5058:	07 c0       	rjmp	.+14     	; 0x5068 <vfprintf+0xe8>
    505a:	9c 36       	cpi	r25, 0x6C	; 108
    505c:	19 f4       	brne	.+6      	; 0x5064 <vfprintf+0xe4>
    505e:	50 e8       	ldi	r21, 0x80	; 128
    5060:	f5 2a       	or	r15, r21
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <vfprintf+0xe8>
    5064:	98 36       	cpi	r25, 0x68	; 104
    5066:	49 f4       	brne	.+18     	; 0x507a <vfprintf+0xfa>
    5068:	f2 01       	movw	r30, r4
    506a:	23 fd       	sbrc	r18, 3
    506c:	95 91       	lpm	r25, Z+
    506e:	23 ff       	sbrs	r18, 3
    5070:	91 91       	ld	r25, Z+
    5072:	2f 01       	movw	r4, r30
    5074:	99 23       	and	r25, r25
    5076:	09 f0       	breq	.+2      	; 0x507a <vfprintf+0xfa>
    5078:	b8 cf       	rjmp	.-144    	; 0x4fea <vfprintf+0x6a>
    507a:	89 2f       	mov	r24, r25
    507c:	85 54       	subi	r24, 0x45	; 69
    507e:	83 30       	cpi	r24, 0x03	; 3
    5080:	18 f0       	brcs	.+6      	; 0x5088 <vfprintf+0x108>
    5082:	80 52       	subi	r24, 0x20	; 32
    5084:	83 30       	cpi	r24, 0x03	; 3
    5086:	38 f4       	brcc	.+14     	; 0x5096 <vfprintf+0x116>
    5088:	44 e0       	ldi	r20, 0x04	; 4
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	a4 0e       	add	r10, r20
    508e:	b5 1e       	adc	r11, r21
    5090:	5f e3       	ldi	r21, 0x3F	; 63
    5092:	59 83       	std	Y+1, r21	; 0x01
    5094:	0f c0       	rjmp	.+30     	; 0x50b4 <vfprintf+0x134>
    5096:	93 36       	cpi	r25, 0x63	; 99
    5098:	31 f0       	breq	.+12     	; 0x50a6 <vfprintf+0x126>
    509a:	93 37       	cpi	r25, 0x73	; 115
    509c:	79 f0       	breq	.+30     	; 0x50bc <vfprintf+0x13c>
    509e:	93 35       	cpi	r25, 0x53	; 83
    50a0:	09 f0       	breq	.+2      	; 0x50a4 <vfprintf+0x124>
    50a2:	56 c0       	rjmp	.+172    	; 0x5150 <vfprintf+0x1d0>
    50a4:	20 c0       	rjmp	.+64     	; 0x50e6 <vfprintf+0x166>
    50a6:	f5 01       	movw	r30, r10
    50a8:	80 81       	ld	r24, Z
    50aa:	89 83       	std	Y+1, r24	; 0x01
    50ac:	42 e0       	ldi	r20, 0x02	; 2
    50ae:	50 e0       	ldi	r21, 0x00	; 0
    50b0:	a4 0e       	add	r10, r20
    50b2:	b5 1e       	adc	r11, r21
    50b4:	61 01       	movw	r12, r2
    50b6:	01 e0       	ldi	r16, 0x01	; 1
    50b8:	10 e0       	ldi	r17, 0x00	; 0
    50ba:	12 c0       	rjmp	.+36     	; 0x50e0 <vfprintf+0x160>
    50bc:	f5 01       	movw	r30, r10
    50be:	c0 80       	ld	r12, Z
    50c0:	d1 80       	ldd	r13, Z+1	; 0x01
    50c2:	f6 fc       	sbrc	r15, 6
    50c4:	03 c0       	rjmp	.+6      	; 0x50cc <vfprintf+0x14c>
    50c6:	6f ef       	ldi	r22, 0xFF	; 255
    50c8:	7f ef       	ldi	r23, 0xFF	; 255
    50ca:	02 c0       	rjmp	.+4      	; 0x50d0 <vfprintf+0x150>
    50cc:	69 2d       	mov	r22, r9
    50ce:	70 e0       	ldi	r23, 0x00	; 0
    50d0:	42 e0       	ldi	r20, 0x02	; 2
    50d2:	50 e0       	ldi	r21, 0x00	; 0
    50d4:	a4 0e       	add	r10, r20
    50d6:	b5 1e       	adc	r11, r21
    50d8:	c6 01       	movw	r24, r12
    50da:	0e 94 a8 29 	call	0x5350	; 0x5350 <strnlen>
    50de:	8c 01       	movw	r16, r24
    50e0:	5f e7       	ldi	r21, 0x7F	; 127
    50e2:	f5 22       	and	r15, r21
    50e4:	14 c0       	rjmp	.+40     	; 0x510e <vfprintf+0x18e>
    50e6:	f5 01       	movw	r30, r10
    50e8:	c0 80       	ld	r12, Z
    50ea:	d1 80       	ldd	r13, Z+1	; 0x01
    50ec:	f6 fc       	sbrc	r15, 6
    50ee:	03 c0       	rjmp	.+6      	; 0x50f6 <vfprintf+0x176>
    50f0:	6f ef       	ldi	r22, 0xFF	; 255
    50f2:	7f ef       	ldi	r23, 0xFF	; 255
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <vfprintf+0x17a>
    50f6:	69 2d       	mov	r22, r9
    50f8:	70 e0       	ldi	r23, 0x00	; 0
    50fa:	42 e0       	ldi	r20, 0x02	; 2
    50fc:	50 e0       	ldi	r21, 0x00	; 0
    50fe:	a4 0e       	add	r10, r20
    5100:	b5 1e       	adc	r11, r21
    5102:	c6 01       	movw	r24, r12
    5104:	0e 94 9d 29 	call	0x533a	; 0x533a <strnlen_P>
    5108:	8c 01       	movw	r16, r24
    510a:	50 e8       	ldi	r21, 0x80	; 128
    510c:	f5 2a       	or	r15, r21
    510e:	f3 fe       	sbrs	r15, 3
    5110:	07 c0       	rjmp	.+14     	; 0x5120 <vfprintf+0x1a0>
    5112:	1a c0       	rjmp	.+52     	; 0x5148 <vfprintf+0x1c8>
    5114:	80 e2       	ldi	r24, 0x20	; 32
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	b3 01       	movw	r22, r6
    511a:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    511e:	ea 94       	dec	r14
    5120:	8e 2d       	mov	r24, r14
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	08 17       	cp	r16, r24
    5126:	19 07       	cpc	r17, r25
    5128:	a8 f3       	brcs	.-22     	; 0x5114 <vfprintf+0x194>
    512a:	0e c0       	rjmp	.+28     	; 0x5148 <vfprintf+0x1c8>
    512c:	f6 01       	movw	r30, r12
    512e:	f7 fc       	sbrc	r15, 7
    5130:	85 91       	lpm	r24, Z+
    5132:	f7 fe       	sbrs	r15, 7
    5134:	81 91       	ld	r24, Z+
    5136:	6f 01       	movw	r12, r30
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	b3 01       	movw	r22, r6
    513c:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    5140:	e1 10       	cpse	r14, r1
    5142:	ea 94       	dec	r14
    5144:	01 50       	subi	r16, 0x01	; 1
    5146:	10 40       	sbci	r17, 0x00	; 0
    5148:	01 15       	cp	r16, r1
    514a:	11 05       	cpc	r17, r1
    514c:	79 f7       	brne	.-34     	; 0x512c <vfprintf+0x1ac>
    514e:	ea c0       	rjmp	.+468    	; 0x5324 <vfprintf+0x3a4>
    5150:	94 36       	cpi	r25, 0x64	; 100
    5152:	11 f0       	breq	.+4      	; 0x5158 <vfprintf+0x1d8>
    5154:	99 36       	cpi	r25, 0x69	; 105
    5156:	69 f5       	brne	.+90     	; 0x51b2 <vfprintf+0x232>
    5158:	f7 fe       	sbrs	r15, 7
    515a:	08 c0       	rjmp	.+16     	; 0x516c <vfprintf+0x1ec>
    515c:	f5 01       	movw	r30, r10
    515e:	20 81       	ld	r18, Z
    5160:	31 81       	ldd	r19, Z+1	; 0x01
    5162:	42 81       	ldd	r20, Z+2	; 0x02
    5164:	53 81       	ldd	r21, Z+3	; 0x03
    5166:	84 e0       	ldi	r24, 0x04	; 4
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	0a c0       	rjmp	.+20     	; 0x5180 <vfprintf+0x200>
    516c:	f5 01       	movw	r30, r10
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	9c 01       	movw	r18, r24
    5174:	44 27       	eor	r20, r20
    5176:	37 fd       	sbrc	r19, 7
    5178:	40 95       	com	r20
    517a:	54 2f       	mov	r21, r20
    517c:	82 e0       	ldi	r24, 0x02	; 2
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	a8 0e       	add	r10, r24
    5182:	b9 1e       	adc	r11, r25
    5184:	9f e6       	ldi	r25, 0x6F	; 111
    5186:	f9 22       	and	r15, r25
    5188:	57 ff       	sbrs	r21, 7
    518a:	09 c0       	rjmp	.+18     	; 0x519e <vfprintf+0x21e>
    518c:	50 95       	com	r21
    518e:	40 95       	com	r20
    5190:	30 95       	com	r19
    5192:	21 95       	neg	r18
    5194:	3f 4f       	sbci	r19, 0xFF	; 255
    5196:	4f 4f       	sbci	r20, 0xFF	; 255
    5198:	5f 4f       	sbci	r21, 0xFF	; 255
    519a:	e0 e8       	ldi	r30, 0x80	; 128
    519c:	fe 2a       	or	r15, r30
    519e:	ca 01       	movw	r24, r20
    51a0:	b9 01       	movw	r22, r18
    51a2:	a1 01       	movw	r20, r2
    51a4:	2a e0       	ldi	r18, 0x0A	; 10
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	0e 94 ef 29 	call	0x53de	; 0x53de <__ultoa_invert>
    51ac:	d8 2e       	mov	r13, r24
    51ae:	d2 18       	sub	r13, r2
    51b0:	40 c0       	rjmp	.+128    	; 0x5232 <vfprintf+0x2b2>
    51b2:	95 37       	cpi	r25, 0x75	; 117
    51b4:	29 f4       	brne	.+10     	; 0x51c0 <vfprintf+0x240>
    51b6:	1f 2d       	mov	r17, r15
    51b8:	1f 7e       	andi	r17, 0xEF	; 239
    51ba:	2a e0       	ldi	r18, 0x0A	; 10
    51bc:	30 e0       	ldi	r19, 0x00	; 0
    51be:	1d c0       	rjmp	.+58     	; 0x51fa <vfprintf+0x27a>
    51c0:	1f 2d       	mov	r17, r15
    51c2:	19 7f       	andi	r17, 0xF9	; 249
    51c4:	9f 36       	cpi	r25, 0x6F	; 111
    51c6:	61 f0       	breq	.+24     	; 0x51e0 <vfprintf+0x260>
    51c8:	90 37       	cpi	r25, 0x70	; 112
    51ca:	20 f4       	brcc	.+8      	; 0x51d4 <vfprintf+0x254>
    51cc:	98 35       	cpi	r25, 0x58	; 88
    51ce:	09 f0       	breq	.+2      	; 0x51d2 <vfprintf+0x252>
    51d0:	ac c0       	rjmp	.+344    	; 0x532a <vfprintf+0x3aa>
    51d2:	0f c0       	rjmp	.+30     	; 0x51f2 <vfprintf+0x272>
    51d4:	90 37       	cpi	r25, 0x70	; 112
    51d6:	39 f0       	breq	.+14     	; 0x51e6 <vfprintf+0x266>
    51d8:	98 37       	cpi	r25, 0x78	; 120
    51da:	09 f0       	breq	.+2      	; 0x51de <vfprintf+0x25e>
    51dc:	a6 c0       	rjmp	.+332    	; 0x532a <vfprintf+0x3aa>
    51de:	04 c0       	rjmp	.+8      	; 0x51e8 <vfprintf+0x268>
    51e0:	28 e0       	ldi	r18, 0x08	; 8
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	0a c0       	rjmp	.+20     	; 0x51fa <vfprintf+0x27a>
    51e6:	10 61       	ori	r17, 0x10	; 16
    51e8:	14 fd       	sbrc	r17, 4
    51ea:	14 60       	ori	r17, 0x04	; 4
    51ec:	20 e1       	ldi	r18, 0x10	; 16
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	04 c0       	rjmp	.+8      	; 0x51fa <vfprintf+0x27a>
    51f2:	14 fd       	sbrc	r17, 4
    51f4:	16 60       	ori	r17, 0x06	; 6
    51f6:	20 e1       	ldi	r18, 0x10	; 16
    51f8:	32 e0       	ldi	r19, 0x02	; 2
    51fa:	17 ff       	sbrs	r17, 7
    51fc:	08 c0       	rjmp	.+16     	; 0x520e <vfprintf+0x28e>
    51fe:	f5 01       	movw	r30, r10
    5200:	60 81       	ld	r22, Z
    5202:	71 81       	ldd	r23, Z+1	; 0x01
    5204:	82 81       	ldd	r24, Z+2	; 0x02
    5206:	93 81       	ldd	r25, Z+3	; 0x03
    5208:	44 e0       	ldi	r20, 0x04	; 4
    520a:	50 e0       	ldi	r21, 0x00	; 0
    520c:	08 c0       	rjmp	.+16     	; 0x521e <vfprintf+0x29e>
    520e:	f5 01       	movw	r30, r10
    5210:	80 81       	ld	r24, Z
    5212:	91 81       	ldd	r25, Z+1	; 0x01
    5214:	bc 01       	movw	r22, r24
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	42 e0       	ldi	r20, 0x02	; 2
    521c:	50 e0       	ldi	r21, 0x00	; 0
    521e:	a4 0e       	add	r10, r20
    5220:	b5 1e       	adc	r11, r21
    5222:	a1 01       	movw	r20, r2
    5224:	0e 94 ef 29 	call	0x53de	; 0x53de <__ultoa_invert>
    5228:	d8 2e       	mov	r13, r24
    522a:	d2 18       	sub	r13, r2
    522c:	8f e7       	ldi	r24, 0x7F	; 127
    522e:	f8 2e       	mov	r15, r24
    5230:	f1 22       	and	r15, r17
    5232:	f6 fe       	sbrs	r15, 6
    5234:	0b c0       	rjmp	.+22     	; 0x524c <vfprintf+0x2cc>
    5236:	5e ef       	ldi	r21, 0xFE	; 254
    5238:	f5 22       	and	r15, r21
    523a:	d9 14       	cp	r13, r9
    523c:	38 f4       	brcc	.+14     	; 0x524c <vfprintf+0x2cc>
    523e:	f4 fe       	sbrs	r15, 4
    5240:	07 c0       	rjmp	.+14     	; 0x5250 <vfprintf+0x2d0>
    5242:	f2 fc       	sbrc	r15, 2
    5244:	05 c0       	rjmp	.+10     	; 0x5250 <vfprintf+0x2d0>
    5246:	8f ee       	ldi	r24, 0xEF	; 239
    5248:	f8 22       	and	r15, r24
    524a:	02 c0       	rjmp	.+4      	; 0x5250 <vfprintf+0x2d0>
    524c:	1d 2d       	mov	r17, r13
    524e:	01 c0       	rjmp	.+2      	; 0x5252 <vfprintf+0x2d2>
    5250:	19 2d       	mov	r17, r9
    5252:	f4 fe       	sbrs	r15, 4
    5254:	0d c0       	rjmp	.+26     	; 0x5270 <vfprintf+0x2f0>
    5256:	fe 01       	movw	r30, r28
    5258:	ed 0d       	add	r30, r13
    525a:	f1 1d       	adc	r31, r1
    525c:	80 81       	ld	r24, Z
    525e:	80 33       	cpi	r24, 0x30	; 48
    5260:	19 f4       	brne	.+6      	; 0x5268 <vfprintf+0x2e8>
    5262:	99 ee       	ldi	r25, 0xE9	; 233
    5264:	f9 22       	and	r15, r25
    5266:	08 c0       	rjmp	.+16     	; 0x5278 <vfprintf+0x2f8>
    5268:	1f 5f       	subi	r17, 0xFF	; 255
    526a:	f2 fe       	sbrs	r15, 2
    526c:	05 c0       	rjmp	.+10     	; 0x5278 <vfprintf+0x2f8>
    526e:	03 c0       	rjmp	.+6      	; 0x5276 <vfprintf+0x2f6>
    5270:	8f 2d       	mov	r24, r15
    5272:	86 78       	andi	r24, 0x86	; 134
    5274:	09 f0       	breq	.+2      	; 0x5278 <vfprintf+0x2f8>
    5276:	1f 5f       	subi	r17, 0xFF	; 255
    5278:	0f 2d       	mov	r16, r15
    527a:	f3 fc       	sbrc	r15, 3
    527c:	14 c0       	rjmp	.+40     	; 0x52a6 <vfprintf+0x326>
    527e:	f0 fe       	sbrs	r15, 0
    5280:	0f c0       	rjmp	.+30     	; 0x52a0 <vfprintf+0x320>
    5282:	1e 15       	cp	r17, r14
    5284:	10 f0       	brcs	.+4      	; 0x528a <vfprintf+0x30a>
    5286:	9d 2c       	mov	r9, r13
    5288:	0b c0       	rjmp	.+22     	; 0x52a0 <vfprintf+0x320>
    528a:	9d 2c       	mov	r9, r13
    528c:	9e 0c       	add	r9, r14
    528e:	91 1a       	sub	r9, r17
    5290:	1e 2d       	mov	r17, r14
    5292:	06 c0       	rjmp	.+12     	; 0x52a0 <vfprintf+0x320>
    5294:	80 e2       	ldi	r24, 0x20	; 32
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	b3 01       	movw	r22, r6
    529a:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    529e:	1f 5f       	subi	r17, 0xFF	; 255
    52a0:	1e 15       	cp	r17, r14
    52a2:	c0 f3       	brcs	.-16     	; 0x5294 <vfprintf+0x314>
    52a4:	04 c0       	rjmp	.+8      	; 0x52ae <vfprintf+0x32e>
    52a6:	1e 15       	cp	r17, r14
    52a8:	10 f4       	brcc	.+4      	; 0x52ae <vfprintf+0x32e>
    52aa:	e1 1a       	sub	r14, r17
    52ac:	01 c0       	rjmp	.+2      	; 0x52b0 <vfprintf+0x330>
    52ae:	ee 24       	eor	r14, r14
    52b0:	04 ff       	sbrs	r16, 4
    52b2:	0f c0       	rjmp	.+30     	; 0x52d2 <vfprintf+0x352>
    52b4:	80 e3       	ldi	r24, 0x30	; 48
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	b3 01       	movw	r22, r6
    52ba:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    52be:	02 ff       	sbrs	r16, 2
    52c0:	1d c0       	rjmp	.+58     	; 0x52fc <vfprintf+0x37c>
    52c2:	01 fd       	sbrc	r16, 1
    52c4:	03 c0       	rjmp	.+6      	; 0x52cc <vfprintf+0x34c>
    52c6:	88 e7       	ldi	r24, 0x78	; 120
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	0e c0       	rjmp	.+28     	; 0x52e8 <vfprintf+0x368>
    52cc:	88 e5       	ldi	r24, 0x58	; 88
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	0b c0       	rjmp	.+22     	; 0x52e8 <vfprintf+0x368>
    52d2:	80 2f       	mov	r24, r16
    52d4:	86 78       	andi	r24, 0x86	; 134
    52d6:	91 f0       	breq	.+36     	; 0x52fc <vfprintf+0x37c>
    52d8:	01 ff       	sbrs	r16, 1
    52da:	02 c0       	rjmp	.+4      	; 0x52e0 <vfprintf+0x360>
    52dc:	8b e2       	ldi	r24, 0x2B	; 43
    52de:	01 c0       	rjmp	.+2      	; 0x52e2 <vfprintf+0x362>
    52e0:	80 e2       	ldi	r24, 0x20	; 32
    52e2:	f7 fc       	sbrc	r15, 7
    52e4:	8d e2       	ldi	r24, 0x2D	; 45
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	b3 01       	movw	r22, r6
    52ea:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    52ee:	06 c0       	rjmp	.+12     	; 0x52fc <vfprintf+0x37c>
    52f0:	80 e3       	ldi	r24, 0x30	; 48
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	b3 01       	movw	r22, r6
    52f6:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    52fa:	9a 94       	dec	r9
    52fc:	d9 14       	cp	r13, r9
    52fe:	c0 f3       	brcs	.-16     	; 0x52f0 <vfprintf+0x370>
    5300:	da 94       	dec	r13
    5302:	f1 01       	movw	r30, r2
    5304:	ed 0d       	add	r30, r13
    5306:	f1 1d       	adc	r31, r1
    5308:	80 81       	ld	r24, Z
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	b3 01       	movw	r22, r6
    530e:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    5312:	dd 20       	and	r13, r13
    5314:	a9 f7       	brne	.-22     	; 0x5300 <vfprintf+0x380>
    5316:	06 c0       	rjmp	.+12     	; 0x5324 <vfprintf+0x3a4>
    5318:	80 e2       	ldi	r24, 0x20	; 32
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	b3 01       	movw	r22, r6
    531e:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    5322:	ea 94       	dec	r14
    5324:	ee 20       	and	r14, r14
    5326:	c1 f7       	brne	.-16     	; 0x5318 <vfprintf+0x398>
    5328:	43 ce       	rjmp	.-890    	; 0x4fb0 <vfprintf+0x30>
    532a:	f3 01       	movw	r30, r6
    532c:	66 81       	ldd	r22, Z+6	; 0x06
    532e:	77 81       	ldd	r23, Z+7	; 0x07
    5330:	cb 01       	movw	r24, r22
    5332:	2b 96       	adiw	r28, 0x0b	; 11
    5334:	e2 e1       	ldi	r30, 0x12	; 18
    5336:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__epilogue_restores__>

0000533a <strnlen_P>:
    533a:	fc 01       	movw	r30, r24
    533c:	05 90       	lpm	r0, Z+
    533e:	61 50       	subi	r22, 0x01	; 1
    5340:	70 40       	sbci	r23, 0x00	; 0
    5342:	01 10       	cpse	r0, r1
    5344:	d8 f7       	brcc	.-10     	; 0x533c <strnlen_P+0x2>
    5346:	80 95       	com	r24
    5348:	90 95       	com	r25
    534a:	8e 0f       	add	r24, r30
    534c:	9f 1f       	adc	r25, r31
    534e:	08 95       	ret

00005350 <strnlen>:
    5350:	fc 01       	movw	r30, r24
    5352:	61 50       	subi	r22, 0x01	; 1
    5354:	70 40       	sbci	r23, 0x00	; 0
    5356:	01 90       	ld	r0, Z+
    5358:	01 10       	cpse	r0, r1
    535a:	d8 f7       	brcc	.-10     	; 0x5352 <strnlen+0x2>
    535c:	80 95       	com	r24
    535e:	90 95       	com	r25
    5360:	8e 0f       	add	r24, r30
    5362:	9f 1f       	adc	r25, r31
    5364:	08 95       	ret

00005366 <strrev>:
    5366:	dc 01       	movw	r26, r24
    5368:	fc 01       	movw	r30, r24
    536a:	67 2f       	mov	r22, r23
    536c:	71 91       	ld	r23, Z+
    536e:	77 23       	and	r23, r23
    5370:	e1 f7       	brne	.-8      	; 0x536a <strrev+0x4>
    5372:	32 97       	sbiw	r30, 0x02	; 2
    5374:	04 c0       	rjmp	.+8      	; 0x537e <strrev+0x18>
    5376:	7c 91       	ld	r23, X
    5378:	6d 93       	st	X+, r22
    537a:	70 83       	st	Z, r23
    537c:	62 91       	ld	r22, -Z
    537e:	ae 17       	cp	r26, r30
    5380:	bf 07       	cpc	r27, r31
    5382:	c8 f3       	brcs	.-14     	; 0x5376 <strrev+0x10>
    5384:	08 95       	ret

00005386 <fputc>:
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	8c 01       	movw	r16, r24
    5390:	eb 01       	movw	r28, r22
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	81 ff       	sbrs	r24, 1
    5396:	1b c0       	rjmp	.+54     	; 0x53ce <fputc+0x48>
    5398:	82 ff       	sbrs	r24, 2
    539a:	0d c0       	rjmp	.+26     	; 0x53b6 <fputc+0x30>
    539c:	2e 81       	ldd	r18, Y+6	; 0x06
    539e:	3f 81       	ldd	r19, Y+7	; 0x07
    53a0:	8c 81       	ldd	r24, Y+4	; 0x04
    53a2:	9d 81       	ldd	r25, Y+5	; 0x05
    53a4:	28 17       	cp	r18, r24
    53a6:	39 07       	cpc	r19, r25
    53a8:	64 f4       	brge	.+24     	; 0x53c2 <fputc+0x3c>
    53aa:	e8 81       	ld	r30, Y
    53ac:	f9 81       	ldd	r31, Y+1	; 0x01
    53ae:	01 93       	st	Z+, r16
    53b0:	f9 83       	std	Y+1, r31	; 0x01
    53b2:	e8 83       	st	Y, r30
    53b4:	06 c0       	rjmp	.+12     	; 0x53c2 <fputc+0x3c>
    53b6:	e8 85       	ldd	r30, Y+8	; 0x08
    53b8:	f9 85       	ldd	r31, Y+9	; 0x09
    53ba:	80 2f       	mov	r24, r16
    53bc:	09 95       	icall
    53be:	89 2b       	or	r24, r25
    53c0:	31 f4       	brne	.+12     	; 0x53ce <fputc+0x48>
    53c2:	8e 81       	ldd	r24, Y+6	; 0x06
    53c4:	9f 81       	ldd	r25, Y+7	; 0x07
    53c6:	01 96       	adiw	r24, 0x01	; 1
    53c8:	9f 83       	std	Y+7, r25	; 0x07
    53ca:	8e 83       	std	Y+6, r24	; 0x06
    53cc:	02 c0       	rjmp	.+4      	; 0x53d2 <fputc+0x4c>
    53ce:	0f ef       	ldi	r16, 0xFF	; 255
    53d0:	1f ef       	ldi	r17, 0xFF	; 255
    53d2:	c8 01       	movw	r24, r16
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	1f 91       	pop	r17
    53da:	0f 91       	pop	r16
    53dc:	08 95       	ret

000053de <__ultoa_invert>:
    53de:	fa 01       	movw	r30, r20
    53e0:	aa 27       	eor	r26, r26
    53e2:	28 30       	cpi	r18, 0x08	; 8
    53e4:	51 f1       	breq	.+84     	; 0x543a <__ultoa_invert+0x5c>
    53e6:	20 31       	cpi	r18, 0x10	; 16
    53e8:	81 f1       	breq	.+96     	; 0x544a <__ultoa_invert+0x6c>
    53ea:	e8 94       	clt
    53ec:	6f 93       	push	r22
    53ee:	6e 7f       	andi	r22, 0xFE	; 254
    53f0:	6e 5f       	subi	r22, 0xFE	; 254
    53f2:	7f 4f       	sbci	r23, 0xFF	; 255
    53f4:	8f 4f       	sbci	r24, 0xFF	; 255
    53f6:	9f 4f       	sbci	r25, 0xFF	; 255
    53f8:	af 4f       	sbci	r26, 0xFF	; 255
    53fa:	b1 e0       	ldi	r27, 0x01	; 1
    53fc:	3e d0       	rcall	.+124    	; 0x547a <__ultoa_invert+0x9c>
    53fe:	b4 e0       	ldi	r27, 0x04	; 4
    5400:	3c d0       	rcall	.+120    	; 0x547a <__ultoa_invert+0x9c>
    5402:	67 0f       	add	r22, r23
    5404:	78 1f       	adc	r23, r24
    5406:	89 1f       	adc	r24, r25
    5408:	9a 1f       	adc	r25, r26
    540a:	a1 1d       	adc	r26, r1
    540c:	68 0f       	add	r22, r24
    540e:	79 1f       	adc	r23, r25
    5410:	8a 1f       	adc	r24, r26
    5412:	91 1d       	adc	r25, r1
    5414:	a1 1d       	adc	r26, r1
    5416:	6a 0f       	add	r22, r26
    5418:	71 1d       	adc	r23, r1
    541a:	81 1d       	adc	r24, r1
    541c:	91 1d       	adc	r25, r1
    541e:	a1 1d       	adc	r26, r1
    5420:	20 d0       	rcall	.+64     	; 0x5462 <__ultoa_invert+0x84>
    5422:	09 f4       	brne	.+2      	; 0x5426 <__ultoa_invert+0x48>
    5424:	68 94       	set
    5426:	3f 91       	pop	r19
    5428:	2a e0       	ldi	r18, 0x0A	; 10
    542a:	26 9f       	mul	r18, r22
    542c:	11 24       	eor	r1, r1
    542e:	30 19       	sub	r19, r0
    5430:	30 5d       	subi	r19, 0xD0	; 208
    5432:	31 93       	st	Z+, r19
    5434:	de f6       	brtc	.-74     	; 0x53ec <__ultoa_invert+0xe>
    5436:	cf 01       	movw	r24, r30
    5438:	08 95       	ret
    543a:	46 2f       	mov	r20, r22
    543c:	47 70       	andi	r20, 0x07	; 7
    543e:	40 5d       	subi	r20, 0xD0	; 208
    5440:	41 93       	st	Z+, r20
    5442:	b3 e0       	ldi	r27, 0x03	; 3
    5444:	0f d0       	rcall	.+30     	; 0x5464 <__ultoa_invert+0x86>
    5446:	c9 f7       	brne	.-14     	; 0x543a <__ultoa_invert+0x5c>
    5448:	f6 cf       	rjmp	.-20     	; 0x5436 <__ultoa_invert+0x58>
    544a:	46 2f       	mov	r20, r22
    544c:	4f 70       	andi	r20, 0x0F	; 15
    544e:	40 5d       	subi	r20, 0xD0	; 208
    5450:	4a 33       	cpi	r20, 0x3A	; 58
    5452:	18 f0       	brcs	.+6      	; 0x545a <__ultoa_invert+0x7c>
    5454:	49 5d       	subi	r20, 0xD9	; 217
    5456:	31 fd       	sbrc	r19, 1
    5458:	40 52       	subi	r20, 0x20	; 32
    545a:	41 93       	st	Z+, r20
    545c:	02 d0       	rcall	.+4      	; 0x5462 <__ultoa_invert+0x84>
    545e:	a9 f7       	brne	.-22     	; 0x544a <__ultoa_invert+0x6c>
    5460:	ea cf       	rjmp	.-44     	; 0x5436 <__ultoa_invert+0x58>
    5462:	b4 e0       	ldi	r27, 0x04	; 4
    5464:	a6 95       	lsr	r26
    5466:	97 95       	ror	r25
    5468:	87 95       	ror	r24
    546a:	77 95       	ror	r23
    546c:	67 95       	ror	r22
    546e:	ba 95       	dec	r27
    5470:	c9 f7       	brne	.-14     	; 0x5464 <__ultoa_invert+0x86>
    5472:	00 97       	sbiw	r24, 0x00	; 0
    5474:	61 05       	cpc	r22, r1
    5476:	71 05       	cpc	r23, r1
    5478:	08 95       	ret
    547a:	9b 01       	movw	r18, r22
    547c:	ac 01       	movw	r20, r24
    547e:	0a 2e       	mov	r0, r26
    5480:	06 94       	lsr	r0
    5482:	57 95       	ror	r21
    5484:	47 95       	ror	r20
    5486:	37 95       	ror	r19
    5488:	27 95       	ror	r18
    548a:	ba 95       	dec	r27
    548c:	c9 f7       	brne	.-14     	; 0x5480 <__ultoa_invert+0xa2>
    548e:	62 0f       	add	r22, r18
    5490:	73 1f       	adc	r23, r19
    5492:	84 1f       	adc	r24, r20
    5494:	95 1f       	adc	r25, r21
    5496:	a0 1d       	adc	r26, r0
    5498:	08 95       	ret

0000549a <__udivmodhi4>:
    549a:	aa 1b       	sub	r26, r26
    549c:	bb 1b       	sub	r27, r27
    549e:	51 e1       	ldi	r21, 0x11	; 17
    54a0:	07 c0       	rjmp	.+14     	; 0x54b0 <__udivmodhi4_ep>

000054a2 <__udivmodhi4_loop>:
    54a2:	aa 1f       	adc	r26, r26
    54a4:	bb 1f       	adc	r27, r27
    54a6:	a6 17       	cp	r26, r22
    54a8:	b7 07       	cpc	r27, r23
    54aa:	10 f0       	brcs	.+4      	; 0x54b0 <__udivmodhi4_ep>
    54ac:	a6 1b       	sub	r26, r22
    54ae:	b7 0b       	sbc	r27, r23

000054b0 <__udivmodhi4_ep>:
    54b0:	88 1f       	adc	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	5a 95       	dec	r21
    54b6:	a9 f7       	brne	.-22     	; 0x54a2 <__udivmodhi4_loop>
    54b8:	80 95       	com	r24
    54ba:	90 95       	com	r25
    54bc:	bc 01       	movw	r22, r24
    54be:	cd 01       	movw	r24, r26
    54c0:	08 95       	ret

000054c2 <_exit>:
    54c2:	f8 94       	cli

000054c4 <__stop_program>:
    54c4:	ff cf       	rjmp	.-2      	; 0x54c4 <__stop_program>
